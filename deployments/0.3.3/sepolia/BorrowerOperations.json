{
  "address": "0x6227708902A66c560710D67cD131aBEF659B5b38",
  "abi": [
    {
      "inputs": [],
      "name": "TroveAdjustedThisBlock",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_activePoolAddress",
          "type": "address"
        }
      ],
      "name": "ActivePoolAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_BaseFeeLMAFee",
          "type": "uint256"
        }
      ],
      "name": "BaseFeeLMABorrowingFeePaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_BaseFeeLMATokenAddress",
          "type": "address"
        }
      ],
      "name": "BaseFeeLMATokenAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_collSurplusPoolAddress",
          "type": "address"
        }
      ],
      "name": "CollSurplusPoolAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_defaultPoolAddress",
          "type": "address"
        }
      ],
      "name": "DefaultPoolAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IFeesRouter",
          "name": "_feesRouter",
          "type": "address"
        }
      ],
      "name": "FeesRouterAddressUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_gasPoolAddress",
          "type": "address"
        }
      ],
      "name": "GasPoolAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newPriceFeedAddress",
          "type": "address"
        }
      ],
      "name": "PriceFeedAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_sortedTrovesAddress",
          "type": "address"
        }
      ],
      "name": "SortedTrovesAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_stabilityPoolAddress",
          "type": "address"
        }
      ],
      "name": "StabilityPoolAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "arrayIndex",
          "type": "uint256"
        }
      ],
      "name": "TroveCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newTroveManagerAddress",
          "type": "address"
        }
      ],
      "name": "TroveManagerAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_debt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_coll",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stake",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum BorrowerOperations.BorrowerOperation",
          "name": "operation",
          "type": "uint8"
        }
      ],
      "name": "TroveUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "_WStEthAddress",
          "type": "address"
        }
      ],
      "name": "WStETHTokenAddressUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BORROWING_FEE_FLOOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BaseFeeLMA_GAS_COMPENSATION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CCR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DECIMAL_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MCR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_NET_DEBT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERCENT_DIVISOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_100pct",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "activePool",
      "outputs": [
        {
          "internalType": "contract IActivePool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_upperHint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lowerHint",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "addColl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxFeePercentage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_collWithdrawal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_collIncrease",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_BaseFeeLMAChange",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isDebtIncrease",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "_upperHint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lowerHint",
          "type": "address"
        }
      ],
      "name": "adjustTrove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "closeTrove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_coll",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_debt",
          "type": "uint256"
        }
      ],
      "name": "computeUnreliableCR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultPool",
      "outputs": [
        {
          "internalType": "contract IDefaultPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feesRouter",
      "outputs": [
        {
          "internalType": "contract IFeesRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_debt",
          "type": "uint256"
        }
      ],
      "name": "getCompositeDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntireSystemColl",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "entireSystemColl",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntireSystemDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "entireSystemDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_upperHint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lowerHint",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "moveWStETHGainToTrove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxFeePercentage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_BaseFeeLMAAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_collAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_upperHint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lowerHint",
          "type": "address"
        }
      ],
      "name": "openTrove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "contract IPriceFeed",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_BaseFeeLMAAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_upperHint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lowerHint",
          "type": "address"
        }
      ],
      "name": "repayBaseFeeLMA",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_troveManagerAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_activePoolAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_defaultPoolAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stabilityPoolAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gasPoolAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collSurplusPoolAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_priceFeedAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sortedTrovesAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_baseFeeLMATokenAddress",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_wStETHTokenAddress",
          "type": "address"
        },
        {
          "internalType": "contract IFeesRouter",
          "name": "_feesRouter",
          "type": "address"
        }
      ],
      "name": "setAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sortedTroves",
      "outputs": [
        {
          "internalType": "contract ISortedTroves",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "troveManager",
      "outputs": [
        {
          "internalType": "contract ITroveManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxFeePercentage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_BaseFeeLMAAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_upperHint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lowerHint",
          "type": "address"
        }
      ],
      "name": "withdrawBaseFeeLMA",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_collWithdrawal",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_upperHint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lowerHint",
          "type": "address"
        }
      ],
      "name": "withdrawColl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xffa27c4b1c05793d82bd3bf4365a3aaf1aba82ecf687f406f0d336795d4f9d6a",
  "receipt": {
    "to": null,
    "from": "0x20CCd22C0Cb18F6fbEDCC08aC93E9787c1e98a89",
    "contractAddress": "0x6227708902A66c560710D67cD131aBEF659B5b38",
    "transactionIndex": 49,
    "gasUsed": "3217879",
    "logsBloom": "0x
    "blockHash": "0x8296877e5b290c1091e57e5540f7ffbe51326cddef8c7774dfcc566ef59f07b5",
    "transactionHash": "0xffa27c4b1c05793d82bd3bf4365a3aaf1aba82ecf687f406f0d336795d4f9d6a",
    "logs": [
      {
        "transactionIndex": 49,
        "blockNumber": 6106235,
        "transactionHash": "0xffa27c4b1c05793d82bd3bf4365a3aaf1aba82ecf687f406f0d336795d4f9d6a",
        "address": "0x6227708902A66c560710D67cD131aBEF659B5b38",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000020ccd22c0cb18f6fbedcc08ac93e9787c1e98a89"
        ],
        "data": "0x",
        "logIndex": 83,
        "blockHash": "0x8296877e5b290c1091e57e5540f7ffbe51326cddef8c7774dfcc566ef59f07b5"
      }
    ],
    "blockNumber": 6106235,
    "cumulativeGasUsed": "7818452",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "61e630a64d2162380eb832e183d72c0c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"TroveAdjustedThisBlock\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_activePoolAddress\",\"type\":\"address\"}],\"name\":\"ActivePoolAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_BaseFeeLMAFee\",\"type\":\"uint256\"}],\"name\":\"BaseFeeLMABorrowingFeePaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_BaseFeeLMATokenAddress\",\"type\":\"address\"}],\"name\":\"BaseFeeLMATokenAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_collSurplusPoolAddress\",\"type\":\"address\"}],\"name\":\"CollSurplusPoolAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_defaultPoolAddress\",\"type\":\"address\"}],\"name\":\"DefaultPoolAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IFeesRouter\",\"name\":\"_feesRouter\",\"type\":\"address\"}],\"name\":\"FeesRouterAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_gasPoolAddress\",\"type\":\"address\"}],\"name\":\"GasPoolAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newPriceFeedAddress\",\"type\":\"address\"}],\"name\":\"PriceFeedAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sortedTrovesAddress\",\"type\":\"address\"}],\"name\":\"SortedTrovesAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_stabilityPoolAddress\",\"type\":\"address\"}],\"name\":\"StabilityPoolAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"arrayIndex\",\"type\":\"uint256\"}],\"name\":\"TroveCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newTroveManagerAddress\",\"type\":\"address\"}],\"name\":\"TroveManagerAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_debt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_coll\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum BorrowerOperations.BorrowerOperation\",\"name\":\"operation\",\"type\":\"uint8\"}],\"name\":\"TroveUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"_WStEthAddress\",\"type\":\"address\"}],\"name\":\"WStETHTokenAddressUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BORROWING_FEE_FLOOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BaseFeeLMA_GAS_COMPENSATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CCR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DECIMAL_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MCR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_NET_DEBT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENT_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_100pct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activePool\",\"outputs\":[{\"internalType\":\"contract IActivePool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_upperHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lowerHint\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addColl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_collWithdrawal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_collIncrease\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_BaseFeeLMAChange\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isDebtIncrease\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_upperHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lowerHint\",\"type\":\"address\"}],\"name\":\"adjustTrove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeTrove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_coll\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_debt\",\"type\":\"uint256\"}],\"name\":\"computeUnreliableCR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultPool\",\"outputs\":[{\"internalType\":\"contract IDefaultPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feesRouter\",\"outputs\":[{\"internalType\":\"contract IFeesRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_debt\",\"type\":\"uint256\"}],\"name\":\"getCompositeDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntireSystemColl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"entireSystemColl\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntireSystemDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"entireSystemDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_upperHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lowerHint\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"moveWStETHGainToTrove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_BaseFeeLMAAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_collAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_upperHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lowerHint\",\"type\":\"address\"}],\"name\":\"openTrove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract IPriceFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_BaseFeeLMAAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_upperHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lowerHint\",\"type\":\"address\"}],\"name\":\"repayBaseFeeLMA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_troveManagerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_activePoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_defaultPoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stabilityPoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gasPoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collSurplusPoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceFeedAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sortedTrovesAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_baseFeeLMATokenAddress\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_wStETHTokenAddress\",\"type\":\"address\"},{\"internalType\":\"contract IFeesRouter\",\"name\":\"_feesRouter\",\"type\":\"address\"}],\"name\":\"setAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sortedTroves\",\"outputs\":[{\"internalType\":\"contract ISortedTroves\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"troveManager\",\"outputs\":[{\"internalType\":\"contract ITroveManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_BaseFeeLMAAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_upperHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lowerHint\",\"type\":\"address\"}],\"name\":\"withdrawBaseFeeLMA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_collWithdrawal\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_upperHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lowerHint\",\"type\":\"address\"}],\"name\":\"withdrawColl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addColl(address,address,uint256)\":{\"notice\":\"HEDGEHOG UPDATES: ERC20 is used as a collateral, therefore function may not rely on msg.value anymore now passing a new param _collIncrease in _adjustTrove function - in this particular case it is a passed param _amount checking if _amount is greater then 0 Function is no longer payable\"},\"adjustTrove(uint256,uint256,uint256,uint256,bool,address,address)\":{\"notice\":\"HEDGEHOG UPDATES: ERC20 is used as a collateral, therefore function may not rely on msg.value anymore now passing a new param _collIncrease Function is no longer payable\"},\"claimCollateral()\":{\"notice\":\"Claim remaining collateral from a redemption or from a liquidation with ICR > MCR in Recovery Mode\"},\"computeUnreliableCR(uint256,uint256)\":{\"notice\":\"HEDGEHOG UPDATES: New view method to help with getting the data on frontends\"},\"moveWStETHGainToTrove(address,address,address,uint256)\":{\"notice\":\"HEDGEHOG UPDATES: ERC20 is used as a collateral, therefore function may not rely on msg.value anymore now passing a new param _collIncrease in _adjustTrove function - in this particular case it is a passed param _amount checking if _amount is greater then 0 Function is no longer payable\"},\"openTrove(uint256,uint256,uint256,address,address)\":{\"notice\":\"HEDGEHOG UPDATES: ERC20 is used as a collateral, therefore function may not rely on msg.value anymore now passing a new param _collAmount checking if _amount is greater then 0 Function is no longer payable\"},\"repayBaseFeeLMA(uint256,address,address)\":{\"notice\":\"HEDGEHOG UPDATES: ERC20 is used as a collateral, therefore function may not rely on msg.value anymore now passing a new param _collIncrease - in this particular case it is 0\"},\"setAddresses(address,address,address,address,address,address,address,address,address,address,address)\":{\"notice\":\"HEDGEHOG UPDATES: ERC20 is used as a collateral instead of native token. Setting erc20 address in the initialisation\"},\"withdrawBaseFeeLMA(uint256,uint256,address,address)\":{\"notice\":\"HEDGEHOG UPDATES: ERC20 is used as a collateral, therefore function may not rely on msg.value anymore now passing a new param _collIncrease - in this particular case it is 0\"},\"withdrawColl(uint256,address,address)\":{\"notice\":\"HEDGEHOG UPDATES: ERC20 is used as a collateral, therefore function may not rely on msg.value anymore now passing a new param _collIncrease - in this particular case it is 0\"}},\"notice\":\"Fork of Liquity's BorrowerOperations. . Most of the Logic remains unchanged.. Changes to the contract: - Raised pragma version - Removed an import of IBorrowerOperations Interface - Collateral is now an ERC20 token instead of a native one - Updated variable names and docs to refer to BaseFeeLMA token and wwstETH as a collateral - Logic updates with borrowing fees calculation and their distribution - Removed Native Liquity Protocol Token Staking - Remove _getUSDValue view method as it's not used anymore Even though SafeMath is no longer required, the decision was made to keep it to avoid human factor errors\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BorrowerOperations.sol\":\"BorrowerOperations\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"contracts/BorrowerOperations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./interfaces/ITroveManager.sol\\\";\\nimport \\\"./interfaces/IBaseFeeLMAToken.sol\\\";\\nimport \\\"./interfaces/ICollSurplusPool.sol\\\";\\nimport \\\"./interfaces/ISortedTroves.sol\\\";\\nimport \\\"./interfaces/IFeesRouter.sol\\\";\\nimport \\\"./dependencies/HedgehogBase.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./dependencies/CheckContract.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nerror TroveAdjustedThisBlock();\\n\\n/**\\n * @notice Fork of Liquity's BorrowerOperations. . Most of the Logic remains unchanged..\\n * Changes to the contract:\\n * - Raised pragma version\\n * - Removed an import of IBorrowerOperations Interface\\n * - Collateral is now an ERC20 token instead of a native one\\n * - Updated variable names and docs to refer to BaseFeeLMA token and wwstETH as a collateral\\n * - Logic updates with borrowing fees calculation and their distribution\\n * - Removed Native Liquity Protocol Token Staking\\n * - Remove _getUSDValue view method as it's not used anymore\\n * Even though SafeMath is no longer required, the decision was made to keep it to avoid human factor errors\\n */\\n\\ncontract BorrowerOperations is HedgehogBase, Ownable, CheckContract {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    string public constant NAME = \\\"BorrowerOperations\\\";\\n\\n    // --- Connected contract declarations ---\\n\\n    ITroveManager public troveManager;\\n\\n    address stabilityPoolAddress;\\n\\n    address gasPoolAddress;\\n\\n    IERC20 WStETHToken;\\n\\n    ICollSurplusPool collSurplusPool;\\n\\n    IFeesRouter public feesRouter;\\n\\n    IBaseFeeLMAToken baseFeeLMAToken;\\n\\n    // A doubly linked list of Troves, sorted by their collateral ratios\\n    ISortedTroves public sortedTroves;\\n\\n    /* --- Variable container structs  ---\\n\\n    Used to hold, return and assign variables inside a function, in order to avoid the error:\\n    \\\"CompilerError: Stack too deep\\\". */\\n\\n    struct LocalVariables_adjustTrove {\\n        uint price;\\n        uint collChange;\\n        uint netDebtChange;\\n        bool isCollIncrease;\\n        uint debt;\\n        uint coll;\\n        uint oldICR;\\n        uint newICR;\\n        uint newTCR;\\n        uint BaseFeeLMAFee;\\n        uint newDebt;\\n        uint newColl;\\n        uint stake;\\n    }\\n\\n    struct LocalVariables_openTrove {\\n        uint price;\\n        uint BaseFeeLMAFee;\\n        uint netDebt;\\n        uint compositeDebt;\\n        uint ICR;\\n        uint NICR;\\n        uint stake;\\n        uint arrayIndex;\\n    }\\n\\n    struct ContractsCache {\\n        ITroveManager troveManager;\\n        IActivePool activePool;\\n        IBaseFeeLMAToken baseFeeLMAToken;\\n    }\\n\\n    enum BorrowerOperation {\\n        openTrove,\\n        closeTrove,\\n        adjustTrove\\n    }\\n\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event ActivePoolAddressChanged(address _activePoolAddress);\\n    event DefaultPoolAddressChanged(address _defaultPoolAddress);\\n    event StabilityPoolAddressChanged(address _stabilityPoolAddress);\\n    event GasPoolAddressChanged(address _gasPoolAddress);\\n    event CollSurplusPoolAddressChanged(address _collSurplusPoolAddress);\\n    event PriceFeedAddressChanged(address _newPriceFeedAddress);\\n    event SortedTrovesAddressChanged(address _sortedTrovesAddress);\\n    event BaseFeeLMATokenAddressChanged(address _BaseFeeLMATokenAddress);\\n    event WStETHTokenAddressUpdated(IERC20 _WStEthAddress);\\n    event FeesRouterAddressUpdated(IFeesRouter _feesRouter);\\n\\n    event TroveCreated(address indexed _borrower, uint arrayIndex);\\n    event TroveUpdated(\\n        address indexed _borrower,\\n        uint _debt,\\n        uint _coll,\\n        uint stake,\\n        BorrowerOperation operation\\n    );\\n    event BaseFeeLMABorrowingFeePaid(\\n        address indexed _borrower,\\n        uint _BaseFeeLMAFee\\n    );\\n\\n    // --- Dependency setters ---\\n\\n    /**\\n     * HEDGEHOG UPDATES:\\n     * ERC20 is used as a collateral instead of native token.\\n     * Setting erc20 address in the initialisation\\n     */\\n    function setAddresses(\\n        address _troveManagerAddress,\\n        address _activePoolAddress,\\n        address _defaultPoolAddress,\\n        address _stabilityPoolAddress,\\n        address _gasPoolAddress,\\n        address _collSurplusPoolAddress,\\n        address _priceFeedAddress,\\n        address _sortedTrovesAddress,\\n        address _baseFeeLMATokenAddress,\\n        IERC20 _wStETHTokenAddress,\\n        IFeesRouter _feesRouter\\n    ) external onlyOwner {\\n        // This makes impossible to open a trove with zero withdrawn BaseFeeLMA\\n        assert(MIN_NET_DEBT > 0);\\n\\n        checkContract(_troveManagerAddress);\\n        checkContract(_activePoolAddress);\\n        checkContract(_defaultPoolAddress);\\n        checkContract(_stabilityPoolAddress);\\n        checkContract(_gasPoolAddress);\\n        checkContract(_collSurplusPoolAddress);\\n        checkContract(_priceFeedAddress);\\n        checkContract(_sortedTrovesAddress);\\n        checkContract(_baseFeeLMATokenAddress);\\n        checkContract(address(_wStETHTokenAddress));\\n        checkContract(address(_feesRouter));\\n\\n        troveManager = ITroveManager(_troveManagerAddress);\\n        activePool = IActivePool(_activePoolAddress);\\n        defaultPool = IDefaultPool(_defaultPoolAddress);\\n        stabilityPoolAddress = _stabilityPoolAddress;\\n        gasPoolAddress = _gasPoolAddress;\\n        collSurplusPool = ICollSurplusPool(_collSurplusPoolAddress);\\n        priceFeed = IPriceFeed(_priceFeedAddress);\\n        sortedTroves = ISortedTroves(_sortedTrovesAddress);\\n        baseFeeLMAToken = IBaseFeeLMAToken(_baseFeeLMATokenAddress);\\n        WStETHToken = _wStETHTokenAddress;\\n        feesRouter = _feesRouter;\\n\\n        emit TroveManagerAddressChanged(_troveManagerAddress);\\n        emit ActivePoolAddressChanged(_activePoolAddress);\\n        emit DefaultPoolAddressChanged(_defaultPoolAddress);\\n        emit StabilityPoolAddressChanged(_stabilityPoolAddress);\\n        emit GasPoolAddressChanged(_gasPoolAddress);\\n        emit CollSurplusPoolAddressChanged(_collSurplusPoolAddress);\\n        emit PriceFeedAddressChanged(_priceFeedAddress);\\n        emit SortedTrovesAddressChanged(_sortedTrovesAddress);\\n        emit BaseFeeLMATokenAddressChanged(_baseFeeLMATokenAddress);\\n        emit WStETHTokenAddressUpdated(_wStETHTokenAddress);\\n        emit FeesRouterAddressUpdated(_feesRouter);\\n\\n        renounceOwnership();\\n    }\\n\\n    // --- Borrower Trove Operations ---\\n\\n    /**\\n     * HEDGEHOG UPDATES:\\n     * ERC20 is used as a collateral, therefore function may not rely on msg.value anymore\\n     * now passing a new param _collAmount\\n     * checking if _amount is greater then 0\\n     * Function is no longer payable\\n     */\\n    function openTrove(\\n        uint _maxFeePercentage,\\n        uint _BaseFeeLMAAmount,\\n        uint _collAmount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external {\\n        // Hedgehog Updates: Check that trove[msg.sender] did not perform adjustTrove transactions in the current block\\n        {\\n            _checkAndSetUpdateBlock(msg.sender);\\n        }\\n        ContractsCache memory contractsCache = ContractsCache(\\n            troveManager,\\n            activePool,\\n            baseFeeLMAToken\\n        );\\n        LocalVariables_openTrove memory vars;\\n\\n        vars.price = priceFeed.fetchPrice();\\n        bool isRecoveryMode = _checkRecoveryMode(vars.price);\\n\\n        _requireValidMaxFeePercentage(_maxFeePercentage, isRecoveryMode);\\n        _requireTroveisNotActive(contractsCache.troveManager, msg.sender);\\n\\n        vars.BaseFeeLMAFee;\\n        vars.netDebt = _BaseFeeLMAAmount;\\n\\n        // HEDGEHOG UPDATES: Triggering borrowing fee in both recovery and normal modes\\n        vars.BaseFeeLMAFee = _triggerBorrowingFee(\\n            contractsCache.troveManager,\\n            _BaseFeeLMAAmount,\\n            _maxFeePercentage\\n        );\\n        _requireAtLeastMinNetDebt(vars.netDebt);\\n\\n        vars.compositeDebt = _getCompositeDebt(vars.netDebt);\\n        assert(vars.compositeDebt > 0);\\n\\n        vars.ICR = LiquityMath._computeCR(\\n            _collAmount,\\n            vars.compositeDebt,\\n            vars.price\\n        );\\n        vars.NICR = LiquityMath._computeNominalCR(\\n            _collAmount,\\n            vars.compositeDebt\\n        );\\n\\n        if (isRecoveryMode) {\\n            _requireICRisAboveCCR(vars.ICR);\\n        } else {\\n            _requireICRisAboveMCR(vars.ICR);\\n            uint newTCR = _getNewTCRFromTroveChange(\\n                _collAmount,\\n                true,\\n                vars.compositeDebt,\\n                true,\\n                vars.price\\n            ); // bools: coll increase, debt increase\\n            _requireNewTCRisAboveCCR(newTCR);\\n        }\\n\\n        // Set the trove struct's properties\\n        contractsCache.troveManager.setTroveStatus(msg.sender, 1);\\n        contractsCache.troveManager.increaseTroveColl(msg.sender, _collAmount);\\n        contractsCache.troveManager.increaseTroveDebt(\\n            msg.sender,\\n            vars.compositeDebt\\n        );\\n\\n        contractsCache.troveManager.updateTroveRewardSnapshots(msg.sender);\\n        vars.stake = contractsCache.troveManager.updateStakeAndTotalStakes(\\n            msg.sender\\n        );\\n\\n        sortedTroves.insert(msg.sender, vars.NICR, _upperHint, _lowerHint);\\n        vars.arrayIndex = contractsCache.troveManager.addTroveOwnerToArray(\\n            msg.sender\\n        );\\n        emit TroveCreated(msg.sender, vars.arrayIndex);\\n\\n        // Move the wStETH to the Active Pool, and mint the BaseFeeLMAAmount to the borrower\\n        _activePoolAddColl(contractsCache.activePool, _collAmount);\\n        // HEDGEHOG UPDATES: Revert if bfe loan is less then fee + gas comp\\n        if (\\n            _BaseFeeLMAAmount <=\\n            vars.BaseFeeLMAFee + BaseFeeLMA_GAS_COMPENSATION\\n        ) {\\n            revert(\\\"BO: Fee exceeds gain\\\");\\n        }\\n\\n        // Hedgehog Updates: Now amount transferred to the user is decreased by Fee\\n        _withdrawBaseFeeLMA(\\n            contractsCache.activePool,\\n            contractsCache.baseFeeLMAToken,\\n            msg.sender,\\n            _BaseFeeLMAAmount - vars.BaseFeeLMAFee,\\n            vars.netDebt\\n        );\\n\\n        // HEDGEHOG UPDATES: Not increasing net debt anymore. only transferring the gas comp tokens\\n        // Move the BaseFeeLMA gas compensation to the Gas Pool\\n        _withdrawBaseFeeLMA(\\n            contractsCache.activePool,\\n            contractsCache.baseFeeLMAToken,\\n            gasPoolAddress,\\n            BaseFeeLMA_GAS_COMPENSATION,\\n            BaseFeeLMA_GAS_COMPENSATION\\n        );\\n        emit TroveUpdated(\\n            msg.sender,\\n            vars.compositeDebt,\\n            _collAmount,\\n            vars.stake,\\n            BorrowerOperation.openTrove\\n        );\\n        emit BaseFeeLMABorrowingFeePaid(msg.sender, vars.BaseFeeLMAFee);\\n    }\\n\\n    /**\\n     * HEDGEHOG UPDATES:\\n     * ERC20 is used as a collateral, therefore function may not rely on msg.value anymore\\n     * now passing a new param _collIncrease in _adjustTrove function - in this particular case it is a passed param _amount\\n     * checking if _amount is greater then 0\\n     * Function is no longer payable\\n     */\\n    // Send WStETH as collateral to a trove\\n    function addColl(\\n        address _upperHint,\\n        address _lowerHint,\\n        uint _amount\\n    ) external {\\n        require(_amount > 0, \\\"Borrower Operations: Invalid amount\\\");\\n\\n        _adjustTrove(\\n            msg.sender,\\n            0,\\n            _amount,\\n            0,\\n            false,\\n            _upperHint,\\n            _lowerHint,\\n            0\\n        );\\n    }\\n\\n    /**\\n     * HEDGEHOG UPDATES:\\n     * ERC20 is used as a collateral, therefore function may not rely on msg.value anymore\\n     * now passing a new param _collIncrease in _adjustTrove function - in this particular case it is a passed param _amount\\n     * checking if _amount is greater then 0\\n     * Function is no longer payable\\n     */\\n    // Send WStETH as collateral to a trove. Called by only the Stability Pool.\\n    function moveWStETHGainToTrove(\\n        address _borrower,\\n        address _upperHint,\\n        address _lowerHint,\\n        uint _amount\\n    ) external {\\n        require(_amount > 0, \\\"Borrower Operations: Invalid amount\\\");\\n        _requireCallerIsStabilityPool();\\n        _adjustTrove(\\n            _borrower,\\n            0,\\n            _amount,\\n            0,\\n            false,\\n            _upperHint,\\n            _lowerHint,\\n            0\\n        );\\n    }\\n\\n    /**\\n     * HEDGEHOG UPDATES:\\n     * ERC20 is used as a collateral, therefore function may not rely on msg.value anymore\\n     * now passing a new param _collIncrease - in this particular case it is 0\\n     */\\n    // Withdraw WStETH collateral from a trove\\n    function withdrawColl(\\n        uint _collWithdrawal,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external {\\n        _adjustTrove(\\n            msg.sender,\\n            _collWithdrawal,\\n            0,\\n            0,\\n            false,\\n            _upperHint,\\n            _lowerHint,\\n            0\\n        );\\n    }\\n\\n    /**\\n     * HEDGEHOG UPDATES:\\n     * ERC20 is used as a collateral, therefore function may not rely on msg.value anymore\\n     * now passing a new param _collIncrease - in this particular case it is 0\\n     */\\n    // Withdraw BaseFeeLMA tokens from a trove: mint new BaseFeeLMA tokens to the owner, and increase the trove's debt accordingly\\n    function withdrawBaseFeeLMA(\\n        uint _maxFeePercentage,\\n        uint _BaseFeeLMAAmount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external {\\n        _adjustTrove(\\n            msg.sender,\\n            0,\\n            0,\\n            _BaseFeeLMAAmount,\\n            true,\\n            _upperHint,\\n            _lowerHint,\\n            _maxFeePercentage\\n        );\\n    }\\n\\n    /**\\n     * HEDGEHOG UPDATES:\\n     * ERC20 is used as a collateral, therefore function may not rely on msg.value anymore\\n     * now passing a new param _collIncrease - in this particular case it is 0\\n     */\\n    // Repay BaseFeeLMA tokens to a Trove: Burn the repaid BaseFeeLMA tokens, and reduce the trove's debt accordingly\\n    function repayBaseFeeLMA(\\n        uint _BaseFeeLMAAmount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external {\\n        _adjustTrove(\\n            msg.sender,\\n            0,\\n            0,\\n            _BaseFeeLMAAmount,\\n            false,\\n            _upperHint,\\n            _lowerHint,\\n            0\\n        );\\n    }\\n\\n    /**\\n     * HEDGEHOG UPDATES:\\n     * ERC20 is used as a collateral, therefore function may not rely on msg.value anymore\\n     * now passing a new param _collIncrease\\n     *\\n     * Function is no longer payable\\n     */\\n    function adjustTrove(\\n        uint _maxFeePercentage,\\n        uint _collWithdrawal,\\n        uint _collIncrease,\\n        uint _BaseFeeLMAChange,\\n        bool _isDebtIncrease,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external {\\n        _adjustTrove(\\n            msg.sender,\\n            _collWithdrawal,\\n            _collIncrease,\\n            _BaseFeeLMAChange,\\n            _isDebtIncrease,\\n            _upperHint,\\n            _lowerHint,\\n            _maxFeePercentage\\n        );\\n    }\\n\\n    /*\\n     * _adjustTrove(): Alongside a debt change, this function can perform either a collateral top-up or a collateral withdrawal.\\n     *\\n     * It therefore expects either a positive _collIncrease, or a positive _collWithdrawal argument.\\n     *\\n     * If both are positive, it will revert.\\n     */\\n    function _adjustTrove(\\n        address _borrower,\\n        uint _collWithdrawal,\\n        uint _collIncrease,\\n        uint _BaseFeeLMAChange,\\n        bool _isDebtIncrease,\\n        address _upperHint,\\n        address _lowerHint,\\n        uint _maxFeePercentage\\n    ) internal {\\n        {\\n            // Hedgehog Updates: Check that trove[msg.sender] did not perform adjustTrove transactions in the current block\\n            _checkAndSetUpdateBlock(msg.sender);\\n        }\\n        ContractsCache memory contractsCache = ContractsCache(\\n            troveManager,\\n            activePool,\\n            baseFeeLMAToken\\n        );\\n        LocalVariables_adjustTrove memory vars;\\n\\n        vars.price = priceFeed.fetchPrice();\\n        bool isRecoveryMode = _checkRecoveryMode(vars.price);\\n\\n        if (_isDebtIncrease) {\\n            _requireValidMaxFeePercentage(_maxFeePercentage, isRecoveryMode);\\n            _requireNonZeroDebtChange(_BaseFeeLMAChange);\\n        }\\n        _requireSingularCollChange(_collWithdrawal, _collIncrease);\\n        _requireNonZeroAdjustment(\\n            _collWithdrawal,\\n            _collIncrease,\\n            _BaseFeeLMAChange\\n        );\\n        _requireTroveisActive(contractsCache.troveManager, _borrower);\\n\\n        // Confirm the operation is either a borrower adjusting their own trove, or a pure WStETH transfer from the Stability Pool to a trove\\n        assert(\\n            msg.sender == _borrower ||\\n                (msg.sender == stabilityPoolAddress &&\\n                    _collIncrease > 0 &&\\n                    _BaseFeeLMAChange == 0)\\n        );\\n\\n        contractsCache.troveManager.applyPendingRewards(_borrower);\\n\\n        // Get the collChange based on whether or not WStETH was sent in the transaction\\n        (vars.collChange, vars.isCollIncrease) = _getCollChange(\\n            _collIncrease,\\n            _collWithdrawal\\n        );\\n\\n        vars.netDebtChange = _BaseFeeLMAChange;\\n\\n        // If the adjustment incorporates a debt increase then trigger a borrowing fee\\n        // HEDGEHOG UPDATES: Trigger borrowing fee in both recovery and normal modes\\n        if (_isDebtIncrease) {\\n            vars.BaseFeeLMAFee = _triggerBorrowingFee(\\n                contractsCache.troveManager,\\n                _BaseFeeLMAChange,\\n                _maxFeePercentage\\n            );\\n\\n            // Hedgehog Updates: Not adding fee to the position debt anymore\\n            vars.netDebtChange = vars.netDebtChange;\\n        }\\n\\n        vars.debt = contractsCache.troveManager.getTroveDebt(_borrower);\\n        vars.coll = contractsCache.troveManager.getTroveColl(_borrower);\\n\\n        // Get the trove's old ICR before the adjustment, and what its new ICR will be after the adjustment\\n        vars.oldICR = LiquityMath._computeCR(vars.coll, vars.debt, vars.price);\\n        vars.newICR = _getNewICRFromTroveChange(\\n            vars.coll,\\n            vars.debt,\\n            vars.collChange,\\n            vars.isCollIncrease,\\n            vars.netDebtChange,\\n            _isDebtIncrease,\\n            vars.price\\n        );\\n        assert(_collWithdrawal <= vars.coll);\\n\\n        // Check the adjustment satisfies all conditions for the current system mode\\n        _requireValidAdjustmentInCurrentMode(\\n            isRecoveryMode,\\n            _collWithdrawal,\\n            _isDebtIncrease,\\n            vars\\n        );\\n\\n        // When the adjustment is a debt repayment, check it's a valid amount and that the caller has enough BaseFeeLMA\\n        if (!_isDebtIncrease && _BaseFeeLMAChange > 0) {\\n            _requireAtLeastMinNetDebt(\\n                _getNetDebt(vars.debt).sub(vars.netDebtChange)\\n            );\\n            _requireValidBaseFeeLMARepayment(vars.debt, vars.netDebtChange);\\n            _requireSufficientBaseFeeLMABalance(\\n                contractsCache.baseFeeLMAToken,\\n                _borrower,\\n                vars.netDebtChange\\n            );\\n        }\\n\\n        (vars.newColl, vars.newDebt) = _updateTroveFromAdjustment(\\n            contractsCache.troveManager,\\n            _borrower,\\n            vars.collChange,\\n            vars.isCollIncrease,\\n            vars.netDebtChange,\\n            _isDebtIncrease\\n        );\\n        vars.stake = contractsCache.troveManager.updateStakeAndTotalStakes(\\n            _borrower\\n        );\\n\\n        // Re-insert trove in to the sorted list\\n        uint newNICR = _getNewNominalICRFromTroveChange(\\n            vars.coll,\\n            vars.debt,\\n            vars.collChange,\\n            vars.isCollIncrease,\\n            vars.netDebtChange,\\n            _isDebtIncrease\\n        );\\n        sortedTroves.reInsert(_borrower, newNICR, _upperHint, _lowerHint);\\n\\n        emit TroveUpdated(\\n            _borrower,\\n            vars.newDebt,\\n            vars.newColl,\\n            vars.stake,\\n            BorrowerOperation.adjustTrove\\n        );\\n        emit BaseFeeLMABorrowingFeePaid(msg.sender, vars.BaseFeeLMAFee);\\n\\n        _moveTokensAndWStETHfromAdjustment(\\n            contractsCache.activePool,\\n            contractsCache.baseFeeLMAToken,\\n            msg.sender,\\n            vars.collChange,\\n            vars.isCollIncrease,\\n            _BaseFeeLMAChange - vars.BaseFeeLMAFee,\\n            _isDebtIncrease,\\n            vars.netDebtChange\\n        );\\n    }\\n\\n    // Hedgehog Updates: Do not deduct gas fee compensation from trove Debt as user just received less tokens during position opening\\n    function closeTrove() external {\\n        // Hedgehog Updates: Check that trove[msg.sender] did not perform adjustTrove transactions in the current block\\n        {\\n            _checkAndSetUpdateBlock(msg.sender);\\n        }\\n        ITroveManager troveManagerCached = troveManager;\\n        IActivePool activePoolCached = activePool;\\n        IBaseFeeLMAToken baseFeeLMATokenCached = baseFeeLMAToken;\\n\\n        _requireTroveisActive(troveManagerCached, msg.sender);\\n        uint price = priceFeed.fetchPrice();\\n        _requireNotInRecoveryMode(price);\\n\\n        troveManagerCached.applyPendingRewards(msg.sender);\\n\\n        uint coll = troveManagerCached.getTroveColl(msg.sender);\\n        uint debt = troveManagerCached.getTroveDebt(msg.sender);\\n\\n        _requireSufficientBaseFeeLMABalance(\\n            baseFeeLMATokenCached,\\n            msg.sender,\\n            debt.sub(BaseFeeLMA_GAS_COMPENSATION)\\n        );\\n\\n        uint newTCR = _getNewTCRFromTroveChange(\\n            coll,\\n            false,\\n            debt,\\n            false,\\n            price\\n        );\\n        _requireNewTCRisAboveCCR(newTCR);\\n\\n        troveManagerCached.removeStake(msg.sender);\\n        troveManagerCached.closeTrove(msg.sender);\\n\\n        emit TroveUpdated(msg.sender, 0, 0, 0, BorrowerOperation.closeTrove);\\n\\n        // Burn the repaid BaseFeeLMA from the user's balance and the gas compensation from the Gas Pool\\n        _repayBaseFeeLMA(\\n            activePoolCached,\\n            baseFeeLMATokenCached,\\n            msg.sender,\\n            debt.sub(BaseFeeLMA_GAS_COMPENSATION)\\n        );\\n        _repayBaseFeeLMA(\\n            activePoolCached,\\n            baseFeeLMATokenCached,\\n            gasPoolAddress,\\n            BaseFeeLMA_GAS_COMPENSATION\\n        );\\n\\n        // Send the collateral back to the user\\n        activePoolCached.sendWStETH(msg.sender, coll);\\n    }\\n\\n    /**\\n     * Claim remaining collateral from a redemption or from a liquidation with ICR > MCR in Recovery Mode\\n     */\\n    function claimCollateral() external {\\n        // send WStETH from CollSurplus Pool to owner\\n        collSurplusPool.claimColl(msg.sender);\\n    }\\n\\n    // --- Helper functions ---\\n\\n    // HedgehogUpdates: new private function, that checks if there was a transaction with a trove in the current block\\n    function _checkAndSetUpdateBlock(address _borrower) private {\\n        if (troveManager.getTroveUpdateBlock(_borrower) == block.number) {\\n            revert TroveAdjustedThisBlock();\\n        }\\n        troveManager.setTroveLastUpdatedBlock(_borrower);\\n    }\\n\\n    // HEDGHEHOG UPDATES:\\n    // No longer passing token address param as it's not needed anymore\\n    function _triggerBorrowingFee(\\n        ITroveManager _troveManager,\\n        uint _BaseFeeLMAAmount,\\n        uint _maxFeePercentage\\n    ) internal returns (uint) {\\n        _troveManager.decayBaseRateFromBorrowing(); // decay the baseRate state variable\\n        (uint BaseFeeLMAFee, uint baseRate) = _troveManager.getBorrowingFee(\\n            _BaseFeeLMAAmount\\n        );\\n\\n        troveManager.updateBaseRateFromBorrowing(baseRate);\\n\\n        _requireUserAcceptsFee(\\n            BaseFeeLMAFee,\\n            _BaseFeeLMAAmount,\\n            _maxFeePercentage\\n        );\\n\\n        // HEDGHEHOG UPDATES:\\n        // Fees are now distributed among different addresses based on how big they are\\n        feesRouter.distributeDebtFee(_BaseFeeLMAAmount, BaseFeeLMAFee);\\n\\n        return BaseFeeLMAFee;\\n    }\\n\\n    function _getCollChange(\\n        uint _collReceived,\\n        uint _requestedCollWithdrawal\\n    ) internal pure returns (uint collChange, bool isCollIncrease) {\\n        if (_collReceived != 0) {\\n            collChange = _collReceived;\\n            isCollIncrease = true;\\n        } else {\\n            collChange = _requestedCollWithdrawal;\\n        }\\n    }\\n\\n    // Update trove's coll and debt based on whether they increase or decrease\\n    function _updateTroveFromAdjustment(\\n        ITroveManager _troveManager,\\n        address _borrower,\\n        uint _collChange,\\n        bool _isCollIncrease,\\n        uint _debtChange,\\n        bool _isDebtIncrease\\n    ) internal returns (uint, uint) {\\n        uint newColl = (_isCollIncrease)\\n            ? _troveManager.increaseTroveColl(_borrower, _collChange)\\n            : _troveManager.decreaseTroveColl(_borrower, _collChange);\\n        uint newDebt = (_isDebtIncrease)\\n            ? _troveManager.increaseTroveDebt(_borrower, _debtChange)\\n            : _troveManager.decreaseTroveDebt(_borrower, _debtChange);\\n\\n        return (newColl, newDebt);\\n    }\\n\\n    function _moveTokensAndWStETHfromAdjustment(\\n        IActivePool _activePool,\\n        IBaseFeeLMAToken _baseFeeLMAToken,\\n        address _borrower,\\n        uint _collChange,\\n        bool _isCollIncrease,\\n        uint _BaseFeeLMAChange,\\n        bool _isDebtIncrease,\\n        uint _netDebtChange\\n    ) internal {\\n        if (_isDebtIncrease) {\\n            _withdrawBaseFeeLMA(\\n                _activePool,\\n                _baseFeeLMAToken,\\n                _borrower,\\n                _BaseFeeLMAChange,\\n                _netDebtChange\\n            );\\n        } else {\\n            _repayBaseFeeLMA(\\n                _activePool,\\n                _baseFeeLMAToken,\\n                _borrower,\\n                _BaseFeeLMAChange\\n            );\\n        }\\n\\n        if (_isCollIncrease) {\\n            _activePoolAddColl(_activePool, _collChange);\\n        } else {\\n            _activePool.sendWStETH(_borrower, _collChange);\\n        }\\n    }\\n\\n    /**\\n     * HEDGEHOG UPDATES: use SafeERC20 safe transfer instead of native token transfer\\n     * Send funds from User's account instead of relaying native token through address(this)\\n     * Manualy increase balance in Active Pool, since it used to be done in the native token fallback\\n     */\\n    // Send WStETH to Active Pool and increase its recorded WStETH balance\\n    function _activePoolAddColl(\\n        IActivePool _activePool,\\n        uint _amount\\n    ) internal {\\n        WStETHToken.safeTransferFrom(msg.sender, address(_activePool), _amount);\\n        activePool.increaseBalance(_amount);\\n    }\\n\\n    // Issue the specified amount of BaseFeeLMA to _account and increases the total active debt (_netDebtIncrease potentially includes a BaseFeeLMAFee)\\n    function _withdrawBaseFeeLMA(\\n        IActivePool _activePool,\\n        IBaseFeeLMAToken _baseFeeLMAToken,\\n        address _account,\\n        uint _BaseFeeLMAAmount,\\n        uint _netDebtIncrease\\n    ) internal {\\n        _activePool.increaseBaseFeeLMADebt(_netDebtIncrease);\\n        _baseFeeLMAToken.mint(_account, _BaseFeeLMAAmount);\\n    }\\n\\n    // Burn the specified amount of BaseFeeLMA from _account and decreases the total active debt\\n    function _repayBaseFeeLMA(\\n        IActivePool _activePool,\\n        IBaseFeeLMAToken _baseFeeLMAToken,\\n        address _account,\\n        uint BaseFeeLMA\\n    ) internal {\\n        _activePool.decreaseBaseFeeLMADebt(BaseFeeLMA);\\n        _baseFeeLMAToken.burn(_account, BaseFeeLMA);\\n    }\\n\\n    // --- 'Require' wrapper functions ---\\n\\n    /**\\n     * HEDGEHOG UPDATES: checking passed param instead of msg.value\\n     */\\n    function _requireSingularCollChange(\\n        uint _collWithdrawal,\\n        uint _collIncrease\\n    ) internal pure {\\n        require(\\n            _collIncrease == 0 || _collWithdrawal == 0,\\n            \\\"BorrowerOperations: Cannot withdraw and add coll\\\"\\n        );\\n    }\\n\\n    function _requireCallerIsBorrower(address _borrower) internal view {\\n        require(\\n            msg.sender == _borrower,\\n            \\\"BorrowerOps: Caller must be the borrower for a withdrawal\\\"\\n        );\\n    }\\n\\n    /**\\n     * HEDGEHOG UPDATES: checking passed param instead of msg.value\\n     */\\n    function _requireNonZeroAdjustment(\\n        uint _collWithdrawal,\\n        uint _collIncrease,\\n        uint _BaseFeeLMAChange\\n    ) internal pure {\\n        require(\\n            _collIncrease != 0 ||\\n                _collWithdrawal != 0 ||\\n                _BaseFeeLMAChange != 0,\\n            \\\"BorrowerOps: There must be either a collateral change or a debt change\\\"\\n        );\\n    }\\n\\n    function _requireTroveisActive(\\n        ITroveManager _troveManager,\\n        address _borrower\\n    ) internal view {\\n        uint status = _troveManager.getTroveStatus(_borrower);\\n        require(status == 1, \\\"BorrowerOps: Trove does not exist or is closed\\\");\\n    }\\n\\n    function _requireTroveisNotActive(\\n        ITroveManager _troveManager,\\n        address _borrower\\n    ) internal view {\\n        uint status = _troveManager.getTroveStatus(_borrower);\\n        require(status != 1, \\\"BorrowerOps: Trove is active\\\");\\n    }\\n\\n    function _requireNonZeroDebtChange(uint _BaseFeeLMAChange) internal pure {\\n        require(\\n            _BaseFeeLMAChange > 0,\\n            \\\"BorrowerOps: Debt increase requires non-zero debtChange\\\"\\n        );\\n    }\\n\\n    function _requireNotInRecoveryMode(uint _price) internal view {\\n        require(\\n            !_checkRecoveryMode(_price),\\n            \\\"BorrowerOps: Operation not permitted during Recovery Mode\\\"\\n        );\\n    }\\n\\n    function _requireNoCollWithdrawal(uint _collWithdrawal) internal pure {\\n        require(\\n            _collWithdrawal == 0,\\n            \\\"BorrowerOps: Collateral withdrawal not permitted Recovery Mode\\\"\\n        );\\n    }\\n\\n    function _requireValidAdjustmentInCurrentMode(\\n        bool _isRecoveryMode,\\n        uint _collWithdrawal,\\n        bool _isDebtIncrease,\\n        LocalVariables_adjustTrove memory _vars\\n    ) internal view {\\n        /*\\n         *In Recovery Mode, only allow:\\n         *\\n         * - Pure collateral top-up\\n         * - Pure debt repayment\\n         * - Collateral top-up with debt repayment\\n         * - A debt increase combined with a collateral top-up which makes the ICR >= 150% and improves the ICR (and by extension improves the TCR).\\n         *\\n         * In Normal Mode, ensure:\\n         *\\n         * - The new ICR is above MCR\\n         * - The adjustment won't pull the TCR below CCR\\n         */\\n        if (_isRecoveryMode) {\\n            _requireNoCollWithdrawal(_collWithdrawal);\\n            if (_isDebtIncrease) {\\n                _requireICRisAboveCCR(_vars.newICR);\\n                _requireNewICRisAboveOldICR(_vars.newICR, _vars.oldICR);\\n            }\\n        } else {\\n            // if Normal Mode\\n            _requireICRisAboveMCR(_vars.newICR);\\n            _vars.newTCR = _getNewTCRFromTroveChange(\\n                _vars.collChange,\\n                _vars.isCollIncrease,\\n                _vars.netDebtChange,\\n                _isDebtIncrease,\\n                _vars.price\\n            );\\n            _requireNewTCRisAboveCCR(_vars.newTCR);\\n        }\\n    }\\n\\n    function _requireICRisAboveMCR(uint _newICR) internal pure {\\n        require(\\n            _newICR >= MCR,\\n            \\\"BorrowerOps: An operation that would result in ICR < MCR is not permitted\\\"\\n        );\\n    }\\n\\n    function _requireICRisAboveCCR(uint _newICR) internal view {\\n        require(\\n            _newICR >= CCR,\\n            \\\"BorrowerOps: Operation must leave trove with ICR >= CCR\\\"\\n        );\\n    }\\n\\n    function _requireNewICRisAboveOldICR(\\n        uint _newICR,\\n        uint _oldICR\\n    ) internal pure {\\n        require(\\n            _newICR >= _oldICR,\\n            \\\"BorrowerOps: Cannot decrease your Trove's ICR in Recovery Mode\\\"\\n        );\\n    }\\n\\n    function _requireNewTCRisAboveCCR(uint _newTCR) internal pure {\\n        require(\\n            _newTCR >= CCR,\\n            \\\"BorrowerOps: An operation that would result in TCR < CCR is not permitted\\\"\\n        );\\n    }\\n\\n    function _requireAtLeastMinNetDebt(uint _netDebt) internal pure {\\n        require(\\n            _netDebt >= MIN_NET_DEBT,\\n            \\\"BorrowerOps: Trove's net debt must be greater than minimum\\\"\\n        );\\n    }\\n\\n    function _requireValidBaseFeeLMARepayment(\\n        uint _currentDebt,\\n        uint _debtRepayment\\n    ) internal pure {\\n        require(\\n            _debtRepayment <= _currentDebt.sub(BaseFeeLMA_GAS_COMPENSATION),\\n            \\\"BorrowerOps: Amount repaid must not be larger than the Trove's debt\\\"\\n        );\\n    }\\n\\n    function _requireCallerIsStabilityPool() internal view {\\n        require(\\n            msg.sender == stabilityPoolAddress,\\n            \\\"BorrowerOps: Caller is not Stability Pool\\\"\\n        );\\n    }\\n\\n    function _requireSufficientBaseFeeLMABalance(\\n        IBaseFeeLMAToken _baseFeeLMAToken,\\n        address _borrower,\\n        uint _debtRepayment\\n    ) internal view {\\n        require(\\n            _baseFeeLMAToken.balanceOf(_borrower) >= _debtRepayment,\\n            \\\"BorrowerOps: Caller doesnt have enough BaseFeeLMA to make repayment\\\"\\n        );\\n    }\\n\\n    function _requireValidMaxFeePercentage(\\n        uint _maxFeePercentage,\\n        bool _isRecoveryMode\\n    ) internal pure {\\n        if (_isRecoveryMode) {\\n            require(\\n                _maxFeePercentage <= DECIMAL_PRECISION,\\n                \\\"Max fee percentage must less than or equal to 100%\\\"\\n            );\\n        } else {\\n            require(\\n                _maxFeePercentage >= BORROWING_FEE_FLOOR &&\\n                    _maxFeePercentage <= DECIMAL_PRECISION,\\n                \\\"Max fee percentage must be between 0.5% and 100%\\\"\\n            );\\n        }\\n    }\\n\\n    // --- ICR and TCR getters ---\\n\\n    // Compute the new collateral ratio, considering the change in coll and debt. Assumes 0 pending rewards.\\n    function _getNewNominalICRFromTroveChange(\\n        uint _coll,\\n        uint _debt,\\n        uint _collChange,\\n        bool _isCollIncrease,\\n        uint _debtChange,\\n        bool _isDebtIncrease\\n    ) internal pure returns (uint) {\\n        (uint newColl, uint newDebt) = _getNewTroveAmounts(\\n            _coll,\\n            _debt,\\n            _collChange,\\n            _isCollIncrease,\\n            _debtChange,\\n            _isDebtIncrease\\n        );\\n\\n        uint newNICR = LiquityMath._computeNominalCR(newColl, newDebt);\\n        return newNICR;\\n    }\\n\\n    // Compute the new collateral ratio, considering the change in coll and debt. Assumes 0 pending rewards.\\n    function _getNewICRFromTroveChange(\\n        uint _coll,\\n        uint _debt,\\n        uint _collChange,\\n        bool _isCollIncrease,\\n        uint _debtChange,\\n        bool _isDebtIncrease,\\n        uint _price\\n    ) internal pure returns (uint) {\\n        (uint newColl, uint newDebt) = _getNewTroveAmounts(\\n            _coll,\\n            _debt,\\n            _collChange,\\n            _isCollIncrease,\\n            _debtChange,\\n            _isDebtIncrease\\n        );\\n\\n        uint newICR = LiquityMath._computeCR(newColl, newDebt, _price);\\n        return newICR;\\n    }\\n\\n    function _getNewTroveAmounts(\\n        uint _coll,\\n        uint _debt,\\n        uint _collChange,\\n        bool _isCollIncrease,\\n        uint _debtChange,\\n        bool _isDebtIncrease\\n    ) internal pure returns (uint, uint) {\\n        uint newColl = _coll;\\n        uint newDebt = _debt;\\n\\n        newColl = _isCollIncrease\\n            ? _coll.add(_collChange)\\n            : _coll.sub(_collChange);\\n        newDebt = _isDebtIncrease\\n            ? _debt.add(_debtChange)\\n            : _debt.sub(_debtChange);\\n\\n        return (newColl, newDebt);\\n    }\\n\\n    function _getNewTCRFromTroveChange(\\n        uint _collChange,\\n        bool _isCollIncrease,\\n        uint _debtChange,\\n        bool _isDebtIncrease,\\n        uint _price\\n    ) internal view returns (uint) {\\n        uint totalColl = getEntireSystemColl();\\n        uint totalDebt = getEntireSystemDebt();\\n\\n        totalColl = _isCollIncrease\\n            ? totalColl.add(_collChange)\\n            : totalColl.sub(_collChange);\\n        totalDebt = _isDebtIncrease\\n            ? totalDebt.add(_debtChange)\\n            : totalDebt.sub(_debtChange);\\n\\n        uint newTCR = LiquityMath._computeCR(totalColl, totalDebt, _price);\\n        return newTCR;\\n    }\\n\\n    function getCompositeDebt(uint _debt) external pure returns (uint) {\\n        return _getCompositeDebt(_debt);\\n    }\\n\\n    /**\\n     * HEDGEHOG UPDATES:\\n     * New view method to help with getting the data on frontends\\n     */\\n    function computeUnreliableCR(\\n        uint _coll,\\n        uint _debt\\n    ) external view returns (uint) {\\n        uint price = priceFeed.lastGoodPrice();\\n\\n        return LiquityMath._computeCR(_coll, _debt, price);\\n    }\\n}\\n\",\"keccak256\":\"0x017a616a1b74726f3644edae69c36c064fbc1328b03808e6d31a0642a8451486\",\"license\":\"MIT\"},\"contracts/dependencies/BaseMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\ncontract BaseMath {\\n    uint public constant DECIMAL_PRECISION = 1e18;\\n}\\n\",\"keccak256\":\"0x5338502be04e32035bbf0310600c8724281edc81b312f5d89c683b23d0bb3fa7\",\"license\":\"MIT\"},\"contracts/dependencies/CheckContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\ncontract CheckContract {\\n    /**\\n     * Check that the account is an already deployed non-destroyed contract.\\n     * See: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol#L12\\n     */\\n    function checkContract(address _account) internal view {\\n        require(_account != address(0), \\\"Account cannot be zero address\\\");\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(_account)\\n        }\\n        require(size > 0, \\\"Account code size cannot be zero\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x4860bce12806bb81c1e91ec617f2f95dd1774148b15645eaca94a67220096f2f\",\"license\":\"MIT\"},\"contracts/dependencies/HedgehogBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./BaseMath.sol\\\";\\nimport \\\"./LiquityMath.sol\\\";\\nimport \\\"../interfaces/IActivePool.sol\\\";\\nimport \\\"../interfaces/IDefaultPool.sol\\\";\\nimport \\\"../interfaces/IPriceFeed.sol\\\";\\nimport \\\"../interfaces/IHedgehogBase.sol\\\";\\n\\n/**\\n * @notice Fork of LiquityMath with an upgraded pragma and:\\n * Base contract for TroveManager, BorrowerOperations and StabilityPool. Contains global system constants and\\n * common functions.\\n *\\n * Hedgehog updates:\\n * Rename variables,\\n * Increase MCR and CCR,\\n * Update Min Net Debt\\n */\\ncontract HedgehogBase is BaseMath, IHedgehogBase {\\n    using SafeMath for uint;\\n\\n    uint public constant _100pct = 1000000000000000000; // 1e18 == 100%\\n\\n    // HEDGEHOG UPDATES: Increased to 150%\\n    // Minimum collateral ratio for individual troves\\n    uint public constant MCR = 1500000000000000000; // 150%\\n\\n    // HEDGEHOG UPDATES: Increased to 200%\\n    // Critical system collateral ratio. If the system's total collateral ratio (TCR) falls below the CCR, Recovery Mode is triggered.\\n    uint public constant CCR = 2000000000000000000; // 200%\\n\\n    // HEDGEHOG UPDATES: Decreased to 100k wei\\n    // Amount of BaseFeeLMA to be locked in gas pool on opening troves\\n    uint public constant BaseFeeLMA_GAS_COMPENSATION = 100000000000000000000000;\\n\\n    // HEDGEHOG UPDATES: Decreased to 350000000 BFE\\n    // Minimum amount of net BaseFeeLMA debt a trove must have\\n    uint public constant MIN_NET_DEBT = 50000000000000000000000000;\\n\\n    uint public constant PERCENT_DIVISOR = 200; // dividing by 200 yields 0.5%\\n\\n    uint public constant BORROWING_FEE_FLOOR = (DECIMAL_PRECISION / 1000) * 5; // 0.5%\\n\\n    IActivePool public activePool;\\n\\n    IDefaultPool public defaultPool;\\n\\n    IPriceFeed public override priceFeed;\\n\\n    // --- Gas compensation functions ---\\n\\n    // Returns the composite debt (drawn debt + gas compensation) of a trove, for the purpose of ICR calculation\\n    function _getCompositeDebt(uint _debt) internal pure returns (uint) {\\n        return _debt.add(BaseFeeLMA_GAS_COMPENSATION);\\n    }\\n\\n    function _getNetDebt(uint _debt) internal pure returns (uint) {\\n        return _debt.sub(BaseFeeLMA_GAS_COMPENSATION);\\n    }\\n\\n    // Return the amount of WStETH to be drawn from a trove's collateral and sent as gas compensation.\\n    function _getCollGasCompensation(\\n        uint _entireColl\\n    ) internal pure returns (uint) {\\n        return _entireColl / PERCENT_DIVISOR;\\n    }\\n\\n    function getEntireSystemColl() public view returns (uint entireSystemColl) {\\n        uint activeColl = activePool.getWStETH();\\n        uint liquidatedColl = defaultPool.getWStETH();\\n        return activeColl.add(liquidatedColl);\\n    }\\n\\n    function getEntireSystemDebt() public view returns (uint entireSystemDebt) {\\n        uint activeDebt = activePool.getBaseFeeLMADebt();\\n        uint closedDebt = defaultPool.getBaseFeeLMADebt();\\n\\n        return activeDebt.add(closedDebt);\\n    }\\n\\n    function _getTCR(uint _price) internal view returns (uint TCR) {\\n        uint entireSystemColl = getEntireSystemColl();\\n        uint entireSystemDebt = getEntireSystemDebt();\\n        TCR = LiquityMath._computeCR(\\n            entireSystemColl,\\n            entireSystemDebt,\\n            _price\\n        );\\n\\n        return TCR;\\n    }\\n\\n    function _checkRecoveryMode(uint _price) internal view returns (bool) {\\n        uint TCR = _getTCR(_price);\\n\\n        return TCR < CCR;\\n    }\\n\\n    function _requireUserAcceptsFee(\\n        uint _fee,\\n        uint _amount,\\n        uint _maxFeePercentage\\n    ) internal pure {\\n        uint feePercentage = _fee.mul(DECIMAL_PRECISION).div(_amount);\\n        require(\\n            feePercentage <= _maxFeePercentage,\\n            \\\"Fee exceeded provided maximum\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x12d78936578b27a25afcff1beecb2709cc9925aea19ab238cab741258d267b33\",\"license\":\"MIT\"},\"contracts/dependencies/IERC2612.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @dev Interface of the ERC2612 standard as defined in the EIP.\\n *\\n * Adds the {permit} method, which can be used to change one's\\n * {IERC20-allowance} without having to send a transaction, by signing a\\n * message. This allows users to spend tokens without having to hold WStETH.\\n *\\n * See https://eips.wStETHeum.org/EIPS/eip-2612.\\n *\\n * Code adapted from https://github.com/OpenZeppelin/openzeppelin-contracts/pull/2237/\\n */\\ninterface IERC2612 {\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over `owner`'s tokens,\\n     * given `owner`'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.wStETHeum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current ERC2612 nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases `owner`'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     *\\n     * `owner` can limit the time a Permit is valid for by setting `deadline` to\\n     * a value in the near future. The deadline argument can be set to uint(-1) to\\n     * create Permits that effectively never expire.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function version() external view returns (string memory);\\n\\n    function permitTypeHash() external view returns (bytes32);\\n\\n    function domainSeparator() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf9e0692c36ffc6ac123d90a7f762f44a895589b581150c5575c14d11e547cc01\",\"license\":\"MIT\"},\"contracts/dependencies/LiquityMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n/**\\n * @notice A fork of Liquity Math library with an upgraded pragma\\n *\\n * Even though SafeMath is no longer required, the decision was made to keep it to avoid human factor errors\\n */\\n\\nlibrary LiquityMath {\\n    using SafeMath for uint;\\n\\n    uint internal constant DECIMAL_PRECISION = 1e18;\\n\\n    /* Precision for Nominal ICR (independent of price). Rationale for the value:\\n     *\\n     * - Making it \\u201ctoo high\\u201d could lead to overflows.\\n     * - Making it \\u201ctoo low\\u201d could lead to an ICR equal to zero, due to truncation from Solidity floor division.\\n     *\\n     * This value of 1e20 is chosen for safety: the NICR will only overflow for numerator > ~1e39 WStETH,\\n     * and will only truncate to 0 if the denominator is at least 1e20 times greater than the numerator.\\n     *\\n     */\\n    uint internal constant NICR_PRECISION = 1e20;\\n\\n    function _min(uint _a, uint _b) internal pure returns (uint) {\\n        return (_a < _b) ? _a : _b;\\n    }\\n\\n    function _max(uint _a, uint _b) internal pure returns (uint) {\\n        return (_a >= _b) ? _a : _b;\\n    }\\n\\n    /*\\n     * Multiply two decimal numbers and use normal rounding rules:\\n     * -round product up if 19'th mantissa digit >= 5\\n     * -round product down if 19'th mantissa digit < 5\\n     *\\n     * Used only inside the exponentiation, _decPow().\\n     */\\n    function decMul(uint x, uint y) internal pure returns (uint decProd) {\\n        uint prod_xy = x.mul(y);\\n\\n        decProd = prod_xy.add(DECIMAL_PRECISION / 2).div(DECIMAL_PRECISION);\\n    }\\n\\n    /*\\n     * _decPow: Exponentiation function for 18-digit decimal base, and integer exponent n.\\n     *\\n     * Uses the efficient \\\"exponentiation by squaring\\\" algorithm. O(log(n)) complexity.\\n     *\\n     * Called by two functions that represent time in units of minutes:\\n     * 1) TroveManager._calcDecayedBaseRate\\n     * 2) CommunityIssuance._getCumulativeIssuanceFraction\\n     *\\n     * The exponent is capped to avoid reverting due to overflow. The cap 525600000 equals\\n     * \\\"minutes in 1000 years\\\": 60 * 24 * 365 * 1000\\n     *\\n     * If a period of > 1000 years is ever used as an exponent in either of the above functions, the result will be\\n     * negligibly different from just passing the cap, since:\\n     *\\n     * In function 1), the decayed base rate will be 0 for 1000 years or > 1000 years\\n     * In function 2), the difference in tokens issued at 1000 years and any time > 1000 years, will be negligible\\n     */\\n    function _decPow(uint _base, uint _minutes) internal pure returns (uint) {\\n        if (_minutes > 525600000) {\\n            _minutes = 525600000;\\n        } // cap to avoid overflow\\n\\n        if (_minutes == 0) {\\n            return DECIMAL_PRECISION;\\n        }\\n\\n        uint y = DECIMAL_PRECISION;\\n        uint x = _base;\\n        uint n = _minutes;\\n\\n        // Exponentiation-by-squaring\\n        while (n > 1) {\\n            if (n % 2 == 0) {\\n                x = decMul(x, x);\\n                n = n.div(2);\\n            } else {\\n                // if (n % 2 != 0)\\n                y = decMul(x, y);\\n                x = decMul(x, x);\\n                n = (n.sub(1)).div(2);\\n            }\\n        }\\n\\n        return decMul(x, y);\\n    }\\n\\n    function _getAbsoluteDifference(\\n        uint _a,\\n        uint _b\\n    ) internal pure returns (uint) {\\n        return (_a >= _b) ? _a.sub(_b) : _b.sub(_a);\\n    }\\n\\n    function _computeNominalCR(\\n        uint _coll,\\n        uint _debt\\n    ) internal pure returns (uint) {\\n        if (_debt > 0) {\\n            return _coll.mul(NICR_PRECISION).div(_debt);\\n        }\\n        // Return the maximal value for uint256 if the Trove has a debt of 0. Represents \\\"infinite\\\" CR.\\n        else {\\n            // if (_debt == 0)\\n            return 2 ** 256 - 1;\\n        }\\n    }\\n\\n    /**\\n     * HEDGEHOG UPDATES:\\n     * Change coll ration calculation from [coll] * [price] / [debt] to\\n     * [coll] / [debt] / [gasPrice]\\n     */\\n    function _computeCR(\\n        uint _coll,\\n        uint _debt,\\n        uint _price\\n    ) internal pure returns (uint) {\\n        if (_debt > 0) {\\n            uint newCollRatio = _coll\\n                .mul(DECIMAL_PRECISION)\\n                .div(_debt)\\n                .mul(DECIMAL_PRECISION)\\n                .div(_price);\\n\\n            return newCollRatio;\\n        }\\n        // Return the maximal value for uint256 if the Trove has a debt of 0. Represents \\\"infinite\\\" CR.\\n        else {\\n            // if (_debt == 0)\\n            return 2 ** 256 - 1;\\n        }\\n    }\\n\\n    function _findPriceBelowMCR(\\n        uint256 _coll,\\n        uint256 _debt,\\n        uint _mcr\\n    ) internal pure returns (uint256 price) {\\n        // Finds an exact price at which CR becomes MCR. Liqudation does not happen in the event of them being equal, hence we add 1 to it to find closest liqudation price\\n        price = ((_coll * DECIMAL_PRECISION) / _debt / _mcr) + 1;\\n    }\\n}\\n\",\"keccak256\":\"0x8a9d92c8aa28cfbdae16a8fbae6e1d809c03d60f90b25e7869ef17ca622cdec0\",\"license\":\"MIT\"},\"contracts/interfaces/IActivePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./IPool.sol\\\";\\n\\ninterface IActivePool is IPool {\\n    // --- Events ---\\n    event BorrowerOperationsAddressChanged(\\n        address _newBorrowerOperationsAddress\\n    );\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event ActivePoolBaseFeeLMADebtUpdated(uint _BaseFeeLMADebt);\\n    event ActivePoolWStETHBalanceUpdated(uint _WStETH);\\n\\n    // --- Functions ---\\n    function sendWStETH(address _account, uint _amount) external;\\n\\n    function getWStETH() external view returns (uint256);\\n\\n    function increaseBalance(uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x9f49d4c4af27279fcfd487aaed046286f03af575e88eb65ba30a54d581eae9ec\",\"license\":\"MIT\"},\"contracts/interfaces/IBaseFeeLMAToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../dependencies/IERC2612.sol\\\";\\n\\ninterface IBaseFeeLMAToken is IERC20, IERC2612 {\\n    // --- Events ---\\n\\n    event TroveManagerAddressChanged(address _troveManagerAddress);\\n    event StabilityPoolAddressChanged(address _newStabilityPoolAddress);\\n    event BorrowerOperationsAddressChanged(\\n        address _newBorrowerOperationsAddress\\n    );\\n\\n    event BaseFeeLMATokenBalanceUpdated(address _user, uint _amount);\\n\\n    // --- Functions ---\\n\\n    function mint(address _account, uint256 _amount) external;\\n\\n    function burn(address _account, uint256 _amount) external;\\n\\n    function sendToPool(\\n        address _sender,\\n        address poolAddress,\\n        uint256 _amount\\n    ) external;\\n\\n    function returnFromPool(\\n        address poolAddress,\\n        address user,\\n        uint256 _amount\\n    ) external;\\n\\n    function totalSupply() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x4f46da70de4bab049b8e24afec10e5308ab86fbbfb77f2314c1607ff8e77a4d2\",\"license\":\"MIT\"},\"contracts/interfaces/ICollSurplusPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\ninterface ICollSurplusPool {\\n    // --- Events ---\\n\\n    event BorrowerOperationsAddressChanged(\\n        address _newBorrowerOperationsAddress\\n    );\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event ActivePoolAddressChanged(address _newActivePoolAddress);\\n\\n    event CollBalanceUpdated(address indexed _account, uint _newBalance);\\n    event WStETHSent(address _to, uint _amount);\\n\\n    // --- Contract setters ---\\n\\n    function setAddresses(\\n        address _borrowerOperationsAddress,\\n        address _troveManagerAddress,\\n        address _activePoolAddress\\n    ) external;\\n\\n    function getWStETH() external view returns (uint);\\n\\n    function getCollateral(address _account) external view returns (uint);\\n\\n    function accountSurplus(address _account, uint _amount) external;\\n\\n    function claimColl(address _account) external;\\n\\n    function increaseBalance(uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x57d1b72879be3af90efa9394b57455d12946a0f6917ccf1285967e0b52128ee8\",\"license\":\"MIT\"},\"contracts/interfaces/IDefaultPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./IPool.sol\\\";\\n\\ninterface IDefaultPool is IPool {\\n    // --- Events ---\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event DefaultPoolBaseFeeLMADebtUpdated(uint _BaseFeeLMADebt);\\n    event DefaultPoolWStETHBalanceUpdated(uint _WStETH);\\n\\n    // --- Functions ---\\n    function sendWStETHToActivePool(uint _amount) external;\\n\\n    function increaseBalance(uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x240d07a4f359f7ce551248b3f67142b9bf73fa1338550a330a35214cd5f6e1a7\",\"license\":\"MIT\"},\"contracts/interfaces/IFeesRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\ninterface IFeesRouter {\\n    function distributeDebtFee(uint256 _debt, uint256 _fee) external;\\n\\n    function distributeCollFee(uint256 _debt, uint256 _fee) external;\\n}\\n\",\"keccak256\":\"0xc4cf93bfebb76dff2c177677687cf7639144774c37b5cf86926347f027c1bab8\",\"license\":\"MIT\"},\"contracts/interfaces/IHOGToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../dependencies/IERC2612.sol\\\";\\n\\ninterface IHOGToken is IERC20, IERC2612 {\\n    // --- Events ---\\n\\n    event CommunityIssuanceAddressSet(address _communityIssuanceAddress);\\n\\n    // --- Functions ---\\n\\n    function getDeploymentStartTime() external view returns (uint256);\\n\\n    function getLpRewardsEntitlement() external view returns (uint256);\\n\\n    function increaseAllowance(\\n        address _spender,\\n        uint256 _addedValues\\n    ) external returns (bool);\\n\\n    function decreaseAllowance(\\n        address _spender,\\n        uint256 _decreasedValue\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x13dac1180f2eca86cc5cbe53759b71f3478e61164906a21c51df2993ccaae99c\",\"license\":\"MIT\"},\"contracts/interfaces/IHedgehogBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./IPriceFeed.sol\\\";\\n\\ninterface IHedgehogBase {\\n    function priceFeed() external view returns (IPriceFeed);\\n}\\n\",\"keccak256\":\"0x9832f1daa908607df4b572f561b27463d7fc4eb27847a26b1c399c2ee6ee6110\",\"license\":\"MIT\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\n// Common interface for the Pools.\\ninterface IPool {\\n    // --- Events ---\\n\\n    event WStETHBalanceUpdated(uint _newBalance);\\n    event BaseFeeLMABalanceUpdated(uint _newBalance);\\n    event ActivePoolAddressChanged(address _newActivePoolAddress);\\n    event DefaultPoolAddressChanged(address _newDefaultPoolAddress);\\n    event StabilityPoolAddressChanged(address _newStabilityPoolAddress);\\n    event WStETHSent(address _to, uint _amount);\\n\\n    // --- Functions ---\\n\\n    function getWStETH() external view returns (uint);\\n\\n    function getBaseFeeLMADebt() external view returns (uint);\\n\\n    function increaseBaseFeeLMADebt(uint _amount) external;\\n\\n    function decreaseBaseFeeLMADebt(uint _amount) external;\\n\\n    // function increaseCollCountInPool(uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0xd61a8bdbfe2a40b2f564c2108931f93a4477a8e004160b138c1e3a1fef51f11b\",\"license\":\"MIT\"},\"contracts/interfaces/IPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\ninterface IPriceFeed {\\n    // --- Events ---\\n    event LastGoodPriceUpdated(uint _lastGoodPrice);\\n\\n    // --- Function ---\\n    function fetchPrice() external returns (uint);\\n\\n    function lastGoodPrice() external view returns (uint);\\n}\\n\",\"keccak256\":\"0xdee620e51756443b2cdd8ac54df2e6d7b38f700a9d1a3cc4d1a2f31ce09bbd1e\",\"license\":\"MIT\"},\"contracts/interfaces/ISortedTroves.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\n// Common interface for the SortedTroves Doubly Linked List.\\ninterface ISortedTroves {\\n    // --- Events ---\\n\\n    event SortedTrovesAddressChanged(address _sortedDoublyLLAddress);\\n    event BorrowerOperationsAddressChanged(address _borrowerOperationsAddress);\\n    event NodeAdded(address _id, uint _NICR);\\n    event NodeRemoved(address _id);\\n\\n    // --- Functions ---\\n\\n    function setParams(\\n        uint256 _size,\\n        address _TroveManagerAddress,\\n        address _borrowerOperationsAddress\\n    ) external;\\n\\n    function insert(\\n        address _id,\\n        uint256 _ICR,\\n        address _prevId,\\n        address _nextId\\n    ) external;\\n\\n    function remove(address _id) external;\\n\\n    function reInsert(\\n        address _id,\\n        uint256 _newICR,\\n        address _prevId,\\n        address _nextId\\n    ) external;\\n\\n    function contains(address _id) external view returns (bool);\\n\\n    function isFull() external view returns (bool);\\n\\n    function isEmpty() external view returns (bool);\\n\\n    function getSize() external view returns (uint256);\\n\\n    function getMaxSize() external view returns (uint256);\\n\\n    function getFirst() external view returns (address);\\n\\n    function getLast() external view returns (address);\\n\\n    function getNext(address _id) external view returns (address);\\n\\n    function getPrev(address _id) external view returns (address);\\n\\n    function validInsertPosition(\\n        uint256 _ICR,\\n        address _prevId,\\n        address _nextId\\n    ) external view returns (bool);\\n\\n    function findInsertPosition(\\n        uint256 _ICR,\\n        address _prevId,\\n        address _nextId\\n    ) external view returns (address, address);\\n}\\n\",\"keccak256\":\"0xee69ee66b0db6c873a5a1177e5e9178aa8be6c57aa988d1d7e7526f484862ecd\",\"license\":\"MIT\"},\"contracts/interfaces/IStabilityPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\n/*\\n * The Stability Pool holds BaseFeeLMA tokens deposited by Stability Pool depositors.\\n *\\n * When a trove is liquidated, then depending on system conditions, some of its BaseFeeLMA debt gets offset with\\n * BaseFeeLMA in the Stability Pool:  that is, the offset debt evaporates, and an equal amount of BaseFeeLMA tokens in the Stability Pool is burned.\\n *\\n * Thus, a liquidation causes each depositor to receive a BaseFeeLMA loss, in proportion to their deposit as a share of total deposits.\\n * They also receive an WStETH gain, as the WStETH collateral of the liquidated trove is distributed among Stability depositors,\\n * in the same proportion.\\n *\\n * When a liquidation occurs, it depletes every deposit by the same fraction: for example, a liquidation that depletes 40%\\n * of the total BaseFeeLMA in the Stability Pool, depletes 40% of each deposit.\\n *\\n * A deposit that has experienced a series of liquidations is termed a \\\"compounded deposit\\\": each liquidation depletes the deposit,\\n * multiplying it by some factor in range ]0,1[\\n *\\n * Please see the implementation spec in the proof document, which closely follows on from the compounded deposit / WStETH gain derivations:\\n * https://github.com/liquity/liquity/blob/master/papers/Scalable_Reward_Distribution_with_Compounding_Stakes.pdf\\n *\\n * --- HOG ISSUANCE TO STABILITY POOL DEPOSITORS ---\\n *\\n * A HOG issuance event occurs at every deposit operation, and every liquidation.\\n *\\n * Each deposit is tagged with the address of the front end through which it was made.\\n *\\n * All deposits earn a share of the issued HOG in proportion to the deposit as a share of total deposits. The HOG earned\\n * by a given deposit, is split between the depositor and the front end through which the deposit was made, based on the front end's kickbackRate.\\n *\\n * Please see the system Readme for an overview:\\n * https://github.com/liquity/dev/blob/main/README.md#hog-issuance-to-stability-providers\\n */\\ninterface IStabilityPool {\\n    // --- Events ---\\n\\n    event StabilityPoolWStETHBalanceUpdated(uint _newBalance);\\n    event StabilityPoolBaseFeeLMABalanceUpdated(uint _newBalance);\\n\\n    event BorrowerOperationsAddressChanged(\\n        address _newBorrowerOperationsAddress\\n    );\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event ActivePoolAddressChanged(address _newActivePoolAddress);\\n    event DefaultPoolAddressChanged(address _newDefaultPoolAddress);\\n    event BaseFeeLMATokenAddressChanged(address _newBaseFeeLMATokenAddress);\\n    event SortedTrovesAddressChanged(address _newSortedTrovesAddress);\\n    event PriceFeedAddressChanged(address _newPriceFeedAddress);\\n    event CommunityIssuanceAddressChanged(address _newCommunityIssuanceAddress);\\n\\n    event P_Updated(uint _P);\\n    event S_Updated(uint _S, uint128 _epoch, uint128 _scale);\\n    event G_Updated(uint _G, uint128 _epoch, uint128 _scale);\\n    event EpochUpdated(uint128 _currentEpoch);\\n    event ScaleUpdated(uint128 _currentScale);\\n\\n    event DepositSnapshotUpdated(\\n        address indexed _depositor,\\n        uint _P,\\n        uint _S,\\n        uint _G\\n    );\\n\\n    event WStETHGainWithdrawn(\\n        address indexed _depositor,\\n        uint _WStETH,\\n        uint _BaseFeeLMALoss\\n    );\\n    event HOGPaidToDepositor(address indexed _depositor, uint _HOG);\\n    event WStETHSent(address _to, uint _amount);\\n\\n    // --- Functions ---\\n\\n    /*\\n     * Called only once on init, to set addresses of other Hedgehog contracts\\n     * Callable only by owner, renounces ownership at the end\\n     */\\n    function setAddresses(\\n        address _borrowerOperationsAddress,\\n        address _troveManagerAddress,\\n        address _activePoolAddress,\\n        address _baseFeeLMATokenAddress,\\n        address _sortedTrovesAddress,\\n        address _priceFeedAddress,\\n        address _communityIssuanceAddress\\n    ) external;\\n\\n    /*\\n     * Initial checks:\\n     * - _amount is not zero\\n     * ---\\n     * - Triggers a HOG issuance, based on time passed since the last issuance. The HOG issuance is shared between *all* depositors and front ends\\n     * - Tags the deposit with the provided front end tag param, if it's a new deposit\\n     * - Sends depositor's accumulated gains (HOG, WStETH) to depositor\\n     * - Sends the tagged front end's accumulated HOG gains to the tagged front end\\n     * - Increases deposit and tagged front end's stake, and takes new snapshots for each.\\n     */\\n    function provideToSP(uint _amount) external;\\n\\n    /*\\n     * Initial checks:\\n     * - _amount is zero or there are no under collateralized troves left in the system\\n     * - User has a non zero deposit\\n     * ---\\n     * - Triggers a HOG issuance, based on time passed since the last issuance. The HOG issuance is shared between *all* depositors and front ends\\n     * - Removes the deposit's front end tag if it is a full withdrawal\\n     * - Sends all depositor's accumulated gains (HOG, WStETH) to depositor\\n     * - Sends the tagged front end's accumulated HOG gains to the tagged front end\\n     * - Decreases deposit and tagged front end's stake, and takes new snapshots for each.\\n     *\\n     * If _amount > userDeposit, the user withdraws all of their compounded deposit.\\n     */\\n    function withdrawFromSP(uint _amount) external;\\n\\n    /*\\n     * Initial checks:\\n     * - User has a non zero deposit\\n     * - User has an open trove\\n     * - User has some WStETH gain\\n     * ---\\n     * - Triggers a HOG issuance, based on time passed since the last issuance. The HOG issuance is shared between *all* depositors and front ends\\n     * - Sends all depositor's HOG gain to  depositor\\n     * - Sends all tagged front end's HOG gain to the tagged front end\\n     * - Transfers the depositor's entire WStETH gain from the Stability Pool to the caller's trove\\n     * - Leaves their compounded deposit in the Stability Pool\\n     * - Updates snapshots for deposit and tagged front end stake\\n     */\\n    function withdrawWStETHGainToTrove(\\n        address _upperHint,\\n        address _lowerHint\\n    ) external;\\n\\n    /*\\n     * Initial checks:\\n     * - Caller is TroveManager\\n     * ---\\n     * Cancels out the specified debt against the BaseFeeLMA contained in the Stability Pool (as far as possible)\\n     * and transfers the Trove's WStETH collateral from ActivePool to StabilityPool.\\n     * Only called by liquidation functions in the TroveManager.\\n     */\\n    function offset(uint _debt, uint _coll) external;\\n\\n    /*\\n     * Returns the total amount of WStETH held by the pool, accounted in an internal variable instead of `balance`,\\n     * to exclude edge cases like WStETH received from a self-destruct.\\n     */\\n    function getWStETH() external view returns (uint);\\n\\n    /*\\n     * Returns BaseFeeLMA held in the pool. Changes when users deposit/withdraw, and when Trove debt is offset.\\n     */\\n    function getTotalBaseFeeLMADeposits() external view returns (uint);\\n\\n    /*\\n     * Calculates the WStETH gain earned by the deposit since its last snapshots were taken.\\n     */\\n    function getDepositorWStETHGain(\\n        address _depositor\\n    ) external view returns (uint);\\n\\n    /*\\n     * Calculate the HOG gain earned by a deposit since its last snapshots were taken.\\n     * If not tagged with a front end, the depositor gets a 100% cut of what their deposit earned.\\n     * Otherwise, their cut of the deposit's earnings is equal to the kickbackRate, set by the front end through\\n     * which they made their deposit.\\n     */\\n    function getDepositorHOGGain(\\n        address _depositor\\n    ) external view returns (uint);\\n\\n    /*\\n     * Return the user's compounded deposit.\\n     */\\n    function getCompoundedBaseFeeLMADeposit(\\n        address _depositor\\n    ) external view returns (uint);\\n}\\n\",\"keccak256\":\"0xac47759c001ae07ffa822446dec81e68b4537e71b0f7d545853fcfbc2cc0baa7\",\"license\":\"MIT\"},\"contracts/interfaces/ITroveManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./IHedgehogBase.sol\\\";\\nimport \\\"./IStabilityPool.sol\\\";\\nimport \\\"./IBaseFeeLMAToken.sol\\\";\\nimport \\\"./IHOGToken.sol\\\";\\n\\n// Common interface for the Trove Manager.\\ninterface ITroveManager is IHedgehogBase {\\n    // --- Events ---\\n\\n    event BorrowerOperationsAddressChanged(\\n        address _newBorrowerOperationsAddress\\n    );\\n    event PriceFeedAddressChanged(address _newPriceFeedAddress);\\n    event BaseFeeLMATokenAddressChanged(address _newBaseFeeLMATokenAddress);\\n    event ActivePoolAddressChanged(address _activePoolAddress);\\n    event DefaultPoolAddressChanged(address _defaultPoolAddress);\\n    event StabilityPoolAddressChanged(address _stabilityPoolAddress);\\n    event GasPoolAddressChanged(address _gasPoolAddress);\\n    event CollSurplusPoolAddressChanged(address _collSurplusPoolAddress);\\n    event SortedTrovesAddressChanged(address _sortedTrovesAddress);\\n    event HOGTokenAddressChanged(address _hogTokenAddress);\\n\\n    event Liquidation(\\n        uint _liquidatedDebt,\\n        uint _liquidatedColl,\\n        uint _collGasCompensation,\\n        uint _BaseFeeLMAGasCompensation\\n    );\\n    event Redemption(\\n        uint _attemptedBaseFeeLMAAmount,\\n        uint _actualBaseFeeLMAAmount,\\n        uint _WStETHSent,\\n        uint _WStETHFee\\n    );\\n    event TroveUpdated(\\n        address indexed _borrower,\\n        uint _debt,\\n        uint _coll,\\n        uint stake,\\n        uint8 operation\\n    );\\n    event TroveLiquidated(\\n        address indexed _borrower,\\n        uint _debt,\\n        uint _coll,\\n        uint8 operation\\n    );\\n    event BaseRateUpdated(uint _baseRate);\\n    event LastFeeOpTimeUpdated(uint _lastFeeOpTime);\\n    event TotalStakesUpdated(uint _newTotalStakes);\\n    event SystemSnapshotsUpdated(\\n        uint _totalStakesSnapshot,\\n        uint _totalCollateralSnapshot\\n    );\\n    event LTermsUpdated(uint _L_WStETH, uint _L_BaseFeeLMADebt);\\n    event TroveSnapshotsUpdated(uint _L_WStETH, uint _L_BaseFeeLMADebt);\\n    event TroveIndexUpdated(address _borrower, uint _newIndex);\\n\\n    // --- Functions ---\\n\\n    function setAddresses(\\n        address _borrowerOperationsAddress,\\n        address _activePoolAddress,\\n        address _defaultPoolAddress,\\n        address _stabilityPoolAddress,\\n        address _gasPoolAddress,\\n        address _collSurplusPoolAddress,\\n        address _priceFeedAddress,\\n        address _baseFeeLMATokenAddress,\\n        address _sortedTrovesAddress,\\n        address _hogTokenAddress\\n    ) external;\\n\\n    function stabilityPool() external view returns (IStabilityPool);\\n\\n    function baseFeeLMAToken() external view returns (IBaseFeeLMAToken);\\n\\n    function hogToken() external view returns (IHOGToken);\\n\\n    function getTroveOwnersCount() external view returns (uint);\\n\\n    function getTroveFromTroveOwnersArray(\\n        uint _index\\n    ) external view returns (address);\\n\\n    function getNominalICR(address _borrower) external view returns (uint);\\n\\n    function getCurrentICR(\\n        address _borrower,\\n        uint _price\\n    ) external view returns (uint);\\n\\n    function liquidate(address _borrower) external;\\n\\n    function liquidateTroves(uint _n) external;\\n\\n    function batchLiquidateTroves(address[] calldata _troveArray) external;\\n\\n    function redeemCollateral(\\n        uint _BaseFeeLMAAmount,\\n        address _firstRedemptionHint,\\n        address _upperPartialRedemptionHint,\\n        address _lowerPartialRedemptionHint,\\n        uint _partialRedemptionHintNICR,\\n        uint _maxIterations,\\n        uint _maxFee\\n    ) external;\\n\\n    function updateStakeAndTotalStakes(\\n        address _borrower\\n    ) external returns (uint);\\n\\n    function updateTroveRewardSnapshots(address _borrower) external;\\n\\n    function addTroveOwnerToArray(\\n        address _borrower\\n    ) external returns (uint index);\\n\\n    function applyPendingRewards(address _borrower) external;\\n\\n    function getPendingWStETHReward(\\n        address _borrower\\n    ) external view returns (uint);\\n\\n    function getPendingBaseFeeLMADebtReward(\\n        address _borrower\\n    ) external view returns (uint);\\n\\n    function hasPendingRewards(address _borrower) external view returns (bool);\\n\\n    function getEntireDebtAndColl(\\n        address _borrower\\n    )\\n        external\\n        view\\n        returns (\\n            uint debt,\\n            uint coll,\\n            uint pendingBaseFeeLMADebtReward,\\n            uint pendingWStETHReward\\n        );\\n\\n    function closeTrove(address _borrower) external;\\n\\n    function removeStake(address _borrower) external;\\n\\n    function getRedemptionRate(\\n        uint _redemptionColl\\n    ) external view returns (uint);\\n\\n    function getRedemptionRateWithDecay(\\n        uint _redemptionColl\\n    ) external view returns (uint);\\n\\n    function getRedemptionFeeWithDecay(\\n        uint _WStETHDrawn\\n    ) external view returns (uint);\\n\\n    function getBorrowingRate(\\n        uint _issuedBaseFeeLMA\\n    ) external view returns (uint);\\n\\n    function getBorrowingRateWithDecay(\\n        uint _issuedBaseFeeLMA\\n    ) external view returns (uint);\\n\\n    function getBorrowingFee(\\n        uint BaseFeeLMADebt\\n    ) external view returns (uint, uint);\\n\\n    function getBorrowingFeeWithDecay(\\n        uint _BaseFeeLMADebt\\n    ) external view returns (uint);\\n\\n    function updateBaseRateFromBorrowing(uint _baseRate) external;\\n\\n    function decayBaseRateFromBorrowing() external;\\n\\n    function getTroveStatus(address _borrower) external view returns (uint);\\n\\n    function getTroveStake(address _borrower) external view returns (uint);\\n\\n    function getTroveDebt(address _borrower) external view returns (uint);\\n\\n    function getTroveColl(address _borrower) external view returns (uint);\\n\\n    function getTroveUpdateBlock(\\n        address _borrower\\n    ) external view returns (uint256);\\n\\n    function setTroveStatus(address _borrower, uint num) external;\\n\\n    function increaseTroveColl(\\n        address _borrower,\\n        uint _collIncrease\\n    ) external returns (uint);\\n\\n    function decreaseTroveColl(\\n        address _borrower,\\n        uint _collDecrease\\n    ) external returns (uint);\\n\\n    function increaseTroveDebt(\\n        address _borrower,\\n        uint _debtIncrease\\n    ) external returns (uint);\\n\\n    function decreaseTroveDebt(\\n        address _borrower,\\n        uint _collDecrease\\n    ) external returns (uint);\\n\\n    function setTroveLastUpdatedBlock(address _borrower) external;\\n\\n    function getTCR(uint _price) external view returns (uint);\\n\\n    function checkRecoveryMode(uint _price) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc2eabc346a7f21837385cb8e19e26c10245b68bb25c145d813caa7ee17109d68\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001d3362000023565b62000075565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6138c980620000856000396000f3fe608060405234801561001057600080fd5b50600436106101b05760003560e01c8063794e5724116100ef578063a201415211610092578063a20141521461034e578063a20baee6146102b0578063a3f4df7e1461035f578063ae9187541461039d578063b8a106da146103b0578063c42dab99146103c3578063f2fde38b146103d6578063f92d3433146103e957600080fd5b8063794e5724146102d2578063795d26c3146102e15780637985c5e4146102e95780637e88d408146102fc5780637f7dde4a1461030f578063887105d3146103225780638da5cb5b1461032a5780638f09162b1461033b57600080fd5b80635530273c116101575780635530273c146102585780635733d58f1461026b5780635da8b1c31461027a57806360a8b10f1461028d5780636f0b0c1c146102a0578063715018a6146102a857806372fe25aa146102b0578063741bef1a146102bf57600080fd5b80630e704d50146101b557806317138bdb146101bf5780631bf43555146101e55780633cc74225146101f75780633d83908a1461021757806347a6e7131461022a5780634870dd9a1461023d5780634ff8144314610245575b600080fd5b6101bd6103f1565b005b6101d26101cd3660046132ed565b6107b3565b6040519081526020015b60405180910390f35b6101d26a295be96e6406697200000081565b60015461020a906001600160a01b031681565b6040516101dc919061330f565b60045461020a906001600160a01b031681565b6101bd610238366004613348565b610844565b6101d260c881565b6101d261025336600461338a565b61085c565b6101bd610266366004613348565b610867565b6101d2671bc16d674ec8000081565b6101bd6102883660046133b1565b61087a565b6101bd61029b366004613423565b610893565b6101bd6108dd565b6101bd61093b565b6101d2670de0b6b3a764000081565b60025461020a906001600160a01b031681565b6101d26714d1120d7b16000081565b6101d261094f565b6101bd6102f7366004613474565b610a4b565b6101bd61030a366004613552565b610dba565b60005461020a906001600160a01b031681565b6101d2610ded565b6003546001600160a01b031661020a565b6101bd610349366004613593565b610eb2565b6101d269152d02c7e14af680000081565b61039060405180604001604052806012815260200171426f72726f7765724f7065726174696f6e7360701b81525081565b6040516101dc919061360d565b600b5461020a906001600160a01b031681565b6101bd6103be366004613640565b6114f2565b60095461020a906001600160a01b031681565b6101bd6103e436600461368a565b611504565b6101d261157d565b6103fa3361159f565b600454600054600a546001600160a01b0392831692918216911661041e8333611693565b60025460408051630fdb11cf60e01b815290516000926001600160a01b031691630fdb11cf916004808301926020929190829003018187875af1158015610469573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061048d91906136a7565b90506104988161176c565b604051630b07655760e01b81526001600160a01b03851690630b076557906104c490339060040161330f565b600060405180830381600087803b1580156104de57600080fd5b505af11580156104f2573d6000803e3d6000fd5b50506040516309019aaf60e31b8152600092506001600160a01b038716915063480cd5789061052590339060040161330f565b602060405180830381865afa158015610542573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056691906136a7565b90506000856001600160a01b031663d66a2553336040518263ffffffff1660e01b8152600401610596919061330f565b602060405180830381865afa1580156105b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d791906136a7565b90506105f784336105f28469152d02c7e14af68000006117e4565b6117f7565b6000610608836000846000886118e6565b90506106138161195b565b604051631fc5750960e31b81526001600160a01b0388169063fe2ba8489061063f90339060040161330f565b600060405180830381600087803b15801561065957600080fd5b505af115801561066d573d6000803e3d6000fd5b50506040516365e89c5760e11b81526001600160a01b038a16925063cbd138ae915061069d90339060040161330f565b600060405180830381600087803b1580156106b757600080fd5b505af11580156106cb573d6000803e3d6000fd5b50505050336001600160a01b0316600080516020613874833981519152600080600060016040516106ff94939291906136e2565b60405180910390a26107268686336107218669152d02c7e14af68000006117e4565b6119eb565b60065461074a90879087906001600160a01b031669152d02c7e14af68000006119eb565b6040516316daab2160e01b81526001600160a01b038716906316daab21906107789033908790600401613704565b600060405180830381600087803b15801561079257600080fd5b505af11580156107a6573d6000803e3d6000fd5b5050505050505050505050565b600080600260009054906101000a90046001600160a01b03166001600160a01b0316630490be836040518163ffffffff1660e01b8152600401602060405180830381865afa158015610809573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082d91906136a7565b905061083a848483611aab565b9150505b92915050565b6108573360008086600087876000611af1565b505050565b600061083e826120bc565b6108573384600080600087876000611af1565b61088a338787878787878e611af1565b50505050505050565b600081116108bc5760405162461bcd60e51b81526004016108b39061371d565b60405180910390fd5b6108c46120d2565b6108d78460008360008088886000611af1565b50505050565b60085460405163b32beb5b60e01b81526001600160a01b039091169063b32beb5b9061090d90339060040161330f565b600060405180830381600087803b15801561092757600080fd5b505af11580156108d7573d6000803e3d6000fd5b61094361213e565b61094d6000612198565b565b60008054604080516315b3137b60e21b8152905183926001600160a01b0316916356cc4dec9160048083019260209291908290030181865afa158015610999573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109bd91906136a7565b90506000600160009054906101000a90046001600160a01b03166001600160a01b03166356cc4dec6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3891906136a7565b9050610a4482826121ea565b9250505090565b610a5361213e565b610a5c8b6121f6565b610a658a6121f6565b610a6e896121f6565b610a77886121f6565b610a80876121f6565b610a89866121f6565b610a92856121f6565b610a9b846121f6565b610aa4836121f6565b610aad826121f6565b610ab6816121f6565b600480546001600160a01b03199081166001600160a01b038e8116919091179092556000805482168d84161790556001805482168c84161790556005805482168b84161790556006805482168a8416179055600880548216898416179055600280548216888416179055600b80548216878416179055600a80548216868416179055600780548216858416179055600980549091169183169190911790556040517f143219c9e69b09e07e095fcc889b43d8f46ca892bba65f08dc3a0050869a567890610b84908d9061330f565b60405180910390a17f78f058b189175430c48dc02699e3a0031ea4ff781536dc2fab847de4babdd8828a604051610bbb919061330f565b60405180910390a17f5ee0cae2f063ed938bb55046f6a932fb6ae792bf43624806bb90abe68a50be9b89604051610bf2919061330f565b60405180910390a17f82966d27eea39b038ee0fa30cd16532bb24f6e65d31cb58fb227aa5766cdcc7f88604051610c29919061330f565b60405180910390a17fcfb07d791fcafc032b35837b50eb84b74df518cf4cc287e8084f47630fa70fa087604051610c60919061330f565b60405180910390a17fe67f36a6e961157d6eff83b91f3af5a62131ceb6f04954ef74f51c1c05e7f88d86604051610c97919061330f565b60405180910390a17f8c537274438aa850a330284665d81a85dd38267d09e4050d416bfc94142db26485604051610cce919061330f565b60405180910390a17f65f4cf077bc01e4742eb5ad98326f6e95b63548ea24b17f8d5e823111fe7880084604051610d05919061330f565b60405180910390a17f7faa560f2889840c377209fbc4b6b92d05f43f1fc60bf336ab546fd60c0051ad83604051610d3c919061330f565b60405180910390a17fa10b18a97e87c5b49c90aaeba95303db140aa131ee9cbdb946ffce5b50ccf16482604051610d73919061330f565b60405180910390a17f6877e00d9059f8716bd795b5d4c2c89a4bc3cef71ba3dd99b168ac9cc1f2a6c281604051610daa919061330f565b60405180910390a16107a661093b565b60008111610dda5760405162461bcd60e51b81526004016108b39061371d565b6108573360008360008088886000611af1565b6000805460408051630ee2ec9760e41b8152905183926001600160a01b03169163ee2ec9709160048083019260209291908290030181865afa158015610e37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e5b91906136a7565b90506000600160009054906101000a90046001600160a01b03166001600160a01b031663ee2ec9706040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a14573d6000803e3d6000fd5b610ebb3361159f565b6040805160608082018352600480546001600160a01b039081168452600080548216602080870191909152600a548316868801528651610100810188528281528082018390528088018390529485018290526080850182905260a0850182905260c0850182905260e085018290526002548751630fdb11cf60e01b8152975196979596931694630fdb11cf948181019492939183900301908290875af1158015610f69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8d91906136a7565b808252600090610f9c9061229f565b9050610fa888826122bc565b8251610fb490336123d0565b604082018790528251610fc890888a612492565b60208301526040820151610fdb90612632565b610fe882604001516120bc565b60608301819052610ffb57610ffb613760565b61100e8683606001518460000151611aab565b608083015260608201516110239087906126b3565b60a083015280156110405761103b82608001516126e2565b611073565b61104d826080015161275a565b60006110668760018560600151600187600001516118e6565b90506110718161195b565b505b8251604051635d6b480f60e01b81526001600160a01b0390911690635d6b480f906110a5903390600190600401613704565b600060405180830381600087803b1580156110bf57600080fd5b505af11580156110d3573d6000803e3d6000fd5b505084516040516372423c1760e01b81526001600160a01b0390911692506372423c1791506111089033908a90600401613704565b6020604051808303816000875af1158015611127573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114b91906136a7565b5082516060830151604051639976cf4560e01b81526001600160a01b0390921691639976cf459161118191339190600401613704565b6020604051808303816000875af11580156111a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c491906136a7565b5082516040516382fe3eb960e01b81526001600160a01b03909116906382fe3eb9906111f490339060040161330f565b600060405180830381600087803b15801561120e57600080fd5b505af1158015611222573d6000803e3d6000fd5b50508451604051630c7940bd60e11b81526001600160a01b0390911692506318f2817a915061125590339060040161330f565b6020604051808303816000875af1158015611274573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061129891906136a7565b60c0830152600b5460a08301516040516346f7cf8760e01b81526001600160a01b03909216916346f7cf87916112d7913391908a908a90600401613776565b600060405180830381600087803b1580156112f157600080fd5b505af1158015611305573d6000803e3d6000fd5b505084516040516315d549f160e01b81526001600160a01b0390911692506315d549f1915061133890339060040161330f565b6020604051808303816000875af1158015611357573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061137b91906136a7565b60e0830181905260405190815233907f59cfd0cd754bc5748b6770e94a4ffa5f678d885cb899dcfadc5734edb97c67ab9060200160405180910390a26113c58360200151876127ea565b69152d02c7e14af680000082602001516113df91906137b7565b87116114245760405162461bcd60e51b815260206004820152601460248201527321279d102332b29032bc31b2b2b2399033b0b4b760611b60448201526064016108b3565b61144c836020015184604001513385602001518b61144291906137ca565b8660400151612863565b602083015160408401516006546114799291906001600160a01b031669152d02c7e14af680000080612863565b606082015160c08301516040513392600080516020613874833981519152926114a7928b91906000906136e2565b60405180910390a260208083015160405190815233917f909ac017b31fd41edf1bf9a7ed7d4a7af4343fe034023db2d0220a77ba25e7ee910160405180910390a25050505050505050565b6108d73360008086600187878b611af1565b61150c61213e565b6001600160a01b0381166115715760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016108b3565b61157a81612198565b50565b6115916103e8670de0b6b3a76400006137dd565b61159c9060056137ff565b81565b600480546040516320ca6cb360e11b815243926001600160a01b0390921691634194d966916115d09186910161330f565b602060405180830381865afa1580156115ed573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061161191906136a7565b0361162f576040516360a67ce360e01b815260040160405180910390fd5b6004805460405163acef5b8d60e01b81526001600160a01b039091169163acef5b8d9161165e9185910161330f565b600060405180830381600087803b15801561167857600080fd5b505af115801561168c573d6000803e3d6000fd5b5050505050565b6040516321e3780160e01b81526000906001600160a01b038416906321e37801906116c290859060040161330f565b602060405180830381865afa1580156116df573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061170391906136a7565b9050806001146108575760405162461bcd60e51b815260206004820152602e60248201527f426f72726f7765724f70733a2054726f766520646f6573206e6f74206578697360448201526d1d081bdc881a5cc818db1bdcd95960921b60648201526084016108b3565b6117758161229f565b1561157a5760405162461bcd60e51b815260206004820152603960248201527f426f72726f7765724f70733a204f7065726174696f6e206e6f74207065726d696044820152787474656420647572696e67205265636f76657279204d6f646560381b60648201526084016108b3565b60006117f082846137ca565b9392505050565b6040516370a0823160e01b815281906001600160a01b038516906370a082319061182590869060040161330f565b602060405180830381865afa158015611842573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061186691906136a7565b10156108575760405162461bcd60e51b815260206004820152604360248201527f426f72726f7765724f70733a2043616c6c657220646f65736e7420686176652060448201527f656e6f75676820426173654665654c4d4120746f206d616b652072657061796d606482015262195b9d60ea1b608482015260a4016108b3565b6000806118f1610ded565b905060006118fd61094f565b9050866119135761190e82896117e4565b61191d565b61191d82896121ea565b9150846119335761192e81876117e4565b61193d565b61193d81876121ea565b9050600061194c838387611aab565b93505050505b95945050505050565b671bc16d674ec8000081101561157a5760405162461bcd60e51b815260206004820152604960248201527f426f72726f7765724f70733a20416e206f7065726174696f6e2074686174207760448201527f6f756c6420726573756c7420696e20544352203c20434352206973206e6f74206064820152681c195c9b5a5d1d195960ba1b608482015260a4016108b3565b604051633b4009ff60e11b8152600481018290526001600160a01b0385169063768013fe90602401600060405180830381600087803b158015611a2d57600080fd5b505af1158015611a41573d6000803e3d6000fd5b5050604051632770a7eb60e21b81526001600160a01b0386169250639dc29fac9150611a739085908590600401613704565b600060405180830381600087803b158015611a8d57600080fd5b505af1158015611aa1573d6000803e3d6000fd5b5050505050505050565b60008215611ae6576000611add83611ad1670de0b6b3a7640000611ad788838b84612924565b90612930565b90612924565b91506117f09050565b506000199392505050565b611afa3361159f565b6040805160608082018352600480546001600160a01b039081168452600080548216602080870191909152600a5483168688015286516101a0810188528281528082018390528088018390529485018290526080850182905260a0850182905260c0850182905260e08501829052610100850182905261012085018290526101408501829052610160850182905261018085018290526002548751630fdb11cf60e01b8152975196979596931694630fdb11cf948181019492939183900301908290875af1158015611bd0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bf491906136a7565b808252600090611c039061229f565b90508615611c1e57611c1584826122bc565b611c1e8861293c565b611c288a8a6129ac565b611c338a8a8a612a1c565b8251611c3f908c611693565b336001600160a01b038c161480611c7557506005546001600160a01b031633148015611c6b5750600089115b8015611c75575087155b611c8157611c81613760565b8251604051630b07655760e01b81526001600160a01b0390911690630b07655790611cb0908e9060040161330f565b600060405180830381600087803b158015611cca57600080fd5b505af1158015611cde573d6000803e3d6000fd5b50505050611cec898b612ab4565b151560608401526020830152604082018890528615611d19578251611d12908986612492565b6101208301525b825160405163d66a255360e01b81526001600160a01b039091169063d66a255390611d48908e9060040161330f565b602060405180830381865afa158015611d65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d8991906136a7565b608083015282516040516309019aaf60e31b81526001600160a01b039091169063480cd57890611dbd908e9060040161330f565b602060405180830381865afa158015611dda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dfe91906136a7565b60a0830181905260808301518351611e17929190611aab565b8260c0018181525050611e478260a0015183608001518460200151856060015186604001518c8860000151612ad3565b60e083015260a08201518a1115611e6057611e60613760565b611e6c818b8985612b06565b86158015611e7a5750600088115b15611ec757611ea2611e9d8360400151611e978560800151612b7a565b906117e4565b612632565b611eb482608001518360400151612b90565b611ec783604001518c84604001516117f7565b611ee583600001518c8460200151856060015186604001518c612c25565b6101408401526101608301528251604051630c7940bd60e11b81526001600160a01b03909116906318f2817a90611f20908e9060040161330f565b6020604051808303816000875af1158015611f3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f6391906136a7565b826101800181815250506000611f918360a0015184608001518560200151866060015187604001518d612e17565b600b5460405163015f109360e51b81529192506001600160a01b031690632be2126090611fc8908f9085908c908c90600401613776565b600060405180830381600087803b158015611fe257600080fd5b505af1158015611ff6573d6000803e3d6000fd5b505050508b6001600160a01b0316600080516020613874833981519152846101400151856101600151866101800151600260405161203794939291906136e2565b60405180910390a261012083015160405190815233907f909ac017b31fd41edf1bf9a7ed7d4a7af4343fe034023db2d0220a77ba25e7ee9060200160405180910390a26120ae8460200151856040015133866020015187606001518861012001518f6120a391906137ca565b8e8a60400151612e48565b505050505050505050505050565b600061083e8269152d02c7e14af68000006121ea565b6005546001600160a01b0316331461094d5760405162461bcd60e51b815260206004820152602960248201527f426f72726f7765724f70733a2043616c6c6572206973206e6f742053746162696044820152681b1a5d1e48141bdbdb60ba1b60648201526084016108b3565b6003546001600160a01b0316331461094d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016108b3565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006117f082846137b7565b6001600160a01b03811661224c5760405162461bcd60e51b815260206004820152601e60248201527f4163636f756e742063616e6e6f74206265207a65726f2061646472657373000060448201526064016108b3565b803b8061229b5760405162461bcd60e51b815260206004820181905260248201527f4163636f756e7420636f64652073697a652063616e6e6f74206265207a65726f60448201526064016108b3565b5050565b6000806122ab83612edd565b671bc16d674ec80000119392505050565b801561233557670de0b6b3a764000082111561229b5760405162461bcd60e51b815260206004820152603260248201527f4d6178206665652070657263656e74616765206d757374206c657373207468616044820152716e206f7220657175616c20746f203130302560701b60648201526084016108b3565b6123496103e8670de0b6b3a76400006137dd565b6123549060056137ff565b821015801561236b5750670de0b6b3a76400008211155b61229b5760405162461bcd60e51b815260206004820152603060248201527f4d6178206665652070657263656e74616765206d75737420626520626574776560448201526f656e20302e352520616e64203130302560801b60648201526084016108b3565b6040516321e3780160e01b81526000906001600160a01b038416906321e37801906123ff90859060040161330f565b602060405180830381865afa15801561241c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061244091906136a7565b9050806001036108575760405162461bcd60e51b815260206004820152601c60248201527f426f72726f7765724f70733a2054726f7665206973206163746976650000000060448201526064016108b3565b6000836001600160a01b0316635dba4c4a6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156124cf57600080fd5b505af11580156124e3573d6000803e3d6000fd5b5050604051630631203b60e41b815260048101869052600092508291506001600160a01b0387169063631203b0906024016040805180830381865afa158015612530573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125549190613816565b60048054604051634fbd6daf60e11b81529182018390529294509092506001600160a01b0390911690639f7adb5e90602401600060405180830381600087803b1580156125a057600080fd5b505af11580156125b4573d6000803e3d6000fd5b505050506125c3828686612f09565b600954604051631fa773cd60e31b815260048101879052602481018490526001600160a01b039091169063fd3b9e6890604401600060405180830381600087803b15801561261057600080fd5b505af1158015612624573d6000803e3d6000fd5b509398975050505050505050565b6a295be96e6406697200000081101561157a5760405162461bcd60e51b815260206004820152603a60248201527f426f72726f7765724f70733a2054726f76652773206e65742064656274206d7560448201527f73742062652067726561746572207468616e206d696e696d756d00000000000060648201526084016108b3565b600081156126d9576126d282611ad18568056bc75e2d63100000612924565b905061083e565b5060001961083e565b671bc16d674ec8000081101561157a5760405162461bcd60e51b815260206004820152603760248201527f426f72726f7765724f70733a204f7065726174696f6e206d757374206c65617660448201527632903a3937bb32903bb4ba341024a1a9101f1e9021a1a960491b60648201526084016108b3565b6714d1120d7b16000081101561157a5760405162461bcd60e51b815260206004820152604960248201527f426f72726f7765724f70733a20416e206f7065726174696f6e2074686174207760448201527f6f756c6420726573756c7420696e20494352203c204d4352206973206e6f74206064820152681c195c9b5a5d1d195960ba1b608482015260a4016108b3565b600754612802906001600160a01b0316338484612f73565b60005460405162f9332d60e61b8152600481018390526001600160a01b0390911690633e4ccb4090602401600060405180830381600087803b15801561284757600080fd5b505af115801561285b573d6000803e3d6000fd5b505050505050565b60405163262b890160e01b8152600481018290526001600160a01b0386169063262b890190602401600060405180830381600087803b1580156128a557600080fd5b505af11580156128b9573d6000803e3d6000fd5b50506040516340c10f1960e01b81526001600160a01b03871692506340c10f1991506128eb9086908690600401613704565b600060405180830381600087803b15801561290557600080fd5b505af1158015612919573d6000803e3d6000fd5b505050505050505050565b60006117f082846137ff565b60006117f082846137dd565b6000811161157a5760405162461bcd60e51b815260206004820152603760248201527f426f72726f7765724f70733a204465627420696e637265617365207265717569604482015276726573206e6f6e2d7a65726f20646562744368616e676560481b60648201526084016108b3565b8015806129b7575081155b61229b5760405162461bcd60e51b815260206004820152603060248201527f426f72726f7765724f7065726174696f6e733a2043616e6e6f7420776974686460448201526f1c985dc8185b99081859190818dbdb1b60821b60648201526084016108b3565b81151580612a2957508215155b80612a3357508015155b6108575760405162461bcd60e51b815260206004820152604660248201527f426f72726f7765724f70733a205468657265206d75737420626520656974686560448201527f72206120636f6c6c61746572616c206368616e6765206f7220612064656274206064820152656368616e676560d01b608482015260a4016108b3565b6000808315612ac857508290506001612acc565b8291505b9250929050565b6000806000612ae68a8a8a8a8a8a612fcd565b915091506000612af7838387611aab565b9b9a5050505050505050505050565b8315612b3f57612b158361300b565b8115612b3a57612b288160e001516126e2565b612b3a8160e001518260c0015161307f565b6108d7565b612b4c8160e0015161275a565b612b698160200151826060015183604001518585600001516118e6565b61010082018190526108d79061195b565b600061083e8269152d02c7e14af68000006117e4565b612ba48269152d02c7e14af68000006117e4565b81111561229b5760405162461bcd60e51b815260206004820152604360248201527f426f72726f7765724f70733a20416d6f756e7420726570616964206d7573742060448201527f6e6f74206265206c6172676572207468616e207468652054726f76652773206460648201526219589d60ea1b608482015260a4016108b3565b600080600085612ca55760405163d3d6f84360e01b81526001600160a01b038a169063d3d6f84390612c5d908b908b90600401613704565b6020604051808303816000875af1158015612c7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ca091906136a7565b612d16565b6040516372423c1760e01b81526001600160a01b038a16906372423c1790612cd3908b908b90600401613704565b6020604051808303816000875af1158015612cf2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d1691906136a7565b9050600084612d9557604051630930874960e11b81526001600160a01b038b16906312610e9290612d4d908c908a90600401613704565b6020604051808303816000875af1158015612d6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d9091906136a7565b612e06565b604051639976cf4560e01b81526001600160a01b038b1690639976cf4590612dc3908c908a90600401613704565b6020604051808303816000875af1158015612de2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e0691906136a7565b919a91995090975050505050505050565b6000806000612e2a898989898989612fcd565b915091506000612e3a83836126b3565b9a9950505050505050505050565b8115612e6057612e5b8888888685612863565b612e6c565b612e6c888888866119eb565b8315612e8157612e7c88866127ea565b611aa1565b6040516316daab2160e01b81526001600160a01b038916906316daab2190612eaf9089908990600401613704565b600060405180830381600087803b158015612ec957600080fd5b505af11580156120ae573d6000803e3d6000fd5b600080612ee8610ded565b90506000612ef461094f565b9050612f01828286611aab565b949350505050565b6000612f2183611ad186670de0b6b3a7640000612924565b9050818111156108d75760405162461bcd60e51b815260206004820152601d60248201527f4665652065786365656465642070726f7669646564206d6178696d756d00000060448201526064016108b3565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b1790526108d79085906130f5565b600080878786612fe657612fe18a896117e4565b612ff0565b612ff08a896121ea565b91508461300157612d9089876117e4565b612e0689876121ea565b801561157a5760405162461bcd60e51b815260206004820152603e60248201527f426f72726f7765724f70733a20436f6c6c61746572616c20776974686472617760448201527f616c206e6f74207065726d6974746564205265636f76657279204d6f6465000060648201526084016108b3565b8082101561229b5760405162461bcd60e51b815260206004820152603e60248201527f426f72726f7765724f70733a2043616e6e6f7420646563726561736520796f7560448201527f722054726f766527732049435220696e205265636f76657279204d6f6465000060648201526084016108b3565b600061314a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166131ca9092919063ffffffff16565b905080516000148061316b57508080602001905181019061316b919061383a565b6108575760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016108b3565b6060612f01848460008585600080866001600160a01b031685876040516131f19190613857565b60006040518083038185875af1925050503d806000811461322e576040519150601f19603f3d011682016040523d82523d6000602084013e613233565b606091505b50915091506132448783838761324f565b979650505050505050565b606083156132be5782516000036132b7576001600160a01b0385163b6132b75760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016108b3565b5081612f01565b612f0183838151156132d35781518083602001fd5b8060405162461bcd60e51b81526004016108b3919061360d565b6000806040838503121561330057600080fd5b50508035926020909101359150565b6001600160a01b0391909116815260200190565b6001600160a01b038116811461157a57600080fd5b803561334381613323565b919050565b60008060006060848603121561335d57600080fd5b83359250602084013561336f81613323565b9150604084013561337f81613323565b809150509250925092565b60006020828403121561339c57600080fd5b5035919050565b801515811461157a57600080fd5b600080600080600080600060e0888a0312156133cc57600080fd5b8735965060208801359550604088013594506060880135935060808801356133f3816133a3565b925060a088013561340381613323565b915060c088013561341381613323565b8091505092959891949750929550565b6000806000806080858703121561343957600080fd5b843561344481613323565b9350602085013561345481613323565b9250604085013561346481613323565b9396929550929360600135925050565b60008060008060008060008060008060006101608c8e03121561349657600080fd5b8b356134a181613323565b9a5060208c01356134b181613323565b995060408c01356134c181613323565b985060608c01356134d181613323565b975060808c01356134e181613323565b965060a08c01356134f181613323565b955060c08c013561350181613323565b945060e08c013561351181613323565b93506101008c013561352281613323565b92506135316101208d01613338565b91506135406101408d01613338565b90509295989b509295989b9093969950565b60008060006060848603121561356757600080fd5b833561357281613323565b9250602084013561358281613323565b929592945050506040919091013590565b600080600080600060a086880312156135ab57600080fd5b85359450602086013593506040860135925060608601356135cb81613323565b915060808601356135db81613323565b809150509295509295909350565b60005b838110156136045781810151838201526020016135ec565b50506000910152565b602081526000825180602084015261362c8160408501602087016135e9565b601f01601f19169190910160400192915050565b6000806000806080858703121561365657600080fd5b8435935060208501359250604085013561366f81613323565b9150606085013561367f81613323565b939692955090935050565b60006020828403121561369c57600080fd5b81356117f081613323565b6000602082840312156136b957600080fd5b5051919050565b600381106136de57634e487b7160e01b600052602160045260246000fd5b9052565b84815260208101849052604081018390526080810161195260608301846136c0565b6001600160a01b03929092168252602082015260400190565b60208082526023908201527f426f72726f776572204f7065726174696f6e733a20496e76616c696420616d6f6040820152621d5b9d60ea1b606082015260800190565b634e487b7160e01b600052600160045260246000fd5b6001600160a01b03948516815260208101939093529083166040830152909116606082015260800190565b634e487b7160e01b600052601160045260246000fd5b8082018082111561083e5761083e6137a1565b8181038181111561083e5761083e6137a1565b6000826137fa57634e487b7160e01b600052601260045260246000fd5b500490565b808202811582820484141761083e5761083e6137a1565b6000806040838503121561382957600080fd5b505080516020909101519092909150565b60006020828403121561384c57600080fd5b81516117f0816133a3565b600082516138698184602087016135e9565b919091019291505056fec3770d654ed33aeea6bf11ac8ef05d02a6a04ed4686dd2f624d853bbec43cc8ba2646970667358221220eecbb718868bea88c1c28da2c674f5ba4bb6bde155282ba0bdcaffb17f254c7c64736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101b05760003560e01c8063794e5724116100ef578063a201415211610092578063a20141521461034e578063a20baee6146102b0578063a3f4df7e1461035f578063ae9187541461039d578063b8a106da146103b0578063c42dab99146103c3578063f2fde38b146103d6578063f92d3433146103e957600080fd5b8063794e5724146102d2578063795d26c3146102e15780637985c5e4146102e95780637e88d408146102fc5780637f7dde4a1461030f578063887105d3146103225780638da5cb5b1461032a5780638f09162b1461033b57600080fd5b80635530273c116101575780635530273c146102585780635733d58f1461026b5780635da8b1c31461027a57806360a8b10f1461028d5780636f0b0c1c146102a0578063715018a6146102a857806372fe25aa146102b0578063741bef1a146102bf57600080fd5b80630e704d50146101b557806317138bdb146101bf5780631bf43555146101e55780633cc74225146101f75780633d83908a1461021757806347a6e7131461022a5780634870dd9a1461023d5780634ff8144314610245575b600080fd5b6101bd6103f1565b005b6101d26101cd3660046132ed565b6107b3565b6040519081526020015b60405180910390f35b6101d26a295be96e6406697200000081565b60015461020a906001600160a01b031681565b6040516101dc919061330f565b60045461020a906001600160a01b031681565b6101bd610238366004613348565b610844565b6101d260c881565b6101d261025336600461338a565b61085c565b6101bd610266366004613348565b610867565b6101d2671bc16d674ec8000081565b6101bd6102883660046133b1565b61087a565b6101bd61029b366004613423565b610893565b6101bd6108dd565b6101bd61093b565b6101d2670de0b6b3a764000081565b60025461020a906001600160a01b031681565b6101d26714d1120d7b16000081565b6101d261094f565b6101bd6102f7366004613474565b610a4b565b6101bd61030a366004613552565b610dba565b60005461020a906001600160a01b031681565b6101d2610ded565b6003546001600160a01b031661020a565b6101bd610349366004613593565b610eb2565b6101d269152d02c7e14af680000081565b61039060405180604001604052806012815260200171426f72726f7765724f7065726174696f6e7360701b81525081565b6040516101dc919061360d565b600b5461020a906001600160a01b031681565b6101bd6103be366004613640565b6114f2565b60095461020a906001600160a01b031681565b6101bd6103e436600461368a565b611504565b6101d261157d565b6103fa3361159f565b600454600054600a546001600160a01b0392831692918216911661041e8333611693565b60025460408051630fdb11cf60e01b815290516000926001600160a01b031691630fdb11cf916004808301926020929190829003018187875af1158015610469573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061048d91906136a7565b90506104988161176c565b604051630b07655760e01b81526001600160a01b03851690630b076557906104c490339060040161330f565b600060405180830381600087803b1580156104de57600080fd5b505af11580156104f2573d6000803e3d6000fd5b50506040516309019aaf60e31b8152600092506001600160a01b038716915063480cd5789061052590339060040161330f565b602060405180830381865afa158015610542573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056691906136a7565b90506000856001600160a01b031663d66a2553336040518263ffffffff1660e01b8152600401610596919061330f565b602060405180830381865afa1580156105b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d791906136a7565b90506105f784336105f28469152d02c7e14af68000006117e4565b6117f7565b6000610608836000846000886118e6565b90506106138161195b565b604051631fc5750960e31b81526001600160a01b0388169063fe2ba8489061063f90339060040161330f565b600060405180830381600087803b15801561065957600080fd5b505af115801561066d573d6000803e3d6000fd5b50506040516365e89c5760e11b81526001600160a01b038a16925063cbd138ae915061069d90339060040161330f565b600060405180830381600087803b1580156106b757600080fd5b505af11580156106cb573d6000803e3d6000fd5b50505050336001600160a01b0316600080516020613874833981519152600080600060016040516106ff94939291906136e2565b60405180910390a26107268686336107218669152d02c7e14af68000006117e4565b6119eb565b60065461074a90879087906001600160a01b031669152d02c7e14af68000006119eb565b6040516316daab2160e01b81526001600160a01b038716906316daab21906107789033908790600401613704565b600060405180830381600087803b15801561079257600080fd5b505af11580156107a6573d6000803e3d6000fd5b5050505050505050505050565b600080600260009054906101000a90046001600160a01b03166001600160a01b0316630490be836040518163ffffffff1660e01b8152600401602060405180830381865afa158015610809573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082d91906136a7565b905061083a848483611aab565b9150505b92915050565b6108573360008086600087876000611af1565b505050565b600061083e826120bc565b6108573384600080600087876000611af1565b61088a338787878787878e611af1565b50505050505050565b600081116108bc5760405162461bcd60e51b81526004016108b39061371d565b60405180910390fd5b6108c46120d2565b6108d78460008360008088886000611af1565b50505050565b60085460405163b32beb5b60e01b81526001600160a01b039091169063b32beb5b9061090d90339060040161330f565b600060405180830381600087803b15801561092757600080fd5b505af11580156108d7573d6000803e3d6000fd5b61094361213e565b61094d6000612198565b565b60008054604080516315b3137b60e21b8152905183926001600160a01b0316916356cc4dec9160048083019260209291908290030181865afa158015610999573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109bd91906136a7565b90506000600160009054906101000a90046001600160a01b03166001600160a01b03166356cc4dec6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3891906136a7565b9050610a4482826121ea565b9250505090565b610a5361213e565b610a5c8b6121f6565b610a658a6121f6565b610a6e896121f6565b610a77886121f6565b610a80876121f6565b610a89866121f6565b610a92856121f6565b610a9b846121f6565b610aa4836121f6565b610aad826121f6565b610ab6816121f6565b600480546001600160a01b03199081166001600160a01b038e8116919091179092556000805482168d84161790556001805482168c84161790556005805482168b84161790556006805482168a8416179055600880548216898416179055600280548216888416179055600b80548216878416179055600a80548216868416179055600780548216858416179055600980549091169183169190911790556040517f143219c9e69b09e07e095fcc889b43d8f46ca892bba65f08dc3a0050869a567890610b84908d9061330f565b60405180910390a17f78f058b189175430c48dc02699e3a0031ea4ff781536dc2fab847de4babdd8828a604051610bbb919061330f565b60405180910390a17f5ee0cae2f063ed938bb55046f6a932fb6ae792bf43624806bb90abe68a50be9b89604051610bf2919061330f565b60405180910390a17f82966d27eea39b038ee0fa30cd16532bb24f6e65d31cb58fb227aa5766cdcc7f88604051610c29919061330f565b60405180910390a17fcfb07d791fcafc032b35837b50eb84b74df518cf4cc287e8084f47630fa70fa087604051610c60919061330f565b60405180910390a17fe67f36a6e961157d6eff83b91f3af5a62131ceb6f04954ef74f51c1c05e7f88d86604051610c97919061330f565b60405180910390a17f8c537274438aa850a330284665d81a85dd38267d09e4050d416bfc94142db26485604051610cce919061330f565b60405180910390a17f65f4cf077bc01e4742eb5ad98326f6e95b63548ea24b17f8d5e823111fe7880084604051610d05919061330f565b60405180910390a17f7faa560f2889840c377209fbc4b6b92d05f43f1fc60bf336ab546fd60c0051ad83604051610d3c919061330f565b60405180910390a17fa10b18a97e87c5b49c90aaeba95303db140aa131ee9cbdb946ffce5b50ccf16482604051610d73919061330f565b60405180910390a17f6877e00d9059f8716bd795b5d4c2c89a4bc3cef71ba3dd99b168ac9cc1f2a6c281604051610daa919061330f565b60405180910390a16107a661093b565b60008111610dda5760405162461bcd60e51b81526004016108b39061371d565b6108573360008360008088886000611af1565b6000805460408051630ee2ec9760e41b8152905183926001600160a01b03169163ee2ec9709160048083019260209291908290030181865afa158015610e37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e5b91906136a7565b90506000600160009054906101000a90046001600160a01b03166001600160a01b031663ee2ec9706040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a14573d6000803e3d6000fd5b610ebb3361159f565b6040805160608082018352600480546001600160a01b039081168452600080548216602080870191909152600a548316868801528651610100810188528281528082018390528088018390529485018290526080850182905260a0850182905260c0850182905260e085018290526002548751630fdb11cf60e01b8152975196979596931694630fdb11cf948181019492939183900301908290875af1158015610f69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8d91906136a7565b808252600090610f9c9061229f565b9050610fa888826122bc565b8251610fb490336123d0565b604082018790528251610fc890888a612492565b60208301526040820151610fdb90612632565b610fe882604001516120bc565b60608301819052610ffb57610ffb613760565b61100e8683606001518460000151611aab565b608083015260608201516110239087906126b3565b60a083015280156110405761103b82608001516126e2565b611073565b61104d826080015161275a565b60006110668760018560600151600187600001516118e6565b90506110718161195b565b505b8251604051635d6b480f60e01b81526001600160a01b0390911690635d6b480f906110a5903390600190600401613704565b600060405180830381600087803b1580156110bf57600080fd5b505af11580156110d3573d6000803e3d6000fd5b505084516040516372423c1760e01b81526001600160a01b0390911692506372423c1791506111089033908a90600401613704565b6020604051808303816000875af1158015611127573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114b91906136a7565b5082516060830151604051639976cf4560e01b81526001600160a01b0390921691639976cf459161118191339190600401613704565b6020604051808303816000875af11580156111a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c491906136a7565b5082516040516382fe3eb960e01b81526001600160a01b03909116906382fe3eb9906111f490339060040161330f565b600060405180830381600087803b15801561120e57600080fd5b505af1158015611222573d6000803e3d6000fd5b50508451604051630c7940bd60e11b81526001600160a01b0390911692506318f2817a915061125590339060040161330f565b6020604051808303816000875af1158015611274573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061129891906136a7565b60c0830152600b5460a08301516040516346f7cf8760e01b81526001600160a01b03909216916346f7cf87916112d7913391908a908a90600401613776565b600060405180830381600087803b1580156112f157600080fd5b505af1158015611305573d6000803e3d6000fd5b505084516040516315d549f160e01b81526001600160a01b0390911692506315d549f1915061133890339060040161330f565b6020604051808303816000875af1158015611357573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061137b91906136a7565b60e0830181905260405190815233907f59cfd0cd754bc5748b6770e94a4ffa5f678d885cb899dcfadc5734edb97c67ab9060200160405180910390a26113c58360200151876127ea565b69152d02c7e14af680000082602001516113df91906137b7565b87116114245760405162461bcd60e51b815260206004820152601460248201527321279d102332b29032bc31b2b2b2399033b0b4b760611b60448201526064016108b3565b61144c836020015184604001513385602001518b61144291906137ca565b8660400151612863565b602083015160408401516006546114799291906001600160a01b031669152d02c7e14af680000080612863565b606082015160c08301516040513392600080516020613874833981519152926114a7928b91906000906136e2565b60405180910390a260208083015160405190815233917f909ac017b31fd41edf1bf9a7ed7d4a7af4343fe034023db2d0220a77ba25e7ee910160405180910390a25050505050505050565b6108d73360008086600187878b611af1565b61150c61213e565b6001600160a01b0381166115715760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016108b3565b61157a81612198565b50565b6115916103e8670de0b6b3a76400006137dd565b61159c9060056137ff565b81565b600480546040516320ca6cb360e11b815243926001600160a01b0390921691634194d966916115d09186910161330f565b602060405180830381865afa1580156115ed573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061161191906136a7565b0361162f576040516360a67ce360e01b815260040160405180910390fd5b6004805460405163acef5b8d60e01b81526001600160a01b039091169163acef5b8d9161165e9185910161330f565b600060405180830381600087803b15801561167857600080fd5b505af115801561168c573d6000803e3d6000fd5b5050505050565b6040516321e3780160e01b81526000906001600160a01b038416906321e37801906116c290859060040161330f565b602060405180830381865afa1580156116df573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061170391906136a7565b9050806001146108575760405162461bcd60e51b815260206004820152602e60248201527f426f72726f7765724f70733a2054726f766520646f6573206e6f74206578697360448201526d1d081bdc881a5cc818db1bdcd95960921b60648201526084016108b3565b6117758161229f565b1561157a5760405162461bcd60e51b815260206004820152603960248201527f426f72726f7765724f70733a204f7065726174696f6e206e6f74207065726d696044820152787474656420647572696e67205265636f76657279204d6f646560381b60648201526084016108b3565b60006117f082846137ca565b9392505050565b6040516370a0823160e01b815281906001600160a01b038516906370a082319061182590869060040161330f565b602060405180830381865afa158015611842573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061186691906136a7565b10156108575760405162461bcd60e51b815260206004820152604360248201527f426f72726f7765724f70733a2043616c6c657220646f65736e7420686176652060448201527f656e6f75676820426173654665654c4d4120746f206d616b652072657061796d606482015262195b9d60ea1b608482015260a4016108b3565b6000806118f1610ded565b905060006118fd61094f565b9050866119135761190e82896117e4565b61191d565b61191d82896121ea565b9150846119335761192e81876117e4565b61193d565b61193d81876121ea565b9050600061194c838387611aab565b93505050505b95945050505050565b671bc16d674ec8000081101561157a5760405162461bcd60e51b815260206004820152604960248201527f426f72726f7765724f70733a20416e206f7065726174696f6e2074686174207760448201527f6f756c6420726573756c7420696e20544352203c20434352206973206e6f74206064820152681c195c9b5a5d1d195960ba1b608482015260a4016108b3565b604051633b4009ff60e11b8152600481018290526001600160a01b0385169063768013fe90602401600060405180830381600087803b158015611a2d57600080fd5b505af1158015611a41573d6000803e3d6000fd5b5050604051632770a7eb60e21b81526001600160a01b0386169250639dc29fac9150611a739085908590600401613704565b600060405180830381600087803b158015611a8d57600080fd5b505af1158015611aa1573d6000803e3d6000fd5b5050505050505050565b60008215611ae6576000611add83611ad1670de0b6b3a7640000611ad788838b84612924565b90612930565b90612924565b91506117f09050565b506000199392505050565b611afa3361159f565b6040805160608082018352600480546001600160a01b039081168452600080548216602080870191909152600a5483168688015286516101a0810188528281528082018390528088018390529485018290526080850182905260a0850182905260c0850182905260e08501829052610100850182905261012085018290526101408501829052610160850182905261018085018290526002548751630fdb11cf60e01b8152975196979596931694630fdb11cf948181019492939183900301908290875af1158015611bd0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bf491906136a7565b808252600090611c039061229f565b90508615611c1e57611c1584826122bc565b611c1e8861293c565b611c288a8a6129ac565b611c338a8a8a612a1c565b8251611c3f908c611693565b336001600160a01b038c161480611c7557506005546001600160a01b031633148015611c6b5750600089115b8015611c75575087155b611c8157611c81613760565b8251604051630b07655760e01b81526001600160a01b0390911690630b07655790611cb0908e9060040161330f565b600060405180830381600087803b158015611cca57600080fd5b505af1158015611cde573d6000803e3d6000fd5b50505050611cec898b612ab4565b151560608401526020830152604082018890528615611d19578251611d12908986612492565b6101208301525b825160405163d66a255360e01b81526001600160a01b039091169063d66a255390611d48908e9060040161330f565b602060405180830381865afa158015611d65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d8991906136a7565b608083015282516040516309019aaf60e31b81526001600160a01b039091169063480cd57890611dbd908e9060040161330f565b602060405180830381865afa158015611dda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dfe91906136a7565b60a0830181905260808301518351611e17929190611aab565b8260c0018181525050611e478260a0015183608001518460200151856060015186604001518c8860000151612ad3565b60e083015260a08201518a1115611e6057611e60613760565b611e6c818b8985612b06565b86158015611e7a5750600088115b15611ec757611ea2611e9d8360400151611e978560800151612b7a565b906117e4565b612632565b611eb482608001518360400151612b90565b611ec783604001518c84604001516117f7565b611ee583600001518c8460200151856060015186604001518c612c25565b6101408401526101608301528251604051630c7940bd60e11b81526001600160a01b03909116906318f2817a90611f20908e9060040161330f565b6020604051808303816000875af1158015611f3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f6391906136a7565b826101800181815250506000611f918360a0015184608001518560200151866060015187604001518d612e17565b600b5460405163015f109360e51b81529192506001600160a01b031690632be2126090611fc8908f9085908c908c90600401613776565b600060405180830381600087803b158015611fe257600080fd5b505af1158015611ff6573d6000803e3d6000fd5b505050508b6001600160a01b0316600080516020613874833981519152846101400151856101600151866101800151600260405161203794939291906136e2565b60405180910390a261012083015160405190815233907f909ac017b31fd41edf1bf9a7ed7d4a7af4343fe034023db2d0220a77ba25e7ee9060200160405180910390a26120ae8460200151856040015133866020015187606001518861012001518f6120a391906137ca565b8e8a60400151612e48565b505050505050505050505050565b600061083e8269152d02c7e14af68000006121ea565b6005546001600160a01b0316331461094d5760405162461bcd60e51b815260206004820152602960248201527f426f72726f7765724f70733a2043616c6c6572206973206e6f742053746162696044820152681b1a5d1e48141bdbdb60ba1b60648201526084016108b3565b6003546001600160a01b0316331461094d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016108b3565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006117f082846137b7565b6001600160a01b03811661224c5760405162461bcd60e51b815260206004820152601e60248201527f4163636f756e742063616e6e6f74206265207a65726f2061646472657373000060448201526064016108b3565b803b8061229b5760405162461bcd60e51b815260206004820181905260248201527f4163636f756e7420636f64652073697a652063616e6e6f74206265207a65726f60448201526064016108b3565b5050565b6000806122ab83612edd565b671bc16d674ec80000119392505050565b801561233557670de0b6b3a764000082111561229b5760405162461bcd60e51b815260206004820152603260248201527f4d6178206665652070657263656e74616765206d757374206c657373207468616044820152716e206f7220657175616c20746f203130302560701b60648201526084016108b3565b6123496103e8670de0b6b3a76400006137dd565b6123549060056137ff565b821015801561236b5750670de0b6b3a76400008211155b61229b5760405162461bcd60e51b815260206004820152603060248201527f4d6178206665652070657263656e74616765206d75737420626520626574776560448201526f656e20302e352520616e64203130302560801b60648201526084016108b3565b6040516321e3780160e01b81526000906001600160a01b038416906321e37801906123ff90859060040161330f565b602060405180830381865afa15801561241c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061244091906136a7565b9050806001036108575760405162461bcd60e51b815260206004820152601c60248201527f426f72726f7765724f70733a2054726f7665206973206163746976650000000060448201526064016108b3565b6000836001600160a01b0316635dba4c4a6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156124cf57600080fd5b505af11580156124e3573d6000803e3d6000fd5b5050604051630631203b60e41b815260048101869052600092508291506001600160a01b0387169063631203b0906024016040805180830381865afa158015612530573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125549190613816565b60048054604051634fbd6daf60e11b81529182018390529294509092506001600160a01b0390911690639f7adb5e90602401600060405180830381600087803b1580156125a057600080fd5b505af11580156125b4573d6000803e3d6000fd5b505050506125c3828686612f09565b600954604051631fa773cd60e31b815260048101879052602481018490526001600160a01b039091169063fd3b9e6890604401600060405180830381600087803b15801561261057600080fd5b505af1158015612624573d6000803e3d6000fd5b509398975050505050505050565b6a295be96e6406697200000081101561157a5760405162461bcd60e51b815260206004820152603a60248201527f426f72726f7765724f70733a2054726f76652773206e65742064656274206d7560448201527f73742062652067726561746572207468616e206d696e696d756d00000000000060648201526084016108b3565b600081156126d9576126d282611ad18568056bc75e2d63100000612924565b905061083e565b5060001961083e565b671bc16d674ec8000081101561157a5760405162461bcd60e51b815260206004820152603760248201527f426f72726f7765724f70733a204f7065726174696f6e206d757374206c65617660448201527632903a3937bb32903bb4ba341024a1a9101f1e9021a1a960491b60648201526084016108b3565b6714d1120d7b16000081101561157a5760405162461bcd60e51b815260206004820152604960248201527f426f72726f7765724f70733a20416e206f7065726174696f6e2074686174207760448201527f6f756c6420726573756c7420696e20494352203c204d4352206973206e6f74206064820152681c195c9b5a5d1d195960ba1b608482015260a4016108b3565b600754612802906001600160a01b0316338484612f73565b60005460405162f9332d60e61b8152600481018390526001600160a01b0390911690633e4ccb4090602401600060405180830381600087803b15801561284757600080fd5b505af115801561285b573d6000803e3d6000fd5b505050505050565b60405163262b890160e01b8152600481018290526001600160a01b0386169063262b890190602401600060405180830381600087803b1580156128a557600080fd5b505af11580156128b9573d6000803e3d6000fd5b50506040516340c10f1960e01b81526001600160a01b03871692506340c10f1991506128eb9086908690600401613704565b600060405180830381600087803b15801561290557600080fd5b505af1158015612919573d6000803e3d6000fd5b505050505050505050565b60006117f082846137ff565b60006117f082846137dd565b6000811161157a5760405162461bcd60e51b815260206004820152603760248201527f426f72726f7765724f70733a204465627420696e637265617365207265717569604482015276726573206e6f6e2d7a65726f20646562744368616e676560481b60648201526084016108b3565b8015806129b7575081155b61229b5760405162461bcd60e51b815260206004820152603060248201527f426f72726f7765724f7065726174696f6e733a2043616e6e6f7420776974686460448201526f1c985dc8185b99081859190818dbdb1b60821b60648201526084016108b3565b81151580612a2957508215155b80612a3357508015155b6108575760405162461bcd60e51b815260206004820152604660248201527f426f72726f7765724f70733a205468657265206d75737420626520656974686560448201527f72206120636f6c6c61746572616c206368616e6765206f7220612064656274206064820152656368616e676560d01b608482015260a4016108b3565b6000808315612ac857508290506001612acc565b8291505b9250929050565b6000806000612ae68a8a8a8a8a8a612fcd565b915091506000612af7838387611aab565b9b9a5050505050505050505050565b8315612b3f57612b158361300b565b8115612b3a57612b288160e001516126e2565b612b3a8160e001518260c0015161307f565b6108d7565b612b4c8160e0015161275a565b612b698160200151826060015183604001518585600001516118e6565b61010082018190526108d79061195b565b600061083e8269152d02c7e14af68000006117e4565b612ba48269152d02c7e14af68000006117e4565b81111561229b5760405162461bcd60e51b815260206004820152604360248201527f426f72726f7765724f70733a20416d6f756e7420726570616964206d7573742060448201527f6e6f74206265206c6172676572207468616e207468652054726f76652773206460648201526219589d60ea1b608482015260a4016108b3565b600080600085612ca55760405163d3d6f84360e01b81526001600160a01b038a169063d3d6f84390612c5d908b908b90600401613704565b6020604051808303816000875af1158015612c7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ca091906136a7565b612d16565b6040516372423c1760e01b81526001600160a01b038a16906372423c1790612cd3908b908b90600401613704565b6020604051808303816000875af1158015612cf2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d1691906136a7565b9050600084612d9557604051630930874960e11b81526001600160a01b038b16906312610e9290612d4d908c908a90600401613704565b6020604051808303816000875af1158015612d6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d9091906136a7565b612e06565b604051639976cf4560e01b81526001600160a01b038b1690639976cf4590612dc3908c908a90600401613704565b6020604051808303816000875af1158015612de2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e0691906136a7565b919a91995090975050505050505050565b6000806000612e2a898989898989612fcd565b915091506000612e3a83836126b3565b9a9950505050505050505050565b8115612e6057612e5b8888888685612863565b612e6c565b612e6c888888866119eb565b8315612e8157612e7c88866127ea565b611aa1565b6040516316daab2160e01b81526001600160a01b038916906316daab2190612eaf9089908990600401613704565b600060405180830381600087803b158015612ec957600080fd5b505af11580156120ae573d6000803e3d6000fd5b600080612ee8610ded565b90506000612ef461094f565b9050612f01828286611aab565b949350505050565b6000612f2183611ad186670de0b6b3a7640000612924565b9050818111156108d75760405162461bcd60e51b815260206004820152601d60248201527f4665652065786365656465642070726f7669646564206d6178696d756d00000060448201526064016108b3565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b1790526108d79085906130f5565b600080878786612fe657612fe18a896117e4565b612ff0565b612ff08a896121ea565b91508461300157612d9089876117e4565b612e0689876121ea565b801561157a5760405162461bcd60e51b815260206004820152603e60248201527f426f72726f7765724f70733a20436f6c6c61746572616c20776974686472617760448201527f616c206e6f74207065726d6974746564205265636f76657279204d6f6465000060648201526084016108b3565b8082101561229b5760405162461bcd60e51b815260206004820152603e60248201527f426f72726f7765724f70733a2043616e6e6f7420646563726561736520796f7560448201527f722054726f766527732049435220696e205265636f76657279204d6f6465000060648201526084016108b3565b600061314a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166131ca9092919063ffffffff16565b905080516000148061316b57508080602001905181019061316b919061383a565b6108575760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016108b3565b6060612f01848460008585600080866001600160a01b031685876040516131f19190613857565b60006040518083038185875af1925050503d806000811461322e576040519150601f19603f3d011682016040523d82523d6000602084013e613233565b606091505b50915091506132448783838761324f565b979650505050505050565b606083156132be5782516000036132b7576001600160a01b0385163b6132b75760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016108b3565b5081612f01565b612f0183838151156132d35781518083602001fd5b8060405162461bcd60e51b81526004016108b3919061360d565b6000806040838503121561330057600080fd5b50508035926020909101359150565b6001600160a01b0391909116815260200190565b6001600160a01b038116811461157a57600080fd5b803561334381613323565b919050565b60008060006060848603121561335d57600080fd5b83359250602084013561336f81613323565b9150604084013561337f81613323565b809150509250925092565b60006020828403121561339c57600080fd5b5035919050565b801515811461157a57600080fd5b600080600080600080600060e0888a0312156133cc57600080fd5b8735965060208801359550604088013594506060880135935060808801356133f3816133a3565b925060a088013561340381613323565b915060c088013561341381613323565b8091505092959891949750929550565b6000806000806080858703121561343957600080fd5b843561344481613323565b9350602085013561345481613323565b9250604085013561346481613323565b9396929550929360600135925050565b60008060008060008060008060008060006101608c8e03121561349657600080fd5b8b356134a181613323565b9a5060208c01356134b181613323565b995060408c01356134c181613323565b985060608c01356134d181613323565b975060808c01356134e181613323565b965060a08c01356134f181613323565b955060c08c013561350181613323565b945060e08c013561351181613323565b93506101008c013561352281613323565b92506135316101208d01613338565b91506135406101408d01613338565b90509295989b509295989b9093969950565b60008060006060848603121561356757600080fd5b833561357281613323565b9250602084013561358281613323565b929592945050506040919091013590565b600080600080600060a086880312156135ab57600080fd5b85359450602086013593506040860135925060608601356135cb81613323565b915060808601356135db81613323565b809150509295509295909350565b60005b838110156136045781810151838201526020016135ec565b50506000910152565b602081526000825180602084015261362c8160408501602087016135e9565b601f01601f19169190910160400192915050565b6000806000806080858703121561365657600080fd5b8435935060208501359250604085013561366f81613323565b9150606085013561367f81613323565b939692955090935050565b60006020828403121561369c57600080fd5b81356117f081613323565b6000602082840312156136b957600080fd5b5051919050565b600381106136de57634e487b7160e01b600052602160045260246000fd5b9052565b84815260208101849052604081018390526080810161195260608301846136c0565b6001600160a01b03929092168252602082015260400190565b60208082526023908201527f426f72726f776572204f7065726174696f6e733a20496e76616c696420616d6f6040820152621d5b9d60ea1b606082015260800190565b634e487b7160e01b600052600160045260246000fd5b6001600160a01b03948516815260208101939093529083166040830152909116606082015260800190565b634e487b7160e01b600052601160045260246000fd5b8082018082111561083e5761083e6137a1565b8181038181111561083e5761083e6137a1565b6000826137fa57634e487b7160e01b600052601260045260246000fd5b500490565b808202811582820484141761083e5761083e6137a1565b6000806040838503121561382957600080fd5b505080516020909101519092909150565b60006020828403121561384c57600080fd5b81516117f0816133a3565b600082516138698184602087016135e9565b919091019291505056fec3770d654ed33aeea6bf11ac8ef05d02a6a04ed4686dd2f624d853bbec43cc8ba2646970667358221220eecbb718868bea88c1c28da2c674f5ba4bb6bde155282ba0bdcaffb17f254c7c64736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addColl(address,address,uint256)": {
        "notice": "HEDGEHOG UPDATES: ERC20 is used as a collateral, therefore function may not rely on msg.value anymore now passing a new param _collIncrease in _adjustTrove function - in this particular case it is a passed param _amount checking if _amount is greater then 0 Function is no longer payable"
      },
      "adjustTrove(uint256,uint256,uint256,uint256,bool,address,address)": {
        "notice": "HEDGEHOG UPDATES: ERC20 is used as a collateral, therefore function may not rely on msg.value anymore now passing a new param _collIncrease Function is no longer payable"
      },
      "claimCollateral()": {
        "notice": "Claim remaining collateral from a redemption or from a liquidation with ICR > MCR in Recovery Mode"
      },
      "computeUnreliableCR(uint256,uint256)": {
        "notice": "HEDGEHOG UPDATES: New view method to help with getting the data on frontends"
      },
      "moveWStETHGainToTrove(address,address,address,uint256)": {
        "notice": "HEDGEHOG UPDATES: ERC20 is used as a collateral, therefore function may not rely on msg.value anymore now passing a new param _collIncrease in _adjustTrove function - in this particular case it is a passed param _amount checking if _amount is greater then 0 Function is no longer payable"
      },
      "openTrove(uint256,uint256,uint256,address,address)": {
        "notice": "HEDGEHOG UPDATES: ERC20 is used as a collateral, therefore function may not rely on msg.value anymore now passing a new param _collAmount checking if _amount is greater then 0 Function is no longer payable"
      },
      "repayBaseFeeLMA(uint256,address,address)": {
        "notice": "HEDGEHOG UPDATES: ERC20 is used as a collateral, therefore function may not rely on msg.value anymore now passing a new param _collIncrease - in this particular case it is 0"
      },
      "setAddresses(address,address,address,address,address,address,address,address,address,address,address)": {
        "notice": "HEDGEHOG UPDATES: ERC20 is used as a collateral instead of native token. Setting erc20 address in the initialisation"
      },
      "withdrawBaseFeeLMA(uint256,uint256,address,address)": {
        "notice": "HEDGEHOG UPDATES: ERC20 is used as a collateral, therefore function may not rely on msg.value anymore now passing a new param _collIncrease - in this particular case it is 0"
      },
      "withdrawColl(uint256,address,address)": {
        "notice": "HEDGEHOG UPDATES: ERC20 is used as a collateral, therefore function may not rely on msg.value anymore now passing a new param _collIncrease - in this particular case it is 0"
      }
    },
    "notice": "Fork of Liquity's BorrowerOperations. . Most of the Logic remains unchanged.. Changes to the contract: - Raised pragma version - Removed an import of IBorrowerOperations Interface - Collateral is now an ERC20 token instead of a native one - Updated variable names and docs to refer to BaseFeeLMA token and wwstETH as a collateral - Logic updates with borrowing fees calculation and their distribution - Removed Native Liquity Protocol Token Staking - Remove _getUSDValue view method as it's not used anymore Even though SafeMath is no longer required, the decision was made to keep it to avoid human factor errors",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11043,
        "contract": "contracts/BorrowerOperations.sol:BorrowerOperations",
        "label": "activePool",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IActivePool)11643"
      },
      {
        "astId": 11046,
        "contract": "contracts/BorrowerOperations.sol:BorrowerOperations",
        "label": "defaultPool",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IDefaultPool)12010"
      },
      {
        "astId": 11050,
        "contract": "contracts/BorrowerOperations.sol:BorrowerOperations",
        "label": "priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IPriceFeed)12144"
      },
      {
        "astId": 7,
        "contract": "contracts/BorrowerOperations.sol:BorrowerOperations",
        "label": "_owner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 1300,
        "contract": "contracts/BorrowerOperations.sol:BorrowerOperations",
        "label": "troveManager",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(ITroveManager)12902"
      },
      {
        "astId": 1302,
        "contract": "contracts/BorrowerOperations.sol:BorrowerOperations",
        "label": "stabilityPoolAddress",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 1304,
        "contract": "contracts/BorrowerOperations.sol:BorrowerOperations",
        "label": "gasPoolAddress",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 1307,
        "contract": "contracts/BorrowerOperations.sol:BorrowerOperations",
        "label": "WStETHToken",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IERC20)190"
      },
      {
        "astId": 1310,
        "contract": "contracts/BorrowerOperations.sol:BorrowerOperations",
        "label": "collSurplusPool",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(ICollSurplusPool)11948"
      },
      {
        "astId": 1313,
        "contract": "contracts/BorrowerOperations.sol:BorrowerOperations",
        "label": "feesRouter",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(IFeesRouter)12027"
      },
      {
        "astId": 1316,
        "contract": "contracts/BorrowerOperations.sol:BorrowerOperations",
        "label": "baseFeeLMAToken",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(IBaseFeeLMAToken)11707"
      },
      {
        "astId": 1319,
        "contract": "contracts/BorrowerOperations.sol:BorrowerOperations",
        "label": "sortedTroves",
        "offset": 0,
        "slot": "11",
        "type": "t_contract(ISortedTroves)12276"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IActivePool)11643": {
        "encoding": "inplace",
        "label": "contract IActivePool",
        "numberOfBytes": "20"
      },
      "t_contract(IBaseFeeLMAToken)11707": {
        "encoding": "inplace",
        "label": "contract IBaseFeeLMAToken",
        "numberOfBytes": "20"
      },
      "t_contract(ICollSurplusPool)11948": {
        "encoding": "inplace",
        "label": "contract ICollSurplusPool",
        "numberOfBytes": "20"
      },
      "t_contract(IDefaultPool)12010": {
        "encoding": "inplace",
        "label": "contract IDefaultPool",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)190": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IFeesRouter)12027": {
        "encoding": "inplace",
        "label": "contract IFeesRouter",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceFeed)12144": {
        "encoding": "inplace",
        "label": "contract IPriceFeed",
        "numberOfBytes": "20"
      },
      "t_contract(ISortedTroves)12276": {
        "encoding": "inplace",
        "label": "contract ISortedTroves",
        "numberOfBytes": "20"
      },
      "t_contract(ITroveManager)12902": {
        "encoding": "inplace",
        "label": "contract ITroveManager",
        "numberOfBytes": "20"
      }
    }
  }
}