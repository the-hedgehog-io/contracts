{
  "address": "0x92AaCBcaF77b62385d007e78Be51b1F90C803E16",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_defaultAdmin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ultimateAdmin",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "CallerIsNotHDGProtocol",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ConfigNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidIndex",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInput",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "setter",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "percentage",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountC",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "addressA",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "addressB",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "addressC",
          "type": "address"
        }
      ],
      "name": "CollFeeConfigUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "setter",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "percentage",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountC",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "addressA",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "addressB",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "addressC",
          "type": "address"
        }
      ],
      "name": "DebtFeeConfigUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "activePool",
      "outputs": [
        {
          "internalType": "contract IActivePool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseFeeLMAToken",
      "outputs": [
        {
          "internalType": "contract IBaseFeeLMAToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowersOp",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "collFeeConfigs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountC",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "addressA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "addressB",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "addressC",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "debtFeeConfigs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountC",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "addressA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "addressB",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "addressC",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_coll",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "distributeCollFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_debt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "distributeDebtFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IActivePool",
          "name": "_activePool",
          "type": "address"
        },
        {
          "internalType": "contract IBaseFeeLMAToken",
          "name": "_baseFeeLMAToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_borrowersOp",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_troveManager",
          "type": "address"
        }
      ],
      "name": "setAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_percentage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountB",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountC",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_addressA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_addressB",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_addressC",
          "type": "address"
        }
      ],
      "name": "setCollFeeConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_percentage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountB",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountC",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_addressA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_addressB",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_addressC",
          "type": "address"
        }
      ],
      "name": "setDebtFeeConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_percentage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountB",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountC",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_addressA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_addressB",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_addressC",
          "type": "address"
        }
      ],
      "name": "setFeeConfigs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "troveManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xca47bdec71c13059dba532f3d758b5855a899358472dc9c0e8e580031e7e122a",
  "receipt": {
    "to": null,
    "from": "0x4ca847d530ee8bB3CB52273863BEe00cF625A9cB",
    "contractAddress": "0x92AaCBcaF77b62385d007e78Be51b1F90C803E16",
    "transactionIndex": 52,
    "gasUsed": "1605484",
    "logsBloom": "0x
    "blockHash": "0x8970aae47eb145bfcc99ef53ee96d8248810856d9095af36b25c5dd51994c328",
    "transactionHash": "0xca47bdec71c13059dba532f3d758b5855a899358472dc9c0e8e580031e7e122a",
    "logs": [
      {
        "transactionIndex": 52,
        "blockNumber": 6237284,
        "transactionHash": "0xca47bdec71c13059dba532f3d758b5855a899358472dc9c0e8e580031e7e122a",
        "address": "0x92AaCBcaF77b62385d007e78Be51b1F90C803E16",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6ce44ac19daa541a3cad4667c612cff8964428a20ce88eca8a6022803dbffc32",
          "0x0000000000000000000000004ca847d530ee8bb3cb52273863bee00cf625a9cb",
          "0x0000000000000000000000004ca847d530ee8bb3cb52273863bee00cf625a9cb"
        ],
        "data": "0x",
        "logIndex": 73,
        "blockHash": "0x8970aae47eb145bfcc99ef53ee96d8248810856d9095af36b25c5dd51994c328"
      },
      {
        "transactionIndex": 52,
        "blockNumber": 6237284,
        "transactionHash": "0xca47bdec71c13059dba532f3d758b5855a899358472dc9c0e8e580031e7e122a",
        "address": "0x92AaCBcaF77b62385d007e78Be51b1F90C803E16",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0x8e4f01b2ef10e587f670bbfd448bba9a57a36fd9c81549b587269120cb62b24d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x6ce44ac19daa541a3cad4667c612cff8964428a20ce88eca8a6022803dbffc32"
        ],
        "data": "0x",
        "logIndex": 74,
        "blockHash": "0x8970aae47eb145bfcc99ef53ee96d8248810856d9095af36b25c5dd51994c328"
      },
      {
        "transactionIndex": 52,
        "blockNumber": 6237284,
        "transactionHash": "0xca47bdec71c13059dba532f3d758b5855a899358472dc9c0e8e580031e7e122a",
        "address": "0x92AaCBcaF77b62385d007e78Be51b1F90C803E16",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x8e4f01b2ef10e587f670bbfd448bba9a57a36fd9c81549b587269120cb62b24d",
          "0x0000000000000000000000004ca847d530ee8bb3cb52273863bee00cf625a9cb",
          "0x0000000000000000000000004ca847d530ee8bb3cb52273863bee00cf625a9cb"
        ],
        "data": "0x",
        "logIndex": 75,
        "blockHash": "0x8970aae47eb145bfcc99ef53ee96d8248810856d9095af36b25c5dd51994c328"
      },
      {
        "transactionIndex": 52,
        "blockNumber": 6237284,
        "transactionHash": "0xca47bdec71c13059dba532f3d758b5855a899358472dc9c0e8e580031e7e122a",
        "address": "0x92AaCBcaF77b62385d007e78Be51b1F90C803E16",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x503cf060389b91af8851125bd70ce66d16d12330718b103fc7674ef6d27e70c9",
          "0x0000000000000000000000004ca847d530ee8bb3cb52273863bee00cf625a9cb",
          "0x0000000000000000000000004ca847d530ee8bb3cb52273863bee00cf625a9cb"
        ],
        "data": "0x",
        "logIndex": 76,
        "blockHash": "0x8970aae47eb145bfcc99ef53ee96d8248810856d9095af36b25c5dd51994c328"
      }
    ],
    "blockNumber": 6237284,
    "cumulativeGasUsed": "9955713",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4ca847d530ee8bB3CB52273863BEe00cF625A9cB",
    "0x4ca847d530ee8bB3CB52273863BEe00cF625A9cB"
  ],
  "numDeployments": 1,
  "solcInputHash": "4248509572f812c4fa4319d44edb1593",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_defaultAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ultimateAdmin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CallerIsNotHDGProtocol\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConfigNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidIndex\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInput\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"setter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountC\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addressA\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addressB\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addressC\",\"type\":\"address\"}],\"name\":\"CollFeeConfigUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"setter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountC\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addressA\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addressB\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addressC\",\"type\":\"address\"}],\"name\":\"DebtFeeConfigUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activePool\",\"outputs\":[{\"internalType\":\"contract IActivePool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseFeeLMAToken\",\"outputs\":[{\"internalType\":\"contract IBaseFeeLMAToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowersOp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"collFeeConfigs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountC\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addressA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addressB\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addressC\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"debtFeeConfigs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountC\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addressA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addressB\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addressC\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_coll\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"distributeCollFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"distributeDebtFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IActivePool\",\"name\":\"_activePool\",\"type\":\"address\"},{\"internalType\":\"contract IBaseFeeLMAToken\",\"name\":\"_baseFeeLMAToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_borrowersOp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_troveManager\",\"type\":\"address\"}],\"name\":\"setAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountC\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_addressA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_addressB\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_addressC\",\"type\":\"address\"}],\"name\":\"setCollFeeConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountC\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_addressA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_addressB\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_addressC\",\"type\":\"address\"}],\"name\":\"setDebtFeeConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountC\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_addressA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_addressB\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_addressC\",\"type\":\"address\"}],\"name\":\"setFeeConfigs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"troveManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"distributeCollFee(uint256,uint256)\":{\"params\":{\"_coll\":\"amount of BFE tokens that user receives in the event of succesful borrowing op\",\"_fee\":\"amount of fee that user is getting cut with in the event of succseful borrowing op Distributes fees that are coming in WstETH according to the config set by an admin. During the execution it is calculated the % that _fee is of _debt to find an appropriate config routing\"}},\"distributeDebtFee(uint256,uint256)\":{\"params\":{\"_debt\":\"amount of BFE tokens that user receives in the event of succesful borrowing op\",\"_fee\":\"amount of fee that user is getting cut with in the event of succseful borrowing op Distributes fees that are coming in BFEE according to the config set by an admin. During the execution it is calculated the % that _fee is of _debt to find an appropriate config routing\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setCollFeeConfig(uint256,uint256,uint256,uint256,address,address,address)\":{\"params\":{\"_addressA\":\"_addressA that receives tokens in the event of tx fee appears in _percentage range. Can't be an address(0)\",\"_addressB\":\"_addressB that receives tokens in the event of tx fee appears in _percentage range. Set to address(0) to skip\",\"_addressC\":\"_addressC that receives tokens in the event of tx fee appears in _percentage range. Set to address(0) to skip\",\"_amountA\":\"amount of tokens that _addressA is going to receive in the event of tx fee appears in _percentage range. Must be > 0\",\"_amountB\":\"amount of tokens that _addressB is going to receive in the event of tx fee appears in _percentage range. Set to 0 to skip\",\"_amountC\":\"amount of tokens that _addressC is going to receive in the event of tx fee appears in _percentage range Set to 0 to skip\",\"_percentage\":\"range at which new config is valid\"}},\"setDebtFeeConfig(uint256,uint256,uint256,uint256,address,address,address)\":{\"params\":{\"_addressA\":\"_addressA that receives tokens in the event of tx fee appears in _percentage range. Can't be an address(0)\",\"_addressB\":\"_addressB that receives tokens in the event of tx fee appears in _percentage range. Set to address(0) to skip\",\"_addressC\":\"_addressC that receives tokens in the event of tx fee appears in _percentage range. Set to address(0) to skip\",\"_amountA\":\"amount of tokens that _addressA is going to receive in the event of tx fee appears in _percentage range. Must be > 0\",\"_amountB\":\"amount of tokens that _addressB is going to receive in the event of tx fee appears in _percentage range. Set to 0 to skip\",\"_amountC\":\"amount of tokens that _addressC is going to receive in the event of tx fee appears in _percentage range Set to 0 to skip\",\"_percentage\":\"range at which new config is valid\"}},\"setFeeConfigs(uint256,uint256,uint256,uint256,address,address,address)\":{\"params\":{\"_addressA\":\"_addressA that receives tokens in the event of tx fee appears in _percentage range. Can't be an address(0)\",\"_addressB\":\"_addressB that receives tokens in the event of tx fee appears in _percentage range. Set to address(0) to skip\",\"_addressC\":\"_addressC that receives tokens in the event of tx fee appears in _percentage range. Set to address(0) to skip\",\"_amountA\":\"amount of tokens that _addressA is going to receive in the event of tx fee appears in _percentage range. Must be > 0\",\"_amountB\":\"amount of tokens that _addressB is going to receive in the event of tx fee appears in _percentage range. Set to 0 to skip\",\"_amountC\":\"amount of tokens that _addressC is going to receive in the event of tx fee appears in _percentage range Set to 0 to skip\",\"_percentage\":\"range at which new config is valid\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"setAddresses(address,address,address,address)\":{\"notice\":\"An initialiser function where HDG protocol address are getting set\"},\"setCollFeeConfig(uint256,uint256,uint256,uint256,address,address,address)\":{\"notice\":\"Sets coll fees configs. Should be used if routing logic is unique for WStETH token fees. Only callable by an admin\"},\"setDebtFeeConfig(uint256,uint256,uint256,uint256,address,address,address)\":{\"notice\":\"Sets debt fees configs. Should be used if routing logic is unique for BFE token fees. Only callable by an admin\"},\"setFeeConfigs(uint256,uint256,uint256,uint256,address,address,address)\":{\"notice\":\"Sets both debt and coll fees configs. Should be used if routing logic is the same for both procesesses. Only callable by an admin\"}},\"notice\":\"HEDGEHOG UPDATES:Completely new contract in Hedgehog Protocol, that was never a part of Liquity Protocol Accepts fees and routes it to different places(or a single one) assigned by the account with \\\"SETTER\\\" rights Contract overall is a config of addresses assigned for each 5% range from 0 to 100.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FeesRouter.sol\":\"FeesRouter\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/FeesRouter.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./interfaces/IBaseFeeLMAToken.sol\\\";\\nimport \\\"./interfaces/IActivePool.sol\\\";\\n\\nerror InvalidIndex();\\nerror InvalidAddress();\\nerror InvalidLength();\\nerror InvalidInput();\\nerror TooManyConfigValues();\\nerror CallerIsNotHDGProtocol();\\nerror ConfigNotFound();\\n\\n/**\\n * HEDGEHOG UPDATES:\\n * @notice Completely new contract in Hedgehog Protocol, that was never a part of Liquity Protocol\\n *\\n * Accepts fees and routes it to different places(or a single one) assigned by the account with \\\"SETTER\\\" rights\\n * Contract overall is a config of addresses assigned for each 5% range from 0 to 100.\\n */\\ncontract FeesRouter is AccessControl {\\n    bytes32 internal constant SETTER = keccak256(\\\"SETTER\\\");\\n    bytes32 internal constant ULTIMATE_ADMIN = keccak256(\\\"ULTIMATE_ADMIN\\\");\\n    bytes32 internal constant DEPLOYER = keccak256(\\\"DEPLOYER\\\");\\n\\n    struct FeeConfig {\\n        uint256 amountA;\\n        uint256 amountB;\\n        uint256 amountC;\\n        address addressA;\\n        address addressB;\\n        address addressC;\\n    }\\n\\n    mapping(uint256 => FeeConfig) public debtFeeConfigs;\\n    mapping(uint256 => FeeConfig) public collFeeConfigs;\\n\\n    IBaseFeeLMAToken public baseFeeLMAToken;\\n    IActivePool public activePool;\\n    address public borrowersOp;\\n    address public troveManager;\\n\\n    event DebtFeeConfigUpdated(\\n        address indexed setter,\\n        uint256 indexed percentage,\\n        uint256 amountA,\\n        uint256 amountB,\\n        uint256 amountC,\\n        address addressA,\\n        address addressB,\\n        address addressC\\n    );\\n\\n    event CollFeeConfigUpdated(\\n        address indexed setter,\\n        uint256 indexed percentage,\\n        uint256 amountA,\\n        uint256 amountB,\\n        uint256 amountC,\\n        address addressA,\\n        address addressB,\\n        address addressC\\n    );\\n\\n    // Checks if function caller address is either Borrowers Operations or Trove Manager set in the setAddresses function\\n    modifier onlyHDGProtocol() {\\n        if (msg.sender != borrowersOp) {\\n            if (msg.sender != troveManager) {\\n                revert CallerIsNotHDGProtocol();\\n            }\\n        }\\n        _;\\n    }\\n\\n    constructor(address _defaultAdmin, address _ultimateAdmin) {\\n        if (address(_defaultAdmin) == address(0)) revert InvalidAddress();\\n        if (address(_ultimateAdmin) == address(0)) revert InvalidAddress();\\n\\n        _grantRole(ULTIMATE_ADMIN, _ultimateAdmin);\\n        _setRoleAdmin(SETTER, ULTIMATE_ADMIN);\\n        _grantRole(SETTER, _defaultAdmin);\\n        _grantRole(DEPLOYER, msg.sender);\\n    }\\n\\n    /**\\n     * An initialiser function where HDG protocol address are getting set\\n     */\\n    function setAddresses(\\n        IActivePool _activePool,\\n        IBaseFeeLMAToken _baseFeeLMAToken,\\n        address _borrowersOp,\\n        address _troveManager\\n    ) external onlyRole(DEPLOYER) {\\n        if (_borrowersOp == address(0)) revert InvalidAddress();\\n        if (_troveManager == address(0)) revert InvalidAddress();\\n        if (address(_activePool) == address(0)) revert InvalidAddress();\\n        if (address(_baseFeeLMAToken) == address(0)) revert InvalidAddress();\\n\\n        activePool = _activePool;\\n        baseFeeLMAToken = _baseFeeLMAToken;\\n        borrowersOp = _borrowersOp;\\n        troveManager = _troveManager;\\n\\n        _revokeRole(DEPLOYER, msg.sender);\\n    }\\n\\n    /**\\n     * Sets both debt and coll fees configs. Should be used if routing logic is the same for both procesesses.\\n     * Only callable by an admin\\n     *\\n     * @param _percentage range at which new config is valid\\n     * @param _amountA amount of tokens that _addressA is going to receive in the event of tx fee appears in _percentage range. Must be > 0\\n     * @param _amountB amount of tokens that _addressB is going to receive in the event of tx fee appears in _percentage range. Set to 0 to skip\\n     * @param _amountC amount of tokens that _addressC is going to receive in the event of tx fee appears in _percentage range Set to 0 to skip\\n     * @param _addressA _addressA that receives tokens in the event of tx fee appears in _percentage range. Can't be an address(0)\\n     * @param _addressB _addressB that receives tokens in the event of tx fee appears in _percentage range. Set to address(0) to skip\\n     * @param _addressC _addressC that receives tokens in the event of tx fee appears in _percentage range. Set to address(0) to skip\\n     */\\n    function setFeeConfigs(\\n        uint256 _percentage,\\n        uint256 _amountA,\\n        uint256 _amountB,\\n        uint256 _amountC,\\n        address _addressA,\\n        address _addressB,\\n        address _addressC\\n    ) external onlyRole(SETTER) {\\n        _checkConfigCorrectness(\\n            _percentage,\\n            _amountA,\\n            _amountB,\\n            _amountC,\\n            _addressA,\\n            _addressB,\\n            _addressC\\n        );\\n        debtFeeConfigs[_percentage] = FeeConfig(\\n            _amountA,\\n            _amountB,\\n            _amountC,\\n            _addressA,\\n            _addressB,\\n            _addressC\\n        );\\n\\n        collFeeConfigs[_percentage] = FeeConfig(\\n            _amountA,\\n            _amountB,\\n            _amountC,\\n            _addressA,\\n            _addressB,\\n            _addressC\\n        );\\n\\n        emit DebtFeeConfigUpdated(\\n            msg.sender,\\n            _percentage,\\n            _amountA,\\n            _amountB,\\n            _amountC,\\n            _addressA,\\n            _addressB,\\n            _addressC\\n        );\\n\\n        emit CollFeeConfigUpdated(\\n            msg.sender,\\n            _percentage,\\n            _amountA,\\n            _amountB,\\n            _amountC,\\n            _addressA,\\n            _addressB,\\n            _addressC\\n        );\\n    }\\n\\n    /**\\n     * Sets debt fees configs. Should be used if routing logic is unique for BFE token fees.\\n     * Only callable by an admin\\n     *\\n     * @param _percentage range at which new config is valid\\n     * @param _amountA amount of tokens that _addressA is going to receive in the event of tx fee appears in _percentage range. Must be > 0\\n     * @param _amountB amount of tokens that _addressB is going to receive in the event of tx fee appears in _percentage range. Set to 0 to skip\\n     * @param _amountC amount of tokens that _addressC is going to receive in the event of tx fee appears in _percentage range Set to 0 to skip\\n     * @param _addressA _addressA that receives tokens in the event of tx fee appears in _percentage range. Can't be an address(0)\\n     * @param _addressB _addressB that receives tokens in the event of tx fee appears in _percentage range. Set to address(0) to skip\\n     * @param _addressC _addressC that receives tokens in the event of tx fee appears in _percentage range. Set to address(0) to skip\\n     */\\n    function setDebtFeeConfig(\\n        uint256 _percentage,\\n        uint256 _amountA,\\n        uint256 _amountB,\\n        uint256 _amountC,\\n        address _addressA,\\n        address _addressB,\\n        address _addressC\\n    ) external onlyRole(SETTER) {\\n        _checkConfigCorrectness(\\n            _percentage,\\n            _amountA,\\n            _amountB,\\n            _amountC,\\n            _addressA,\\n            _addressB,\\n            _addressC\\n        );\\n        debtFeeConfigs[_percentage] = FeeConfig(\\n            _amountA,\\n            _amountB,\\n            _amountC,\\n            _addressA,\\n            _addressB,\\n            _addressC\\n        );\\n\\n        emit DebtFeeConfigUpdated(\\n            msg.sender,\\n            _percentage,\\n            _amountA,\\n            _amountB,\\n            _amountC,\\n            _addressA,\\n            _addressB,\\n            _addressC\\n        );\\n    }\\n\\n    /**\\n     * Sets coll fees configs. Should be used if routing logic is unique for WStETH token fees.\\n     * Only callable by an admin\\n     *\\n     * @param _percentage range at which new config is valid\\n     * @param _amountA amount of tokens that _addressA is going to receive in the event of tx fee appears in _percentage range. Must be > 0\\n     * @param _amountB amount of tokens that _addressB is going to receive in the event of tx fee appears in _percentage range. Set to 0 to skip\\n     * @param _amountC amount of tokens that _addressC is going to receive in the event of tx fee appears in _percentage range Set to 0 to skip\\n     * @param _addressA _addressA that receives tokens in the event of tx fee appears in _percentage range. Can't be an address(0)\\n     * @param _addressB _addressB that receives tokens in the event of tx fee appears in _percentage range. Set to address(0) to skip\\n     * @param _addressC _addressC that receives tokens in the event of tx fee appears in _percentage range. Set to address(0) to skip\\n     */\\n    function setCollFeeConfig(\\n        uint256 _percentage,\\n        uint256 _amountA,\\n        uint256 _amountB,\\n        uint256 _amountC,\\n        address _addressA,\\n        address _addressB,\\n        address _addressC\\n    ) external onlyRole(SETTER) {\\n        _checkConfigCorrectness(\\n            _percentage,\\n            _amountA,\\n            _amountB,\\n            _amountC,\\n            _addressA,\\n            _addressB,\\n            _addressC\\n        );\\n\\n        collFeeConfigs[_percentage] = FeeConfig(\\n            _amountA,\\n            _amountB,\\n            _amountC,\\n            _addressA,\\n            _addressB,\\n            _addressC\\n        );\\n\\n        emit CollFeeConfigUpdated(\\n            msg.sender,\\n            _percentage,\\n            _amountA,\\n            _amountB,\\n            _amountC,\\n            _addressA,\\n            _addressB,\\n            _addressC\\n        );\\n    }\\n\\n    /**\\n     * @param _debt amount of BFE tokens that user receives in the event of succesful borrowing op\\n     * @param _fee amount of fee that user is getting cut with in the event of succseful borrowing op\\n     *\\n     * Distributes fees that are coming in BFEE according to the config set by an admin.\\n     * During the execution it is calculated the % that _fee is of _debt to find an appropriate config routing\\n     */\\n    function distributeDebtFee(\\n        uint256 _debt,\\n        uint256 _fee\\n    ) external onlyHDGProtocol {\\n        FeeConfig memory config = debtFeeConfigs[_getPctRange(_debt, _fee)];\\n\\n        uint256 amountA = _calculateAmount(_fee, config.amountA);\\n        uint256 amountB = _calculateAmount(_fee, config.amountB);\\n        uint256 amountC = _calculateAmount(_fee, config.amountC);\\n\\n        uint256 totalAmounts = amountA + amountB + amountC;\\n        if (totalAmounts != _fee) {\\n            amountA = amountA + _fee - totalAmounts;\\n        }\\n\\n        if (\\n            config.addressA == address(0) &&\\n            config.addressB == address(0) &&\\n            config.addressC == address(0)\\n        ) revert ConfigNotFound();\\n\\n        IBaseFeeLMAToken _baseFeeLMAToken = baseFeeLMAToken;\\n        if (amountA > 0 && config.addressA != address(0)) {\\n            _baseFeeLMAToken.mint(config.addressA, amountA);\\n        }\\n        if (amountB > 0 && config.addressB != address(0)) {\\n            _baseFeeLMAToken.mint(config.addressB, amountB);\\n        }\\n        if (amountC > 0 && config.addressC != address(0)) {\\n            _baseFeeLMAToken.mint(config.addressC, amountC);\\n        }\\n    }\\n\\n    /**\\n     * @param _coll amount of BFE tokens that user receives in the event of succesful borrowing op\\n     * @param _fee amount of fee that user is getting cut with in the event of succseful borrowing op\\n     *\\n     * Distributes fees that are coming in WstETH according to the config set by an admin.\\n     * During the execution it is calculated the % that _fee is of _debt to find an appropriate config routing\\n     */\\n    function distributeCollFee(\\n        uint256 _coll,\\n        uint256 _fee\\n    ) external onlyHDGProtocol {\\n        FeeConfig memory config = collFeeConfigs[_getPctRange(_coll, _fee)];\\n        uint256 amountA = _calculateAmount(_fee, config.amountA);\\n        uint256 amountB = _calculateAmount(_fee, config.amountB);\\n        uint256 amountC = _calculateAmount(_fee, config.amountC);\\n\\n        uint256 totalAmounts = amountA + amountB + amountC;\\n        if (totalAmounts != _fee) {\\n            amountA = amountA + _fee - totalAmounts;\\n        }\\n\\n        if (\\n            config.addressA == address(0) &&\\n            config.addressB == address(0) &&\\n            config.addressC == address(0)\\n        ) revert ConfigNotFound();\\n\\n        IActivePool _activePool = activePool;\\n\\n        if (amountA > 0 && config.addressA != address(0)) {\\n            _activePool.sendWStETH(config.addressA, amountA);\\n        }\\n        if (amountB > 0 && config.addressB != address(0)) {\\n            _activePool.sendWStETH(config.addressB, amountB);\\n        }\\n        if (amountC > 0 && config.addressC != address(0)) {\\n            _activePool.sendWStETH(config.addressC, amountC);\\n        }\\n    }\\n\\n    /**\\n     *  Finds range in config with rounding based on total tx value(can be BaseFeeLMA token or WstETH) and absolute fee amount\\n     *  In case the fee is less then 3% it's going to round to 5% anyway\\n     *\\n     * @param _debt total tx payment amount (BaseFee LMA Token or WstETH)\\n     * @param _fee total tx fee in an absolute number (BaseFee LMA Token or WstETH)\\n     */\\n    function _getPctRange(\\n        uint256 _debt,\\n        uint256 _fee\\n    ) internal pure returns (uint256) {\\n        if ((_fee * 100) / _debt < 3 && (_fee * 100) / _debt > 0) {\\n            return 5;\\n        } else {\\n            return\\n                (((_fee * 100) / _debt) /\\n                    5 +\\n                    ((((_fee * 100) / _debt) % 5)) /\\n                    3) * 5;\\n        }\\n    }\\n\\n    // helper util that performs a simple calculation to find the _percentage of _fee\\n    function _calculateAmount(\\n        uint256 _fee,\\n        uint256 _percentage\\n    ) internal pure returns (uint256) {\\n        return ((_fee * _percentage) / 100);\\n    }\\n\\n    /**\\n     * Checks if provided config is correct. In a single range config at least first receiver must get set. Second and third are optional.\\n     * @param _percentage range id. May only be divisible by 5\\n     * @param _amountA % of the fee that is going to get transferred to _addressA\\n     * @param _amountB % of the fee that is going to get transferred to _addressB\\n     * @param _amountC % of the fee that is going to get transferred to _addressC\\n     * @param _addressA address that's going to receive _amountA\\n     * @param _addressB address that's going to receive _amountB\\n     * @param _addressC address that's going to receive _amountC\\n     */\\n    function _checkConfigCorrectness(\\n        uint256 _percentage,\\n        uint256 _amountA,\\n        uint256 _amountB,\\n        uint256 _amountC,\\n        address _addressA,\\n        address _addressB,\\n        address _addressC\\n    ) internal pure {\\n        if (_percentage % 5 != 0) revert InvalidIndex();\\n        if (_addressA == address(0)) revert InvalidAddress(); // At least A address should be initiated\\n        if (_amountA == 0) revert InvalidInput(); // At least A amount should be initiated\\n        if (_amountB > 0 && _addressB == address(0)) revert InvalidInput();\\n        if (_amountC > 0 && _addressC == address(0)) revert InvalidInput();\\n        if (_amountA + _amountB + _amountC != 100) revert InvalidInput();\\n    }\\n}\\n\",\"keccak256\":\"0x74d2c2d1b2c260c87f6dcede5a7720a05fd8d26d5fe80590baa25e7ff139bbc4\",\"license\":\"MIT\"},\"contracts/dependencies/IERC2612.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @dev Interface of the ERC2612 standard as defined in the EIP.\\n *\\n * Adds the {permit} method, which can be used to change one's\\n * {IERC20-allowance} without having to send a transaction, by signing a\\n * message. This allows users to spend tokens without having to hold WStETH.\\n *\\n * See https://eips.wStETHeum.org/EIPS/eip-2612.\\n *\\n * Code adapted from https://github.com/OpenZeppelin/openzeppelin-contracts/pull/2237/\\n */\\ninterface IERC2612 {\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over `owner`'s tokens,\\n     * given `owner`'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.wStETHeum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current ERC2612 nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases `owner`'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     *\\n     * `owner` can limit the time a Permit is valid for by setting `deadline` to\\n     * a value in the near future. The deadline argument can be set to uint(-1) to\\n     * create Permits that effectively never expire.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function version() external view returns (string memory);\\n\\n    function permitTypeHash() external view returns (bytes32);\\n\\n    function domainSeparator() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf9e0692c36ffc6ac123d90a7f762f44a895589b581150c5575c14d11e547cc01\",\"license\":\"MIT\"},\"contracts/interfaces/IActivePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./IPool.sol\\\";\\n\\ninterface IActivePool is IPool {\\n    // --- Events ---\\n    event BorrowerOperationsAddressChanged(\\n        address _newBorrowerOperationsAddress\\n    );\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event ActivePoolBaseFeeLMADebtUpdated(uint _BaseFeeLMADebt);\\n    event ActivePoolWStETHBalanceUpdated(uint _WStETH);\\n\\n    // --- Functions ---\\n    function sendWStETH(address _account, uint _amount) external;\\n\\n    function getWStETH() external view returns (uint256);\\n\\n    function increaseBalance(uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x9f49d4c4af27279fcfd487aaed046286f03af575e88eb65ba30a54d581eae9ec\",\"license\":\"MIT\"},\"contracts/interfaces/IBaseFeeLMAToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../dependencies/IERC2612.sol\\\";\\n\\ninterface IBaseFeeLMAToken is IERC20, IERC2612 {\\n    // --- Events ---\\n\\n    event TroveManagerAddressChanged(address _troveManagerAddress);\\n    event StabilityPoolAddressChanged(address _newStabilityPoolAddress);\\n    event BorrowerOperationsAddressChanged(\\n        address _newBorrowerOperationsAddress\\n    );\\n\\n    // --- Functions ---\\n\\n    function mint(address _account, uint256 _amount) external;\\n\\n    function burn(address _account, uint256 _amount) external;\\n\\n    function sendToPool(\\n        address _sender,\\n        address poolAddress,\\n        uint256 _amount\\n    ) external;\\n\\n    function returnFromPool(\\n        address poolAddress,\\n        address user,\\n        uint256 _amount\\n    ) external;\\n\\n    function totalSupply() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf9f0e20aa9f38421af3548f05e25a04cc1db24258c155e4e547e9364752d8243\",\"license\":\"MIT\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\n// Common interface for the Pools.\\ninterface IPool {\\n    // --- Events ---\\n\\n    event WStETHBalanceUpdated(uint _newBalance);\\n    event BaseFeeLMABalanceUpdated(uint _newBalance);\\n    event ActivePoolAddressChanged(address _newActivePoolAddress);\\n    event DefaultPoolAddressChanged(address _newDefaultPoolAddress);\\n    event StabilityPoolAddressChanged(address _newStabilityPoolAddress);\\n    event WStETHSent(address _to, uint _amount);\\n\\n    // --- Functions ---\\n\\n    function getWStETH() external view returns (uint);\\n\\n    function getBaseFeeLMADebt() external view returns (uint);\\n\\n    function increaseBaseFeeLMADebt(uint _amount) external;\\n\\n    function decreaseBaseFeeLMADebt(uint _amount) external;\\n\\n    // function increaseCollCountInPool(uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0xd61a8bdbfe2a40b2f564c2108931f93a4477a8e004160b138c1e3a1fef51f11b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001cc238038062001cc2833981016040819052620000349162000221565b6001600160a01b0382166200005c5760405163e6c4247b60e01b815260040160405180910390fd5b6001600160a01b038116620000845760405163e6c4247b60e01b815260040160405180910390fd5b6200009f60008051602062001ca28339815191528262000118565b620000c960008051602062001c8283398151915260008051602062001ca2833981519152620001b9565b620000e460008051602062001c828339815191528362000118565b620001107f503cf060389b91af8851125bd70ce66d16d12330718b103fc7674ef6d27e70c93362000118565b505062000259565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16620001b5576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620001743390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600082815260208190526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b80516001600160a01b03811681146200021c57600080fd5b919050565b600080604083850312156200023557600080fd5b620002408362000204565b9150620002506020840162000204565b90509250929050565b611a1980620002696000396000f3fe608060405234801561001057600080fd5b50600436106101115760003560e01c8063813154a0116100ad578063d547741f11610071578063d547741f14610262578063eaa378ca14610275578063f8c713e8146102d8578063fd3b9e68146102eb578063fee00449146102fe57600080fd5b8063813154a01461020e5780638f9137891461022157806391d1485414610234578063a217fddf14610247578063ca866c7f1461024f57600080fd5b806301ffc9a714610116578063248a9ca31461013e5780632f2ff15d1461016f57806336568abe146101845780633d83908a146101975780634a945f8d146101c25780635b05e5bd146101d55780636376b624146101e85780637f7dde4a146101fb575b600080fd5b610129610124366004611661565b610350565b60405190151581526020015b60405180910390f35b61016161014c36600461168b565b60009081526020819052604090206001015490565b604051908152602001610135565b61018261017d3660046116b9565b610387565b005b6101826101923660046116b9565b6103b1565b6006546101aa906001600160a01b031681565b6040516001600160a01b039091168152602001610135565b6101826101d03660046116e9565b610434565b6101826101e3366004611745565b610575565b6101826101f63660046117b7565b6106f5565b6004546101aa906001600160a01b031681565b6005546101aa906001600160a01b031681565b6003546101aa906001600160a01b031681565b6101296102423660046116b9565b610a18565b610161600081565b61018261025d366004611745565b610a41565b6101826102703660046116b9565b610baf565b6102c661028336600461168b565b6001602081905260009182526040909120805491810154600282015460038301546004840154600590940154929391926001600160a01b03918216928216911686565b604051610135969594939291906117d9565b6101826102e6366004611745565b610bd4565b6101826102f93660046117b7565b610e91565b6102c661030c36600461168b565b600260208190526000918252604090912080546001820154928201546003830154600484015460059094015492949391926001600160a01b03918216928216911686565b60006001600160e01b03198216637965db0b60e01b148061038157506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000828152602081905260409020600101546103a281611177565b6103ac8383611184565b505050565b6001600160a01b03811633146104265760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6104308282611208565b5050565b7f503cf060389b91af8851125bd70ce66d16d12330718b103fc7674ef6d27e70c961045e81611177565b6001600160a01b0383166104855760405163e6c4247b60e01b815260040160405180910390fd5b6001600160a01b0382166104ac5760405163e6c4247b60e01b815260040160405180910390fd5b6001600160a01b0385166104d35760405163e6c4247b60e01b815260040160405180910390fd5b6001600160a01b0384166104fa5760405163e6c4247b60e01b815260040160405180910390fd5b600480546001600160a01b038088166001600160a01b0319928316179092556003805487841690831617905560058054868416908316179055600680549285169290911691909117905561056e7f503cf060389b91af8851125bd70ce66d16d12330718b103fc7674ef6d27e70c933611208565b5050505050565b6000805160206119c483398151915261058d81611177565b61059c8888888888888861126d565b6040518060c00160405280888152602001878152602001868152602001856001600160a01b03168152602001846001600160a01b03168152602001836001600160a01b0316815250600260008a815260200190815260200160002060008201518160000155602082015181600101556040820151816002015560608201518160030160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060808201518160040160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060a08201518160050160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555090505087336001600160a01b03167f5348ea1904340e964d9091cfa5c4d28860f58c3d5030493a2a91aed33c8c594a8989898989896040516106e3969594939291906117d9565b60405180910390a35050505050505050565b6005546001600160a01b03163314610732576006546001600160a01b031633146107325760405163293f7ccf60e01b815260040160405180910390fd5b6000600260006107428585611386565b815260208082019290925260409081016000908120825160c081018452815480825260018301549582019590955260028201549381019390935260038101546001600160a01b0390811660608501526004820154811660808501526005909101541660a0830152909250906107b890849061143b565b905060006107ca84846020015161143b565b905060006107dc85856040015161143b565b90506000816107eb8486611826565b6107f59190611826565b905085811461081657806108098786611826565b6108139190611839565b93505b60608501516001600160a01b031615801561083c575060808501516001600160a01b0316155b8015610853575060a08501516001600160a01b0316155b1561087157604051634a29b9a360e11b815260040160405180910390fd5b6004546001600160a01b03168415801590610898575060608601516001600160a01b031615155b156109025760608601516040516316daab2160e01b81526001600160a01b038316916316daab21916108cf9190899060040161184c565b600060405180830381600087803b1580156108e957600080fd5b505af11580156108fd573d6000803e3d6000fd5b505050505b60008411801561091e575060808601516001600160a01b031615155b156109885760808601516040516316daab2160e01b81526001600160a01b038316916316daab21916109559190889060040161184c565b600060405180830381600087803b15801561096f57600080fd5b505af1158015610983573d6000803e3d6000fd5b505050505b6000831180156109a4575060a08601516001600160a01b031615155b15610a0e5760a08601516040516316daab2160e01b81526001600160a01b038316916316daab21916109db9190879060040161184c565b600060405180830381600087803b1580156109f557600080fd5b505af1158015610a09573d6000803e3d6000fd5b505050505b5050505050505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6000805160206119c4833981519152610a5981611177565b610a688888888888888861126d565b6040518060c00160405280888152602001878152602001868152602001856001600160a01b03168152602001846001600160a01b03168152602001836001600160a01b0316815250600160008a815260200190815260200160002060008201518160000155602082015181600101556040820151816002015560608201518160030160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060808201518160040160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060a08201518160050160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555090505087336001600160a01b03167fbc99ed43606ac935e4dc17dab93250c9bd493b5160a7e3b7bf0a96a3c39613098989898989896040516106e3969594939291906117d9565b600082815260208190526040902060010154610bca81611177565b6103ac8383611208565b6000805160206119c4833981519152610bec81611177565b610bfb8888888888888861126d565b6040518060c00160405280888152602001878152602001868152602001856001600160a01b03168152602001846001600160a01b03168152602001836001600160a01b0316815250600160008a815260200190815260200160002060008201518160000155602082015181600101556040820151816002015560608201518160030160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060808201518160040160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060a08201518160050160006101000a8154816001600160a01b0302191690836001600160a01b031602179055509050506040518060c00160405280888152602001878152602001868152602001856001600160a01b03168152602001846001600160a01b03168152602001836001600160a01b0316815250600260008a815260200190815260200160002060008201518160000155602082015181600101556040820151816002015560608201518160030160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060808201518160040160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060a08201518160050160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555090505087336001600160a01b03167fbc99ed43606ac935e4dc17dab93250c9bd493b5160a7e3b7bf0a96a3c3961309898989898989604051610e45969594939291906117d9565b60405180910390a387336001600160a01b03167f5348ea1904340e964d9091cfa5c4d28860f58c3d5030493a2a91aed33c8c594a8989898989896040516106e3969594939291906117d9565b6005546001600160a01b03163314610ece576006546001600160a01b03163314610ece5760405163293f7ccf60e01b815260040160405180910390fd5b600060016000610ede8585611386565b815260208082019290925260409081016000908120825160c081018452815480825260018301549582019590955260028201549381019390935260038101546001600160a01b0390811660608501526004820154811660808501526005909101541660a083015290925090610f5490849061143b565b90506000610f6684846020015161143b565b90506000610f7885856040015161143b565b9050600081610f878486611826565b610f919190611826565b9050858114610fb25780610fa58786611826565b610faf9190611839565b93505b60608501516001600160a01b0316158015610fd8575060808501516001600160a01b0316155b8015610fef575060a08501516001600160a01b0316155b1561100d57604051634a29b9a360e11b815260040160405180910390fd5b6003546001600160a01b03168415801590611034575060608601516001600160a01b031615155b1561109e5760608601516040516340c10f1960e01b81526001600160a01b038316916340c10f199161106b9190899060040161184c565b600060405180830381600087803b15801561108557600080fd5b505af1158015611099573d6000803e3d6000fd5b505050505b6000841180156110ba575060808601516001600160a01b031615155b156111245760808601516040516340c10f1960e01b81526001600160a01b038316916340c10f19916110f19190889060040161184c565b600060405180830381600087803b15801561110b57600080fd5b505af115801561111f573d6000803e3d6000fd5b505050505b600083118015611140575060a08601516001600160a01b031615155b15610a0e5760a08601516040516340c10f1960e01b81526001600160a01b038316916340c10f19916109db9190879060040161184c565b611181813361145a565b50565b61118e8282610a18565b610430576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556111c43390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6112128282610a18565b15610430576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b61127860058861187b565b15611296576040516363df817160e01b815260040160405180910390fd5b6001600160a01b0383166112bd5760405163e6c4247b60e01b815260040160405180910390fd5b856000036112de5760405163b4fa3fb360e01b815260040160405180910390fd5b6000851180156112f557506001600160a01b038216155b156113135760405163b4fa3fb360e01b815260040160405180910390fd5b60008411801561132a57506001600160a01b038116155b156113485760405163b4fa3fb360e01b815260040160405180910390fd5b836113538688611826565b61135d9190611826565b60641461137d5760405163b4fa3fb360e01b815260040160405180910390fd5b50505050505050565b600060038361139684606461188f565b6113a091906118a6565b1080156113c257506000836113b684606461188f565b6113c091906118a6565b115b156113cf57506005610381565b60036005846113df85606461188f565b6113e991906118a6565b6113f3919061187b565b6113fd91906118a6565b60058461140b85606461188f565b61141591906118a6565b61141f91906118a6565b6114299190611826565b61143490600561188f565b9050610381565b60006064611449838561188f565b61145391906118a6565b9392505050565b6114648282610a18565b61043057611471816114b3565b61147c8360206114c5565b60405160200161148d9291906118de565b60408051601f198184030181529082905262461bcd60e51b825261041d9160040161194d565b60606103816001600160a01b03831660145b606060006114d483600261188f565b6114df906002611826565b67ffffffffffffffff8111156114f7576114f7611980565b6040519080825280601f01601f191660200182016040528015611521576020820181803683370190505b509050600360fc1b8160008151811061153c5761153c611996565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061156b5761156b611996565b60200101906001600160f81b031916908160001a905350600061158f84600261188f565b61159a906001611826565b90505b6001811115611612576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106115ce576115ce611996565b1a60f81b8282815181106115e4576115e4611996565b60200101906001600160f81b031916908160001a90535060049490941c9361160b816119ac565b905061159d565b5083156114535760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161041d565b60006020828403121561167357600080fd5b81356001600160e01b03198116811461145357600080fd5b60006020828403121561169d57600080fd5b5035919050565b6001600160a01b038116811461118157600080fd5b600080604083850312156116cc57600080fd5b8235915060208301356116de816116a4565b809150509250929050565b600080600080608085870312156116ff57600080fd5b843561170a816116a4565b9350602085013561171a816116a4565b9250604085013561172a816116a4565b9150606085013561173a816116a4565b939692955090935050565b600080600080600080600060e0888a03121561176057600080fd5b873596506020880135955060408801359450606088013593506080880135611787816116a4565b925060a0880135611797816116a4565b915060c08801356117a7816116a4565b8091505092959891949750929550565b600080604083850312156117ca57600080fd5b50508035926020909101359150565b958652602086019490945260408501929092526001600160a01b03908116606085015290811660808401521660a082015260c00190565b634e487b7160e01b600052601160045260246000fd5b8082018082111561038157610381611810565b8181038181111561038157610381611810565b6001600160a01b03929092168252602082015260400190565b634e487b7160e01b600052601260045260246000fd5b60008261188a5761188a611865565b500690565b808202811582820484141761038157610381611810565b6000826118b5576118b5611865565b500490565b60005b838110156118d55781810151838201526020016118bd565b50506000910152565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8152600083516119108160178501602088016118ba565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516119418160288401602088016118ba565b01602801949350505050565b602081526000825180602084015261196c8160408501602087016118ba565b601f01601f19169190910160400192915050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6000816119bb576119bb611810565b50600019019056fe8e4f01b2ef10e587f670bbfd448bba9a57a36fd9c81549b587269120cb62b24da2646970667358221220a0ced16c287ce777ad08cbea67cf3653588a3ed059f4609b05502cc5947b830c64736f6c634300081300338e4f01b2ef10e587f670bbfd448bba9a57a36fd9c81549b587269120cb62b24d6ce44ac19daa541a3cad4667c612cff8964428a20ce88eca8a6022803dbffc32",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101115760003560e01c8063813154a0116100ad578063d547741f11610071578063d547741f14610262578063eaa378ca14610275578063f8c713e8146102d8578063fd3b9e68146102eb578063fee00449146102fe57600080fd5b8063813154a01461020e5780638f9137891461022157806391d1485414610234578063a217fddf14610247578063ca866c7f1461024f57600080fd5b806301ffc9a714610116578063248a9ca31461013e5780632f2ff15d1461016f57806336568abe146101845780633d83908a146101975780634a945f8d146101c25780635b05e5bd146101d55780636376b624146101e85780637f7dde4a146101fb575b600080fd5b610129610124366004611661565b610350565b60405190151581526020015b60405180910390f35b61016161014c36600461168b565b60009081526020819052604090206001015490565b604051908152602001610135565b61018261017d3660046116b9565b610387565b005b6101826101923660046116b9565b6103b1565b6006546101aa906001600160a01b031681565b6040516001600160a01b039091168152602001610135565b6101826101d03660046116e9565b610434565b6101826101e3366004611745565b610575565b6101826101f63660046117b7565b6106f5565b6004546101aa906001600160a01b031681565b6005546101aa906001600160a01b031681565b6003546101aa906001600160a01b031681565b6101296102423660046116b9565b610a18565b610161600081565b61018261025d366004611745565b610a41565b6101826102703660046116b9565b610baf565b6102c661028336600461168b565b6001602081905260009182526040909120805491810154600282015460038301546004840154600590940154929391926001600160a01b03918216928216911686565b604051610135969594939291906117d9565b6101826102e6366004611745565b610bd4565b6101826102f93660046117b7565b610e91565b6102c661030c36600461168b565b600260208190526000918252604090912080546001820154928201546003830154600484015460059094015492949391926001600160a01b03918216928216911686565b60006001600160e01b03198216637965db0b60e01b148061038157506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000828152602081905260409020600101546103a281611177565b6103ac8383611184565b505050565b6001600160a01b03811633146104265760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6104308282611208565b5050565b7f503cf060389b91af8851125bd70ce66d16d12330718b103fc7674ef6d27e70c961045e81611177565b6001600160a01b0383166104855760405163e6c4247b60e01b815260040160405180910390fd5b6001600160a01b0382166104ac5760405163e6c4247b60e01b815260040160405180910390fd5b6001600160a01b0385166104d35760405163e6c4247b60e01b815260040160405180910390fd5b6001600160a01b0384166104fa5760405163e6c4247b60e01b815260040160405180910390fd5b600480546001600160a01b038088166001600160a01b0319928316179092556003805487841690831617905560058054868416908316179055600680549285169290911691909117905561056e7f503cf060389b91af8851125bd70ce66d16d12330718b103fc7674ef6d27e70c933611208565b5050505050565b6000805160206119c483398151915261058d81611177565b61059c8888888888888861126d565b6040518060c00160405280888152602001878152602001868152602001856001600160a01b03168152602001846001600160a01b03168152602001836001600160a01b0316815250600260008a815260200190815260200160002060008201518160000155602082015181600101556040820151816002015560608201518160030160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060808201518160040160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060a08201518160050160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555090505087336001600160a01b03167f5348ea1904340e964d9091cfa5c4d28860f58c3d5030493a2a91aed33c8c594a8989898989896040516106e3969594939291906117d9565b60405180910390a35050505050505050565b6005546001600160a01b03163314610732576006546001600160a01b031633146107325760405163293f7ccf60e01b815260040160405180910390fd5b6000600260006107428585611386565b815260208082019290925260409081016000908120825160c081018452815480825260018301549582019590955260028201549381019390935260038101546001600160a01b0390811660608501526004820154811660808501526005909101541660a0830152909250906107b890849061143b565b905060006107ca84846020015161143b565b905060006107dc85856040015161143b565b90506000816107eb8486611826565b6107f59190611826565b905085811461081657806108098786611826565b6108139190611839565b93505b60608501516001600160a01b031615801561083c575060808501516001600160a01b0316155b8015610853575060a08501516001600160a01b0316155b1561087157604051634a29b9a360e11b815260040160405180910390fd5b6004546001600160a01b03168415801590610898575060608601516001600160a01b031615155b156109025760608601516040516316daab2160e01b81526001600160a01b038316916316daab21916108cf9190899060040161184c565b600060405180830381600087803b1580156108e957600080fd5b505af11580156108fd573d6000803e3d6000fd5b505050505b60008411801561091e575060808601516001600160a01b031615155b156109885760808601516040516316daab2160e01b81526001600160a01b038316916316daab21916109559190889060040161184c565b600060405180830381600087803b15801561096f57600080fd5b505af1158015610983573d6000803e3d6000fd5b505050505b6000831180156109a4575060a08601516001600160a01b031615155b15610a0e5760a08601516040516316daab2160e01b81526001600160a01b038316916316daab21916109db9190879060040161184c565b600060405180830381600087803b1580156109f557600080fd5b505af1158015610a09573d6000803e3d6000fd5b505050505b5050505050505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6000805160206119c4833981519152610a5981611177565b610a688888888888888861126d565b6040518060c00160405280888152602001878152602001868152602001856001600160a01b03168152602001846001600160a01b03168152602001836001600160a01b0316815250600160008a815260200190815260200160002060008201518160000155602082015181600101556040820151816002015560608201518160030160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060808201518160040160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060a08201518160050160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555090505087336001600160a01b03167fbc99ed43606ac935e4dc17dab93250c9bd493b5160a7e3b7bf0a96a3c39613098989898989896040516106e3969594939291906117d9565b600082815260208190526040902060010154610bca81611177565b6103ac8383611208565b6000805160206119c4833981519152610bec81611177565b610bfb8888888888888861126d565b6040518060c00160405280888152602001878152602001868152602001856001600160a01b03168152602001846001600160a01b03168152602001836001600160a01b0316815250600160008a815260200190815260200160002060008201518160000155602082015181600101556040820151816002015560608201518160030160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060808201518160040160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060a08201518160050160006101000a8154816001600160a01b0302191690836001600160a01b031602179055509050506040518060c00160405280888152602001878152602001868152602001856001600160a01b03168152602001846001600160a01b03168152602001836001600160a01b0316815250600260008a815260200190815260200160002060008201518160000155602082015181600101556040820151816002015560608201518160030160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060808201518160040160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060a08201518160050160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555090505087336001600160a01b03167fbc99ed43606ac935e4dc17dab93250c9bd493b5160a7e3b7bf0a96a3c3961309898989898989604051610e45969594939291906117d9565b60405180910390a387336001600160a01b03167f5348ea1904340e964d9091cfa5c4d28860f58c3d5030493a2a91aed33c8c594a8989898989896040516106e3969594939291906117d9565b6005546001600160a01b03163314610ece576006546001600160a01b03163314610ece5760405163293f7ccf60e01b815260040160405180910390fd5b600060016000610ede8585611386565b815260208082019290925260409081016000908120825160c081018452815480825260018301549582019590955260028201549381019390935260038101546001600160a01b0390811660608501526004820154811660808501526005909101541660a083015290925090610f5490849061143b565b90506000610f6684846020015161143b565b90506000610f7885856040015161143b565b9050600081610f878486611826565b610f919190611826565b9050858114610fb25780610fa58786611826565b610faf9190611839565b93505b60608501516001600160a01b0316158015610fd8575060808501516001600160a01b0316155b8015610fef575060a08501516001600160a01b0316155b1561100d57604051634a29b9a360e11b815260040160405180910390fd5b6003546001600160a01b03168415801590611034575060608601516001600160a01b031615155b1561109e5760608601516040516340c10f1960e01b81526001600160a01b038316916340c10f199161106b9190899060040161184c565b600060405180830381600087803b15801561108557600080fd5b505af1158015611099573d6000803e3d6000fd5b505050505b6000841180156110ba575060808601516001600160a01b031615155b156111245760808601516040516340c10f1960e01b81526001600160a01b038316916340c10f19916110f19190889060040161184c565b600060405180830381600087803b15801561110b57600080fd5b505af115801561111f573d6000803e3d6000fd5b505050505b600083118015611140575060a08601516001600160a01b031615155b15610a0e5760a08601516040516340c10f1960e01b81526001600160a01b038316916340c10f19916109db9190879060040161184c565b611181813361145a565b50565b61118e8282610a18565b610430576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556111c43390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6112128282610a18565b15610430576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b61127860058861187b565b15611296576040516363df817160e01b815260040160405180910390fd5b6001600160a01b0383166112bd5760405163e6c4247b60e01b815260040160405180910390fd5b856000036112de5760405163b4fa3fb360e01b815260040160405180910390fd5b6000851180156112f557506001600160a01b038216155b156113135760405163b4fa3fb360e01b815260040160405180910390fd5b60008411801561132a57506001600160a01b038116155b156113485760405163b4fa3fb360e01b815260040160405180910390fd5b836113538688611826565b61135d9190611826565b60641461137d5760405163b4fa3fb360e01b815260040160405180910390fd5b50505050505050565b600060038361139684606461188f565b6113a091906118a6565b1080156113c257506000836113b684606461188f565b6113c091906118a6565b115b156113cf57506005610381565b60036005846113df85606461188f565b6113e991906118a6565b6113f3919061187b565b6113fd91906118a6565b60058461140b85606461188f565b61141591906118a6565b61141f91906118a6565b6114299190611826565b61143490600561188f565b9050610381565b60006064611449838561188f565b61145391906118a6565b9392505050565b6114648282610a18565b61043057611471816114b3565b61147c8360206114c5565b60405160200161148d9291906118de565b60408051601f198184030181529082905262461bcd60e51b825261041d9160040161194d565b60606103816001600160a01b03831660145b606060006114d483600261188f565b6114df906002611826565b67ffffffffffffffff8111156114f7576114f7611980565b6040519080825280601f01601f191660200182016040528015611521576020820181803683370190505b509050600360fc1b8160008151811061153c5761153c611996565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061156b5761156b611996565b60200101906001600160f81b031916908160001a905350600061158f84600261188f565b61159a906001611826565b90505b6001811115611612576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106115ce576115ce611996565b1a60f81b8282815181106115e4576115e4611996565b60200101906001600160f81b031916908160001a90535060049490941c9361160b816119ac565b905061159d565b5083156114535760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161041d565b60006020828403121561167357600080fd5b81356001600160e01b03198116811461145357600080fd5b60006020828403121561169d57600080fd5b5035919050565b6001600160a01b038116811461118157600080fd5b600080604083850312156116cc57600080fd5b8235915060208301356116de816116a4565b809150509250929050565b600080600080608085870312156116ff57600080fd5b843561170a816116a4565b9350602085013561171a816116a4565b9250604085013561172a816116a4565b9150606085013561173a816116a4565b939692955090935050565b600080600080600080600060e0888a03121561176057600080fd5b873596506020880135955060408801359450606088013593506080880135611787816116a4565b925060a0880135611797816116a4565b915060c08801356117a7816116a4565b8091505092959891949750929550565b600080604083850312156117ca57600080fd5b50508035926020909101359150565b958652602086019490945260408501929092526001600160a01b03908116606085015290811660808401521660a082015260c00190565b634e487b7160e01b600052601160045260246000fd5b8082018082111561038157610381611810565b8181038181111561038157610381611810565b6001600160a01b03929092168252602082015260400190565b634e487b7160e01b600052601260045260246000fd5b60008261188a5761188a611865565b500690565b808202811582820484141761038157610381611810565b6000826118b5576118b5611865565b500490565b60005b838110156118d55781810151838201526020016118bd565b50506000910152565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8152600083516119108160178501602088016118ba565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516119418160288401602088016118ba565b01602801949350505050565b602081526000825180602084015261196c8160408501602087016118ba565b601f01601f19169190910160400192915050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6000816119bb576119bb611810565b50600019019056fe8e4f01b2ef10e587f670bbfd448bba9a57a36fd9c81549b587269120cb62b24da2646970667358221220a0ced16c287ce777ad08cbea67cf3653588a3ed059f4609b05502cc5947b830c64736f6c63430008130033",
  "devdoc": {
    "events": {
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "distributeCollFee(uint256,uint256)": {
        "params": {
          "_coll": "amount of BFE tokens that user receives in the event of succesful borrowing op",
          "_fee": "amount of fee that user is getting cut with in the event of succseful borrowing op Distributes fees that are coming in WstETH according to the config set by an admin. During the execution it is calculated the % that _fee is of _debt to find an appropriate config routing"
        }
      },
      "distributeDebtFee(uint256,uint256)": {
        "params": {
          "_debt": "amount of BFE tokens that user receives in the event of succesful borrowing op",
          "_fee": "amount of fee that user is getting cut with in the event of succseful borrowing op Distributes fees that are coming in BFEE according to the config set by an admin. During the execution it is calculated the % that _fee is of _debt to find an appropriate config routing"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setCollFeeConfig(uint256,uint256,uint256,uint256,address,address,address)": {
        "params": {
          "_addressA": "_addressA that receives tokens in the event of tx fee appears in _percentage range. Can't be an address(0)",
          "_addressB": "_addressB that receives tokens in the event of tx fee appears in _percentage range. Set to address(0) to skip",
          "_addressC": "_addressC that receives tokens in the event of tx fee appears in _percentage range. Set to address(0) to skip",
          "_amountA": "amount of tokens that _addressA is going to receive in the event of tx fee appears in _percentage range. Must be > 0",
          "_amountB": "amount of tokens that _addressB is going to receive in the event of tx fee appears in _percentage range. Set to 0 to skip",
          "_amountC": "amount of tokens that _addressC is going to receive in the event of tx fee appears in _percentage range Set to 0 to skip",
          "_percentage": "range at which new config is valid"
        }
      },
      "setDebtFeeConfig(uint256,uint256,uint256,uint256,address,address,address)": {
        "params": {
          "_addressA": "_addressA that receives tokens in the event of tx fee appears in _percentage range. Can't be an address(0)",
          "_addressB": "_addressB that receives tokens in the event of tx fee appears in _percentage range. Set to address(0) to skip",
          "_addressC": "_addressC that receives tokens in the event of tx fee appears in _percentage range. Set to address(0) to skip",
          "_amountA": "amount of tokens that _addressA is going to receive in the event of tx fee appears in _percentage range. Must be > 0",
          "_amountB": "amount of tokens that _addressB is going to receive in the event of tx fee appears in _percentage range. Set to 0 to skip",
          "_amountC": "amount of tokens that _addressC is going to receive in the event of tx fee appears in _percentage range Set to 0 to skip",
          "_percentage": "range at which new config is valid"
        }
      },
      "setFeeConfigs(uint256,uint256,uint256,uint256,address,address,address)": {
        "params": {
          "_addressA": "_addressA that receives tokens in the event of tx fee appears in _percentage range. Can't be an address(0)",
          "_addressB": "_addressB that receives tokens in the event of tx fee appears in _percentage range. Set to address(0) to skip",
          "_addressC": "_addressC that receives tokens in the event of tx fee appears in _percentage range. Set to address(0) to skip",
          "_amountA": "amount of tokens that _addressA is going to receive in the event of tx fee appears in _percentage range. Must be > 0",
          "_amountB": "amount of tokens that _addressB is going to receive in the event of tx fee appears in _percentage range. Set to 0 to skip",
          "_amountC": "amount of tokens that _addressC is going to receive in the event of tx fee appears in _percentage range Set to 0 to skip",
          "_percentage": "range at which new config is valid"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "setAddresses(address,address,address,address)": {
        "notice": "An initialiser function where HDG protocol address are getting set"
      },
      "setCollFeeConfig(uint256,uint256,uint256,uint256,address,address,address)": {
        "notice": "Sets coll fees configs. Should be used if routing logic is unique for WStETH token fees. Only callable by an admin"
      },
      "setDebtFeeConfig(uint256,uint256,uint256,uint256,address,address,address)": {
        "notice": "Sets debt fees configs. Should be used if routing logic is unique for BFE token fees. Only callable by an admin"
      },
      "setFeeConfigs(uint256,uint256,uint256,uint256,address,address,address)": {
        "notice": "Sets both debt and coll fees configs. Should be used if routing logic is the same for both procesesses. Only callable by an admin"
      }
    },
    "notice": "HEDGEHOG UPDATES:Completely new contract in Hedgehog Protocol, that was never a part of Liquity Protocol Accepts fees and routes it to different places(or a single one) assigned by the account with \"SETTER\" rights Contract overall is a config of addresses assigned for each 5% range from 0 to 100.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "contracts/FeesRouter.sol:FeesRouter",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 6530,
        "contract": "contracts/FeesRouter.sol:FeesRouter",
        "label": "debtFeeConfigs",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(FeeConfig)6525_storage)"
      },
      {
        "astId": 6535,
        "contract": "contracts/FeesRouter.sol:FeesRouter",
        "label": "collFeeConfigs",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(FeeConfig)6525_storage)"
      },
      {
        "astId": 6538,
        "contract": "contracts/FeesRouter.sol:FeesRouter",
        "label": "baseFeeLMAToken",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IBaseFeeLMAToken)23317"
      },
      {
        "astId": 6541,
        "contract": "contracts/FeesRouter.sol:FeesRouter",
        "label": "activePool",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IActivePool)23259"
      },
      {
        "astId": 6543,
        "contract": "contracts/FeesRouter.sol:FeesRouter",
        "label": "borrowersOp",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 6545,
        "contract": "contracts/FeesRouter.sol:FeesRouter",
        "label": "troveManager",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IActivePool)23259": {
        "encoding": "inplace",
        "label": "contract IActivePool",
        "numberOfBytes": "20"
      },
      "t_contract(IBaseFeeLMAToken)23317": {
        "encoding": "inplace",
        "label": "contract IBaseFeeLMAToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_uint256,t_struct(FeeConfig)6525_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct FeesRouter.FeeConfig)",
        "numberOfBytes": "32",
        "value": "t_struct(FeeConfig)6525_storage"
      },
      "t_struct(FeeConfig)6525_storage": {
        "encoding": "inplace",
        "label": "struct FeesRouter.FeeConfig",
        "members": [
          {
            "astId": 6514,
            "contract": "contracts/FeesRouter.sol:FeesRouter",
            "label": "amountA",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6516,
            "contract": "contracts/FeesRouter.sol:FeesRouter",
            "label": "amountB",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6518,
            "contract": "contracts/FeesRouter.sol:FeesRouter",
            "label": "amountC",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6520,
            "contract": "contracts/FeesRouter.sol:FeesRouter",
            "label": "addressA",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 6522,
            "contract": "contracts/FeesRouter.sol:FeesRouter",
            "label": "addressB",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 6524,
            "contract": "contracts/FeesRouter.sol:FeesRouter",
            "label": "addressC",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/FeesRouter.sol:FeesRouter",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/FeesRouter.sol:FeesRouter",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}