{
  "address": "0x62728EdC0017ad22629919e47B2B046F9EB526A7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gasComp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minNetDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_activePoolAddress",
          "type": "address"
        }
      ],
      "name": "ActivePoolAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newBaseFeeLMATokenAddress",
          "type": "address"
        }
      ],
      "name": "BaseFeeLMATokenAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_borrowBaseRate",
          "type": "uint256"
        }
      ],
      "name": "BorrowBaseRateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newBorrowerOperationsAddress",
          "type": "address"
        }
      ],
      "name": "BorrowerOperationsAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_collSurplusPoolAddress",
          "type": "address"
        }
      ],
      "name": "CollSurplusPoolAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_defaultPoolAddress",
          "type": "address"
        }
      ],
      "name": "DefaultPoolAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IFeesRouter",
          "name": "_feesRouter",
          "type": "address"
        }
      ],
      "name": "FeesRouterAddressUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_gasPoolAddress",
          "type": "address"
        }
      ],
      "name": "GasPoolAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_hogTokenAddress",
          "type": "address"
        }
      ],
      "name": "HOGTokenAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_L_WStETH",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_L_BaseFeeLMADebt",
          "type": "uint256"
        }
      ],
      "name": "LTermsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_lastBorrowTime",
          "type": "uint256"
        }
      ],
      "name": "LastBorrowTimeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_lastRedemptionTime",
          "type": "uint256"
        }
      ],
      "name": "LastRedemptionTimeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_liquidatedDebt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_liquidatedColl",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_collGasCompensation",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_BaseFeeLMAGasCompensation",
          "type": "uint256"
        }
      ],
      "name": "Liquidation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newPriceFeedAddress",
          "type": "address"
        }
      ],
      "name": "PriceFeedAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_attemptedBaseFeeLMAAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_actualBaseFeeLMAAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_WStETHSent",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_WStETHFee",
          "type": "uint256"
        }
      ],
      "name": "Redemption",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_redemptionBaseRate",
          "type": "uint256"
        }
      ],
      "name": "RedemptionBaseRateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_sortedTrovesAddress",
          "type": "address"
        }
      ],
      "name": "SortedTrovesAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_stabilityPoolAddress",
          "type": "address"
        }
      ],
      "name": "StabilityPoolAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_totalStakesSnapshot",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_totalCollateralSnapshot",
          "type": "uint256"
        }
      ],
      "name": "SystemSnapshotsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newTotalStakes",
          "type": "uint256"
        }
      ],
      "name": "TotalStakesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newIndex",
          "type": "uint256"
        }
      ],
      "name": "TroveIndexUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_debt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_coll",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum TroveManager.TroveManagerOperation",
          "name": "_operation",
          "type": "uint8"
        }
      ],
      "name": "TroveLiquidated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_L_WStETH",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_L_BaseFeeLMADebt",
          "type": "uint256"
        }
      ],
      "name": "TroveSnapshotsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_debt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_coll",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_stake",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum TroveManager.TroveManagerOperation",
          "name": "_operation",
          "type": "uint8"
        }
      ],
      "name": "TroveUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BETA",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BOOTSTRAP_PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BORROWING_FEE_FLOOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BaseFeeLMA_GAS_COMPENSATION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CCR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DECIMAL_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "L_BaseFeeLMADebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "L_WStETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_BORROWING_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MCR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINUTE_DECAY_BORROWING_FACTOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINUTE_DECAY_REDEMPTION_FACTOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_NET_DEBT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERCENT_DIVISOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REDEMPTION_FEE_FLOOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SECONDS_IN_ONE_MINUTE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "TroveOwners",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "Troves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "debt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "coll",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stake",
          "type": "uint256"
        },
        {
          "internalType": "enum TroveManager.Status",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "uint128",
          "name": "arrayIndex",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_100pct",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "activePool",
      "outputs": [
        {
          "internalType": "contract IActivePool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "addTroveOwnerToArray",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "applyPendingRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseFeeLMAToken",
      "outputs": [
        {
          "internalType": "contract IBaseFeeLMAToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_troveArray",
          "type": "address[]"
        }
      ],
      "name": "batchLiquidateTroves",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowBaseRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowerOperationsAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "checkRecoveryMode",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkUnreliableRecoveryMode",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "closeTrove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decayBaseRateFromBorrowing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_collDecrease",
          "type": "uint256"
        }
      ],
      "name": "decreaseTroveColl",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_debtDecrease",
          "type": "uint256"
        }
      ],
      "name": "decreaseTroveDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultPool",
      "outputs": [
        {
          "internalType": "contract IDefaultPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feesRouter",
      "outputs": [
        {
          "internalType": "contract IFeesRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_BaseFeeLMADebt",
          "type": "uint256"
        }
      ],
      "name": "getBorrowingFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_BaseFeeLMADebt",
          "type": "uint256"
        }
      ],
      "name": "getBorrowingFeeWithDecay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_issuedBaseFeeLMA",
          "type": "uint256"
        }
      ],
      "name": "getBorrowingRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_issuedBaseFeeLMA",
          "type": "uint256"
        }
      ],
      "name": "getBorrowingRateWithDecay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "getCurrentICR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "getEntireDebtAndColl",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "debt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "coll",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pendingBaseFeeLMADebtReward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pendingWStETHReward",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntireSystemColl",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "entireSystemColl",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntireSystemDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "entireSystemDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "getNominalICR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_coll",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_debt",
          "type": "uint256"
        }
      ],
      "name": "getNormalLiquidationPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "getPendingBaseFeeLMADebtReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "getPendingWStETHReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_coll",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_debt",
          "type": "uint256"
        }
      ],
      "name": "getRecoveryLiquidationPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_WStETHDrawn",
          "type": "uint256"
        }
      ],
      "name": "getRedemptionFeeWithDecay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_redemptionColl",
          "type": "uint256"
        }
      ],
      "name": "getRedemptionRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_redemptionColl",
          "type": "uint256"
        }
      ],
      "name": "getRedemptionRateWithDecay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "getTCR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "getTroveColl",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "getTroveDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getTroveFromTroveOwnersArray",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTroveOwnersCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "getTroveStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "getTroveStatus",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUnreliableTCR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "getUnreliableTroveICR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "hasPendingRewards",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hogToken",
      "outputs": [
        {
          "internalType": "contract IHOGToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_collIncrease",
          "type": "uint256"
        }
      ],
      "name": "increaseTroveColl",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_debtIncrease",
          "type": "uint256"
        }
      ],
      "name": "increaseTroveDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastBaseFeeLMADebtError_Redistribution",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastBorrowTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastRedemptionTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastWStETHError_Redistribution",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "liquidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_n",
          "type": "uint256"
        }
      ],
      "name": "liquidateTroves",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "contract IPriceFeed",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_BaseFeeLMAamount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_firstRedemptionHint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_upperPartialRedemptionHint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lowerPartialRedemptionHint",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_partialRedemptionHintNICR",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxIterations",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxFeePercentage",
          "type": "uint256"
        }
      ],
      "name": "redeemCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redemptionBaseRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "removeStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewardSnapshots",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "WStETH",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "BaseFeeLMADebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrowerOperationsAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_activePoolAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_defaultPoolAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stabilityPoolAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gasPoolAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collSurplusPoolAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_priceFeedAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_baseFeeLMATokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sortedTrovesAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_hogTokenAddress",
          "type": "address"
        },
        {
          "internalType": "contract IFeesRouter",
          "name": "_feesRouterAddress",
          "type": "address"
        }
      ],
      "name": "setAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_num",
          "type": "uint256"
        }
      ],
      "name": "setTroveStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sortedTroves",
      "outputs": [
        {
          "internalType": "contract ISortedTroves",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stabilityPool",
      "outputs": [
        {
          "internalType": "contract IStabilityPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalCollateralSnapshot",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStakes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStakesSnapshot",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newBaseRate",
          "type": "uint256"
        }
      ],
      "name": "updateBaseRateFromBorrowing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "updateStakeAndTotalStakes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "updateTroveRewardSnapshots",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa8651469ca5923f762ce134ad0ebaab898561ffdf0e264aecbedf85a83e2c60e",
  "receipt": {
    "to": null,
    "from": "0x796EcfBe7a2A424f9D905dfC38b8994aB2db9FD6",
    "contractAddress": "0x62728EdC0017ad22629919e47B2B046F9EB526A7",
    "transactionIndex": 6,
    "gasUsed": "5216314",
    "logsBloom": "0x
    "blockHash": "0xe596da8caffbc7a88b9b950df7c5773dfb41f1aea47606bcc19d4a133e7f464c",
    "transactionHash": "0xa8651469ca5923f762ce134ad0ebaab898561ffdf0e264aecbedf85a83e2c60e",
    "logs": [
      {
        "transactionIndex": 6,
        "blockNumber": 46221977,
        "transactionHash": "0xa8651469ca5923f762ce134ad0ebaab898561ffdf0e264aecbedf85a83e2c60e",
        "address": "0x62728EdC0017ad22629919e47B2B046F9EB526A7",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000796ecfbe7a2a424f9d905dfc38b8994ab2db9fd6"
        ],
        "data": "0x",
        "logIndex": 12,
        "blockHash": "0xe596da8caffbc7a88b9b950df7c5773dfb41f1aea47606bcc19d4a133e7f464c"
      },
      {
        "transactionIndex": 6,
        "blockNumber": 46221977,
        "transactionHash": "0xa8651469ca5923f762ce134ad0ebaab898561ffdf0e264aecbedf85a83e2c60e",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000796ecfbe7a2a424f9d905dfc38b8994ab2db9fd6",
          "0x0000000000000000000000005082f249cdb2f2c1ee035e4f423c46ea2dab3ab1"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000205b63fcb63d7400000000000000000000000000000000000000000000000009fae066b7bff50d00000000000000000000000000000000000000000000069149ebe85ebdf11f7800000000000000000000000000000000000000000000000009da8502bb09b7990000000000000000000000000000000000000000000006914a0c43c2baa75cec",
        "logIndex": 13,
        "blockHash": "0xe596da8caffbc7a88b9b950df7c5773dfb41f1aea47606bcc19d4a133e7f464c"
      }
    ],
    "blockNumber": 46221977,
    "cumulativeGasUsed": "5592666",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "100000",
    "100000"
  ],
  "numDeployments": 1,
  "solcInputHash": "26b7e46187074ecdc3b4eda7be7ea101",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gasComp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minNetDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_activePoolAddress\",\"type\":\"address\"}],\"name\":\"ActivePoolAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newBaseFeeLMATokenAddress\",\"type\":\"address\"}],\"name\":\"BaseFeeLMATokenAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_borrowBaseRate\",\"type\":\"uint256\"}],\"name\":\"BorrowBaseRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newBorrowerOperationsAddress\",\"type\":\"address\"}],\"name\":\"BorrowerOperationsAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_collSurplusPoolAddress\",\"type\":\"address\"}],\"name\":\"CollSurplusPoolAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_defaultPoolAddress\",\"type\":\"address\"}],\"name\":\"DefaultPoolAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IFeesRouter\",\"name\":\"_feesRouter\",\"type\":\"address\"}],\"name\":\"FeesRouterAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_gasPoolAddress\",\"type\":\"address\"}],\"name\":\"GasPoolAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_hogTokenAddress\",\"type\":\"address\"}],\"name\":\"HOGTokenAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_L_WStETH\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_L_BaseFeeLMADebt\",\"type\":\"uint256\"}],\"name\":\"LTermsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_lastBorrowTime\",\"type\":\"uint256\"}],\"name\":\"LastBorrowTimeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_lastRedemptionTime\",\"type\":\"uint256\"}],\"name\":\"LastRedemptionTimeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_liquidatedDebt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_liquidatedColl\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_collGasCompensation\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_BaseFeeLMAGasCompensation\",\"type\":\"uint256\"}],\"name\":\"Liquidation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newPriceFeedAddress\",\"type\":\"address\"}],\"name\":\"PriceFeedAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_attemptedBaseFeeLMAAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_actualBaseFeeLMAAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_WStETHSent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_WStETHFee\",\"type\":\"uint256\"}],\"name\":\"Redemption\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_redemptionBaseRate\",\"type\":\"uint256\"}],\"name\":\"RedemptionBaseRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sortedTrovesAddress\",\"type\":\"address\"}],\"name\":\"SortedTrovesAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_stabilityPoolAddress\",\"type\":\"address\"}],\"name\":\"StabilityPoolAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalStakesSnapshot\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalCollateralSnapshot\",\"type\":\"uint256\"}],\"name\":\"SystemSnapshotsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newTotalStakes\",\"type\":\"uint256\"}],\"name\":\"TotalStakesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newIndex\",\"type\":\"uint256\"}],\"name\":\"TroveIndexUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_debt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_coll\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum TroveManager.TroveManagerOperation\",\"name\":\"_operation\",\"type\":\"uint8\"}],\"name\":\"TroveLiquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_L_WStETH\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_L_BaseFeeLMADebt\",\"type\":\"uint256\"}],\"name\":\"TroveSnapshotsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_debt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_coll\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_stake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum TroveManager.TroveManagerOperation\",\"name\":\"_operation\",\"type\":\"uint8\"}],\"name\":\"TroveUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BETA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BOOTSTRAP_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BORROWING_FEE_FLOOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BaseFeeLMA_GAS_COMPENSATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CCR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DECIMAL_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"L_BaseFeeLMADebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"L_WStETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BORROWING_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MCR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINUTE_DECAY_BORROWING_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINUTE_DECAY_REDEMPTION_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_NET_DEBT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENT_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REDEMPTION_FEE_FLOOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SECONDS_IN_ONE_MINUTE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"TroveOwners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Troves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"coll\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"enum TroveManager.Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"arrayIndex\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_100pct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activePool\",\"outputs\":[{\"internalType\":\"contract IActivePool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"addTroveOwnerToArray\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"applyPendingRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseFeeLMAToken\",\"outputs\":[{\"internalType\":\"contract IBaseFeeLMAToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_troveArray\",\"type\":\"address[]\"}],\"name\":\"batchLiquidateTroves\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowBaseRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowerOperationsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"checkRecoveryMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkUnreliableRecoveryMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"closeTrove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decayBaseRateFromBorrowing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_collDecrease\",\"type\":\"uint256\"}],\"name\":\"decreaseTroveColl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_debtDecrease\",\"type\":\"uint256\"}],\"name\":\"decreaseTroveDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultPool\",\"outputs\":[{\"internalType\":\"contract IDefaultPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feesRouter\",\"outputs\":[{\"internalType\":\"contract IFeesRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_BaseFeeLMADebt\",\"type\":\"uint256\"}],\"name\":\"getBorrowingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_BaseFeeLMADebt\",\"type\":\"uint256\"}],\"name\":\"getBorrowingFeeWithDecay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_issuedBaseFeeLMA\",\"type\":\"uint256\"}],\"name\":\"getBorrowingRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_issuedBaseFeeLMA\",\"type\":\"uint256\"}],\"name\":\"getBorrowingRateWithDecay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"getCurrentICR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getEntireDebtAndColl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"coll\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingBaseFeeLMADebtReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingWStETHReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntireSystemColl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"entireSystemColl\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntireSystemDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"entireSystemDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getNominalICR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_coll\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_debt\",\"type\":\"uint256\"}],\"name\":\"getNormalLiquidationPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getPendingBaseFeeLMADebtReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getPendingWStETHReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_coll\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_debt\",\"type\":\"uint256\"}],\"name\":\"getRecoveryLiquidationPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_WStETHDrawn\",\"type\":\"uint256\"}],\"name\":\"getRedemptionFeeWithDecay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_redemptionColl\",\"type\":\"uint256\"}],\"name\":\"getRedemptionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_redemptionColl\",\"type\":\"uint256\"}],\"name\":\"getRedemptionRateWithDecay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"getTCR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getTroveColl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getTroveDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getTroveFromTroveOwnersArray\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTroveOwnersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getTroveStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getTroveStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnreliableTCR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getUnreliableTroveICR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"hasPendingRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hogToken\",\"outputs\":[{\"internalType\":\"contract IHOGToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_collIncrease\",\"type\":\"uint256\"}],\"name\":\"increaseTroveColl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_debtIncrease\",\"type\":\"uint256\"}],\"name\":\"increaseTroveDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastBaseFeeLMADebtError_Redistribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastBorrowTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRedemptionTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastWStETHError_Redistribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_n\",\"type\":\"uint256\"}],\"name\":\"liquidateTroves\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract IPriceFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_BaseFeeLMAamount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_firstRedemptionHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_upperPartialRedemptionHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lowerPartialRedemptionHint\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_partialRedemptionHintNICR\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxIterations\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxFeePercentage\",\"type\":\"uint256\"}],\"name\":\"redeemCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redemptionBaseRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"removeStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardSnapshots\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"WStETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"BaseFeeLMADebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrowerOperationsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_activePoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_defaultPoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stabilityPoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gasPoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collSurplusPoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceFeedAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_baseFeeLMATokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sortedTrovesAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_hogTokenAddress\",\"type\":\"address\"},{\"internalType\":\"contract IFeesRouter\",\"name\":\"_feesRouterAddress\",\"type\":\"address\"}],\"name\":\"setAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_num\",\"type\":\"uint256\"}],\"name\":\"setTroveStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sortedTroves\",\"outputs\":[{\"internalType\":\"contract ISortedTroves\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stabilityPool\",\"outputs\":[{\"internalType\":\"contract IStabilityPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCollateralSnapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakesSnapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newBaseRate\",\"type\":\"uint256\"}],\"name\":\"updateBaseRateFromBorrowing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"updateStakeAndTotalStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"updateTroveRewardSnapshots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"checkUnreliableRecoveryMode()\":{\"notice\":\"HEDGEHOG UPDATES: New view method to help with getting the data on frontends\"},\"getCurrentICR(address,uint256)\":{\"notice\":\"Hedgehog changes: Get Price directly from the price feed instead of param passing\"},\"getUnreliableTCR()\":{\"notice\":\"HEDGEHOG UPDATES: New view method to help with getting the data on frontends\"},\"getUnreliableTroveICR(address)\":{\"notice\":\"HEDGEHOG UPDATES: New view method to help with getting the data on frontends\"}},\"notice\":\"Fork of Liquity's TroveManager. Most of the Logic remains unchanged. Changes to the contract: - Raised pragma version - Removed an import of ActivePool Interface - Logic updates with redemption & borrowing fees calculation and their distribution Even though SafeMath is no longer required, the decision was made to keep it to avoid human factor errors\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TroveManager.sol\":\"TroveManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"contracts/TroveManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./interfaces/ITroveManager.sol\\\";\\nimport \\\"./interfaces/IStabilityPool.sol\\\";\\nimport \\\"./interfaces/ICollSurplusPool.sol\\\";\\nimport \\\"./interfaces/IBaseFeeLMAToken.sol\\\";\\nimport \\\"./interfaces/ISortedTroves.sol\\\";\\nimport \\\"./interfaces/IHOGToken.sol\\\";\\nimport \\\"./interfaces/IFeesRouter.sol\\\";\\nimport \\\"./dependencies/HedgehogBase.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./dependencies/CheckContract.sol\\\";\\n\\n/**\\n * @notice Fork of Liquity's TroveManager. Most of the Logic remains unchanged.\\n * Changes to the contract:\\n * - Raised pragma version\\n * - Removed an import of ActivePool Interface\\n * - Logic updates with redemption & borrowing fees calculation and their distribution\\n * Even though SafeMath is no longer required, the decision was made to keep it to avoid human factor errors\\n */\\n\\ncontract TroveManager is HedgehogBase, Ownable, CheckContract {\\n    using SafeMath for uint256;\\n    string public constant NAME = \\\"TroveManager\\\";\\n\\n    // --- Connected contract declarations ---\\n\\n    address public borrowerOperationsAddress;\\n\\n    IStabilityPool public stabilityPool;\\n\\n    address gasPoolAddress;\\n\\n    ICollSurplusPool collSurplusPool;\\n\\n    IBaseFeeLMAToken public baseFeeLMAToken;\\n\\n    IHOGToken public hogToken;\\n\\n    IFeesRouter public feesRouter;\\n\\n    // A doubly linked list of Troves, sorted by their sorted by their collateral ratios\\n    ISortedTroves public sortedTroves;\\n\\n    // --- Data structures ---\\n\\n    uint public constant SECONDS_IN_ONE_MINUTE = 60;\\n    /*\\n     * Half-life of 12h. 12h = 720 min\\n     * (1/2) = d^720 => d = (1/2)^(1/720)\\n     */\\n    // HEDGEHOG UPDATES: Redemption and Borrowing Decay factors are now different variables\\n    uint public constant MINUTE_DECAY_REDEMPTION_FACTOR = 999037758833783000;\\n    uint public constant MINUTE_DECAY_BORROWING_FACTOR = 991152865945140000;\\n    uint public constant REDEMPTION_FEE_FLOOR = (DECIMAL_PRECISION / 1000) * 5; // 0.5%\\n    // HEDGEHOG UPDATES: Can reach 100% now\\n    uint public constant MAX_BORROWING_FEE = DECIMAL_PRECISION; // 100%\\n\\n    // During bootsrap period redemptions are not allowed\\n    uint public constant BOOTSTRAP_PERIOD = 14 days;\\n\\n    /*\\n     * BETA: 18 digit decimal. Parameter by which to divide the redeemed fraction, in order to calc the new base rate from a redemption.\\n     * Corresponds to (1 / ALPHA) in the white paper.\\n     */\\n    uint public constant BETA = 2;\\n\\n    // HEDGEHOG UPDATES: BaseRate is different for redemption and minting tokens\\n    // 1) Remove baseRate variable\\n    // 2) Create redemptionBaseRate public state variable\\n    // 3) Create borrowBaseRate public state variable\\n    uint public redemptionBaseRate;\\n    uint public borrowBaseRate;\\n\\n    // HEDGEHOG UPDATES: lastFeeOperationTime is different for redemption and minting tokens\\n    // 1) Remove lastFeeOperationTime variable\\n    // 2) Create lastRedemptionTime public state variable\\n    // 3) Create lastBorrowTime public state variable\\n    uint public lastRedemptionTime;\\n    uint public lastBorrowTime;\\n\\n    enum Status {\\n        nonExistent,\\n        active,\\n        closedByOwner,\\n        closedByLiquidation,\\n        closedByRedemption\\n    }\\n\\n    // Store the necessary data for a trove\\n    struct Trove {\\n        uint debt;\\n        uint coll;\\n        uint stake;\\n        Status status;\\n        uint128 arrayIndex;\\n    }\\n\\n    mapping(address => Trove) public Troves;\\n\\n    uint public totalStakes;\\n\\n    // Snapshot of the value of totalStakes, taken immediately after the latest liquidation\\n    uint public totalStakesSnapshot;\\n\\n    // Snapshot of the total collateral across the ActivePool and DefaultPool, immediately after the latest liquidation.\\n    uint public totalCollateralSnapshot;\\n\\n    /*\\n     * L_WStETH and L_BaseFeeLMADebt track the sums of accumulated liquidation rewards per unit staked. During its lifetime, each stake earns:\\n     *\\n     * An WStETH gain of ( stake * [L_WStETH - L_WStETH(0)] )\\n     * A BaseFeeLMADebt increase  of ( stake * [L_BaseFeeLMADebt - L_BaseFeeLMADebt(0)] )\\n     *\\n     * Where L_WStETH(0) and L_BaseFeeLMADebt(0) are snapshots of L_WStETH and L_BaseFeeLMADebt for the active Trove taken at the instant the stake was made\\n     */\\n    uint public L_WStETH;\\n    uint public L_BaseFeeLMADebt;\\n\\n    // Map addresses with active troves to their RewardSnapshot\\n    mapping(address => RewardSnapshot) public rewardSnapshots;\\n\\n    // Object containing the WStETH and BaseFeeLMA snapshots for a given active trove\\n    struct RewardSnapshot {\\n        uint WStETH;\\n        uint BaseFeeLMADebt;\\n    }\\n\\n    // Array of all active trove addresses - used to to compute an approximate hint off-chain, for the sorted list insertion\\n    address[] public TroveOwners;\\n\\n    // Error trackers for the trove redistribution calculation\\n    uint public lastWStETHError_Redistribution;\\n    uint public lastBaseFeeLMADebtError_Redistribution;\\n\\n    /*\\n     * --- Variable container structs for liquidations ---\\n     *\\n     * These structs are used to hold, return and assign variables inside the liquidation functions,\\n     * in order to avoid the error: \\\"CompilerError: Stack too deep\\\".\\n     **/\\n\\n    struct LocalVariables_OuterLiquidationFunction {\\n        uint price;\\n        uint BaseFeeLMAInStabPool;\\n        bool recoveryModeAtStart;\\n        uint liquidatedDebt;\\n        uint liquidatedColl;\\n    }\\n\\n    struct LocalVariables_InnerSingleLiquidateFunction {\\n        uint collToLiquidate;\\n        uint pendingDebtReward;\\n        uint pendingCollReward;\\n    }\\n\\n    struct LocalVariables_LiquidationSequence {\\n        uint remainingBaseFeeLMAInStabPool;\\n        uint i;\\n        uint ICR;\\n        address user;\\n        bool backToNormalMode;\\n        uint entireSystemDebt;\\n        uint entireSystemColl;\\n    }\\n\\n    struct LiquidationValues {\\n        uint entireTroveDebt;\\n        uint entireTroveColl;\\n        uint collGasCompensation;\\n        uint BaseFeeLMAGasCompensation;\\n        uint debtToOffset;\\n        uint collToSendToSP;\\n        uint debtToRedistribute;\\n        uint collToRedistribute;\\n        uint collSurplus;\\n    }\\n\\n    struct LiquidationTotals {\\n        uint totalCollInSequence;\\n        uint totalDebtInSequence;\\n        uint totalCollGasCompensation;\\n        uint totalBaseFeeLMAGasCompensation;\\n        uint totalDebtToOffset;\\n        uint totalCollToSendToSP;\\n        uint totalDebtToRedistribute;\\n        uint totalCollToRedistribute;\\n        uint totalCollSurplus;\\n    }\\n\\n    struct ContractsCache {\\n        IActivePool activePool;\\n        IDefaultPool defaultPool;\\n        IBaseFeeLMAToken baseFeeLMAToken;\\n        ISortedTroves sortedTroves;\\n        ICollSurplusPool collSurplusPool;\\n        address gasPoolAddress;\\n    }\\n    // --- Variable container structs for redemptions ---\\n\\n    struct RedemptionTotals {\\n        uint remainingBaseFeeLMA;\\n        uint totalBaseFeeLMAToRedeem;\\n        uint totalWStETHDrawn;\\n        uint WStETHFee;\\n        uint WStETHToSendToRedeemer;\\n        // HEDGEHOG UPDATES: BaseRate is different for redemption and minting tokens\\n        // Rename decayedBaseRate into decayedRedemptionBaseRate\\n        uint decayedRedemptionBaseRate;\\n        uint price;\\n        uint totalBaseFeeLMASupplyAtStart;\\n    }\\n\\n    struct SingleRedemptionValues {\\n        uint BaseFeeLMALot;\\n        uint WStETHLot;\\n        bool cancelledPartial;\\n    }\\n\\n    // --- Events ---\\n\\n    event BorrowerOperationsAddressChanged(\\n        address _newBorrowerOperationsAddress\\n    );\\n    event PriceFeedAddressChanged(address _newPriceFeedAddress);\\n    event BaseFeeLMATokenAddressChanged(address _newBaseFeeLMATokenAddress);\\n    event ActivePoolAddressChanged(address _activePoolAddress);\\n    event DefaultPoolAddressChanged(address _defaultPoolAddress);\\n    event StabilityPoolAddressChanged(address _stabilityPoolAddress);\\n    event GasPoolAddressChanged(address _gasPoolAddress);\\n    event CollSurplusPoolAddressChanged(address _collSurplusPoolAddress);\\n    event SortedTrovesAddressChanged(address _sortedTrovesAddress);\\n    event HOGTokenAddressChanged(address _hogTokenAddress);\\n    event FeesRouterAddressUpdated(IFeesRouter _feesRouter);\\n\\n    event Liquidation(\\n        uint _liquidatedDebt,\\n        uint _liquidatedColl,\\n        uint _collGasCompensation,\\n        uint _BaseFeeLMAGasCompensation\\n    );\\n    event Redemption(\\n        uint _attemptedBaseFeeLMAAmount,\\n        uint _actualBaseFeeLMAAmount,\\n        uint _WStETHSent,\\n        uint _WStETHFee\\n    );\\n    event TroveUpdated(\\n        address indexed _borrower,\\n        uint _debt,\\n        uint _coll,\\n        uint _stake,\\n        TroveManagerOperation _operation\\n    );\\n    event TroveLiquidated(\\n        address indexed _borrower,\\n        uint _debt,\\n        uint _coll,\\n        TroveManagerOperation _operation\\n    );\\n\\n    // HEDGEHOG UPDATES: BaseRate is different for redemption and minting tokens\\n    // 1) Remove BaseRateUpdated event\\n    // 2) Create RedemptionBaseRateUpdated event that accepts _redemptionBaseRate\\n    // 3) Create BorrowBaseRateUpdated event that accepts _borrowBaseRate\\n    event RedemptionBaseRateUpdated(uint _redemptionBaseRate);\\n    event BorrowBaseRateUpdated(uint _borrowBaseRate);\\n\\n    // HEDGEHOG UPDATES: BaseRate is different for redemption and minting tokens\\n    // 1) Remove LastFeeOpTimeUpdated event\\n    // 2) Create LastRedemptionTimeUpdated event that accepts _lastRedemptionTime\\n    // 3) Create LastBorrowTimeUpdated event that accepts _lastBorrowTime\\n    event LastRedemptionTimeUpdated(uint _lastRedemptionTime);\\n    event LastBorrowTimeUpdated(uint _lastBorrowTime);\\n    event TotalStakesUpdated(uint _newTotalStakes);\\n    event SystemSnapshotsUpdated(\\n        uint _totalStakesSnapshot,\\n        uint _totalCollateralSnapshot\\n    );\\n    event LTermsUpdated(uint _L_WStETH, uint _L_BaseFeeLMADebt);\\n    event TroveSnapshotsUpdated(uint _L_WStETH, uint _L_BaseFeeLMADebt);\\n    event TroveIndexUpdated(address _borrower, uint _newIndex);\\n\\n    enum TroveManagerOperation {\\n        applyPendingRewards,\\n        liquidateInNormalMode,\\n        liquidateInRecoveryMode,\\n        redeemCollateral\\n    }\\n\\n    constructor(\\n        uint _gasComp,\\n        uint _minNetDebt\\n    ) HedgehogBase(_gasComp, _minNetDebt) {}\\n\\n    // --- Dependency setter ---\\n\\n    function setAddresses(\\n        address _borrowerOperationsAddress,\\n        address _activePoolAddress,\\n        address _defaultPoolAddress,\\n        address _stabilityPoolAddress,\\n        address _gasPoolAddress,\\n        address _collSurplusPoolAddress,\\n        address _priceFeedAddress,\\n        address _baseFeeLMATokenAddress,\\n        address _sortedTrovesAddress,\\n        address _hogTokenAddress,\\n        IFeesRouter _feesRouterAddress\\n    ) external onlyOwner {\\n        checkContract(_borrowerOperationsAddress);\\n        checkContract(_activePoolAddress);\\n        checkContract(_defaultPoolAddress);\\n        checkContract(_stabilityPoolAddress);\\n        checkContract(_gasPoolAddress);\\n        checkContract(_collSurplusPoolAddress);\\n        checkContract(_priceFeedAddress);\\n        checkContract(_baseFeeLMATokenAddress);\\n        checkContract(_sortedTrovesAddress);\\n        checkContract(_hogTokenAddress);\\n        checkContract(address(_feesRouterAddress));\\n\\n        borrowerOperationsAddress = _borrowerOperationsAddress;\\n        activePool = IActivePool(_activePoolAddress);\\n        defaultPool = IDefaultPool(_defaultPoolAddress);\\n        stabilityPool = IStabilityPool(_stabilityPoolAddress);\\n        gasPoolAddress = _gasPoolAddress;\\n        collSurplusPool = ICollSurplusPool(_collSurplusPoolAddress);\\n        priceFeed = IPriceFeed(_priceFeedAddress);\\n        baseFeeLMAToken = IBaseFeeLMAToken(_baseFeeLMATokenAddress);\\n        sortedTroves = ISortedTroves(_sortedTrovesAddress);\\n        hogToken = IHOGToken(_hogTokenAddress);\\n        feesRouter = IFeesRouter(_feesRouterAddress);\\n\\n        emit BorrowerOperationsAddressChanged(_borrowerOperationsAddress);\\n        emit ActivePoolAddressChanged(_activePoolAddress);\\n        emit DefaultPoolAddressChanged(_defaultPoolAddress);\\n        emit StabilityPoolAddressChanged(_stabilityPoolAddress);\\n        emit GasPoolAddressChanged(_gasPoolAddress);\\n        emit CollSurplusPoolAddressChanged(_collSurplusPoolAddress);\\n        emit PriceFeedAddressChanged(_priceFeedAddress);\\n        emit BaseFeeLMATokenAddressChanged(_baseFeeLMATokenAddress);\\n        emit SortedTrovesAddressChanged(_sortedTrovesAddress);\\n        emit HOGTokenAddressChanged(_hogTokenAddress);\\n        emit FeesRouterAddressUpdated(_feesRouterAddress);\\n\\n        renounceOwnership();\\n    }\\n\\n    // --- Getters ---\\n\\n    function getTroveOwnersCount() external view returns (uint) {\\n        return TroveOwners.length;\\n    }\\n\\n    function getTroveFromTroveOwnersArray(\\n        uint _index\\n    ) external view returns (address) {\\n        return TroveOwners[_index];\\n    }\\n\\n    // --- Trove Liquidation functions ---\\n\\n    // Single liquidation function. Closes the trove if its ICR is lower than the minimum collateral ratio.\\n    function liquidate(address _borrower) external {\\n        _requireTroveIsActive(_borrower);\\n\\n        address[] memory borrowers = new address[](1);\\n        borrowers[0] = _borrower;\\n        batchLiquidateTroves(borrowers);\\n    }\\n\\n    // --- Inner single liquidation functions ---\\n\\n    // Liquidate one trove, in Normal Mode.\\n    function _liquidateNormalMode(\\n        IActivePool _activePool,\\n        IDefaultPool _defaultPool,\\n        address _borrower,\\n        uint _BaseFeeLMAInStabPool\\n    ) internal returns (LiquidationValues memory singleLiquidation) {\\n        LocalVariables_InnerSingleLiquidateFunction memory vars;\\n\\n        (\\n            singleLiquidation.entireTroveDebt,\\n            singleLiquidation.entireTroveColl,\\n            vars.pendingDebtReward,\\n            vars.pendingCollReward\\n        ) = getEntireDebtAndColl(_borrower);\\n\\n        _movePendingTroveRewardsToActivePool(\\n            _activePool,\\n            _defaultPool,\\n            vars.pendingDebtReward,\\n            vars.pendingCollReward\\n        );\\n        _removeStake(_borrower);\\n\\n        singleLiquidation.collGasCompensation = _getCollGasCompensation(\\n            singleLiquidation.entireTroveColl\\n        );\\n        singleLiquidation\\n            .BaseFeeLMAGasCompensation = BaseFeeLMA_GAS_COMPENSATION; // TODO: Why is that being done if BaseFeeLMA_GAS_COMP is static\\n        uint collToLiquidate = singleLiquidation.entireTroveColl.sub(\\n            singleLiquidation.collGasCompensation\\n        );\\n\\n        (\\n            singleLiquidation.debtToOffset,\\n            singleLiquidation.collToSendToSP,\\n            singleLiquidation.debtToRedistribute,\\n            singleLiquidation.collToRedistribute\\n        ) = _getOffsetAndRedistributionVals(\\n            singleLiquidation.entireTroveDebt,\\n            collToLiquidate,\\n            _BaseFeeLMAInStabPool\\n        );\\n\\n        _closeTrove(_borrower, Status.closedByLiquidation);\\n        emit TroveLiquidated(\\n            _borrower,\\n            singleLiquidation.entireTroveDebt,\\n            singleLiquidation.entireTroveColl,\\n            TroveManagerOperation.liquidateInNormalMode\\n        );\\n        emit TroveUpdated(\\n            _borrower,\\n            0,\\n            0,\\n            0,\\n            TroveManagerOperation.liquidateInNormalMode\\n        );\\n        return singleLiquidation;\\n    }\\n\\n    // Liquidate one trove, in Recovery Mode.\\n    function _liquidateRecoveryMode(\\n        IActivePool _activePool,\\n        IDefaultPool _defaultPool,\\n        address _borrower,\\n        uint _ICR,\\n        uint _BaseFeeLMAInStabPool,\\n        uint _TCR,\\n        uint _price\\n    ) internal returns (LiquidationValues memory singleLiquidation) {\\n        LocalVariables_InnerSingleLiquidateFunction memory vars;\\n        if (TroveOwners.length <= 1) {\\n            return singleLiquidation;\\n        } // don't liquidate if last trove\\n        (\\n            singleLiquidation.entireTroveDebt,\\n            singleLiquidation.entireTroveColl,\\n            vars.pendingDebtReward,\\n            vars.pendingCollReward\\n        ) = getEntireDebtAndColl(_borrower);\\n\\n        singleLiquidation.collGasCompensation = _getCollGasCompensation(\\n            singleLiquidation.entireTroveColl\\n        );\\n        singleLiquidation\\n            .BaseFeeLMAGasCompensation = BaseFeeLMA_GAS_COMPENSATION;\\n        vars.collToLiquidate = singleLiquidation.entireTroveColl.sub(\\n            singleLiquidation.collGasCompensation\\n        );\\n\\n        // If ICR <= 100%, purely redistribute the Trove across all active Troves\\n        if (_ICR <= _100pct) {\\n            _movePendingTroveRewardsToActivePool(\\n                _activePool,\\n                _defaultPool,\\n                vars.pendingDebtReward,\\n                vars.pendingCollReward\\n            );\\n            _removeStake(_borrower);\\n\\n            singleLiquidation.debtToOffset = 0;\\n            singleLiquidation.collToSendToSP = 0;\\n            singleLiquidation.debtToRedistribute = singleLiquidation\\n                .entireTroveDebt;\\n            singleLiquidation.collToRedistribute = vars.collToLiquidate;\\n\\n            _closeTrove(_borrower, Status.closedByLiquidation);\\n            emit TroveLiquidated(\\n                _borrower,\\n                singleLiquidation.entireTroveDebt,\\n                singleLiquidation.entireTroveColl,\\n                TroveManagerOperation.liquidateInRecoveryMode\\n            );\\n            emit TroveUpdated(\\n                _borrower,\\n                0,\\n                0,\\n                0,\\n                TroveManagerOperation.liquidateInRecoveryMode\\n            );\\n\\n            // If 100% < ICR < MCR, offset as much as possible, and redistribute the remainder\\n        } else if ((_ICR > _100pct) && (_ICR < MCR)) {\\n            _movePendingTroveRewardsToActivePool(\\n                _activePool,\\n                _defaultPool,\\n                vars.pendingDebtReward,\\n                vars.pendingCollReward\\n            );\\n            _removeStake(_borrower);\\n\\n            (\\n                singleLiquidation.debtToOffset,\\n                singleLiquidation.collToSendToSP,\\n                singleLiquidation.debtToRedistribute,\\n                singleLiquidation.collToRedistribute\\n            ) = _getOffsetAndRedistributionVals(\\n                singleLiquidation.entireTroveDebt,\\n                vars.collToLiquidate,\\n                _BaseFeeLMAInStabPool\\n            );\\n\\n            _closeTrove(_borrower, Status.closedByLiquidation);\\n            emit TroveLiquidated(\\n                _borrower,\\n                singleLiquidation.entireTroveDebt,\\n                singleLiquidation.entireTroveColl,\\n                TroveManagerOperation.liquidateInRecoveryMode\\n            );\\n            emit TroveUpdated(\\n                _borrower,\\n                0,\\n                0,\\n                0,\\n                TroveManagerOperation.liquidateInRecoveryMode\\n            );\\n            /*\\n             * If 110% <= ICR < current TCR (accounting for the preceding liquidations in the current sequence)\\n             * and there is BaseFeeLMA in the Stability Pool, only offset, with no redistribution,\\n             * but at a capped rate of 1.1 and only if the whole debt can be liquidated.\\n             * The remainder due to the capped rate will be claimable as collateral surplus.\\n             */\\n        } else if (\\n            (_ICR >= MCR) &&\\n            (_ICR < _TCR) &&\\n            (singleLiquidation.entireTroveDebt <= _BaseFeeLMAInStabPool)\\n        ) {\\n            _movePendingTroveRewardsToActivePool(\\n                _activePool,\\n                _defaultPool,\\n                vars.pendingDebtReward,\\n                vars.pendingCollReward\\n            );\\n            assert(_BaseFeeLMAInStabPool != 0);\\n\\n            _removeStake(_borrower);\\n            singleLiquidation = _getCappedOffsetVals(\\n                singleLiquidation.entireTroveDebt,\\n                singleLiquidation.entireTroveColl,\\n                _price\\n            );\\n\\n            _closeTrove(_borrower, Status.closedByLiquidation);\\n            if (singleLiquidation.collSurplus > 0) {\\n                collSurplusPool.accountSurplus(\\n                    _borrower,\\n                    singleLiquidation.collSurplus\\n                );\\n            }\\n\\n            emit TroveLiquidated(\\n                _borrower,\\n                singleLiquidation.entireTroveDebt,\\n                singleLiquidation.collToSendToSP,\\n                TroveManagerOperation.liquidateInRecoveryMode\\n            );\\n            emit TroveUpdated(\\n                _borrower,\\n                0,\\n                0,\\n                0,\\n                TroveManagerOperation.liquidateInRecoveryMode\\n            );\\n        } else {\\n            // if (_ICR >= MCR && ( _ICR >= _TCR || singleLiquidation.entireTroveDebt > _BaseFeeLMAInStabPool))\\n            LiquidationValues memory zeroVals;\\n            return zeroVals;\\n        }\\n\\n        return singleLiquidation;\\n    }\\n\\n    /* In a full liquidation, returns the values for a trove's coll and debt to be offset, and coll and debt to be\\n     * redistributed to active troves.\\n     */\\n    function _getOffsetAndRedistributionVals(\\n        uint _debt,\\n        uint _coll,\\n        uint _BaseFeeLMAInStabPool\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint debtToOffset,\\n            uint collToSendToSP,\\n            uint debtToRedistribute,\\n            uint collToRedistribute\\n        )\\n    {\\n        if (_BaseFeeLMAInStabPool > 0) {\\n            /*\\n             * Offset as much debt & collateral as possible against the Stability Pool, and redistribute the remainder\\n             * between all active troves.\\n             *\\n             *  If the trove's debt is larger than the deposited BaseFeeLMA in the Stability Pool:\\n             *\\n             *  - Offset an amount of the trove's debt equal to the BaseFeeLMA in the Stability Pool\\n             *  - Send a fraction of the trove's collateral to the Stability Pool, equal to the fraction of its offset debt\\n             *\\n             */\\n            debtToOffset = LiquityMath._min(_debt, _BaseFeeLMAInStabPool);\\n            collToSendToSP = _coll.mul(debtToOffset).div(_debt);\\n            debtToRedistribute = _debt.sub(debtToOffset);\\n            collToRedistribute = _coll.sub(collToSendToSP);\\n        } else {\\n            debtToOffset = 0;\\n            collToSendToSP = 0;\\n            debtToRedistribute = _debt;\\n            collToRedistribute = _coll;\\n        }\\n    }\\n\\n    /*\\n     *  Get its offset coll/debt and WStETH gas comp, and close the trove.\\n     */\\n    function _getCappedOffsetVals(\\n        uint _entireTroveDebt,\\n        uint _entireTroveColl,\\n        uint _price\\n    ) internal view returns (LiquidationValues memory singleLiquidation) {\\n        singleLiquidation.entireTroveDebt = _entireTroveDebt;\\n        singleLiquidation.entireTroveColl = _entireTroveColl;\\n\\n        // HEDGEHOG UPDATES:\\n        // Changed the cappedCollPortion formula from [entireTroveDebt] * [MCR] / [price]  to => [entireTroveDebt] * [MCR] * [price] / [DECIMAL_PRECISION]/ [DECIMAL_PRECISION]\\n        uint cappedCollPortion = _entireTroveDebt.mul(MCR).mul(_price).div(\\n            DECIMAL_PRECISION\\n        );\\n\\n        singleLiquidation.collGasCompensation = _getCollGasCompensation(\\n            cappedCollPortion\\n        );\\n        singleLiquidation\\n            .BaseFeeLMAGasCompensation = BaseFeeLMA_GAS_COMPENSATION;\\n\\n        singleLiquidation.debtToOffset = _entireTroveDebt;\\n        singleLiquidation.collToSendToSP = cappedCollPortion.sub(\\n            singleLiquidation.collGasCompensation\\n        );\\n        singleLiquidation.collSurplus = _entireTroveColl.sub(cappedCollPortion);\\n        singleLiquidation.debtToRedistribute = 0;\\n        singleLiquidation.collToRedistribute = 0;\\n    }\\n\\n    /*\\n     * Liquidate a sequence of troves. Closes a maximum number of n under-collateralized Troves,\\n     * starting from the one with the lowest collateral ratio in the system, and moving upwards\\n     */\\n    function liquidateTroves(uint _n) external {\\n        ContractsCache memory contractsCache = ContractsCache(\\n            activePool,\\n            defaultPool,\\n            IBaseFeeLMAToken(address(0)),\\n            sortedTroves,\\n            ICollSurplusPool(address(0)),\\n            address(0)\\n        );\\n        IStabilityPool stabilityPoolCached = stabilityPool;\\n\\n        LocalVariables_OuterLiquidationFunction memory vars;\\n\\n        LiquidationTotals memory totals;\\n\\n        vars.price = priceFeed.fetchPrice();\\n        vars.BaseFeeLMAInStabPool = stabilityPoolCached\\n            .getTotalBaseFeeLMADeposits();\\n        vars.recoveryModeAtStart = _checkRecoveryMode(vars.price);\\n\\n        // Perform the appropriate liquidation sequence - tally the values, and obtain their totals\\n        if (vars.recoveryModeAtStart) {\\n            totals = _getTotalsFromLiquidateTrovesSequence_RecoveryMode(\\n                contractsCache,\\n                vars.price,\\n                vars.BaseFeeLMAInStabPool,\\n                _n\\n            );\\n        } else {\\n            // if !vars.recoveryModeAtStart\\n            totals = _getTotalsFromLiquidateTrovesSequence_NormalMode(\\n                contractsCache.activePool,\\n                contractsCache.defaultPool,\\n                vars.price,\\n                vars.BaseFeeLMAInStabPool,\\n                _n\\n            );\\n        }\\n\\n        require(\\n            totals.totalDebtInSequence > 0,\\n            \\\"TroveManager: nothing to liquidate\\\"\\n        );\\n\\n        // Move liquidated WStETH and BaseFeeLMA to the appropriate pools\\n        stabilityPoolCached.offset(\\n            totals.totalDebtToOffset,\\n            totals.totalCollToSendToSP\\n        );\\n        _redistributeDebtAndColl(\\n            contractsCache.activePool,\\n            contractsCache.defaultPool,\\n            totals.totalDebtToRedistribute,\\n            totals.totalCollToRedistribute\\n        );\\n        if (totals.totalCollSurplus > 0) {\\n            contractsCache.activePool.sendWStETH(\\n                address(collSurplusPool),\\n                totals.totalCollSurplus\\n            );\\n        }\\n\\n        // Update system snapshots\\n        _updateSystemSnapshots_excludeCollRemainder(\\n            contractsCache.activePool,\\n            totals.totalCollGasCompensation\\n        );\\n\\n        vars.liquidatedDebt = totals.totalDebtInSequence;\\n        vars.liquidatedColl = totals\\n            .totalCollInSequence\\n            .sub(totals.totalCollGasCompensation)\\n            .sub(totals.totalCollSurplus);\\n        emit Liquidation(\\n            vars.liquidatedDebt,\\n            vars.liquidatedColl,\\n            totals.totalCollGasCompensation,\\n            totals.totalBaseFeeLMAGasCompensation\\n        );\\n\\n        // Send gas compensation to caller\\n        _sendGasCompensation(\\n            contractsCache.activePool,\\n            msg.sender,\\n            totals.totalBaseFeeLMAGasCompensation,\\n            totals.totalCollGasCompensation\\n        );\\n    }\\n\\n    /*\\n     * This function is used when the liquidateTroves sequence starts during Recovery Mode. However, it\\n     * handle the case where the system *leaves* Recovery Mode, part way through the liquidation sequence\\n     */\\n    function _getTotalsFromLiquidateTrovesSequence_RecoveryMode(\\n        ContractsCache memory _contractsCache,\\n        uint _price,\\n        uint _BaseFeeLMAInStabPool,\\n        uint _n\\n    ) internal returns (LiquidationTotals memory totals) {\\n        LocalVariables_LiquidationSequence memory vars;\\n        LiquidationValues memory singleLiquidation;\\n\\n        vars.remainingBaseFeeLMAInStabPool = _BaseFeeLMAInStabPool;\\n        vars.backToNormalMode = false;\\n        vars.entireSystemDebt = getEntireSystemDebt();\\n        vars.entireSystemColl = getEntireSystemColl();\\n\\n        vars.user = _contractsCache.sortedTroves.getLast();\\n        address firstUser = _contractsCache.sortedTroves.getFirst();\\n        for (vars.i = 0; vars.i < _n && vars.user != firstUser; vars.i++) {\\n            // we need to cache it, because current user is likely going to be deleted\\n            address nextUser = _contractsCache.sortedTroves.getPrev(vars.user);\\n\\n            vars.ICR = getCurrentICR(vars.user, _price);\\n\\n            if (!vars.backToNormalMode) {\\n                // Break the loop if ICR is greater than MCR and Stability Pool is empty\\n                if (\\n                    vars.ICR >= MCR && vars.remainingBaseFeeLMAInStabPool == 0\\n                ) {\\n                    break;\\n                }\\n\\n                uint TCR = LiquityMath._computeCR(\\n                    vars.entireSystemColl,\\n                    vars.entireSystemDebt,\\n                    _price\\n                );\\n\\n                singleLiquidation = _liquidateRecoveryMode(\\n                    _contractsCache.activePool,\\n                    _contractsCache.defaultPool,\\n                    vars.user,\\n                    vars.ICR,\\n                    vars.remainingBaseFeeLMAInStabPool,\\n                    TCR,\\n                    _price\\n                );\\n\\n                // Update aggregate trackers\\n                vars.remainingBaseFeeLMAInStabPool = vars\\n                    .remainingBaseFeeLMAInStabPool\\n                    .sub(singleLiquidation.debtToOffset);\\n                vars.entireSystemDebt = vars.entireSystemDebt.sub(\\n                    singleLiquidation.debtToOffset\\n                );\\n                vars.entireSystemColl = vars\\n                    .entireSystemColl\\n                    .sub(singleLiquidation.collToSendToSP)\\n                    .sub(singleLiquidation.collGasCompensation)\\n                    .sub(singleLiquidation.collSurplus);\\n\\n                // Add liquidation values to their respective running totals\\n                totals = _addLiquidationValuesToTotals(\\n                    totals,\\n                    singleLiquidation\\n                );\\n\\n                vars.backToNormalMode = !_checkPotentialRecoveryMode(\\n                    vars.entireSystemColl,\\n                    vars.entireSystemDebt,\\n                    _price\\n                );\\n            } else if (vars.backToNormalMode && vars.ICR < MCR) {\\n                singleLiquidation = _liquidateNormalMode(\\n                    _contractsCache.activePool,\\n                    _contractsCache.defaultPool,\\n                    vars.user,\\n                    vars.remainingBaseFeeLMAInStabPool\\n                );\\n\\n                vars.remainingBaseFeeLMAInStabPool = vars\\n                    .remainingBaseFeeLMAInStabPool\\n                    .sub(singleLiquidation.debtToOffset);\\n\\n                // Add liquidation values to their respective running totals\\n                totals = _addLiquidationValuesToTotals(\\n                    totals,\\n                    singleLiquidation\\n                );\\n            } else break; // break if the loop reaches a Trove with ICR >= MCR\\n\\n            vars.user = nextUser;\\n        }\\n    }\\n\\n    function _getTotalsFromLiquidateTrovesSequence_NormalMode(\\n        IActivePool _activePool,\\n        IDefaultPool _defaultPool,\\n        uint _price,\\n        uint _BaseFeeLMAInStabPool,\\n        uint _n\\n    ) internal returns (LiquidationTotals memory totals) {\\n        LocalVariables_LiquidationSequence memory vars;\\n        LiquidationValues memory singleLiquidation;\\n        ISortedTroves sortedTrovesCached = sortedTroves;\\n\\n        vars.remainingBaseFeeLMAInStabPool = _BaseFeeLMAInStabPool;\\n\\n        for (vars.i = 0; vars.i < _n; vars.i++) {\\n            vars.user = sortedTrovesCached.getLast();\\n            vars.ICR = getCurrentICR(vars.user, _price);\\n\\n            if (vars.ICR < MCR) {\\n                singleLiquidation = _liquidateNormalMode(\\n                    _activePool,\\n                    _defaultPool,\\n                    vars.user,\\n                    vars.remainingBaseFeeLMAInStabPool\\n                );\\n\\n                vars.remainingBaseFeeLMAInStabPool = vars\\n                    .remainingBaseFeeLMAInStabPool\\n                    .sub(singleLiquidation.debtToOffset);\\n\\n                // Add liquidation values to their respective running totals\\n                totals = _addLiquidationValuesToTotals(\\n                    totals,\\n                    singleLiquidation\\n                );\\n            } else break; // break if the loop reaches a Trove with ICR >= MCR\\n        }\\n    }\\n\\n    /*\\n     * Attempt to liquidate a custom list of troves provided by the caller.\\n     */\\n    function batchLiquidateTroves(address[] memory _troveArray) public {\\n        require(\\n            _troveArray.length != 0,\\n            \\\"TroveManager: Calldata address array must not be empty\\\"\\n        );\\n\\n        IActivePool activePoolCached = activePool;\\n        IDefaultPool defaultPoolCached = defaultPool;\\n        IStabilityPool stabilityPoolCached = stabilityPool;\\n\\n        LocalVariables_OuterLiquidationFunction memory vars;\\n        LiquidationTotals memory totals;\\n\\n        vars.price = priceFeed.fetchPrice();\\n        vars.BaseFeeLMAInStabPool = stabilityPoolCached\\n            .getTotalBaseFeeLMADeposits();\\n        vars.recoveryModeAtStart = _checkRecoveryMode(vars.price);\\n\\n        // Perform the appropriate liquidation sequence - tally values and obtain their totals.\\n        if (vars.recoveryModeAtStart) {\\n            totals = _getTotalFromBatchLiquidate_RecoveryMode(\\n                activePoolCached,\\n                defaultPoolCached,\\n                vars.price,\\n                vars.BaseFeeLMAInStabPool,\\n                _troveArray\\n            );\\n        } else {\\n            //  if !vars.recoveryModeAtStart\\n            totals = _getTotalsFromBatchLiquidate_NormalMode(\\n                activePoolCached,\\n                defaultPoolCached,\\n                vars.price,\\n                vars.BaseFeeLMAInStabPool,\\n                _troveArray\\n            );\\n        }\\n\\n        require(\\n            totals.totalDebtInSequence > 0,\\n            \\\"TroveManager: nothing to liquidate\\\"\\n        );\\n\\n        // Move liquidated WStETH and BaseFeeLMA to the appropriate pools\\n        stabilityPoolCached.offset(\\n            totals.totalDebtToOffset,\\n            totals.totalCollToSendToSP\\n        );\\n        _redistributeDebtAndColl(\\n            activePoolCached,\\n            defaultPoolCached,\\n            totals.totalDebtToRedistribute,\\n            totals.totalCollToRedistribute\\n        );\\n\\n        if (totals.totalCollSurplus > 0) {\\n            collSurplusPool.increaseBalance(totals.totalCollSurplus);\\n            activePoolCached.sendWStETH(\\n                address(collSurplusPool),\\n                totals.totalCollSurplus\\n            );\\n        }\\n        // Update system snapshots\\n        _updateSystemSnapshots_excludeCollRemainder(\\n            activePoolCached,\\n            totals.totalCollGasCompensation\\n        );\\n\\n        vars.liquidatedDebt = totals.totalDebtInSequence;\\n\\n        vars.liquidatedColl = totals\\n            .totalCollInSequence\\n            .sub(totals.totalCollGasCompensation)\\n            .sub(totals.totalCollSurplus);\\n\\n        emit Liquidation(\\n            vars.liquidatedDebt,\\n            vars.liquidatedColl,\\n            totals.totalCollGasCompensation,\\n            totals.totalBaseFeeLMAGasCompensation\\n        );\\n        // Send gas compensation to caller\\n        _sendGasCompensation(\\n            activePoolCached,\\n            msg.sender,\\n            totals.totalBaseFeeLMAGasCompensation,\\n            totals.totalCollGasCompensation\\n        );\\n    }\\n\\n    /*\\n     * This function is used when the batch liquidation sequence starts during Recovery Mode. However, it\\n     * handle the case where the system *leaves* Recovery Mode, part way through the liquidation sequence\\n     */\\n    function _getTotalFromBatchLiquidate_RecoveryMode(\\n        IActivePool _activePool,\\n        IDefaultPool _defaultPool,\\n        uint _price,\\n        uint _BaseFeeLMAInStabPool,\\n        address[] memory _troveArray\\n    ) internal returns (LiquidationTotals memory totals) {\\n        LocalVariables_LiquidationSequence memory vars;\\n        LiquidationValues memory singleLiquidation;\\n\\n        vars.remainingBaseFeeLMAInStabPool = _BaseFeeLMAInStabPool;\\n        vars.backToNormalMode = false;\\n        vars.entireSystemDebt = getEntireSystemDebt();\\n        vars.entireSystemColl = getEntireSystemColl();\\n\\n        for (vars.i = 0; vars.i < _troveArray.length; vars.i++) {\\n            vars.user = _troveArray[vars.i];\\n            // Skip non-active troves\\n            if (Troves[vars.user].status != Status.active) {\\n                continue;\\n            }\\n            vars.ICR = getCurrentICR(vars.user, _price);\\n\\n            if (!vars.backToNormalMode) {\\n                // Skip this trove if ICR is greater than MCR and Stability Pool is empty\\n                if (\\n                    vars.ICR >= MCR && vars.remainingBaseFeeLMAInStabPool == 0\\n                ) {\\n                    continue;\\n                }\\n\\n                uint TCR = LiquityMath._computeCR(\\n                    vars.entireSystemColl,\\n                    vars.entireSystemDebt,\\n                    _price\\n                );\\n\\n                singleLiquidation = _liquidateRecoveryMode(\\n                    _activePool,\\n                    _defaultPool,\\n                    vars.user,\\n                    vars.ICR,\\n                    vars.remainingBaseFeeLMAInStabPool,\\n                    TCR,\\n                    _price\\n                );\\n\\n                // Update aggregate trackers\\n                vars.remainingBaseFeeLMAInStabPool = vars\\n                    .remainingBaseFeeLMAInStabPool\\n                    .sub(singleLiquidation.debtToOffset);\\n                vars.entireSystemDebt = vars.entireSystemDebt.sub(\\n                    singleLiquidation.debtToOffset\\n                );\\n                vars.entireSystemColl = vars\\n                    .entireSystemColl\\n                    .sub(singleLiquidation.collToSendToSP)\\n                    .sub(singleLiquidation.collGasCompensation)\\n                    .sub(singleLiquidation.collSurplus);\\n\\n                // Add liquidation values to their respective running totals\\n                totals = _addLiquidationValuesToTotals(\\n                    totals,\\n                    singleLiquidation\\n                );\\n\\n                vars.backToNormalMode = !_checkPotentialRecoveryMode(\\n                    vars.entireSystemColl,\\n                    vars.entireSystemDebt,\\n                    _price\\n                );\\n            } else if (vars.backToNormalMode && vars.ICR < MCR) {\\n                singleLiquidation = _liquidateNormalMode(\\n                    _activePool,\\n                    _defaultPool,\\n                    vars.user,\\n                    vars.remainingBaseFeeLMAInStabPool\\n                );\\n                vars.remainingBaseFeeLMAInStabPool = vars\\n                    .remainingBaseFeeLMAInStabPool\\n                    .sub(singleLiquidation.debtToOffset);\\n\\n                // Add liquidation values to their respective running totals\\n                totals = _addLiquidationValuesToTotals(\\n                    totals,\\n                    singleLiquidation\\n                );\\n            } else continue; // In Normal Mode skip troves with ICR >= MCR\\n        }\\n    }\\n\\n    function _getTotalsFromBatchLiquidate_NormalMode(\\n        IActivePool _activePool,\\n        IDefaultPool _defaultPool,\\n        uint _price,\\n        uint _BaseFeeLMAInStabPool,\\n        address[] memory _troveArray\\n    ) internal returns (LiquidationTotals memory totals) {\\n        LocalVariables_LiquidationSequence memory vars;\\n        LiquidationValues memory singleLiquidation;\\n\\n        vars.remainingBaseFeeLMAInStabPool = _BaseFeeLMAInStabPool;\\n\\n        for (vars.i = 0; vars.i < _troveArray.length; vars.i++) {\\n            vars.user = _troveArray[vars.i];\\n            vars.ICR = getCurrentICR(vars.user, _price);\\n\\n            if (vars.ICR < MCR) {\\n                singleLiquidation = _liquidateNormalMode(\\n                    _activePool,\\n                    _defaultPool,\\n                    vars.user,\\n                    vars.remainingBaseFeeLMAInStabPool\\n                );\\n\\n                vars.remainingBaseFeeLMAInStabPool = vars\\n                    .remainingBaseFeeLMAInStabPool\\n                    .sub(singleLiquidation.debtToOffset);\\n\\n                // Add liquidation values to their respective running totals\\n                totals = _addLiquidationValuesToTotals(\\n                    totals,\\n                    singleLiquidation\\n                );\\n            }\\n        }\\n    }\\n\\n    // --- Liquidation helper functions ---\\n\\n    function _addLiquidationValuesToTotals(\\n        LiquidationTotals memory oldTotals,\\n        LiquidationValues memory singleLiquidation\\n    ) internal pure returns (LiquidationTotals memory newTotals) {\\n        // Tally all the values with their respective running totals\\n        newTotals.totalCollGasCompensation = oldTotals\\n            .totalCollGasCompensation\\n            .add(singleLiquidation.collGasCompensation);\\n        newTotals.totalBaseFeeLMAGasCompensation = oldTotals\\n            .totalBaseFeeLMAGasCompensation\\n            .add(singleLiquidation.BaseFeeLMAGasCompensation);\\n        newTotals.totalDebtInSequence = oldTotals.totalDebtInSequence.add(\\n            singleLiquidation.entireTroveDebt\\n        );\\n        newTotals.totalCollInSequence = oldTotals.totalCollInSequence.add(\\n            singleLiquidation.entireTroveColl\\n        );\\n        newTotals.totalDebtToOffset = oldTotals.totalDebtToOffset.add(\\n            singleLiquidation.debtToOffset\\n        );\\n        newTotals.totalCollToSendToSP = oldTotals.totalCollToSendToSP.add(\\n            singleLiquidation.collToSendToSP\\n        );\\n        newTotals.totalDebtToRedistribute = oldTotals\\n            .totalDebtToRedistribute\\n            .add(singleLiquidation.debtToRedistribute);\\n        newTotals.totalCollToRedistribute = oldTotals\\n            .totalCollToRedistribute\\n            .add(singleLiquidation.collToRedistribute);\\n        newTotals.totalCollSurplus = oldTotals.totalCollSurplus.add(\\n            singleLiquidation.collSurplus\\n        );\\n\\n        return newTotals;\\n    }\\n\\n    function _sendGasCompensation(\\n        IActivePool _activePool,\\n        address _liquidator,\\n        uint _BaseFeeLMA,\\n        uint _WStETH\\n    ) internal {\\n        if (_BaseFeeLMA > 0) {\\n            baseFeeLMAToken.returnFromPool(\\n                gasPoolAddress,\\n                _liquidator,\\n                _BaseFeeLMA\\n            );\\n        }\\n\\n        if (_WStETH > 0) {\\n            _activePool.sendWStETH(_liquidator, _WStETH);\\n        }\\n    }\\n\\n    // Move a Trove's pending debt and collateral rewards from distributions, from the Default Pool to the Active Pool\\n    function _movePendingTroveRewardsToActivePool(\\n        IActivePool _activePool,\\n        IDefaultPool _defaultPool,\\n        uint _BaseFeeLMA,\\n        uint _WStETH\\n    ) internal {\\n        _defaultPool.decreaseBaseFeeLMADebt(_BaseFeeLMA);\\n        _activePool.increaseBaseFeeLMADebt(_BaseFeeLMA);\\n\\n        _defaultPool.sendWStETHToActivePool(_WStETH);\\n    }\\n\\n    // --- Redemption functions ---\\n\\n    // Redeem as much collateral as possible from _borrower's Trove in exchange for BaseFeeLMA up to _maxBaseFeeLMAamount\\n    // HEDGEHOG Updates: Not subtracting gas compensation from the debt anymore\\n    function _redeemCollateralFromTrove(\\n        ContractsCache memory _contractsCache,\\n        address _borrower,\\n        uint _maxBaseFeeLMAamount,\\n        uint _price,\\n        address _upperPartialRedemptionHint,\\n        address _lowerPartialRedemptionHint,\\n        uint _partialRedemptionHintNICR\\n    ) internal returns (SingleRedemptionValues memory singleRedemption) {\\n        // Determine the remaining amount (lot) to be redeemed, capped by the entire debt of the Trove minus the liquidation reserve\\n        singleRedemption.BaseFeeLMALot = LiquityMath._min(\\n            _maxBaseFeeLMAamount,\\n            Troves[_borrower].debt\\n        );\\n\\n        // Get the WStETHLot of equivalent value in USD\\n        // HEDGEHOG UPDATES: Change WStETHLOT calculations formula from [debtToBeRedeemed * price * 10e9] to [debtToBeRedeemed / price]\\n        singleRedemption.WStETHLot = singleRedemption.BaseFeeLMALot.mul(_price);\\n\\n        // Decrease the debt and collateral of the current Trove according to the BaseFeeLMA lot and corresponding WStETH to send\\n        uint newDebt = (Troves[_borrower].debt).sub(\\n            singleRedemption.BaseFeeLMALot\\n        );\\n        uint newColl = (Troves[_borrower].coll).sub(singleRedemption.WStETHLot);\\n\\n        if (newDebt == BaseFeeLMA_GAS_COMPENSATION) {\\n            // No debt left in the Trove (except for the liquidation reserve), therefore the trove gets closed\\n            _removeStake(_borrower);\\n            _closeTrove(_borrower, Status.closedByRedemption);\\n            _redeemCloseTrove(\\n                _contractsCache,\\n                _borrower,\\n                BaseFeeLMA_GAS_COMPENSATION,\\n                newColl\\n            );\\n            emit TroveUpdated(\\n                _borrower,\\n                0,\\n                0,\\n                0,\\n                TroveManagerOperation.redeemCollateral\\n            );\\n        } else {\\n            uint newNICR = LiquityMath._computeNominalCR(newColl, newDebt);\\n\\n            /*\\n             * If the provided hint is out of date, we bail since trying to reinsert without a good hint will almost\\n             * certainly result in running out of gas.\\n             *\\n             * If the resultant net debt of the partial is less than the minimum, net debt we bail.\\n             */\\n\\n            if (\\n                newNICR != _partialRedemptionHintNICR ||\\n                _getNetDebt(newDebt) < MIN_NET_DEBT\\n            ) {\\n                singleRedemption.cancelledPartial = true;\\n                return singleRedemption;\\n            }\\n\\n            _contractsCache.sortedTroves.reInsert(\\n                _borrower,\\n                newNICR,\\n                _upperPartialRedemptionHint,\\n                _lowerPartialRedemptionHint\\n            );\\n\\n            Troves[_borrower].debt = newDebt;\\n            Troves[_borrower].coll = newColl;\\n            _updateStakeAndTotalStakes(_borrower);\\n\\n            emit TroveUpdated(\\n                _borrower,\\n                newDebt,\\n                newColl,\\n                Troves[_borrower].stake,\\n                TroveManagerOperation.redeemCollateral\\n            );\\n        }\\n\\n        return singleRedemption;\\n    }\\n\\n    /*\\n     * Called when a full redemption occurs, and closes the trove.\\n     * The redeemer swaps (debt - liquidation reserve) BaseFeeLMA for (debt - liquidation reserve) worth of WStETH, so the BaseFeeLMA liquidation reserve left corresponds to the remaining debt.\\n     * In order to close the trove, the BaseFeeLMA liquidation reserve is burned, and the corresponding debt is removed from the active pool.\\n     * The debt recorded on the trove's struct is zero'd elswhere, in _closeTrove.\\n     * Any surplus WStETH left in the trove, is sent to the Coll surplus pool, and can be later claimed by the borrower.\\n     */\\n    function _redeemCloseTrove(\\n        ContractsCache memory _contractsCache,\\n        address _borrower,\\n        uint _BaseFeeLMA,\\n        uint _WStETH\\n    ) internal {\\n        _contractsCache.baseFeeLMAToken.burn(gasPoolAddress, _BaseFeeLMA);\\n        // Update Active Pool BaseFeeLMA, and send WStETH to account\\n        _contractsCache.activePool.decreaseBaseFeeLMADebt(_BaseFeeLMA);\\n\\n        // send WStETH from Active Pool to CollSurplus Pool\\n        _contractsCache.collSurplusPool.accountSurplus(_borrower, _WStETH);\\n        _contractsCache.activePool.sendWStETH(\\n            address(_contractsCache.collSurplusPool),\\n            _WStETH\\n        );\\n    }\\n\\n    function _isValidFirstRedemptionHint(\\n        ISortedTroves _sortedTroves,\\n        address _firstRedemptionHint,\\n        uint _price\\n    ) internal view returns (bool) {\\n        if (\\n            _firstRedemptionHint == address(0) ||\\n            !_sortedTroves.contains(_firstRedemptionHint) ||\\n            getCurrentICR(_firstRedemptionHint, _price) < MCR\\n        ) {\\n            return false;\\n        }\\n\\n        address nextTrove = _sortedTroves.getNext(_firstRedemptionHint);\\n        return\\n            nextTrove == address(0) || getCurrentICR(nextTrove, _price) < MCR;\\n    }\\n\\n    /* Send _BaseFeeLMAamount BaseFeeLMA to the system and redeem the corresponding amount of collateral from as many Troves as are needed to fill the redemption\\n     * request.  Applies pending rewards to a Trove before reducing its debt and coll.\\n     *\\n     * Note that if _amount is very large, this function can run out of gas, specially if traversed troves are small. This can be easily avoided by\\n     * splitting the total _amount in appropriate chunks and calling the function multiple times.\\n     *\\n     * Param `_maxIterations` can also be provided, so the loop through Troves is capped (if it\\u2019s zero, it will be ignored).This makes it easier to\\n     * avoid OOG for the frontend, as only knowing approximately the average cost of an iteration is enough, without needing to know the \\u201ctopology\\u201d\\n     * of the trove list. It also avoids the need to set the cap in stone in the contract, nor doing gas calculations, as both gas price and opcode\\n     * costs can vary.\\n     *\\n     * All Troves that are redeemed from -- with the likely exception of the last one -- will end up with no debt left, therefore they will be closed.\\n     * If the last Trove does have some remaining debt, it has a finite ICR, and the reinsertion could be anywhere in the list, therefore it requires a hint.\\n     * A frontend should use getRedemptionHints() to calculate what the ICR of this Trove will be after redemption, and pass a hint for its position\\n     * in the sortedTroves list along with the ICR value that the hint was found for.\\n     *\\n     * If another transaction modifies the list between calling getRedemptionHints() and passing the hints to redeemCollateral(), it\\n     * is very likely that the last (partially) redeemed Trove would end up with a different ICR than what the hint is for. In this case the\\n     * redemption will stop after the last completely redeemed Trove and the sender will keep the remaining BaseFeeLMA amount, which they can attempt\\n     * to redeem later.\\n     */\\n    function redeemCollateral(\\n        uint _BaseFeeLMAamount,\\n        address _firstRedemptionHint,\\n        address _upperPartialRedemptionHint,\\n        address _lowerPartialRedemptionHint,\\n        uint _partialRedemptionHintNICR,\\n        uint _maxIterations,\\n        uint _maxFeePercentage\\n    ) external {\\n        ContractsCache memory contractsCache = ContractsCache(\\n            activePool,\\n            defaultPool,\\n            baseFeeLMAToken,\\n            sortedTroves,\\n            collSurplusPool,\\n            gasPoolAddress\\n        );\\n        RedemptionTotals memory totals;\\n\\n        _requireValidMaxFeePercentage(_maxFeePercentage);\\n        //_requireAfterBootstrapPeriod();\\n        totals.price = priceFeed.fetchPrice();\\n\\n        _requireTCRoverMCR(totals.price);\\n        _requireAmountGreaterThanZero(_BaseFeeLMAamount);\\n        _requireBaseFeeLMABalanceCoversRedemption(\\n            contractsCache.baseFeeLMAToken,\\n            msg.sender,\\n            _BaseFeeLMAamount\\n        );\\n\\n        totals.totalBaseFeeLMASupplyAtStart = getEntireSystemDebt();\\n        // Confirm redeemer's balance is less than total BaseFeeLMA supply\\n        assert(\\n            contractsCache.baseFeeLMAToken.balanceOf(msg.sender) <=\\n                totals.totalBaseFeeLMASupplyAtStart\\n        );\\n\\n        totals.remainingBaseFeeLMA = _BaseFeeLMAamount;\\n        address currentBorrower;\\n\\n        if (\\n            _isValidFirstRedemptionHint(\\n                contractsCache.sortedTroves,\\n                _firstRedemptionHint,\\n                totals.price\\n            )\\n        ) {\\n            currentBorrower = _firstRedemptionHint;\\n        } else {\\n            currentBorrower = contractsCache.sortedTroves.getLast();\\n            // Find the first trove with ICR >= MCR\\n            while (\\n                currentBorrower != address(0) &&\\n                getCurrentICR(currentBorrower, totals.price) < MCR\\n            ) {\\n                currentBorrower = contractsCache.sortedTroves.getPrev(\\n                    currentBorrower\\n                );\\n            }\\n        }\\n        // Loop through the Troves starting from the one with lowest collateral ratio until _amount of BaseFeeLMA is exchanged for collateral\\n        if (_maxIterations == 0) {\\n            // Previous implementation: _maxIterations = uint(-1);\\n            // Updated since 8th pragma does not allow anymore\\n            _maxIterations = type(uint).max;\\n        }\\n        while (\\n            currentBorrower != address(0) &&\\n            totals.remainingBaseFeeLMA > 0 &&\\n            _maxIterations > 0\\n        ) {\\n            _maxIterations--;\\n            // Save the address of the Trove preceding the current one, before potentially modifying the list\\n            address nextUserToCheck = contractsCache.sortedTroves.getPrev(\\n                currentBorrower\\n            );\\n            _applyPendingRewards(\\n                contractsCache.activePool,\\n                contractsCache.defaultPool,\\n                currentBorrower\\n            );\\n\\n            SingleRedemptionValues\\n                memory singleRedemption = _redeemCollateralFromTrove(\\n                    contractsCache,\\n                    currentBorrower,\\n                    totals.remainingBaseFeeLMA,\\n                    totals.price,\\n                    _upperPartialRedemptionHint,\\n                    _lowerPartialRedemptionHint,\\n                    _partialRedemptionHintNICR\\n                );\\n\\n            if (singleRedemption.cancelledPartial) break; // Partial redemption was cancelled (out-of-date hint, or new net debt < minimum), therefore we could not redeem from the last Trove\\n            totals.totalBaseFeeLMAToRedeem = totals.totalBaseFeeLMAToRedeem.add(\\n                singleRedemption.BaseFeeLMALot\\n            );\\n            totals.totalWStETHDrawn = totals.totalWStETHDrawn.add(\\n                singleRedemption.WStETHLot\\n            );\\n\\n            totals.remainingBaseFeeLMA = totals.remainingBaseFeeLMA.sub(\\n                singleRedemption.BaseFeeLMALot\\n            );\\n            currentBorrower = nextUserToCheck;\\n        }\\n\\n        require(\\n            totals.totalWStETHDrawn > 0,\\n            \\\"TroveManager: Unable to redeem any amount\\\"\\n        );\\n        // HEDGEHOG LOGIC UPDATE:\\n        // 1) rename _updateBaseRateFromRedemption into _updateRedemptionBaseRateFromRedemption\\n        // 2) update commented explanation (baseRate => redemptionBaseRate)\\n        // Decay the redemptionBaseRate due to time passed, and then increase it according to the size of this redemption.\\n        // Use the saved total BaseFeeLMA supply value, from before it was reduced by the redemption.\\n        _updateRedemptionBaseRateFromRedemption(totals.totalWStETHDrawn);\\n        // Calculate the WStETH fee\\n        totals.WStETHFee = _getRedemptionFee(totals.totalWStETHDrawn);\\n\\n        _requireUserAcceptsFee(\\n            totals.WStETHFee,\\n            totals.totalWStETHDrawn,\\n            _maxFeePercentage\\n        );\\n\\n        // HEDGHEHOG UPDATES:\\n        // Fees are now distributed among different addresses based on how big they are\\n        feesRouter.distributeCollFee(totals.totalWStETHDrawn, totals.WStETHFee);\\n\\n        totals.WStETHToSendToRedeemer = totals.totalWStETHDrawn.sub(\\n            totals.WStETHFee\\n        );\\n\\n        emit Redemption(\\n            _BaseFeeLMAamount,\\n            totals.totalBaseFeeLMAToRedeem,\\n            totals.totalWStETHDrawn,\\n            totals.WStETHFee\\n        );\\n        // Burn the total BaseFeeLMA that is cancelled with debt, and send the redeemed WStETH to msg.sender\\n        contractsCache.baseFeeLMAToken.burn(\\n            msg.sender,\\n            totals.totalBaseFeeLMAToRedeem\\n        );\\n        // Update Active Pool BaseFeeLMA, and send WStETH to account\\n        contractsCache.activePool.decreaseBaseFeeLMADebt(\\n            totals.totalBaseFeeLMAToRedeem\\n        );\\n\\n        contractsCache.activePool.sendWStETH(\\n            msg.sender,\\n            totals.WStETHToSendToRedeemer\\n        );\\n    }\\n\\n    // --- Helper functions ---\\n\\n    // Return the nominal collateral ratio (ICR) of a given Trove, without the price. Takes a trove's pending coll and debt rewards from redistributions into account.\\n    function getNominalICR(address _borrower) public view returns (uint) {\\n        (\\n            uint currentWStETH,\\n            uint currentBaseFeeLMADebt\\n        ) = _getCurrentTroveAmounts(_borrower);\\n\\n        uint NICR = LiquityMath._computeNominalCR(\\n            currentWStETH,\\n            currentBaseFeeLMADebt\\n        );\\n        return NICR;\\n    }\\n\\n    /**\\n     * Hedgehog changes:\\n     * Get Price directly from the price feed instead of param passing\\n     */\\n    // Return the current collateral ratio (ICR) of a given Trove. Takes a trove's pending coll and debt rewards from redistributions into account.\\n    function getCurrentICR(\\n        address _borrower,\\n        uint _price\\n    ) public view returns (uint) {\\n        (\\n            uint currentWStETH,\\n            uint currentBaseFeeLMADebt\\n        ) = _getCurrentTroveAmounts(_borrower);\\n\\n        uint ICR = LiquityMath._computeCR(\\n            currentWStETH,\\n            currentBaseFeeLMADebt,\\n            _price\\n        );\\n        return ICR;\\n    }\\n\\n    /**\\n     * HEDGEHOG UPDATES:\\n     * New view method to help with getting the data on frontends\\n     */\\n    function getUnreliableTroveICR(\\n        address _borrower\\n    ) public view returns (uint) {\\n        uint256 price = priceFeed.lastGoodPrice();\\n        (\\n            uint currentWStETH,\\n            uint currentBaseFeeLMADebt\\n        ) = _getCurrentTroveAmounts(_borrower);\\n\\n        uint ICR = LiquityMath._computeCR(\\n            currentWStETH,\\n            currentBaseFeeLMADebt,\\n            price\\n        );\\n        return ICR;\\n    }\\n\\n    function _getCurrentTroveAmounts(\\n        address _borrower\\n    ) internal view returns (uint, uint) {\\n        uint pendingWStETHReward = getPendingWStETHReward(_borrower);\\n        uint pendingBaseFeeLMADebtReward = getPendingBaseFeeLMADebtReward(\\n            _borrower\\n        );\\n\\n        uint currentWStETH = Troves[_borrower].coll.add(pendingWStETHReward);\\n        uint currentBaseFeeLMADebt = Troves[_borrower].debt.add(\\n            pendingBaseFeeLMADebtReward\\n        );\\n\\n        return (currentWStETH, currentBaseFeeLMADebt);\\n    }\\n\\n    function applyPendingRewards(address _borrower) external {\\n        _requireCallerIsBorrowerOperations();\\n        return _applyPendingRewards(activePool, defaultPool, _borrower);\\n    }\\n\\n    // Add the borrowers's coll and debt rewards earned from redistributions, to their Trove\\n    function _applyPendingRewards(\\n        IActivePool _activePool,\\n        IDefaultPool _defaultPool,\\n        address _borrower\\n    ) internal {\\n        if (hasPendingRewards(_borrower)) {\\n            _requireTroveIsActive(_borrower);\\n\\n            // Compute pending rewards\\n            uint pendingWStETHReward = getPendingWStETHReward(_borrower);\\n\\n            uint pendingBaseFeeLMADebtReward = getPendingBaseFeeLMADebtReward(\\n                _borrower\\n            );\\n\\n            // Apply pending rewards to trove's state\\n            Troves[_borrower].coll = Troves[_borrower].coll.add(\\n                pendingWStETHReward\\n            );\\n\\n            Troves[_borrower].debt = Troves[_borrower].debt.add(\\n                pendingBaseFeeLMADebtReward\\n            );\\n\\n            _updateTroveRewardSnapshots(_borrower);\\n\\n            // Transfer from DefaultPool to ActivePool\\n            _movePendingTroveRewardsToActivePool(\\n                _activePool,\\n                _defaultPool,\\n                pendingBaseFeeLMADebtReward,\\n                pendingWStETHReward\\n            );\\n\\n            emit TroveUpdated(\\n                _borrower,\\n                Troves[_borrower].debt,\\n                Troves[_borrower].coll,\\n                Troves[_borrower].stake,\\n                TroveManagerOperation.applyPendingRewards\\n            );\\n        }\\n    }\\n\\n    // Update borrower's snapshots of L_WStETH and L_BaseFeeLMADebt to reflect the current values\\n    function updateTroveRewardSnapshots(address _borrower) external {\\n        _requireCallerIsBorrowerOperations();\\n        return _updateTroveRewardSnapshots(_borrower);\\n    }\\n\\n    function _updateTroveRewardSnapshots(address _borrower) internal {\\n        rewardSnapshots[_borrower].WStETH = L_WStETH;\\n        rewardSnapshots[_borrower].BaseFeeLMADebt = L_BaseFeeLMADebt;\\n        emit TroveSnapshotsUpdated(L_WStETH, L_BaseFeeLMADebt);\\n    }\\n\\n    // Get the borrower's pending accumulated WStETH reward, earned by their stake\\n    function getPendingWStETHReward(\\n        address _borrower\\n    ) public view returns (uint) {\\n        uint snapshotWStETH = rewardSnapshots[_borrower].WStETH;\\n        uint rewardPerUnitStaked = L_WStETH.sub(snapshotWStETH);\\n\\n        if (\\n            rewardPerUnitStaked == 0 ||\\n            Troves[_borrower].status != Status.active\\n        ) {\\n            return 0;\\n        }\\n\\n        uint stake = Troves[_borrower].stake;\\n\\n        uint pendingWStETHReward = stake.mul(rewardPerUnitStaked).div(\\n            DECIMAL_PRECISION\\n        );\\n\\n        return pendingWStETHReward;\\n    }\\n\\n    // Get the borrower's pending accumulated BaseFeeLMA reward, earned by their stake\\n    function getPendingBaseFeeLMADebtReward(\\n        address _borrower\\n    ) public view returns (uint) {\\n        uint snapshotBaseFeeLMADebt = rewardSnapshots[_borrower].BaseFeeLMADebt;\\n        uint rewardPerUnitStaked = L_BaseFeeLMADebt.sub(snapshotBaseFeeLMADebt);\\n\\n        if (\\n            rewardPerUnitStaked == 0 ||\\n            Troves[_borrower].status != Status.active\\n        ) {\\n            return 0;\\n        }\\n\\n        uint stake = Troves[_borrower].stake;\\n\\n        uint pendingBaseFeeLMADebtReward = stake.mul(rewardPerUnitStaked).div(\\n            DECIMAL_PRECISION\\n        );\\n\\n        return pendingBaseFeeLMADebtReward;\\n    }\\n\\n    function hasPendingRewards(address _borrower) public view returns (bool) {\\n        /*\\n         * A Trove has pending rewards if its snapshot is less than the current rewards per-unit-staked sum:\\n         * this indicates that rewards have occured since the snapshot was made, and the user therefore has\\n         * pending rewards\\n         */\\n        if (Troves[_borrower].status != Status.active) {\\n            return false;\\n        }\\n\\n        return (rewardSnapshots[_borrower].WStETH < L_WStETH);\\n    }\\n\\n    // Return the Troves entire debt and coll, including pending rewards from redistributions.\\n    function getEntireDebtAndColl(\\n        address _borrower\\n    )\\n        public\\n        view\\n        returns (\\n            uint debt,\\n            uint coll,\\n            uint pendingBaseFeeLMADebtReward,\\n            uint pendingWStETHReward\\n        )\\n    {\\n        debt = Troves[_borrower].debt;\\n        coll = Troves[_borrower].coll;\\n\\n        pendingBaseFeeLMADebtReward = getPendingBaseFeeLMADebtReward(_borrower);\\n        pendingWStETHReward = getPendingWStETHReward(_borrower);\\n\\n        debt = debt.add(pendingBaseFeeLMADebtReward);\\n        coll = coll.add(pendingWStETHReward);\\n    }\\n\\n    function removeStake(address _borrower) external {\\n        _requireCallerIsBorrowerOperations();\\n        return _removeStake(_borrower);\\n    }\\n\\n    // Remove borrower's stake from the totalStakes sum, and set their stake to 0\\n    function _removeStake(address _borrower) internal {\\n        uint stake = Troves[_borrower].stake;\\n        totalStakes = totalStakes.sub(stake);\\n        Troves[_borrower].stake = 0;\\n    }\\n\\n    function updateStakeAndTotalStakes(\\n        address _borrower\\n    ) external returns (uint) {\\n        _requireCallerIsBorrowerOperations();\\n        return _updateStakeAndTotalStakes(_borrower);\\n    }\\n\\n    // Update borrower's stake based on their latest collateral value\\n    function _updateStakeAndTotalStakes(\\n        address _borrower\\n    ) internal returns (uint) {\\n        uint newStake = _computeNewStake(Troves[_borrower].coll);\\n        uint oldStake = Troves[_borrower].stake;\\n        Troves[_borrower].stake = newStake;\\n\\n        totalStakes = totalStakes.sub(oldStake).add(newStake);\\n        emit TotalStakesUpdated(totalStakes);\\n\\n        return newStake;\\n    }\\n\\n    // Calculate a new stake based on the snapshots of the totalStakes and totalCollateral taken at the last liquidation\\n    function _computeNewStake(uint _coll) internal view returns (uint) {\\n        uint stake;\\n        if (totalCollateralSnapshot == 0) {\\n            stake = _coll;\\n        } else {\\n            /*\\n             * The following assert() holds true because:\\n             * - The system always contains >= 1 trove\\n             * - When we close or liquidate a trove, we redistribute the pending rewards, so if all troves were closed/liquidated,\\n             * rewards would\\u2019ve been emptied and totalCollateralSnapshot would be zero too.\\n             */\\n            assert(totalStakesSnapshot > 0);\\n            stake = _coll.mul(totalStakesSnapshot).div(totalCollateralSnapshot);\\n        }\\n        return stake;\\n    }\\n\\n    function _redistributeDebtAndColl(\\n        IActivePool _activePool,\\n        IDefaultPool _defaultPool,\\n        uint _debt,\\n        uint _coll\\n    ) internal {\\n        if (_debt == 0) {\\n            return;\\n        }\\n\\n        /*\\n         * Add distributed coll and debt rewards-per-unit-staked to the running totals. Division uses a \\\"feedback\\\"\\n         * error correction, to keep the cumulative error low in the running totals L_WStETH and L_BaseFeeLMADebt:\\n         *\\n         * 1) Form numerators which compensate for the floor division errors that occurred the last time this\\n         * function was called.\\n         * 2) Calculate \\\"per-unit-staked\\\" ratios.\\n         * 3) Multiply each ratio back by its denominator, to reveal the current floor division error.\\n         * 4) Store these errors for use in the next correction when this function is called.\\n         * 5) Note: static analysis tools complain about this \\\"division before multiplication\\\", however, it is intended.\\n         */\\n        uint WStETHNumerator = _coll.mul(DECIMAL_PRECISION).add(\\n            lastWStETHError_Redistribution\\n        );\\n        uint BaseFeeLMADebtNumerator = _debt.mul(DECIMAL_PRECISION).add(\\n            lastBaseFeeLMADebtError_Redistribution\\n        );\\n\\n        // Get the per-unit-staked terms\\n        uint WStETHRewardPerUnitStaked = WStETHNumerator.div(totalStakes);\\n        uint BaseFeeLMADebtRewardPerUnitStaked = BaseFeeLMADebtNumerator.div(\\n            totalStakes\\n        );\\n\\n        lastWStETHError_Redistribution = WStETHNumerator.sub(\\n            WStETHRewardPerUnitStaked.mul(totalStakes)\\n        );\\n        lastBaseFeeLMADebtError_Redistribution = BaseFeeLMADebtNumerator.sub(\\n            BaseFeeLMADebtRewardPerUnitStaked.mul(totalStakes)\\n        );\\n\\n        // Add per-unit-staked terms to the running totals\\n        L_WStETH = L_WStETH.add(WStETHRewardPerUnitStaked);\\n        L_BaseFeeLMADebt = L_BaseFeeLMADebt.add(\\n            BaseFeeLMADebtRewardPerUnitStaked\\n        );\\n\\n        emit LTermsUpdated(L_WStETH, L_BaseFeeLMADebt);\\n\\n        // Transfer coll and debt from ActivePool to DefaultPool\\n        _activePool.decreaseBaseFeeLMADebt(_debt);\\n        _defaultPool.increaseBaseFeeLMADebt(_debt);\\n        _defaultPool.increaseBalance(_coll);\\n        _activePool.sendWStETH(address(_defaultPool), _coll);\\n    }\\n\\n    function closeTrove(address _borrower) external {\\n        _requireCallerIsBorrowerOperations();\\n        return _closeTrove(_borrower, Status.closedByOwner);\\n    }\\n\\n    function _closeTrove(address _borrower, Status closedStatus) internal {\\n        assert(\\n            closedStatus != Status.nonExistent && closedStatus != Status.active\\n        );\\n\\n        uint TroveOwnersArrayLength = TroveOwners.length;\\n        _requireMoreThanOneTroveInSystem(TroveOwnersArrayLength);\\n\\n        Troves[_borrower].status = closedStatus;\\n        Troves[_borrower].coll = 0;\\n        Troves[_borrower].debt = 0;\\n\\n        rewardSnapshots[_borrower].WStETH = 0;\\n        rewardSnapshots[_borrower].BaseFeeLMADebt = 0;\\n\\n        _removeTroveOwner(_borrower, TroveOwnersArrayLength);\\n        sortedTroves.remove(_borrower);\\n    }\\n\\n    /*\\n     * Updates snapshots of system total stakes and total collateral, excluding a given collateral remainder from the calculation.\\n     * Used in a liquidation sequence.\\n     *\\n     * The calculation excludes a portion of collateral that is in the ActivePool:\\n     *\\n     * the total WStETH gas compensation from the liquidation sequence\\n     *\\n     * The WStETH as compensation must be excluded as it is always sent out at the very end of the liquidation sequence.\\n     */\\n    function _updateSystemSnapshots_excludeCollRemainder(\\n        IActivePool _activePool,\\n        uint _collRemainder\\n    ) internal {\\n        totalStakesSnapshot = totalStakes;\\n\\n        uint activeColl = _activePool.getWStETH();\\n        uint liquidatedColl = defaultPool.getWStETH();\\n        totalCollateralSnapshot = activeColl.sub(_collRemainder).add(\\n            liquidatedColl\\n        );\\n\\n        emit SystemSnapshotsUpdated(\\n            totalStakesSnapshot,\\n            totalCollateralSnapshot\\n        );\\n    }\\n\\n    // Push the owner's address to the Trove owners list, and record the corresponding array index on the Trove struct\\n    function addTroveOwnerToArray(\\n        address _borrower\\n    ) external returns (uint index) {\\n        _requireCallerIsBorrowerOperations();\\n        return _addTroveOwnerToArray(_borrower);\\n    }\\n\\n    function _addTroveOwnerToArray(\\n        address _borrower\\n    ) internal returns (uint128 index) {\\n        /* Max array size is 2**128 - 1, i.e. ~3e30 troves. No risk of overflow, since troves have minimum BaseFeeLMA\\n        debt of liquidation reserve plus MIN_NET_DEBT. 3e30 BaseFeeLMA dwarfs the value of all wealth in the world ( which is < 1e15 USD). */\\n\\n        // Push the Troveowner to the array\\n        TroveOwners.push(_borrower);\\n\\n        // Record the index of the new Troveowner on their Trove struct\\n        index = uint128(TroveOwners.length.sub(1));\\n        Troves[_borrower].arrayIndex = index;\\n\\n        return index;\\n    }\\n\\n    /*\\n     * Remove a Trove owner from the TroveOwners array, not preserving array order. Removing owner 'B' does the following:\\n     * [A B C D E] => [A E C D], and updates E's Trove struct to point to its new array index.\\n     */\\n    function _removeTroveOwner(\\n        address _borrower,\\n        uint TroveOwnersArrayLength\\n    ) internal {\\n        Status troveStatus = Troves[_borrower].status;\\n        // It\\u2019s set in caller function `_closeTrove`\\n        assert(\\n            troveStatus != Status.nonExistent && troveStatus != Status.active\\n        );\\n\\n        uint128 index = Troves[_borrower].arrayIndex;\\n        uint length = TroveOwnersArrayLength;\\n        uint idxLast = length.sub(1);\\n\\n        assert(index <= idxLast);\\n\\n        address addressToMove = TroveOwners[idxLast];\\n\\n        TroveOwners[index] = addressToMove;\\n        Troves[addressToMove].arrayIndex = index;\\n        emit TroveIndexUpdated(addressToMove, index);\\n\\n        TroveOwners.pop();\\n    }\\n\\n    // --- Recovery Mode and TCR functions ---\\n\\n    function getTCR(uint _price) external view returns (uint) {\\n        return _getTCR(_price);\\n    }\\n\\n    /**\\n     * HEDGEHOG UPDATES:\\n     * New view method to help with getting the data on frontends\\n     */\\n    function getUnreliableTCR() external view returns (uint) {\\n        return _getTCR(priceFeed.lastGoodPrice());\\n    }\\n\\n    function checkRecoveryMode(uint _price) external view returns (bool) {\\n        return _checkRecoveryMode(_price);\\n    }\\n\\n    /**\\n     * HEDGEHOG UPDATES:\\n     * New view method to help with getting the data on frontends\\n     */\\n    function checkUnreliableRecoveryMode() external view returns (bool) {\\n        return _checkRecoveryMode(priceFeed.lastGoodPrice());\\n    }\\n\\n    // Check whether or not the system *would be* in Recovery Mode, given an WStETH:USD price, and the entire system coll and debt.\\n    function _checkPotentialRecoveryMode(\\n        uint _entireSystemColl,\\n        uint _entireSystemDebt,\\n        uint _price\\n    ) internal pure returns (bool) {\\n        uint TCR = LiquityMath._computeCR(\\n            _entireSystemColl,\\n            _entireSystemDebt,\\n            _price\\n        );\\n\\n        return TCR < CCR;\\n    }\\n\\n    // --- Redemption fee functions ---\\n\\n    /*\\n     * HEDGEHOG UPDATES:\\n     * 1) Rename variable in docs (baseRate => redemptionBaseRate)\\n     * 2) decayedRemeptionBaseRate (decayedBaseRate) is now calculated by _calcDecayedRedemptionBaseRate();\\n     * 3) Updating RedemptionBaseRate state variable instead of baseRate\\n     * 4) Emiting RedemptionBaseRateUpdated instead of BaseRateUpdates();\\n     * 5) Now updates time only of redemeption operation instead of both redemption and borrow\\n     *\\n     * This function has two impacts on the redemptionBaseRate state variable:\\n     * 1) decays the redemptionBaseRate based on time passed since last redemption or BaseFeeLMA borrowing operation.\\n     * then,\\n     * 2) increases the redemptionBaseRate based on the amount redeemed, as a proportion of total supply\\n     */\\n    function _updateRedemptionBaseRateFromRedemption(\\n        uint _WStETHDrawn\\n    ) internal returns (uint) {\\n        uint decayedRedemptionBaseRate = _calcDecayedRedemptionBaseRate();\\n        // Hedgehog updates: Now calculating what part of total collateral is getting withdrawn from the\\n        // system\\n\\n        // HEDGEHOG UPDATES: not dividing, but multyplying by decimal precision\\n        /* Convert the drawn WStETH back to BaseFeeLMA at face value rate (1 BaseFeeLMA:1 USD), in order to get\\n         * the fraction of total supply that was redeemed at face value. */\\n        uint redeemedBaseFeeLMAFraction = _WStETHDrawn\\n            .mul(DECIMAL_PRECISION)\\n            .div(activePool.getWStETH());\\n\\n        // Hedgehog Updates: Remove division by BETA\\n        uint newBaseRate = decayedRedemptionBaseRate.add(\\n            redeemedBaseFeeLMAFraction\\n        );\\n\\n        newBaseRate = LiquityMath._min(newBaseRate, DECIMAL_PRECISION); // cap baseRate at a maximum of 100%\\n        //assert(newBaseRate <= DECIMAL_PRECISION); // This is already enforced in the line above\\n        assert(newBaseRate > 0); // Base rate is always non-zero after redemption\\n\\n        // HEDGEHOG UPDATES: succesful redemption now updates only the redemption base rate. Redemption base rate update also received a new event.\\n        // Update the baseRate state variable\\n        redemptionBaseRate = newBaseRate;\\n        emit RedemptionBaseRateUpdated(newBaseRate);\\n\\n        _updateLastRedemptionTime();\\n        return newBaseRate;\\n    }\\n\\n    /*\\n     * HEDGEHOG UPDATES:\\n     * 1) Now passing redemptionBaseRate instead of combined baseRate\\n     * 2) Now accepts a new param: redemptionColl as we can't get that amount from value anymore since of ERC20 transition\\n     */\\n    function getRedemptionRate(\\n        uint _redemptionColl\\n    ) public view returns (uint) {\\n        return _calcRedemptionRate(redemptionBaseRate, _redemptionColl);\\n    }\\n\\n    /*\\n     * HEDGEHOG UPDATES:\\n     * Now accepts a new param: redemptionColl as we can't get that amount from value anymore since of ERC20 transition\\n     */\\n    function getRedemptionRateWithDecay(\\n        uint _redemptionColl\\n    ) public view returns (uint) {\\n        return\\n            _calcRedemptionRate(\\n                _calcDecayedRedemptionBaseRate(),\\n                _redemptionColl\\n            );\\n    }\\n\\n    /*\\n     * HEDGEHOG UPDATES:\\n     * Redemption Rate formula now is: RedFloor + RedBaseRate*MinuteDecayFactorMinutes + RedemptionETH/TotalColl\\n     * 1) Rename param name (_baseRate => _redemptionBaseRate)\\n     * 2) Now redeemed collateral divided by total collateral in active pool is added to the sum of redemption floor and redeem base rate\\n     */\\n    function _calcRedemptionRate(\\n        uint _redemptionBaseRate,\\n        uint _redemptionColl\\n    ) internal view returns (uint) {\\n        return\\n            LiquityMath._min(\\n                REDEMPTION_FEE_FLOOR.add(_redemptionBaseRate).add(\\n                    _redemptionColl.div(\\n                        activePool.getWStETH() + defaultPool.getWStETH()\\n                    )\\n                ),\\n                DECIMAL_PRECISION // cap at a maximum of 100%\\n            );\\n    }\\n\\n    function _getRedemptionFee(uint _WStETHDrawn) internal view returns (uint) {\\n        return\\n            _calcRedemptionFee(getRedemptionRate(_WStETHDrawn), _WStETHDrawn);\\n    }\\n\\n    function getRedemptionFeeWithDecay(\\n        uint _WStETHDrawn\\n    ) external view returns (uint) {\\n        return\\n            _calcRedemptionFee(\\n                getRedemptionRateWithDecay(_WStETHDrawn),\\n                _WStETHDrawn\\n            );\\n    }\\n\\n    function _calcRedemptionFee(\\n        uint _redemptionRate,\\n        uint _WStETHDrawn\\n    ) internal pure returns (uint) {\\n        uint redemptionFee = _redemptionRate.mul(_WStETHDrawn).div(\\n            DECIMAL_PRECISION\\n        );\\n\\n        // Hedgehog Updates: check if fee is too big is now performed at the BO contract\\n\\n        return redemptionFee;\\n    }\\n\\n    // --- Borrowing fee functions ---\\n\\n    /*\\n     * HEDGEHOG UPDATES:\\n     * 1) Now passing borrowBaseRate instead of combined baseRate\\n     */\\n    function getBorrowingRate(\\n        uint _issuedBaseFeeLMA\\n    ) public view returns (uint) {\\n        return _calcBorrowingRate(borrowBaseRate, _issuedBaseFeeLMA);\\n    }\\n\\n    /*\\n     * HEDGEHOG UPDATES:\\n     * 1) Now passing _calcDecayedBorrowBaseRate instead of _calcDecayedBaseRate function to calculate the decayed borrowBaseRate\\n     */\\n    function getBorrowingRateWithDecay(\\n        uint _issuedBaseFeeLMA\\n    ) public view returns (uint) {\\n        return\\n            _calcBorrowingRate(\\n                _calcDecayedRedemptionBaseRate(),\\n                _issuedBaseFeeLMA\\n            );\\n    }\\n\\n    /*\\n     * HEDGEHOG UPDATES:\\n     * Now full dynamic fees formula is as follows: RedRate = RedFloor + RedBaseRate*MinuteDecayFactorMinutes + RedemptionETH / Total Collateral in the system\\n     * 1) Rename param name (_baseRate => _borrowBaseRate)\\n     * 2) If BFE total supply is 0, returning fee floor\\n     * 3) Now adding issued bfe amount divided by total supply of the asset to the sum of borrow floor and decayed borrowedBaseRate\\n     */\\n    function _calcBorrowingRate(\\n        uint _borrowBaseRate,\\n        uint _issuedBaseFeeLMA\\n    ) internal view returns (uint) {\\n        uint256 supply = baseFeeLMAToken.totalSupply();\\n        // Checking if there are tokens in supply, otherwise return 1 to avoid division by zero\\n        if (supply == 0) {\\n            return BORROWING_FEE_FLOOR;\\n        }\\n\\n        return\\n            LiquityMath._min(\\n                BORROWING_FEE_FLOOR.add(_borrowBaseRate).add(\\n                    _issuedBaseFeeLMA.mul(DECIMAL_PRECISION).div(supply)\\n                ),\\n                MAX_BORROWING_FEE\\n            );\\n    }\\n\\n    // HEDGEHOG UPDATES: Now retuns also a calculated base rate along with a borrowing fee\\n    function getBorrowingFee(\\n        uint _BaseFeeLMADebt\\n    ) external view returns (uint, uint) {\\n        uint baseRate = getBorrowingRate(_BaseFeeLMADebt);\\n        return (_calcBorrowingFee(baseRate, _BaseFeeLMADebt), baseRate);\\n    }\\n\\n    function getBorrowingFeeWithDecay(\\n        uint _BaseFeeLMADebt\\n    ) external view returns (uint) {\\n        return\\n            _calcBorrowingFee(\\n                getBorrowingRateWithDecay(_BaseFeeLMADebt),\\n                _BaseFeeLMADebt\\n            );\\n    }\\n\\n    function _calcBorrowingFee(\\n        uint _borrowingRate,\\n        uint _BaseFeeLMADebt\\n    ) internal pure returns (uint) {\\n        return _borrowingRate.mul(_BaseFeeLMADebt).div(DECIMAL_PRECISION);\\n    }\\n\\n    // HEDGEHOG UPDATES: New function to updtae borrowBaseRate during borrowing op on BorrowersOperations contract\\n    function updateBaseRateFromBorrowing(uint _newBaseRate) external {\\n        require(\\n            msg.sender == borrowerOperationsAddress,\\n            \\\"TroveManager: Only Borrower operations may call\\\"\\n        );\\n        if (_newBaseRate >= BORROWING_FEE_FLOOR) {\\n            borrowBaseRate = _newBaseRate - BORROWING_FEE_FLOOR;\\n        } else {\\n            borrowBaseRate = 0;\\n        }\\n\\n        emit BorrowBaseRateUpdated(_newBaseRate);\\n    }\\n\\n    /*\\n     * HEDGEHOG UPDATES:\\n     * 1) Now updates borrowBaseRate instead of baseRate used by both redemption and minting functions\\n     * 2) Emit BorrowBaseRateUpdated instead of BaseRateUpdated\\n     * 3) Now updates time only of borrow operation instead of both redemption and borrow\\n     * 4) Update doc variable name baseRate => borrowBaseRate\\n     */\\n    // Updates the borrowBaseRate state variable based on time elapsed since the last redemption or BaseFeeLMA borrowing operation.\\n    function decayBaseRateFromBorrowing() external {\\n        _requireCallerIsBorrowerOperations();\\n        uint decayedBaseRate = _calcDecayedBorrowBaseRate();\\n        assert(decayedBaseRate <= DECIMAL_PRECISION); // The baseRate can decay to 0\\n        // HEDGEHOG LOGIC CHANGES: Updating a unique borrowing base rate instead of just \\\"baseRate\\\"\\n        borrowBaseRate = decayedBaseRate;\\n\\n        emit BorrowBaseRateUpdated(decayedBaseRate);\\n\\n        _updateLastBorrowTime();\\n    }\\n\\n    // --- Internal fee functions ---\\n\\n    /*\\n     * HEDGEHOG UPDATES:\\n     * removed _updateLastFeeOpTime\\n     * New function _updateLastRedemptionTime simmilar to _updateLastFeeOpTime, that sets lastRedemptionTime and emits respective event.\\n     */\\n    // Update the last fee operation time only if time passed >= decay interval. This prevents base rate griefing.\\n    function _updateLastRedemptionTime() internal {\\n        uint timePassed = block.timestamp.sub(lastRedemptionTime);\\n\\n        if (timePassed >= SECONDS_IN_ONE_MINUTE) {\\n            lastRedemptionTime = block.timestamp;\\n            emit LastRedemptionTimeUpdated(block.timestamp);\\n        }\\n    }\\n\\n    /*\\n     * HEDGEHOG UPDATES:\\n     * removed _updateLastFeeOpTime\\n     * New function _updateLastBorrowTime simmilar to _updateLastFeeOpTime, that sets lastBorrowTime and emits respective event.\\n     */\\n    // Update the last fee operation time only if time passed >= decay interval. This prevents base rate griefing.\\n    function _updateLastBorrowTime() internal {\\n        uint timePassed = block.timestamp.sub(lastBorrowTime);\\n\\n        if (timePassed >= SECONDS_IN_ONE_MINUTE) {\\n            lastBorrowTime = block.timestamp;\\n            emit LastBorrowTimeUpdated(block.timestamp);\\n        }\\n    }\\n\\n    /*\\n     * HEDGEHOG UPDATES:\\n     * New function simmilar to _calcDecayedBaseRate. However used particularly for redemptionBaseRate calculation\\n     */\\n    function _calcDecayedRedemptionBaseRate() internal view returns (uint) {\\n        uint minutesPassed = _minutesPassedSinceLastRedemption();\\n\\n        uint decayFactor = LiquityMath._decPow(\\n            MINUTE_DECAY_REDEMPTION_FACTOR,\\n            minutesPassed\\n        );\\n        return redemptionBaseRate.mul(decayFactor).div(DECIMAL_PRECISION);\\n    }\\n\\n    /*\\n     * HEDGEHOG UPDATES:\\n     * New function simmilar to _calcDecayedBaseRate. However used particularly for borrowBaseRate calculation\\n     */\\n    function _calcDecayedBorrowBaseRate() internal view returns (uint) {\\n        uint minutesPassed = _minutesPassedSinceLastBorrow();\\n        uint decayFactor = LiquityMath._decPow(\\n            MINUTE_DECAY_BORROWING_FACTOR,\\n            minutesPassed\\n        );\\n\\n        return borrowBaseRate.mul(decayFactor).div(DECIMAL_PRECISION);\\n    }\\n\\n    /*\\n     * HEDGEHOG UPDATES:\\n     * removed _minutesPassedSinceLastFeeOp\\n     * New function _minutesPassedSinceLastRedemption simmilar to _minutesPassedSinceLastFeeOp, that returns amount of minutes since last registered redemption\\n     */\\n    function _minutesPassedSinceLastRedemption() internal view returns (uint) {\\n        return\\n            (block.timestamp.sub(lastRedemptionTime)).div(\\n                SECONDS_IN_ONE_MINUTE\\n            );\\n    }\\n\\n    /*\\n     * HEDGEHOG UPDATES:\\n     * removed _minutesPassedSinceLastFeeOp\\n     * New function _minutesPassedSinceLastBorrow simmilar to _minutesPassedSinceLastFeeOp, that returns amount of minutes since last registered borrow\\n     */\\n    function _minutesPassedSinceLastBorrow() internal view returns (uint) {\\n        return (block.timestamp.sub(lastBorrowTime)).div(SECONDS_IN_ONE_MINUTE);\\n    }\\n\\n    // --- 'require' wrapper functions ---\\n\\n    function _requireCallerIsBorrowerOperations() internal view {\\n        require(\\n            msg.sender == borrowerOperationsAddress,\\n            \\\"TroveManager: Caller is not the BorrowerOperations contract\\\"\\n        );\\n    }\\n\\n    function _requireTroveIsActive(address _borrower) internal view {\\n        require(\\n            Troves[_borrower].status == Status.active,\\n            \\\"TroveManager: Trove does not exist or is closed\\\"\\n        );\\n    }\\n\\n    function _requireBaseFeeLMABalanceCoversRedemption(\\n        IBaseFeeLMAToken _baseFeeLMAToken,\\n        address _redeemer,\\n        uint _amount\\n    ) internal view {\\n        require(\\n            _baseFeeLMAToken.balanceOf(_redeemer) >= _amount,\\n            \\\"TroveManager: Requested redemption amount must be <= user's BaseFeeLMA token balance\\\"\\n        );\\n    }\\n\\n    function _requireMoreThanOneTroveInSystem(\\n        uint TroveOwnersArrayLength\\n    ) internal view {\\n        require(\\n            TroveOwnersArrayLength > 1 && sortedTroves.getSize() > 1,\\n            \\\"TroveManager: Only one trove in the system\\\"\\n        );\\n    }\\n\\n    function _requireAmountGreaterThanZero(uint _amount) internal pure {\\n        require(_amount > 0, \\\"TroveManager: Amount must be greater than zero\\\");\\n    }\\n\\n    function _requireTCRoverMCR(uint _price) internal view {\\n        require(\\n            _getTCR(_price) >= MCR,\\n            \\\"TroveManager: Cannot redeem when TCR < MCR\\\"\\n        );\\n    }\\n\\n    function _requireAfterBootstrapPeriod() internal view {\\n        uint systemDeploymentTime = hogToken.getDeploymentStartTime();\\n        require(\\n            block.timestamp >= systemDeploymentTime.add(BOOTSTRAP_PERIOD),\\n            \\\"TroveManager: Redemptions are not allowed during bootstrap phase\\\"\\n        );\\n    }\\n\\n    function _requireValidMaxFeePercentage(\\n        uint _maxFeePercentage\\n    ) internal pure {\\n        require(\\n            _maxFeePercentage >= REDEMPTION_FEE_FLOOR &&\\n                _maxFeePercentage <= DECIMAL_PRECISION,\\n            \\\"Max fee percentage must be between 0.5% and 100%\\\"\\n        );\\n    }\\n\\n    // --- Trove property getters ---\\n\\n    function getTroveStatus(address _borrower) external view returns (uint) {\\n        return uint(Troves[_borrower].status);\\n    }\\n\\n    function getTroveStake(address _borrower) external view returns (uint) {\\n        return Troves[_borrower].stake;\\n    }\\n\\n    function getTroveDebt(address _borrower) external view returns (uint) {\\n        return Troves[_borrower].debt;\\n    }\\n\\n    function getTroveColl(address _borrower) external view returns (uint) {\\n        return Troves[_borrower].coll;\\n    }\\n\\n    // --- Trove property setters, called by BorrowerOperations ---\\n\\n    function setTroveStatus(address _borrower, uint _num) external {\\n        _requireCallerIsBorrowerOperations();\\n        Troves[_borrower].status = Status(_num);\\n    }\\n\\n    function increaseTroveColl(\\n        address _borrower,\\n        uint _collIncrease\\n    ) external returns (uint) {\\n        _requireCallerIsBorrowerOperations();\\n        uint newColl = Troves[_borrower].coll.add(_collIncrease);\\n        Troves[_borrower].coll = newColl;\\n        return newColl;\\n    }\\n\\n    function decreaseTroveColl(\\n        address _borrower,\\n        uint _collDecrease\\n    ) external returns (uint) {\\n        _requireCallerIsBorrowerOperations();\\n        uint newColl = Troves[_borrower].coll.sub(_collDecrease);\\n        Troves[_borrower].coll = newColl;\\n        return newColl;\\n    }\\n\\n    function increaseTroveDebt(\\n        address _borrower,\\n        uint _debtIncrease\\n    ) external returns (uint) {\\n        _requireCallerIsBorrowerOperations();\\n        uint newDebt = Troves[_borrower].debt.add(_debtIncrease);\\n        Troves[_borrower].debt = newDebt;\\n        return newDebt;\\n    }\\n\\n    function decreaseTroveDebt(\\n        address _borrower,\\n        uint _debtDecrease\\n    ) external returns (uint) {\\n        _requireCallerIsBorrowerOperations();\\n        uint newDebt = Troves[_borrower].debt.sub(_debtDecrease);\\n        Troves[_borrower].debt = newDebt;\\n        return newDebt;\\n    }\\n\\n    /*\\n     * HEDGEHOG UPDATES:\\n     * removed _minutesPassedSinceLastFeeOp\\n     * New function _minutesPassedSinceLastRedemption simmilar to _minutesPassedSinceLastFeeOp, that returns amount of minutes since last registered redemption\\n     */\\n    function getNormalLiquidationPrice(\\n        uint256 _coll,\\n        uint256 _debt\\n    ) external pure returns (uint256) {\\n        uint256 price = LiquityMath._findPriceBelowMCR(\\n            _coll,\\n            _debt,\\n            20,\\n            HedgehogBase.MCR\\n        );\\n        return price;\\n    }\\n\\n    /*\\n     * HEDGEHOG UPDATES:\\n     * removed _minutesPassedSinceLastFeeOp\\n     * New function _minutesPassedSinceLastRedemption simmilar to _minutesPassedSinceLastFeeOp, that returns amount of minutes since last registered redemption\\n     */\\n    function getRecoveryLiquidationPrice(\\n        uint256 _coll,\\n        uint256 _debt\\n    ) external pure returns (uint256) {\\n        uint256 price = LiquityMath._findPriceBelowMCR(\\n            _coll,\\n            _debt,\\n            20,\\n            HedgehogBase._100pct\\n        );\\n        return price;\\n    }\\n}\\n\",\"keccak256\":\"0x828eea4bc4e441267885bdd05118b5d0d1d110d4978cbf52f9214d4cb0e8ba9a\",\"license\":\"MIT\"},\"contracts/dependencies/BaseMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\ncontract BaseMath {\\n    uint public constant DECIMAL_PRECISION = 1e18;\\n}\\n\",\"keccak256\":\"0x5338502be04e32035bbf0310600c8724281edc81b312f5d89c683b23d0bb3fa7\",\"license\":\"MIT\"},\"contracts/dependencies/CheckContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\ncontract CheckContract {\\n    /**\\n     * Check that the account is an already deployed non-destroyed contract.\\n     * See: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol#L12\\n     */\\n    function checkContract(address _account) internal view {\\n        require(_account != address(0), \\\"Account cannot be zero address\\\");\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(_account)\\n        }\\n        require(size > 0, \\\"Account code size cannot be zero\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x4860bce12806bb81c1e91ec617f2f95dd1774148b15645eaca94a67220096f2f\",\"license\":\"MIT\"},\"contracts/dependencies/HedgehogBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./BaseMath.sol\\\";\\nimport \\\"./LiquityMath.sol\\\";\\nimport \\\"../interfaces/IActivePool.sol\\\";\\nimport \\\"../interfaces/IDefaultPool.sol\\\";\\nimport \\\"../interfaces/IPriceFeed.sol\\\";\\nimport \\\"../interfaces/IHedgehogBase.sol\\\";\\n\\n/**\\n * @notice Fork of LiquityMath with an upgraded pragma and:\\n * Base contract for TroveManager, BorrowerOperations and StabilityPool. Contains global system constants and\\n * common functions.\\n *\\n * Hedgehog updates:\\n * Rename variables,\\n * Increase MCR and CCR,\\n * Update Min Net Debt\\n */\\ncontract HedgehogBase is BaseMath, IHedgehogBase {\\n    using SafeMath for uint;\\n\\n    uint public constant _100pct = 1000000000000000000; // 1e18 == 100%\\n\\n    // Minimum collateral ratio for individual troves\\n    uint public constant MCR = 1500000000000000000; // 150%\\n\\n    // Critical system collateral ratio. If the system's total collateral ratio (TCR) falls below the CCR, Recovery Mode is triggered.\\n    uint public constant CCR = 5000000000000000000; // 150%\\n\\n    // HEDGEHOG: Decreased to 0.1 BFE\\n    // Amount of BaseFeeLMA to be locked in gas pool on opening troves\\n    uint public immutable BaseFeeLMA_GAS_COMPENSATION;\\n\\n    // HEDGEHOG UPDATES: Decreased min net debt to 0.1 BFE\\n    // Minimum amount of net BaseFeeLMA debt a trove must have\\n    uint public immutable MIN_NET_DEBT;\\n\\n    uint public constant PERCENT_DIVISOR = 200; // dividing by 200 yields 0.5%\\n\\n    uint public constant BORROWING_FEE_FLOOR = (DECIMAL_PRECISION / 1000) * 5; // 0.5%\\n\\n    IActivePool public activePool;\\n\\n    IDefaultPool public defaultPool;\\n\\n    IPriceFeed public override priceFeed;\\n\\n    constructor(uint _gasComp, uint _minNetDebt) {\\n        BaseFeeLMA_GAS_COMPENSATION = _gasComp;\\n        MIN_NET_DEBT = _minNetDebt;\\n    }\\n\\n    // --- Gas compensation functions ---\\n\\n    // Returns the composite debt (drawn debt + gas compensation) of a trove, for the purpose of ICR calculation\\n    // HEDGEHOG UPDATES:\\n    // No longer deduct gas comp from a net debt\\n    function _getCompositeDebt(uint _debt) internal pure returns (uint) {\\n        return _debt;\\n    }\\n\\n    // HEDGEHOG UPDATES:\\n    // No longer deduct gas comp from a net debt\\n    function _getNetDebt(uint _debt) internal pure returns (uint) {\\n        return _debt;\\n    }\\n\\n    // Return the amount of WStETH to be drawn from a trove's collateral and sent as gas compensation.\\n    function _getCollGasCompensation(\\n        uint _entireColl\\n    ) internal pure returns (uint) {\\n        return _entireColl / PERCENT_DIVISOR;\\n    }\\n\\n    function getEntireSystemColl() public view returns (uint entireSystemColl) {\\n        uint activeColl = activePool.getWStETH();\\n        uint liquidatedColl = defaultPool.getWStETH();\\n        return activeColl.add(liquidatedColl);\\n    }\\n\\n    function getEntireSystemDebt() public view returns (uint entireSystemDebt) {\\n        uint activeDebt = activePool.getBaseFeeLMADebt();\\n        uint closedDebt = defaultPool.getBaseFeeLMADebt();\\n\\n        return activeDebt.add(closedDebt);\\n    }\\n\\n    function _getTCR(uint _price) internal view returns (uint TCR) {\\n        uint entireSystemColl = getEntireSystemColl();\\n        uint entireSystemDebt = getEntireSystemDebt();\\n        TCR = LiquityMath._computeCR(\\n            entireSystemColl,\\n            entireSystemDebt,\\n            _price\\n        );\\n\\n        return TCR;\\n    }\\n\\n    function _checkRecoveryMode(uint _price) internal view returns (bool) {\\n        uint TCR = _getTCR(_price);\\n\\n        return TCR < CCR;\\n    }\\n\\n    function _requireUserAcceptsFee(\\n        uint _fee,\\n        uint _amount,\\n        uint _maxFeePercentage\\n    ) internal pure {\\n        uint feePercentage = _fee.mul(DECIMAL_PRECISION).div(_amount);\\n        require(\\n            feePercentage <= _maxFeePercentage,\\n            \\\"Fee exceeded provided maximum\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xfedf72c87a85dfcdb7e0cc463067fe24022465c15d63ae9525232fbf175f7f86\",\"license\":\"MIT\"},\"contracts/dependencies/IERC2612.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @dev Interface of the ERC2612 standard as defined in the EIP.\\n *\\n * Adds the {permit} method, which can be used to change one's\\n * {IERC20-allowance} without having to send a transaction, by signing a\\n * message. This allows users to spend tokens without having to hold WStETH.\\n *\\n * See https://eips.wStETHeum.org/EIPS/eip-2612.\\n *\\n * Code adapted from https://github.com/OpenZeppelin/openzeppelin-contracts/pull/2237/\\n */\\ninterface IERC2612 {\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over `owner`'s tokens,\\n     * given `owner`'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.wStETHeum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current ERC2612 nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases `owner`'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     *\\n     * `owner` can limit the time a Permit is valid for by setting `deadline` to\\n     * a value in the near future. The deadline argument can be set to uint(-1) to\\n     * create Permits that effectively never expire.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function version() external view returns (string memory);\\n\\n    function permitTypeHash() external view returns (bytes32);\\n\\n    function domainSeparator() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf9e0692c36ffc6ac123d90a7f762f44a895589b581150c5575c14d11e547cc01\",\"license\":\"MIT\"},\"contracts/dependencies/LiquityMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n/**\\n * @notice A fork of Liquity Math library with an upgraded pragma\\n *\\n * Even though SafeMath is no longer required, the decision was made to keep it to avoid human factor errors\\n */\\n\\nlibrary LiquityMath {\\n    using SafeMath for uint;\\n\\n    uint internal constant DECIMAL_PRECISION = 1e18;\\n\\n    /* Precision for Nominal ICR (independent of price). Rationale for the value:\\n     *\\n     * - Making it \\u201ctoo high\\u201d could lead to overflows.\\n     * - Making it \\u201ctoo low\\u201d could lead to an ICR equal to zero, due to truncation from Solidity floor division.\\n     *\\n     * This value of 1e20 is chosen for safety: the NICR will only overflow for numerator > ~1e39 WStETH,\\n     * and will only truncate to 0 if the denominator is at least 1e20 times greater than the numerator.\\n     *\\n     */\\n    uint internal constant NICR_PRECISION = 1e20;\\n\\n    function _min(uint _a, uint _b) internal pure returns (uint) {\\n        return (_a < _b) ? _a : _b;\\n    }\\n\\n    function _max(uint _a, uint _b) internal pure returns (uint) {\\n        return (_a >= _b) ? _a : _b;\\n    }\\n\\n    /*\\n     * Multiply two decimal numbers and use normal rounding rules:\\n     * -round product up if 19'th mantissa digit >= 5\\n     * -round product down if 19'th mantissa digit < 5\\n     *\\n     * Used only inside the exponentiation, _decPow().\\n     */\\n    function decMul(uint x, uint y) internal pure returns (uint decProd) {\\n        uint prod_xy = x.mul(y);\\n\\n        decProd = prod_xy.add(DECIMAL_PRECISION / 2).div(DECIMAL_PRECISION);\\n    }\\n\\n    /*\\n     * _decPow: Exponentiation function for 18-digit decimal base, and integer exponent n.\\n     *\\n     * Uses the efficient \\\"exponentiation by squaring\\\" algorithm. O(log(n)) complexity.\\n     *\\n     * Called by two functions that represent time in units of minutes:\\n     * 1) TroveManager._calcDecayedBaseRate\\n     * 2) CommunityIssuance._getCumulativeIssuanceFraction\\n     *\\n     * The exponent is capped to avoid reverting due to overflow. The cap 525600000 equals\\n     * \\\"minutes in 1000 years\\\": 60 * 24 * 365 * 1000\\n     *\\n     * If a period of > 1000 years is ever used as an exponent in either of the above functions, the result will be\\n     * negligibly different from just passing the cap, since:\\n     *\\n     * In function 1), the decayed base rate will be 0 for 1000 years or > 1000 years\\n     * In function 2), the difference in tokens issued at 1000 years and any time > 1000 years, will be negligible\\n     */\\n    function _decPow(uint _base, uint _minutes) internal pure returns (uint) {\\n        if (_minutes > 525600000) {\\n            _minutes = 525600000;\\n        } // cap to avoid overflow\\n\\n        if (_minutes == 0) {\\n            return DECIMAL_PRECISION;\\n        }\\n\\n        uint y = DECIMAL_PRECISION;\\n        uint x = _base;\\n        uint n = _minutes;\\n\\n        // Exponentiation-by-squaring\\n        while (n > 1) {\\n            if (n % 2 == 0) {\\n                x = decMul(x, x);\\n                n = n.div(2);\\n            } else {\\n                // if (n % 2 != 0)\\n                y = decMul(x, y);\\n                x = decMul(x, x);\\n                n = (n.sub(1)).div(2);\\n            }\\n        }\\n\\n        return decMul(x, y);\\n    }\\n\\n    function _getAbsoluteDifference(\\n        uint _a,\\n        uint _b\\n    ) internal pure returns (uint) {\\n        return (_a >= _b) ? _a.sub(_b) : _b.sub(_a);\\n    }\\n\\n    function _computeNominalCR(\\n        uint _coll,\\n        uint _debt\\n    ) internal pure returns (uint) {\\n        if (_debt > 0) {\\n            return _coll.mul(NICR_PRECISION).div(_debt);\\n        }\\n        // Return the maximal value for uint256 if the Trove has a debt of 0. Represents \\\"infinite\\\" CR.\\n        else {\\n            // if (_debt == 0)\\n            return 2 ** 256 - 1;\\n        }\\n    }\\n\\n    /**\\n     * HEDGEHOG UPDATES:\\n     * Change coll ration calculation from [coll] * [price] / [debt] to\\n     * [coll] / [debt] / [gasPrice]\\n     */\\n    function _computeCR(\\n        uint _coll,\\n        uint _debt,\\n        uint _price\\n    ) internal pure returns (uint) {\\n        if (_debt > 0) {\\n            uint newCollRatio = _coll.mul(DECIMAL_PRECISION).div(_debt).div(\\n                _price\\n            );\\n\\n            return newCollRatio;\\n        }\\n        // Return the maximal value for uint256 if the Trove has a debt of 0. Represents \\\"infinite\\\" CR.\\n        else {\\n            // if (_debt == 0)\\n            return 2 ** 256 - 1;\\n        }\\n    }\\n\\n    function _findPriceBelowMCR(\\n        uint256 _coll,\\n        uint256 _debt,\\n        uint256 _startPrice,\\n        uint _mcr\\n    ) internal pure returns (uint256) {\\n        uint256 step = 1; // Starting with the smallest step size\\n        uint256 GWEI = 10 ** 9;\\n        uint256 previousPrice = _startPrice * GWEI; // To track previous iteration's price\\n\\n        for (\\n            uint256 price = _startPrice * GWEI;\\n            price <= 750 * GWEI;\\n            price += step\\n        ) {\\n            uint256 cr = _computeCR(_coll, _debt, price);\\n\\n            if (cr < _mcr) {\\n                // Start decreasing the price to find the exact threshold\\n                for (\\n                    uint256 decreasedPrice = previousPrice;\\n                    decreasedPrice <= price &&\\n                        decreasedPrice >= _startPrice * GWEI; // Added protection against underflow\\n                    decreasedPrice -= GWEI\\n                ) {\\n                    if (_computeCR(_coll, _debt, decreasedPrice) < _mcr) {\\n                        return decreasedPrice;\\n                    }\\n                }\\n            }\\n\\n            // Dynamically adjust step size\\n            if (cr < (_mcr - 200000000000000000)) {\\n                step = 20 * GWEI; // Increase step size if CR is much lower than MCR\\n            } else if (cr > (_mcr + 50000000000000000)) {\\n                step = GWEI; // Decrease step size if CR is much higher than MCR\\n            }\\n\\n            previousPrice = price; // Update previous price for the next iteration\\n        }\\n\\n        return 0; // return 0 if no price was found that brings the CR below MCR\\n    }\\n}\\n\",\"keccak256\":\"0x46a963cee07c23aeea182635a2009071b29e8f7be4411332c09544598df3cffc\",\"license\":\"MIT\"},\"contracts/interfaces/IActivePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./IPool.sol\\\";\\n\\ninterface IActivePool is IPool {\\n    // --- Events ---\\n    event BorrowerOperationsAddressChanged(\\n        address _newBorrowerOperationsAddress\\n    );\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event ActivePoolBaseFeeLMADebtUpdated(uint _BaseFeeLMADebt);\\n    event ActivePoolWStETHBalanceUpdated(uint _WStETH);\\n\\n    // --- Functions ---\\n    function sendWStETH(address _account, uint _amount) external;\\n\\n    function getWStETH() external view returns (uint256);\\n\\n    function increaseBalance(uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x9f49d4c4af27279fcfd487aaed046286f03af575e88eb65ba30a54d581eae9ec\",\"license\":\"MIT\"},\"contracts/interfaces/IBaseFeeLMAToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../dependencies/IERC2612.sol\\\";\\n\\ninterface IBaseFeeLMAToken is IERC20, IERC2612 {\\n    // --- Events ---\\n\\n    event TroveManagerAddressChanged(address _troveManagerAddress);\\n    event StabilityPoolAddressChanged(address _newStabilityPoolAddress);\\n    event BorrowerOperationsAddressChanged(\\n        address _newBorrowerOperationsAddress\\n    );\\n\\n    event BaseFeeLMATokenBalanceUpdated(address _user, uint _amount);\\n\\n    // --- Functions ---\\n\\n    function mint(address _account, uint256 _amount) external;\\n\\n    function burn(address _account, uint256 _amount) external;\\n\\n    function sendToPool(\\n        address _sender,\\n        address poolAddress,\\n        uint256 _amount\\n    ) external;\\n\\n    function returnFromPool(\\n        address poolAddress,\\n        address user,\\n        uint256 _amount\\n    ) external;\\n\\n    function totalSupply() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x4f46da70de4bab049b8e24afec10e5308ab86fbbfb77f2314c1607ff8e77a4d2\",\"license\":\"MIT\"},\"contracts/interfaces/ICollSurplusPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\ninterface ICollSurplusPool {\\n    // --- Events ---\\n\\n    event BorrowerOperationsAddressChanged(\\n        address _newBorrowerOperationsAddress\\n    );\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event ActivePoolAddressChanged(address _newActivePoolAddress);\\n\\n    event CollBalanceUpdated(address indexed _account, uint _newBalance);\\n    event WStETHSent(address _to, uint _amount);\\n\\n    // --- Contract setters ---\\n\\n    function setAddresses(\\n        address _borrowerOperationsAddress,\\n        address _troveManagerAddress,\\n        address _activePoolAddress\\n    ) external;\\n\\n    function getWStETH() external view returns (uint);\\n\\n    function getCollateral(address _account) external view returns (uint);\\n\\n    function accountSurplus(address _account, uint _amount) external;\\n\\n    function claimColl(address _account) external;\\n\\n    function increaseBalance(uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x57d1b72879be3af90efa9394b57455d12946a0f6917ccf1285967e0b52128ee8\",\"license\":\"MIT\"},\"contracts/interfaces/IDefaultPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./IPool.sol\\\";\\n\\ninterface IDefaultPool is IPool {\\n    // --- Events ---\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event DefaultPoolBaseFeeLMADebtUpdated(uint _BaseFeeLMADebt);\\n    event DefaultPoolWStETHBalanceUpdated(uint _WStETH);\\n\\n    // --- Functions ---\\n    function sendWStETHToActivePool(uint _amount) external;\\n\\n    function increaseBalance(uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x240d07a4f359f7ce551248b3f67142b9bf73fa1338550a330a35214cd5f6e1a7\",\"license\":\"MIT\"},\"contracts/interfaces/IFeesRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\ninterface IFeesRouter {\\n    function distributeDebtFee(uint256 _debt, uint256 _fee) external;\\n\\n    function distributeCollFee(uint256 _debt, uint256 _fee) external;\\n}\\n\",\"keccak256\":\"0xc4cf93bfebb76dff2c177677687cf7639144774c37b5cf86926347f027c1bab8\",\"license\":\"MIT\"},\"contracts/interfaces/IHOGToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../dependencies/IERC2612.sol\\\";\\n\\ninterface IHOGToken is IERC20, IERC2612 {\\n    // --- Events ---\\n\\n    event CommunityIssuanceAddressSet(address _communityIssuanceAddress);\\n\\n    // --- Functions ---\\n\\n    function getDeploymentStartTime() external view returns (uint256);\\n\\n    function getLpRewardsEntitlement() external view returns (uint256);\\n\\n    function increaseAllowance(\\n        address _spender,\\n        uint256 _addedValues\\n    ) external returns (bool);\\n\\n    function decreaseAllowance(\\n        address _spender,\\n        uint256 _decreasedValue\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x13dac1180f2eca86cc5cbe53759b71f3478e61164906a21c51df2993ccaae99c\",\"license\":\"MIT\"},\"contracts/interfaces/IHedgehogBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./IPriceFeed.sol\\\";\\n\\ninterface IHedgehogBase {\\n    function priceFeed() external view returns (IPriceFeed);\\n}\\n\",\"keccak256\":\"0x9832f1daa908607df4b572f561b27463d7fc4eb27847a26b1c399c2ee6ee6110\",\"license\":\"MIT\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\n// Common interface for the Pools.\\ninterface IPool {\\n    // --- Events ---\\n\\n    event WStETHBalanceUpdated(uint _newBalance);\\n    event BaseFeeLMABalanceUpdated(uint _newBalance);\\n    event ActivePoolAddressChanged(address _newActivePoolAddress);\\n    event DefaultPoolAddressChanged(address _newDefaultPoolAddress);\\n    event StabilityPoolAddressChanged(address _newStabilityPoolAddress);\\n    event WStETHSent(address _to, uint _amount);\\n\\n    // --- Functions ---\\n\\n    function getWStETH() external view returns (uint);\\n\\n    function getBaseFeeLMADebt() external view returns (uint);\\n\\n    function increaseBaseFeeLMADebt(uint _amount) external;\\n\\n    function decreaseBaseFeeLMADebt(uint _amount) external;\\n\\n    // function increaseCollCountInPool(uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0xd61a8bdbfe2a40b2f564c2108931f93a4477a8e004160b138c1e3a1fef51f11b\",\"license\":\"MIT\"},\"contracts/interfaces/IPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\ninterface IPriceFeed {\\n    // --- Events ---\\n    event LastGoodPriceUpdated(uint _lastGoodPrice);\\n\\n    // --- Function ---\\n    function fetchPrice() external returns (uint);\\n\\n    function lastGoodPrice() external view returns (uint);\\n}\\n\",\"keccak256\":\"0xdee620e51756443b2cdd8ac54df2e6d7b38f700a9d1a3cc4d1a2f31ce09bbd1e\",\"license\":\"MIT\"},\"contracts/interfaces/ISortedTroves.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\n// Common interface for the SortedTroves Doubly Linked List.\\ninterface ISortedTroves {\\n    // --- Events ---\\n\\n    event SortedTrovesAddressChanged(address _sortedDoublyLLAddress);\\n    event BorrowerOperationsAddressChanged(address _borrowerOperationsAddress);\\n    event NodeAdded(address _id, uint _NICR);\\n    event NodeRemoved(address _id);\\n\\n    // --- Functions ---\\n\\n    function setParams(\\n        uint256 _size,\\n        address _TroveManagerAddress,\\n        address _borrowerOperationsAddress\\n    ) external;\\n\\n    function insert(\\n        address _id,\\n        uint256 _ICR,\\n        address _prevId,\\n        address _nextId\\n    ) external;\\n\\n    function remove(address _id) external;\\n\\n    function reInsert(\\n        address _id,\\n        uint256 _newICR,\\n        address _prevId,\\n        address _nextId\\n    ) external;\\n\\n    function contains(address _id) external view returns (bool);\\n\\n    function isFull() external view returns (bool);\\n\\n    function isEmpty() external view returns (bool);\\n\\n    function getSize() external view returns (uint256);\\n\\n    function getMaxSize() external view returns (uint256);\\n\\n    function getFirst() external view returns (address);\\n\\n    function getLast() external view returns (address);\\n\\n    function getNext(address _id) external view returns (address);\\n\\n    function getPrev(address _id) external view returns (address);\\n\\n    function validInsertPosition(\\n        uint256 _ICR,\\n        address _prevId,\\n        address _nextId\\n    ) external view returns (bool);\\n\\n    function findInsertPosition(\\n        uint256 _ICR,\\n        address _prevId,\\n        address _nextId\\n    ) external view returns (address, address);\\n}\\n\",\"keccak256\":\"0xee69ee66b0db6c873a5a1177e5e9178aa8be6c57aa988d1d7e7526f484862ecd\",\"license\":\"MIT\"},\"contracts/interfaces/IStabilityPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\n/*\\n * The Stability Pool holds BaseFeeLMA tokens deposited by Stability Pool depositors.\\n *\\n * When a trove is liquidated, then depending on system conditions, some of its BaseFeeLMA debt gets offset with\\n * BaseFeeLMA in the Stability Pool:  that is, the offset debt evaporates, and an equal amount of BaseFeeLMA tokens in the Stability Pool is burned.\\n *\\n * Thus, a liquidation causes each depositor to receive a BaseFeeLMA loss, in proportion to their deposit as a share of total deposits.\\n * They also receive an WStETH gain, as the WStETH collateral of the liquidated trove is distributed among Stability depositors,\\n * in the same proportion.\\n *\\n * When a liquidation occurs, it depletes every deposit by the same fraction: for example, a liquidation that depletes 40%\\n * of the total BaseFeeLMA in the Stability Pool, depletes 40% of each deposit.\\n *\\n * A deposit that has experienced a series of liquidations is termed a \\\"compounded deposit\\\": each liquidation depletes the deposit,\\n * multiplying it by some factor in range ]0,1[\\n *\\n * Please see the implementation spec in the proof document, which closely follows on from the compounded deposit / WStETH gain derivations:\\n * https://github.com/liquity/liquity/blob/master/papers/Scalable_Reward_Distribution_with_Compounding_Stakes.pdf\\n *\\n * --- HOG ISSUANCE TO STABILITY POOL DEPOSITORS ---\\n *\\n * A HOG issuance event occurs at every deposit operation, and every liquidation.\\n *\\n * Each deposit is tagged with the address of the front end through which it was made.\\n *\\n * All deposits earn a share of the issued HOG in proportion to the deposit as a share of total deposits. The HOG earned\\n * by a given deposit, is split between the depositor and the front end through which the deposit was made, based on the front end's kickbackRate.\\n *\\n * Please see the system Readme for an overview:\\n * https://github.com/liquity/dev/blob/main/README.md#hog-issuance-to-stability-providers\\n */\\ninterface IStabilityPool {\\n    // --- Events ---\\n\\n    event StabilityPoolWStETHBalanceUpdated(uint _newBalance);\\n    event StabilityPoolBaseFeeLMABalanceUpdated(uint _newBalance);\\n\\n    event BorrowerOperationsAddressChanged(\\n        address _newBorrowerOperationsAddress\\n    );\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event ActivePoolAddressChanged(address _newActivePoolAddress);\\n    event DefaultPoolAddressChanged(address _newDefaultPoolAddress);\\n    event BaseFeeLMATokenAddressChanged(address _newBaseFeeLMATokenAddress);\\n    event SortedTrovesAddressChanged(address _newSortedTrovesAddress);\\n    event PriceFeedAddressChanged(address _newPriceFeedAddress);\\n    event CommunityIssuanceAddressChanged(address _newCommunityIssuanceAddress);\\n\\n    event P_Updated(uint _P);\\n    event S_Updated(uint _S, uint128 _epoch, uint128 _scale);\\n    event G_Updated(uint _G, uint128 _epoch, uint128 _scale);\\n    event EpochUpdated(uint128 _currentEpoch);\\n    event ScaleUpdated(uint128 _currentScale);\\n\\n    event DepositSnapshotUpdated(\\n        address indexed _depositor,\\n        uint _P,\\n        uint _S,\\n        uint _G\\n    );\\n\\n    event WStETHGainWithdrawn(\\n        address indexed _depositor,\\n        uint _WStETH,\\n        uint _BaseFeeLMALoss\\n    );\\n    event HOGPaidToDepositor(address indexed _depositor, uint _HOG);\\n    event WStETHSent(address _to, uint _amount);\\n\\n    // --- Functions ---\\n\\n    /*\\n     * Called only once on init, to set addresses of other Hedgehog contracts\\n     * Callable only by owner, renounces ownership at the end\\n     */\\n    function setAddresses(\\n        address _borrowerOperationsAddress,\\n        address _troveManagerAddress,\\n        address _activePoolAddress,\\n        address _baseFeeLMATokenAddress,\\n        address _sortedTrovesAddress,\\n        address _priceFeedAddress,\\n        address _communityIssuanceAddress\\n    ) external;\\n\\n    /*\\n     * Initial checks:\\n     * - _amount is not zero\\n     * ---\\n     * - Triggers a HOG issuance, based on time passed since the last issuance. The HOG issuance is shared between *all* depositors and front ends\\n     * - Tags the deposit with the provided front end tag param, if it's a new deposit\\n     * - Sends depositor's accumulated gains (HOG, WStETH) to depositor\\n     * - Sends the tagged front end's accumulated HOG gains to the tagged front end\\n     * - Increases deposit and tagged front end's stake, and takes new snapshots for each.\\n     */\\n    function provideToSP(uint _amount) external;\\n\\n    /*\\n     * Initial checks:\\n     * - _amount is zero or there are no under collateralized troves left in the system\\n     * - User has a non zero deposit\\n     * ---\\n     * - Triggers a HOG issuance, based on time passed since the last issuance. The HOG issuance is shared between *all* depositors and front ends\\n     * - Removes the deposit's front end tag if it is a full withdrawal\\n     * - Sends all depositor's accumulated gains (HOG, WStETH) to depositor\\n     * - Sends the tagged front end's accumulated HOG gains to the tagged front end\\n     * - Decreases deposit and tagged front end's stake, and takes new snapshots for each.\\n     *\\n     * If _amount > userDeposit, the user withdraws all of their compounded deposit.\\n     */\\n    function withdrawFromSP(uint _amount) external;\\n\\n    /*\\n     * Initial checks:\\n     * - User has a non zero deposit\\n     * - User has an open trove\\n     * - User has some WStETH gain\\n     * ---\\n     * - Triggers a HOG issuance, based on time passed since the last issuance. The HOG issuance is shared between *all* depositors and front ends\\n     * - Sends all depositor's HOG gain to  depositor\\n     * - Sends all tagged front end's HOG gain to the tagged front end\\n     * - Transfers the depositor's entire WStETH gain from the Stability Pool to the caller's trove\\n     * - Leaves their compounded deposit in the Stability Pool\\n     * - Updates snapshots for deposit and tagged front end stake\\n     */\\n    function withdrawWStETHGainToTrove(\\n        address _upperHint,\\n        address _lowerHint\\n    ) external;\\n\\n    /*\\n     * Initial checks:\\n     * - Caller is TroveManager\\n     * ---\\n     * Cancels out the specified debt against the BaseFeeLMA contained in the Stability Pool (as far as possible)\\n     * and transfers the Trove's WStETH collateral from ActivePool to StabilityPool.\\n     * Only called by liquidation functions in the TroveManager.\\n     */\\n    function offset(uint _debt, uint _coll) external;\\n\\n    /*\\n     * Returns the total amount of WStETH held by the pool, accounted in an internal variable instead of `balance`,\\n     * to exclude edge cases like WStETH received from a self-destruct.\\n     */\\n    function getWStETH() external view returns (uint);\\n\\n    /*\\n     * Returns BaseFeeLMA held in the pool. Changes when users deposit/withdraw, and when Trove debt is offset.\\n     */\\n    function getTotalBaseFeeLMADeposits() external view returns (uint);\\n\\n    /*\\n     * Calculates the WStETH gain earned by the deposit since its last snapshots were taken.\\n     */\\n    function getDepositorWStETHGain(\\n        address _depositor\\n    ) external view returns (uint);\\n\\n    /*\\n     * Calculate the HOG gain earned by a deposit since its last snapshots were taken.\\n     * If not tagged with a front end, the depositor gets a 100% cut of what their deposit earned.\\n     * Otherwise, their cut of the deposit's earnings is equal to the kickbackRate, set by the front end through\\n     * which they made their deposit.\\n     */\\n    function getDepositorHOGGain(\\n        address _depositor\\n    ) external view returns (uint);\\n\\n    /*\\n     * Return the user's compounded deposit.\\n     */\\n    function getCompoundedBaseFeeLMADeposit(\\n        address _depositor\\n    ) external view returns (uint);\\n}\\n\",\"keccak256\":\"0xac47759c001ae07ffa822446dec81e68b4537e71b0f7d545853fcfbc2cc0baa7\",\"license\":\"MIT\"},\"contracts/interfaces/ITroveManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./IHedgehogBase.sol\\\";\\nimport \\\"./IStabilityPool.sol\\\";\\nimport \\\"./IBaseFeeLMAToken.sol\\\";\\nimport \\\"./IHOGToken.sol\\\";\\n\\n// Common interface for the Trove Manager.\\ninterface ITroveManager is IHedgehogBase {\\n    // --- Events ---\\n\\n    event BorrowerOperationsAddressChanged(\\n        address _newBorrowerOperationsAddress\\n    );\\n    event PriceFeedAddressChanged(address _newPriceFeedAddress);\\n    event BaseFeeLMATokenAddressChanged(address _newBaseFeeLMATokenAddress);\\n    event ActivePoolAddressChanged(address _activePoolAddress);\\n    event DefaultPoolAddressChanged(address _defaultPoolAddress);\\n    event StabilityPoolAddressChanged(address _stabilityPoolAddress);\\n    event GasPoolAddressChanged(address _gasPoolAddress);\\n    event CollSurplusPoolAddressChanged(address _collSurplusPoolAddress);\\n    event SortedTrovesAddressChanged(address _sortedTrovesAddress);\\n    event HOGTokenAddressChanged(address _hogTokenAddress);\\n\\n    event Liquidation(\\n        uint _liquidatedDebt,\\n        uint _liquidatedColl,\\n        uint _collGasCompensation,\\n        uint _BaseFeeLMAGasCompensation\\n    );\\n    event Redemption(\\n        uint _attemptedBaseFeeLMAAmount,\\n        uint _actualBaseFeeLMAAmount,\\n        uint _WStETHSent,\\n        uint _WStETHFee\\n    );\\n    event TroveUpdated(\\n        address indexed _borrower,\\n        uint _debt,\\n        uint _coll,\\n        uint stake,\\n        uint8 operation\\n    );\\n    event TroveLiquidated(\\n        address indexed _borrower,\\n        uint _debt,\\n        uint _coll,\\n        uint8 operation\\n    );\\n    event BaseRateUpdated(uint _baseRate);\\n    event LastFeeOpTimeUpdated(uint _lastFeeOpTime);\\n    event TotalStakesUpdated(uint _newTotalStakes);\\n    event SystemSnapshotsUpdated(\\n        uint _totalStakesSnapshot,\\n        uint _totalCollateralSnapshot\\n    );\\n    event LTermsUpdated(uint _L_WStETH, uint _L_BaseFeeLMADebt);\\n    event TroveSnapshotsUpdated(uint _L_WStETH, uint _L_BaseFeeLMADebt);\\n    event TroveIndexUpdated(address _borrower, uint _newIndex);\\n\\n    // --- Functions ---\\n\\n    function setAddresses(\\n        address _borrowerOperationsAddress,\\n        address _activePoolAddress,\\n        address _defaultPoolAddress,\\n        address _stabilityPoolAddress,\\n        address _gasPoolAddress,\\n        address _collSurplusPoolAddress,\\n        address _priceFeedAddress,\\n        address _baseFeeLMATokenAddress,\\n        address _sortedTrovesAddress,\\n        address _hogTokenAddress\\n    ) external;\\n\\n    function stabilityPool() external view returns (IStabilityPool);\\n\\n    function baseFeeLMAToken() external view returns (IBaseFeeLMAToken);\\n\\n    function hogToken() external view returns (IHOGToken);\\n\\n    function getTroveOwnersCount() external view returns (uint);\\n\\n    function getTroveFromTroveOwnersArray(\\n        uint _index\\n    ) external view returns (address);\\n\\n    function getNominalICR(address _borrower) external view returns (uint);\\n\\n    function getCurrentICR(\\n        address _borrower,\\n        uint _price\\n    ) external view returns (uint);\\n\\n    function liquidate(address _borrower) external;\\n\\n    function liquidateTroves(uint _n) external;\\n\\n    function batchLiquidateTroves(address[] calldata _troveArray) external;\\n\\n    function redeemCollateral(\\n        uint _BaseFeeLMAAmount,\\n        address _firstRedemptionHint,\\n        address _upperPartialRedemptionHint,\\n        address _lowerPartialRedemptionHint,\\n        uint _partialRedemptionHintNICR,\\n        uint _maxIterations,\\n        uint _maxFee\\n    ) external;\\n\\n    function updateStakeAndTotalStakes(\\n        address _borrower\\n    ) external returns (uint);\\n\\n    function updateTroveRewardSnapshots(address _borrower) external;\\n\\n    function addTroveOwnerToArray(\\n        address _borrower\\n    ) external returns (uint index);\\n\\n    function applyPendingRewards(address _borrower) external;\\n\\n    function getPendingWStETHReward(\\n        address _borrower\\n    ) external view returns (uint);\\n\\n    function getPendingBaseFeeLMADebtReward(\\n        address _borrower\\n    ) external view returns (uint);\\n\\n    function hasPendingRewards(address _borrower) external view returns (bool);\\n\\n    function getEntireDebtAndColl(\\n        address _borrower\\n    )\\n        external\\n        view\\n        returns (\\n            uint debt,\\n            uint coll,\\n            uint pendingBaseFeeLMADebtReward,\\n            uint pendingWStETHReward\\n        );\\n\\n    function closeTrove(address _borrower) external;\\n\\n    function removeStake(address _borrower) external;\\n\\n    function getRedemptionRate(\\n        uint _redemptionColl\\n    ) external view returns (uint);\\n\\n    function getRedemptionRateWithDecay(\\n        uint _redemptionColl\\n    ) external view returns (uint);\\n\\n    function getRedemptionFeeWithDecay(\\n        uint _WStETHDrawn\\n    ) external view returns (uint);\\n\\n    function getBorrowingRate(\\n        uint _issuedBaseFeeLMA\\n    ) external view returns (uint);\\n\\n    function getBorrowingRateWithDecay(\\n        uint _issuedBaseFeeLMA\\n    ) external view returns (uint);\\n\\n    function getBorrowingFee(\\n        uint BaseFeeLMADebt\\n    ) external view returns (uint, uint);\\n\\n    function getBorrowingFeeWithDecay(\\n        uint _BaseFeeLMADebt\\n    ) external view returns (uint);\\n\\n    function updateBaseRateFromBorrowing(uint _baseRate) external;\\n\\n    function decayBaseRateFromBorrowing() external;\\n\\n    function getTroveStatus(address _borrower) external view returns (uint);\\n\\n    function getTroveStake(address _borrower) external view returns (uint);\\n\\n    function getTroveDebt(address _borrower) external view returns (uint);\\n\\n    function getTroveColl(address _borrower) external view returns (uint);\\n\\n    function setTroveStatus(address _borrower, uint num) external;\\n\\n    function increaseTroveColl(\\n        address _borrower,\\n        uint _collIncrease\\n    ) external returns (uint);\\n\\n    function decreaseTroveColl(\\n        address _borrower,\\n        uint _collDecrease\\n    ) external returns (uint);\\n\\n    function increaseTroveDebt(\\n        address _borrower,\\n        uint _debtIncrease\\n    ) external returns (uint);\\n\\n    function decreaseTroveDebt(\\n        address _borrower,\\n        uint _collDecrease\\n    ) external returns (uint);\\n\\n    function getTCR(uint _price) external view returns (uint);\\n\\n    function checkRecoveryMode(uint _price) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xf872fcc6321ea6e1a30d659e710daf3ebe33ce24425f06bf796b2ba1b05dd6fc\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b5060405162005e0738038062005e078339810160408190526200003491620000a3565b608082905260a0819052620000493362000051565b5050620000c8565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008060408385031215620000b757600080fd5b505080516020909101519092909150565b60805160a051615cef62000118600039600081816105d6015261447701526000818161092c015281816143bb015281816143fb01528181614a8001528181614ea4015261558e0152615cef6000f3fe608060405234801561001057600080fd5b50600436106104d85760003560e01c80637e024ad611610283578063b91af97c1161015c578063d5b35635116100ce578063e2ac77b011610092578063e2ac77b014610b2b578063e324634914610b3e578063f2fde38b14610b47578063f92d343314610636578063fb0cbd4b14610b5a578063fe2ba84814610b6957600080fd5b8063d5b3563514610ac1578063d66a255314610ad4578063d696629714610afd578063d9a7244414610b10578063e1f787e914610b2357600080fd5b8063c35bc55011610120578063c35bc55014610a62578063c3eb5c6714610a6c578063c42dab9914610a75578063cbd138ae14610a88578063d293c71014610a9b578063d3d6f84314610aae57600080fd5b8063b91af97c14610a01578063bb6f030c14610a34578063bcd3752614610a3d578063bf9befb114610a50578063c26c880014610a5957600080fd5b80639f7adb5e116101f5578063ae918754116101b9578063ae91875414610999578063b0d8e181146109ac578063b25c3183146109bf578063b36cd07f146109c8578063b7f8cf9b146109db578063b82f263d146109ee57600080fd5b80639f7adb5e14610914578063a201415214610927578063a20baee614610627578063a22b7d681461094e578063a3f4df7e1461096157600080fd5b80638da5cb5b116102475780638da5cb5b146108b85780638f913789146108c9578063900e664b146108dc578063948ba6d2146108e557806396d711ff146108f85780639976cf451461090157600080fd5b80637e024ad6146108725780637f7dde4a14610881578063807d138d1461089457806382fe3eb91461089d578063887105d3146108b057600080fd5b80634870dd9a116103b5578063653d46e71161032757806372fe25aa116102eb57806372fe25aa14610627578063741bef1a14610822578063756b253e14610835578063794e572414610848578063795d26c3146108575780637985c5e41461085f57600080fd5b8063653d46e7146107935780636ef64338146107a6578063715018a6146107ff57806371f256e21461080757806372423c171461080f57600080fd5b806358b8a5d61161037957806358b8a5d61461071e5780635d6b480f146107315780635dba4c4a1461074457806361ec893d1461074c578063631203b01461075457806364cee2601461076757600080fd5b80634870dd9a146106c957806349eefeee146106d15780634e443d9e146106d9578063570dc45e146106fc5780635733d58f1461070f57600080fd5b80631e8b1c2b1161044e5780632d81dd56116104125780632d81dd561461063e5780632f865568146106515780633cc742251461066457806347142aa314610677578063477d66cf1461068a578063480cd5781461069d57600080fd5b80631e8b1c2b146105f857806321e378011461060b57806322afd9f11461061e578063240926691461062757806328d28b5b1461063657600080fd5b806312610e92116104a057806312610e921461055357806315d549f1146105665780631673c79a1461057957806318f2817a146105b55780631b199a64146105c85780631bf43555146105d157600080fd5b8063030c5a0f146104dd578063048c661d14610503578063071a7541146105235780630b0765571461052b5780630c08ff5f14610540575b600080fd5b6104f06104eb366004615709565b610b7c565b6040519081526020015b60405180910390f35b600554610516906001600160a01b031681565b6040516104fa9190615726565b6104f0600281565b61053e610539366004615709565b610c35565b005b6104f061054e366004615709565b610c5d565b6104f061056136600461573a565b610c88565b6104f0610574366004615709565b610cda565b6105a0610587366004615709565b6016602052600090815260409020805460019091015482565b604080519283526020830191909152016104fa565b6104f06105c3366004615709565b610cfc565b6104f060195481565b6104f07f000000000000000000000000000000000000000000000000000000000000000081565b61053e61060636600461577c565b610d0f565b6104f0610619366004615709565b611118565b6104f060145481565b6104f0670de0b6b3a764000081565b6104f0611148565b6104f061064c366004615841565b61116a565b61053e61065f366004615709565b61118a565b600154610516906001600160a01b031681565b6104f0610685366004615841565b6111f6565b6104f0610698366004615863565b61120e565b6104f06106ab366004615709565b6001600160a01b031660009081526010602052604090206001015490565b6104f060c881565b6017546104f0565b6106ec6106e7366004615863565b611222565b60405190151581526020016104fa565b600954610516906001600160a01b031681565b6104f0674563918244f4000081565b6104f061072c366004615863565b61122d565b61053e61073f36600461573a565b61123b565b61053e611293565b6104f0603c81565b6105a0610762366004615863565b6112ff565b6104f0610775366004615709565b6001600160a01b031660009081526010602052604090206002015490565b61053e6107a1366004615863565b611322565b6107ee6107b4366004615709565b60106020526000908152604090208054600182015460028301546003909301549192909160ff81169061010090046001600160801b031685565b6040516104fa959493929190615892565b61053e61168c565b6106ec6116a0565b6104f061081d36600461573a565b611726565b600254610516906001600160a01b031681565b610516610843366004615863565b61177d565b6104f06714d1120d7b16000081565b6104f06117a7565b61053e61086d3660046158d8565b6118a3565b6104f0670ddd4b8c6c7d70d881565b600054610516906001600160a01b031681565b6104f060125481565b61053e6108ab366004615709565b611c1f565b6104f0611c30565b6003546001600160a01b0316610516565b600854610516906001600160a01b031681565b6104f060155481565b6104f06108f3366004615863565b611cf5565b6104f060135481565b6104f061090f36600461573a565b611d08565b61053e610922366004615863565b611d35565b6104f07f000000000000000000000000000000000000000000000000000000000000000081565b6104f061095c366004615863565b611e3a565b61098c6040518060400160405280600c81526020016b2a3937bb32a6b0b730b3b2b960a11b81525081565b6040516104fa91906159b6565b600b54610516906001600160a01b031681565b6104f06109ba366004615709565b611e4d565b6104f060185481565b6104f06109d6366004615863565b611e74565b600454610516906001600160a01b031681565b6104f06109fc366004615863565b611e82565b610a14610a0f366004615709565b611e8d565b6040805194855260208501939093529183015260608201526080016104fa565b6104f0600c5481565b61053e610a4b366004615a04565b611ee5565b6104f060115481565b6104f0600f5481565b6104f06212750081565b6104f0600d5481565b600a54610516906001600160a01b031681565b61053e610a96366004615709565b6125ef565b6104f0610aa936600461573a565b612602565b6104f0610abc36600461573a565b612621565b6104f0610acf366004615863565b612651565b6104f0610ae2366004615709565b6001600160a01b031660009081526010602052604090205490565b6104f0610b0b366004615709565b612665565b610516610b1e366004615863565b6126fe565b6104f061272e565b6106ec610b39366004615709565b6127af565b6104f0600e5481565b61053e610b55366004615709565b612812565b6104f0670dc14847bcc53b2081565b61053e610b77366004615709565b612888565b6001600160a01b0381166000908152601660205260408120546014548290610ba49083612899565b9050801580610be3575060016001600160a01b03851660009081526010602052604090206003015460ff166004811115610be057610be061587c565b14155b15610bf2575060009392505050565b6001600160a01b03841660009081526010602052604081206002015490610c2b670de0b6b3a7640000610c2584866128ac565b906128b8565b9695505050505050565b610c3d6128c4565b600054600154610c5a916001600160a01b03908116911683612944565b50565b6001600160a01b0381166000908152601660205260408120600101546015548290610ba49083612899565b6000610c926128c4565b6001600160a01b038316600090815260106020526040812054610cb59084612899565b6001600160a01b03851660009081526010602052604090208190559150505b92915050565b6000610ce46128c4565b610ced82612a4a565b6001600160801b031692915050565b6000610d066128c4565b610cd482612ae4565b8051600003610d845760405162461bcd60e51b815260206004820152603660248201527f54726f76654d616e616765723a2043616c6c646174612061646472657373206160448201527572726179206d757374206e6f7420626520656d70747960501b60648201526084015b60405180910390fd5b6000546001546005546001600160a01b03928316929182169116610da661561f565b610dae615650565b600260009054906101000a90046001600160a01b03166001600160a01b0316630fdb11cf6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610e03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e279190615a72565b826000018181525050826001600160a01b031663488df0fc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e929190615a72565b60208301528151610ea290612b88565b1580156040840152610eca57610ec38585846000015185602001518a612ba5565b9050610ee2565b610edf8585846000015185602001518a612dcc565b90505b6000816020015111610f065760405162461bcd60e51b8152600401610d7b90615a8b565b608081015160a082015160405163335525ad60e01b81526001600160a01b0386169263335525ad92610f4392600401918252602082015260400190565b600060405180830381600087803b158015610f5d57600080fd5b505af1158015610f71573d6000803e3d6000fd5b50505050610f8985858360c001518460e00151612e9c565b610100810151156110675760075461010082015160405162f9332d60e61b81526001600160a01b0390921691633e4ccb4091610fcb9160040190815260200190565b600060405180830381600087803b158015610fe557600080fd5b505af1158015610ff9573d6000803e3d6000fd5b50506007546101008401516040516316daab2160e01b81526001600160a01b03808b1695506316daab21945061103493169190600401615acd565b600060405180830381600087803b15801561104e57600080fd5b505af1158015611062573d6000803e3d6000fd5b505050505b611075858260400151613130565b60208101516060830152610100810151604082015182516110a1929161109b9190612899565b90612899565b6080838101829052606080850151604085810151868401518251938452602084019690965290820152908101929092527f4152c73dd2614c4f9fc35e8c9cf16013cd588c75b49a4c1673ecffdcbcda9403910160405180910390a1611110853383606001518460400151613274565b505050505050565b6001600160a01b03811660009081526010602052604081206003015460ff166004811115610cd457610cd461587c565b61115c6103e8670de0b6b3a7640000615b12565b611167906005615b26565b81565b60008061118284846014670de0b6b3a7640000613357565b949350505050565b61119381613462565b6040805160018082528183019092526000916020808301908036833701905050905081816000815181106111c9576111c9615b3d565b60200260200101906001600160a01b031690816001600160a01b0316815250506111f281610d0f565b5050565b600080611182848460146714d1120d7b160000613357565b6000610cd461121c83611cf5565b836134f9565b6000610cd482612b88565b6000610cd4600c5483613511565b6112436128c4565b8060048111156112555761125561587c565b6001600160a01b0383166000908152601060205260409020600301805460ff1916600183600481111561128a5761128a61587c565b02179055505050565b61129b6128c4565b60006112a561364a565b9050670de0b6b3a76400008111156112bf576112bf615b53565b600d8190556040518181527fca870d46d67e9a1444a6b8f97a147e06e4cf71ee2a0f172d7ecd5441ae7c12019060200160405180910390a1610c5a61368e565b600080600061130d84611e74565b905061131981856134f9565b94909350915050565b6040805160c081018252600080546001600160a01b03908116835260015481166020840152928201819052600b54831660608301526080820181905260a082015260055490911661137161561f565b611379615650565b600260009054906101000a90046001600160a01b03166001600160a01b0316630fdb11cf6040518163ffffffff1660e01b81526004016020604051808303816000875af11580156113ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113f29190615a72565b826000018181525050826001600160a01b031663488df0fc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611439573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061145d9190615a72565b6020830152815161146d90612b88565b15801560408401526114945761148d8483600001518460200151886136e5565b90506114b4565b6114b1846000015185602001518460000151856020015189613a62565b90505b60008160200151116114d85760405162461bcd60e51b8152600401610d7b90615a8b565b608081015160a082015160405163335525ad60e01b81526001600160a01b0386169263335525ad9261151592600401918252602082015260400190565b600060405180830381600087803b15801561152f57600080fd5b505af1158015611543573d6000803e3d6000fd5b50505050611563846000015185602001518360c001518460e00151612e9c565b610100810151156115da5783516007546101008301516040516316daab2160e01b81526001600160a01b03938416936316daab21936115a793911691600401615acd565b600060405180830381600087803b1580156115c157600080fd5b505af11580156115d5573d6000803e3d6000fd5b505050505b6115ec84600001518260400151613130565b6020810151606083015261010081015160408201518251611612929161109b9190612899565b6080838101829052606080850151604085810151868401518251938452602084019690965290820152908101929092527f4152c73dd2614c4f9fc35e8c9cf16013cd588c75b49a4c1673ecffdcbcda9403910160405180910390a161168584600001513383606001518460400151613274565b5050505050565b611694613b93565b61169e6000613bed565b565b6000611721600260009054906101000a90046001600160a01b03166001600160a01b0316630490be836040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061171c9190615a72565b612b88565b905090565b60006117306128c4565b6001600160a01b0383166000908152601060205260408120600101546117569084613c3f565b6001600160a01b038516600090815260106020526040902060010181905591505092915050565b6017818154811061178d57600080fd5b6000918252602090912001546001600160a01b0316905081565b60008054604080516315b3137b60e21b8152905183926001600160a01b0316916356cc4dec9160048083019260209291908290030181865afa1580156117f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118159190615a72565b90506000600160009054906101000a90046001600160a01b03166001600160a01b03166356cc4dec6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561186c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118909190615a72565b905061189c8282613c3f565b9250505090565b6118ab613b93565b6118b48b613c4b565b6118bd8a613c4b565b6118c689613c4b565b6118cf88613c4b565b6118d887613c4b565b6118e186613c4b565b6118ea85613c4b565b6118f384613c4b565b6118fc83613c4b565b61190582613c4b565b61190e81613c4b565b600480546001600160a01b03199081166001600160a01b038e8116919091179092556000805482168d84161790556001805482168c84161790556005805482168b84161790556006805482168a8416179055600780548216898416179055600280548216888416179055600880548216878416179055600b80548216868416179055600980548216858416179055600a80549091169183169190911790556040517f3ca631ffcd2a9b5d9ae18543fc82f58eb4ca33af9e6ab01b7a8e95331e6ed985906119dc908d90615726565b60405180910390a17f78f058b189175430c48dc02699e3a0031ea4ff781536dc2fab847de4babdd8828a604051611a139190615726565b60405180910390a17f5ee0cae2f063ed938bb55046f6a932fb6ae792bf43624806bb90abe68a50be9b89604051611a4a9190615726565b60405180910390a17f82966d27eea39b038ee0fa30cd16532bb24f6e65d31cb58fb227aa5766cdcc7f88604051611a819190615726565b60405180910390a17fcfb07d791fcafc032b35837b50eb84b74df518cf4cc287e8084f47630fa70fa087604051611ab89190615726565b60405180910390a17fe67f36a6e961157d6eff83b91f3af5a62131ceb6f04954ef74f51c1c05e7f88d86604051611aef9190615726565b60405180910390a17f8c537274438aa850a330284665d81a85dd38267d09e4050d416bfc94142db26485604051611b269190615726565b60405180910390a17f7faa560f2889840c377209fbc4b6b92d05f43f1fc60bf336ab546fd60c0051ad84604051611b5d9190615726565b60405180910390a17f65f4cf077bc01e4742eb5ad98326f6e95b63548ea24b17f8d5e823111fe7880083604051611b949190615726565b60405180910390a17f0d32e4ef3d389440323b172cfc07c6c01bdd1d3e8334379048eec21e8d919b7782604051611bcb9190615726565b60405180910390a17f6877e00d9059f8716bd795b5d4c2c89a4bc3cef71ba3dd99b168ac9cc1f2a6c281604051611c029190615726565b60405180910390a1611c1261168c565b5050505050505050505050565b611c276128c4565b610c5a81613cf0565b6000805460408051630ee2ec9760e41b8152905183926001600160a01b03169163ee2ec9709160048083019260209291908290030181865afa158015611c7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c9e9190615a72565b90506000600160009054906101000a90046001600160a01b03166001600160a01b031663ee2ec9706040518163ffffffff1660e01b8152600401602060405180830381865afa15801561186c573d6000803e3d6000fd5b6000610cd4611d02613d54565b83613d98565b6000611d126128c4565b6001600160a01b038316600090815260106020526040812054610cb59084613c3f565b6004546001600160a01b03163314611da75760405162461bcd60e51b815260206004820152602f60248201527f54726f76654d616e616765723a204f6e6c7920426f72726f776572206f70657260448201526e185d1a5bdb9cc81b585e4818d85b1b608a1b6064820152608401610d7b565b611dbb6103e8670de0b6b3a7640000615b12565b611dc6906005615b26565b8110611dfd57611de06103e8670de0b6b3a7640000615b12565b611deb906005615b26565b611df59082615b69565b600d55611e03565b6000600d555b6040518181527fca870d46d67e9a1444a6b8f97a147e06e4cf71ee2a0f172d7ecd5441ae7c1201906020015b60405180910390a150565b6000610cd4611e47613d54565b83613511565b6000806000611e5b84613e77565b915091506000611e6b8383613ef1565b95945050505050565b6000610cd4600d5483613d98565b6000610cd482613f20565b6001600160a01b03811660009081526010602052604081208054600190910154909180611eb985610c5d565b9150611ec485610b7c565b9050611ed08483613c3f565b9350611edc8382613c3f565b92509193509193565b6040805160c08082018352600080546001600160a01b0390811684526001548116602080860191909152600854821685870152600b548216606080870191909152600754831660808088019190915260065490931660a080880191909152875161010081018952858152928301859052968201849052810183905290810182905293840181905290830181905260e083015290611f8183613f44565b600260009054906101000a90046001600160a01b03166001600160a01b0316630fdb11cf6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015611fd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ffa9190615a72565b60c0820181905261200a90613fdf565b61201389614052565b6120228260400151338b6140b9565b61202a6117a7565b60e0820181905260408084015190516370a0823160e01b81526001600160a01b03909116906370a0823190612063903390600401615726565b602060405180830381865afa158015612080573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120a49190615a72565b11156120b2576120b2615b53565b888152606082015160c08201516000916120cd918b906141b9565b156120d95750876121eb565b82606001516001600160a01b0316634d6228316040518163ffffffff1660e01b8152600401602060405180830381865afa15801561211b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061213f9190615b7c565b90505b6001600160a01b0381161580159061216e57506714d1120d7b16000061216c828460c00151612602565b105b156121eb5782606001516001600160a01b031663b72703ac826040518263ffffffff1660e01b81526004016121a39190615726565b602060405180830381865afa1580156121c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121e49190615b7c565b9050612142565b846000036121f95760001994505b6001600160a01b038116158015906122115750815115155b801561221d5750600085115b15612329578461222c81615b99565b955050600083606001516001600160a01b031663b72703ac836040518263ffffffff1660e01b81526004016122619190615726565b602060405180830381865afa15801561227e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122a29190615b7c565b90506122b78460000151856020015184612944565b60006122d0858486600001518760c001518e8e8e614303565b90508060400151156122e3575050612329565b805160208501516122f391613c3f565b602080860191909152810151604085015161230d91613c3f565b60408501528051845161231f91612899565b84525090506121f9565b600082604001511161238f5760405162461bcd60e51b815260206004820152602960248201527f54726f76654d616e616765723a20556e61626c6520746f2072656465656d20616044820152681b9e48185b5bdd5b9d60ba1b6064820152608401610d7b565b61239c82604001516145a8565b506123aa82604001516146b5565b6060830181905260408301516123c19190866146c3565b600a54604080840151606085015191516318ddad8960e21b81526001600160a01b0390931692636376b624926124039291600401918252602082015260400190565b600060405180830381600087803b15801561241d57600080fd5b505af1158015612431573d6000803e3d6000fd5b505050506060820151604083015161244891612899565b60808301526020820151604080840151606085015191517f43a3f4082a4dbc33d78e317d2497d3a730bc7fc3574159dcea1056e62e5d9ad8936124a4938f93919293845260208401929092526040830152606082015260800190565b60405180910390a182604001516001600160a01b0316639dc29fac3384602001516040518363ffffffff1660e01b81526004016124e2929190615acd565b600060405180830381600087803b1580156124fc57600080fd5b505af1158015612510573d6000803e3d6000fd5b505084516020850151604051633b4009ff60e11b81526001600160a01b03909216935063768013fe925061254a9160040190815260200190565b600060405180830381600087803b15801561256457600080fd5b505af1158015612578573d6000803e3d6000fd5b5050845160808501516040516316daab2160e01b81526001600160a01b0390921693506316daab2192506125b191339190600401615acd565b600060405180830381600087803b1580156125cb57600080fd5b505af11580156125df573d6000803e3d6000fd5b5050505050505050505050505050565b6125f76128c4565b610c5a81600261472d565b600080600061261085613e77565b915091506000610c2b83838761485a565b600061262b6128c4565b6001600160a01b0383166000908152601060205260408120600101546117569084612899565b6000610cd461265f83611e3a565b8361488e565b600080600260009054906101000a90046001600160a01b03166001600160a01b0316630490be836040518163ffffffff1660e01b8152600401602060405180830381865afa1580156126bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126df9190615a72565b90506000806126ed85613e77565b915091506000610c2b83838661485a565b60006017828154811061271357612713615b3d565b6000918252602090912001546001600160a01b031692915050565b6000611721600260009054906101000a90046001600160a01b03166001600160a01b0316630490be836040518163ffffffff1660e01b8152600401602060405180830381865afa158015612786573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127aa9190615a72565b613f20565b600060016001600160a01b03831660009081526010602052604090206003015460ff1660048111156127e3576127e361587c565b146127f057506000919050565b506014546001600160a01b039091166000908152601660205260409020541090565b61281a613b93565b6001600160a01b03811661287f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610d7b565b610c5a81613bed565b6128906128c4565b610c5a816148a7565b60006128a58284615b69565b9392505050565b60006128a58284615b26565b60006128a58284615b12565b6004546001600160a01b0316331461169e5760405162461bcd60e51b815260206004820152603b60248201527f54726f76654d616e616765723a2043616c6c6572206973206e6f74207468652060448201527f426f72726f7765724f7065726174696f6e7320636f6e747261637400000000006064820152608401610d7b565b61294d816127af565b15612a455761295b81613462565b600061296682610b7c565b9050600061297383610c5d565b6001600160a01b03841660009081526010602052604090206001015490915061299c9083613c3f565b6001600160a01b03841660009081526010602052604090206001810191909155546129c79082613c3f565b6001600160a01b0384166000908152601060205260409020556129e983613cf0565b6129f5858583856148f1565b6001600160a01b038316600081815260106020526040808220805460018201546002909201549251600080516020615c9a83398151915294612a3a9492939291615bc4565b60405180910390a250505b505050565b601780546001808201835560008381527fc624b66cc0138b8fabc209247f72d758e1cf3343756d543badbf24212bed8c1590920180546001600160a01b0319166001600160a01b03861617905591549091612aa59190612899565b6001600160a01b039290921660009081526010602052604090206003018054610100600160881b0319166101006001600160801b038516021790555090565b6001600160a01b0381166000908152601060205260408120600101548190612b0b906149d2565b6001600160a01b038416600090815260106020526040902060020180549082905560115491925090612b49908390612b439084612899565b90613c3f565b60118190556040519081527f6bac5e0eb3c44eb03a60ab11ec3a2c051771616aecadbcfff2630aabae5203829060200160405180910390a15092915050565b600080612b9483613f20565b674563918244f40000119392505050565b612bad615650565b612bb561569c565b612bbd615650565b84825260006080830152612bcf6117a7565b60a0830152612bdc611c30565b60c0830152600060208301525b835182602001511015612dc15783826020015181518110612c0c57612c0c615b3d565b6020908102919091018101516001600160a01b03166060840181905260009081526010909152604090206003015460019060ff166004811115612c5157612c5161587c565b03612da957612c64826060015187612602565b60408301526080820151612d51576714d1120d7b160000826040015110158015612c8d57508151155b612da9576000612ca68360c001518460a001518961485a565b9050612cc38989856060015186604001518760000151868d614a13565b60808101518451919350612cd79190612899565b8352608082015160a0840151612cec91612899565b8360a0018181525050612d2182610100015161109b846040015161109b8660a001518860c0015161289990919063ffffffff16565b60c0840152612d308483614d24565b9350612d458360c001518460a0015189614e05565b15608084015250612da9565b81608001518015612d6d57506714d1120d7b1600008260400151105b15612da957612d86888884606001518560000151614e26565b60808101518351919250612d9a9190612899565b8252612da68382614d24565b92505b60208201805190612db982615be6565b905250612be9565b505095945050505050565b612dd4615650565b612ddc61569c565b612de4615650565b848252600060208301525b835182602001511015612dc15783826020015181518110612e1257612e12615b3d565b60209081029190910101516001600160a01b031660608301819052612e379087612602565b604083018190526714d1120d7b1600001115612e8457612e61888884606001518560000151614e26565b60808101518351919250612e759190612899565b8252612e818382614d24565b92505b60208201805190612e9482615be6565b905250612def565b811561312a57601854600090612ebe90612b4384670de0b6b3a76400006128ac565b90506000612ee3601954612b43670de0b6b3a7640000876128ac90919063ffffffff16565b90506000612efc601154846128b890919063ffffffff16565b90506000612f15601154846128b890919063ffffffff16565b9050612f36612f2f601154846128ac90919063ffffffff16565b8590612899565b601855601154612f5290612f4b9083906128ac565b8490612899565b601955601454612f629083613c3f565b601455601554612f729082613c3f565b60158190556014546040517f9f8bc8ab0daf5bceef75ecfd2085d1fcc6548c657ea970d9a23a60610d0737e392612fb0928252602082015260400190565b60405180910390a1604051633b4009ff60e11b8152600481018790526001600160a01b0389169063768013fe90602401600060405180830381600087803b158015612ffa57600080fd5b505af115801561300e573d6000803e3d6000fd5b505060405163262b890160e01b8152600481018990526001600160a01b038a16925063262b89019150602401600060405180830381600087803b15801561305457600080fd5b505af1158015613068573d6000803e3d6000fd5b505060405162f9332d60e61b8152600481018890526001600160a01b038a169250633e4ccb409150602401600060405180830381600087803b1580156130ad57600080fd5b505af11580156130c1573d6000803e3d6000fd5b50506040516316daab2160e01b81526001600160a01b038b1692506316daab2191506130f3908a908990600401615acd565b600060405180830381600087803b15801561310d57600080fd5b505af1158015613121573d6000803e3d6000fd5b50505050505050505b50505050565b6011546012819055506000826001600160a01b031663ee2ec9706040518163ffffffff1660e01b8152600401602060405180830381865afa158015613179573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061319d9190615a72565b90506000600160009054906101000a90046001600160a01b03166001600160a01b031663ee2ec9706040518163ffffffff1660e01b8152600401602060405180830381865afa1580156131f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132189190615a72565b905061322881612b438486612899565b60138190556012546040517f51bf4c63ec3cba9d03d43238abbdd979dd91bd16d9895c74ceea9118c7baaf6092613266928252602082015260400190565b60405180910390a150505050565b81156132eb57600854600654604051631062c15f60e11b81526001600160a01b0391821660048201528582166024820152604481018590529116906320c582be90606401600060405180830381600087803b1580156132d257600080fd5b505af11580156132e6573d6000803e3d6000fd5b505050505b801561312a576040516316daab2160e01b81526001600160a01b038516906316daab219061331f9086908590600401615acd565b600060405180830381600087803b15801561333957600080fd5b505af115801561334d573d6000803e3d6000fd5b5050505050505050565b60006001633b9aca008261336b8287615b26565b905060006133798388615b26565b90505b613388836102ee615b26565b811161345357600061339b8a8a8461485a565b9050868110156133f757825b8281111580156133c057506133bc858a615b26565b8110155b156133f557876133d18c8c8461485a565b10156133e4579550611182945050505050565b6133ee8582615b69565b90506133a7565b505b6134096702c68af0bb14000088615b69565b8110156134225761341b846014615b26565b945061343e565b6134338766b1a2bc2ec50000615bff565b81111561343e578394505b5090508061344c8482615bff565b905061337c565b50600098975050505050505050565b60016001600160a01b03821660009081526010602052604090206003015460ff1660048111156134945761349461587c565b14610c5a5760405162461bcd60e51b815260206004820152602f60248201527f54726f76654d616e616765723a2054726f766520646f6573206e6f742065786960448201526e1cdd081bdc881a5cc818db1bdcd959608a1b6064820152608401610d7b565b60006128a5670de0b6b3a7640000610c2585856128ac565b60006128a561363c613619600160009054906101000a90046001600160a01b03166001600160a01b031663ee2ec9706040518163ffffffff1660e01b8152600401602060405180830381865afa15801561356f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135939190615a72565b60008054906101000a90046001600160a01b03166001600160a01b031663ee2ec9706040518163ffffffff1660e01b8152600401602060405180830381865afa1580156135e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136089190615a72565b6136129190615bff565b85906128b8565b612b43866136316103e8670de0b6b3a7640000615b12565b612b43906005615b26565b670de0b6b3a7640000614f85565b600080613655614f9b565b9050600061366b670dc14847bcc53b2083614fb7565b905061189c670de0b6b3a7640000610c2583600d546128ac90919063ffffffff16565b60006136a5600f544261289990919063ffffffff16565b9050603c8110610c5a5742600f8190556040519081527f4ac50c32a269c2cfea9cf04e466da1ab839008441fadf7108e4f05410c2bfd5f90602001611e2f565b6136ed615650565b6136f561569c565b6136fd615650565b8482526000608083015261370f6117a7565b60a083015261371c611c30565b8260c001818152505086606001516001600160a01b0316634d6228316040518163ffffffff1660e01b8152600401602060405180830381865afa158015613767573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061378b9190615b7c565b82606001906001600160a01b031690816001600160a01b031681525050600087606001516001600160a01b0316631e2231436040518163ffffffff1660e01b8152600401602060405180830381865afa1580156137ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138109190615b7c565b6000602085015290505b8483602001511080156138435750806001600160a01b031683606001516001600160a01b031614155b15613a5757600088606001516001600160a01b031663b72703ac85606001516040518263ffffffff1660e01b815260040161387e9190615726565b602060405180830381865afa15801561389b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138bf9190615b7c565b90506138cf846060015189612602565b604085015260808401516139c7576714d1120d7b1600008460400151101580156138f857508351155b156139035750613a57565b60006139188560c001518660a001518b61485a565b8a5160208c015160608801516040890151895194955061393994868f614a13565b6080810151865191955061394d9190612899565b8552608084015160a086015161396291612899565b8560a001818152505061399784610100015161109b866040015161109b8860a001518a60c0015161289990919063ffffffff16565b60c08601526139a68685614d24565b95506139bb8560c001518660a001518b614e05565b15608086015250613a31565b836080015180156139e357506714d1120d7b1600008460400151105b15613a2b57613a0489600001518a6020015186606001518760000151614e26565b60808101518551919450613a189190612899565b8452613a248584614d24565b9450613a31565b50613a57565b6001600160a01b0316606084015260208301805190613a4f82615be6565b90525061381a565b505050949350505050565b613a6a615650565b613a7261569c565b613a7a615650565b600b54858352600060208401526001600160a01b03165b8483602001511015613b8757806001600160a01b0316634d6228316040518163ffffffff1660e01b8152600401602060405180830381865afa158015613adb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613aff9190615b7c565b6001600160a01b031660608401819052613b199088612602565b604084018190526714d1120d7b1600001115613b6a57613b43898985606001518660000151614e26565b60808101518451919350613b579190612899565b8352613b638483614d24565b9350613b6f565b613b87565b60208301805190613b7f82615be6565b905250613a91565b50505095945050505050565b6003546001600160a01b0316331461169e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610d7b565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006128a58284615bff565b6001600160a01b038116613ca15760405162461bcd60e51b815260206004820152601e60248201527f4163636f756e742063616e6e6f74206265207a65726f206164647265737300006044820152606401610d7b565b803b806111f25760405162461bcd60e51b815260206004820181905260248201527f4163636f756e7420636f64652073697a652063616e6e6f74206265207a65726f6044820152606401610d7b565b601480546001600160a01b038316600090815260166020526040908190209182556015546001909201829055915491517fc437f324d85e369394148dd9d62f98f534b382e01ed3dd2eb98138fb6d3ab49a92611e2f92908252602082015260400190565b600080613d5f61505b565b90506000613d75670ddd4b8c6c7d70d883614fb7565b905061189c670de0b6b3a7640000610c2583600c546128ac90919063ffffffff16565b600080600860009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613dee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e129190615a72565b905080600003613e4357613e306103e8670de0b6b3a7640000615b12565b613e3b906005615b26565b915050610cd4565b61118261363c613e5f83610c2587670de0b6b3a76400006128ac565b612b43876136316103e8670de0b6b3a7640000615b12565b6000806000613e8584610b7c565b90506000613e9285610c5d565b6001600160a01b03861660009081526010602052604081206001015491925090613ebc9084613c3f565b6001600160a01b03871660009081526010602052604081205491925090613ee39084613c3f565b919791965090945050505050565b60008115613f1757613f1082610c258568056bc75e2d631000006128ac565b9050610cd4565b50600019610cd4565b600080613f2b611c30565b90506000613f376117a7565b905061118282828661485a565b613f586103e8670de0b6b3a7640000615b12565b613f63906005615b26565b8110158015613f7a5750670de0b6b3a76400008111155b610c5a5760405162461bcd60e51b815260206004820152603060248201527f4d6178206665652070657263656e74616765206d75737420626520626574776560448201526f656e20302e352520616e64203130302560801b6064820152608401610d7b565b6714d1120d7b160000613ff182613f20565b1015610c5a5760405162461bcd60e51b815260206004820152602a60248201527f54726f76654d616e616765723a2043616e6e6f742072656465656d207768656e604482015269102a21a9101e1026a1a960b11b6064820152608401610d7b565b60008111610c5a5760405162461bcd60e51b815260206004820152602e60248201527f54726f76654d616e616765723a20416d6f756e74206d7573742062652067726560448201526d61746572207468616e207a65726f60901b6064820152608401610d7b565b6040516370a0823160e01b815281906001600160a01b038516906370a08231906140e7908690600401615726565b602060405180830381865afa158015614104573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141289190615a72565b1015612a455760405162461bcd60e51b815260206004820152605460248201527f54726f76654d616e616765723a2052657175657374656420726564656d70746960448201527f6f6e20616d6f756e74206d757374206265203c3d2075736572277320426173656064820152734665654c4d4120746f6b656e2062616c616e636560601b608482015260a401610d7b565b60006001600160a01b038316158061423b5750604051630bb7c8fd60e31b81526001600160a01b03851690635dbe47e8906141f8908690600401615726565b602060405180830381865afa158015614215573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142399190615c12565b155b8061425657506714d1120d7b1600006142548484612602565b105b15614263575060006128a5565b60405163765e015960e01b81526000906001600160a01b0386169063765e015990614292908790600401615726565b602060405180830381865afa1580156142af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142d39190615b7c565b90506001600160a01b0381161580611e6b57506714d1120d7b1600006142f98285612602565b1095945050505050565b614329604051806060016040528060008152602001600081526020016000151581525090565b6001600160a01b03871660009081526010602052604090205461434d908790614f85565b80825261435a90866128ac565b60208083019190915281516001600160a01b03891660009081526010909252604082205461438791612899565b6020808401516001600160a01b038b1660009081526010909252604082206001015492935090916143b791612899565b90507f0000000000000000000000000000000000000000000000000000000000000000820361445d576143e9896148a7565b6143f489600461472d565b6144208a8a7f000000000000000000000000000000000000000000000000000000000000000084615077565b886001600160a01b0316600080516020615c9a833981519152600080600060036040516144509493929190615bc4565b60405180910390a261459a565b60006144698284613ef1565b9050848114158061449957507f000000000000000000000000000000000000000000000000000000000000000083105b156144ad575050600160408301525061459d565b60608b015160405163015f109360e51b81526001600160a01b038c81166004830152602482018490528981166044830152888116606483015290911690632be2126090608401600060405180830381600087803b15801561450d57600080fd5b505af1158015614521573d6000803e3d6000fd5b5050506001600160a01b038b1660009081526010602052604090208481556001018390555061454f8a612ae4565b506001600160a01b038a1660008181526010602052604090819020600201549051600080516020615c9a833981519152916145909187918791600390615bc4565b60405180910390a2505b50505b979650505050505050565b6000806145b3613d54565b9050600061464160008054906101000a90046001600160a01b03166001600160a01b031663ee2ec9706040518163ffffffff1660e01b8152600401602060405180830381865afa15801561460b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061462f9190615a72565b610c2586670de0b6b3a76400006128ac565b9050600061464f8383613c3f565b905061466381670de0b6b3a7640000614f85565b90506000811161467557614675615b53565b600c8190556040518181527fbcd47f9685f1ffa254d0ac495b2e47d57feda8840e9d1f2a54d9d499650502a89060200160405180910390a16111826151d6565b6000610cd461265f8361122d565b60006146db83610c2586670de0b6b3a76400006128ac565b90508181111561312a5760405162461bcd60e51b815260206004820152601d60248201527f4665652065786365656465642070726f7669646564206d6178696d756d0000006044820152606401610d7b565b60008160048111156147415761474161587c565b141580156147615750600181600481111561475e5761475e61587c565b14155b61476d5761476d615b53565b6017546147798161522d565b6001600160a01b0383166000908152601060205260409020600301805483919060ff191660018360048111156147b1576147b161587c565b02179055506001600160a01b03831660009081526010602090815260408083206001808201859055908490556016909252822082815501556147f38382615307565b600b54604051631484968760e11b81526001600160a01b03909116906329092d0e90614823908690600401615726565b600060405180830381600087803b15801561483d57600080fd5b505af1158015614851573d6000803e3d6000fd5b50505050505050565b6000821561488557600061487c83610c25868189670de0b6b3a76400006128ac565b91506128a59050565b506000196128a5565b600080611182670de0b6b3a7640000610c2586866128ac565b6001600160a01b0381166000908152601060205260409020600201546011546148d09082612899565b601155506001600160a01b0316600090815260106020526040812060020155565b604051633b4009ff60e11b8152600481018390526001600160a01b0384169063768013fe90602401600060405180830381600087803b15801561493357600080fd5b505af1158015614947573d6000803e3d6000fd5b505060405163262b890160e01b8152600481018590526001600160a01b038716925063262b89019150602401600060405180830381600087803b15801561498d57600080fd5b505af11580156149a1573d6000803e3d6000fd5b505060405163051eb59960e11b8152600481018490526001600160a01b0386169250630a3d6b32915060240161331f565b6000806013546000036149e6575081610cd4565b6000601254116149f8576149f8615b53565b6128a5601354610c25601254866128ac90919063ffffffff16565b614a1b615650565b614a3f60405180606001604052806000815260200160008152602001600081525090565b601754600110614a4f575061459d565b614a5887611e8d565b60408501526020848101919091528401819052908352614a77906154d7565b604083018190527f000000000000000000000000000000000000000000000000000000000000000060608401526020830151614ab291612899565b8152670de0b6b3a76400008611614b7d57614ad78989836020015184604001516148f1565b614ae0876148a7565b60006080830181905260a0830152815160c0830152805160e0830152614b0787600361472d565b815160208301516040516001600160a01b038a1692600080516020615c7a83398151915292614b3892600290615c34565b60405180910390a2866001600160a01b0316600080516020615c9a83398151915260008060006002604051614b709493929190615bc4565b60405180910390a2614d18565b670de0b6b3a764000086118015614b9b57506714d1120d7b16000086105b15614beb57614bb48989836020015184604001516148f1565b614bbd876148a7565b81518151614bcc9190876154e4565b60e086015260c085015260a08401526080830152614b0787600361472d565b6714d1120d7b1600008610158015614c0257508386105b8015614c0f575081518510155b15614d0757614c288989836020015184604001516148f1565b84600003614c3857614c38615b53565b614c41876148a7565b614c54826000015183602001518561553e565b9150614c6187600361472d565b61010082015115614cd657600754610100830151604051633f10abab60e01b81526001600160a01b0390921691633f10abab91614ca3918b9190600401615acd565b600060405180830381600087803b158015614cbd57600080fd5b505af1158015614cd1573d6000803e3d6000fd5b505050505b815160a08301516040516001600160a01b038a1692600080516020615c7a83398151915292614b3892600290615c34565b614d0f615650565b915061459d9050565b50979650505050505050565b614d2c615650565b60408083015190840151614d3f91613c3f565b604082015260608083015190840151614d5791613c3f565b606082015281516020840151614d6c91613c3f565b6020808301919091528201518351614d8391613c3f565b815260808083015190840151614d9891613c3f565b608082015260a08083015190840151614db091613c3f565b60a082015260c08083015190840151614dc891613c3f565b60c082015260e08083015190840151614de091613c3f565b60e08201526101008083015190840151614df991613c3f565b61010082015292915050565b600080614e1385858561485a565b674563918244f400001195945050505050565b614e2e615650565b614e5260405180606001604052806000815260200160008152602001600081525090565b614e5b84611e8d565b60408501908152602085810192835286019290925291845290519051614e859188918891906148f1565b614e8e846148a7565b614e9b82602001516154d7565b604083018190527f000000000000000000000000000000000000000000000000000000000000000060608401526020830151600091614eda9190612899565b9050614eeb836000015182866154e4565b60e087015260c086015260a08501526080840152614f0a85600361472d565b825160208401516040516001600160a01b03881692600080516020615c7a83398151915292614f3b92600190615c34565b60405180910390a2846001600160a01b0316600080516020615c9a83398151915260008060006001604051614f739493929190615bc4565b60405180910390a25050949350505050565b6000818310614f9457816128a5565b5090919050565b6000611721603c610c25600f544261289990919063ffffffff16565b6000631f540500821115614fcd57631f54050091505b81600003614fe45750670de0b6b3a7640000610cd4565b670de0b6b3a764000083835b600181111561505157615004600282615c4f565b6000036150295761501582836155ef565b91506150228160026128b8565b9050614ff0565b61503382846155ef565b925061503f82836155ef565b91506150226002610c25836001612899565b610c2b82846155ef565b6000611721603c610c25600e544261289990919063ffffffff16565b6040808501516006549151632770a7eb60e21b81526001600160a01b0391821692639dc29fac926150af929116908690600401615acd565b600060405180830381600087803b1580156150c957600080fd5b505af11580156150dd573d6000803e3d6000fd5b50508551604051633b4009ff60e11b8152600481018690526001600160a01b03909116925063768013fe9150602401600060405180830381600087803b15801561512657600080fd5b505af115801561513a573d6000803e3d6000fd5b5050505083608001516001600160a01b0316633f10abab84836040518363ffffffff1660e01b8152600401615170929190615acd565b600060405180830381600087803b15801561518a57600080fd5b505af115801561519e573d6000803e3d6000fd5b5050855160808701516040516316daab2160e01b81526001600160a01b0390921693506316daab21925061331f918590600401615acd565b60006151ed600e544261289990919063ffffffff16565b9050603c8110610c5a5742600e8190556040519081527fbab964312bdd13595266f3e549bca3102965a6d718c6c1f8cd7eaac076b9c6c290602001611e2f565b6001811180156152a85750600b546040805163de8fa43160e01b815290516001926001600160a01b03169163de8fa4319160048083019260209291908290030181865afa158015615282573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906152a69190615a72565b115b610c5a5760405162461bcd60e51b815260206004820152602a60248201527f54726f76654d616e616765723a204f6e6c79206f6e652074726f766520696e206044820152697468652073797374656d60b01b6064820152608401610d7b565b6001600160a01b03821660009081526010602052604081206003015460ff16908160048111156153395761533961587c565b14158015615359575060018160048111156153565761535661587c565b14155b61536557615365615b53565b6001600160a01b03831660009081526010602052604081206003015461010090046001600160801b031690839061539d826001612899565b905080836001600160801b031611156153b8576153b8615b53565b6000601782815481106153cd576153cd615b3d565b600091825260209091200154601780546001600160a01b03909216925082916001600160801b03871690811061540557615405615b3d565b600091825260208083209190910180546001600160a01b0319166001600160a01b03948516179055918316808252601083526040918290206003018054610100600160881b0319166101006001600160801b038a16908102919091179091558251918252928101929092527f02b04ae5f7be9ca7c103293a2aa15f3c339d15d6eda53b721fef7b0e609c831a910160405180910390a160178054806154ac576154ac615c63565b600082815260209020810160001990810180546001600160a01b031916905501905550505050505050565b6000610cd460c883615b12565b60008080808415615528576154f98786614f85565b935061550987610c2588876128ac565b92506155158785612899565b91506155218684612899565b9050615535565b5060009250829150859050845b93509350935093565b615546615650565b83815260208101839052600061557a670de0b6b3a7640000610c2585615574896714d1120d7b1600006128ac565b906128ac565b9050615585816154d7565b604083018190527f00000000000000000000000000000000000000000000000000000000000000006060840152608083018690526155c4908290612899565b60a08301526155d38482612899565b61010083015250600060c0820181905260e08201529392505050565b6000806155fc84846128ac565b9050611182670de0b6b3a7640000610c25615618600283615b12565b8490613c3f565b6040518060a00160405280600081526020016000815260200160001515815260200160008152602001600081525090565b6040518061012001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040518060e0016040528060008152602001600081526020016000815260200160006001600160a01b0316815260200160001515815260200160008152602001600081525090565b6001600160a01b0381168114610c5a57600080fd5b8035615704816156e4565b919050565b60006020828403121561571b57600080fd5b81356128a5816156e4565b6001600160a01b0391909116815260200190565b6000806040838503121561574d57600080fd5b8235615758816156e4565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b6000602080838503121561578f57600080fd5b823567ffffffffffffffff808211156157a757600080fd5b818501915085601f8301126157bb57600080fd5b8135818111156157cd576157cd615766565b8060051b604051601f19603f830116810181811085821117156157f2576157f2615766565b60405291825284820192508381018501918883111561581057600080fd5b938501935b8285101561583557615826856156f9565b84529385019392850192615815565b98975050505050505050565b6000806040838503121561585457600080fd5b50508035926020909101359150565b60006020828403121561587557600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b858152602081018590526040810184905260a08101600584106158b7576158b761587c565b60608201939093526001600160801b03919091166080909101529392505050565b60008060008060008060008060008060006101608c8e0312156158fa57600080fd5b8b35615905816156e4565b9a5060208c0135615915816156e4565b995060408c0135615925816156e4565b985060608c0135615935816156e4565b975060808c0135615945816156e4565b965060a08c0135615955816156e4565b955060c08c0135615965816156e4565b945060e08c0135615975816156e4565b93506101008c0135615986816156e4565b92506159956101208d016156f9565b91506159a46101408d016156f9565b90509295989b509295989b9093969950565b600060208083528351808285015260005b818110156159e3578581018301518582016040015282016159c7565b506000604082860101526040601f19601f8301168501019250505092915050565b600080600080600080600060e0888a031215615a1f57600080fd5b873596506020880135615a31816156e4565b95506040880135615a41816156e4565b94506060880135615a51816156e4565b9699959850939660808101359560a0820135955060c0909101359350915050565b600060208284031215615a8457600080fd5b5051919050565b60208082526022908201527f54726f76654d616e616765723a206e6f7468696e6720746f206c697175696461604082015261746560f01b606082015260800190565b6001600160a01b03929092168252602082015260400190565b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082615b2157615b21615ae6565b500490565b8082028115828204841417610cd457610cd4615afc565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052600160045260246000fd5b81810381811115610cd457610cd4615afc565b600060208284031215615b8e57600080fd5b81516128a5816156e4565b600081615ba857615ba8615afc565b506000190190565b60048110615bc057615bc061587c565b9052565b848152602081018490526040810183905260808101611e6b6060830184615bb0565b600060018201615bf857615bf8615afc565b5060010190565b80820180821115610cd457610cd4615afc565b600060208284031215615c2457600080fd5b815180151581146128a557600080fd5b83815260208101839052606081016111826040830184615bb0565b600082615c5e57615c5e615ae6565b500690565b634e487b7160e01b600052603160045260246000fdfeea67486ed7ebe3eea8ab3390efd4a3c8aae48be5bea27df104a8af786c408434c3770d654ed33aeea6bf11ac8ef05d02a6a04ed4686dd2f624d853bbec43cc8ba264697066735822122006f9b4bb6a28f23d4b666f63ead1ca781e05c3d9f1b2412ddb0c252096863a8e64736f6c63430008130033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "checkUnreliableRecoveryMode()": {
        "notice": "HEDGEHOG UPDATES: New view method to help with getting the data on frontends"
      },
      "getCurrentICR(address,uint256)": {
        "notice": "Hedgehog changes: Get Price directly from the price feed instead of param passing"
      },
      "getUnreliableTCR()": {
        "notice": "HEDGEHOG UPDATES: New view method to help with getting the data on frontends"
      },
      "getUnreliableTroveICR(address)": {
        "notice": "HEDGEHOG UPDATES: New view method to help with getting the data on frontends"
      }
    },
    "notice": "Fork of Liquity's TroveManager. Most of the Logic remains unchanged. Changes to the contract: - Raised pragma version - Removed an import of ActivePool Interface - Logic updates with redemption & borrowing fees calculation and their distribution Even though SafeMath is no longer required, the decision was made to keep it to avoid human factor errors",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 19774,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "activePool",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IActivePool)20569"
      },
      {
        "astId": 19777,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "defaultPool",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IDefaultPool)20973"
      },
      {
        "astId": 19781,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IPriceFeed)21107"
      },
      {
        "astId": 396,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "_owner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 14655,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "borrowerOperationsAddress",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 14658,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "stabilityPool",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IStabilityPool)21412"
      },
      {
        "astId": 14660,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "gasPoolAddress",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 14663,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "collSurplusPool",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(ICollSurplusPool)20911"
      },
      {
        "astId": 14666,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "baseFeeLMAToken",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(IBaseFeeLMAToken)20633"
      },
      {
        "astId": 14669,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "hogToken",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(IHOGToken)21031"
      },
      {
        "astId": 14672,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "feesRouter",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(IFeesRouter)20990"
      },
      {
        "astId": 14675,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "sortedTroves",
        "offset": 0,
        "slot": "11",
        "type": "t_contract(ISortedTroves)21239"
      },
      {
        "astId": 14703,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "redemptionBaseRate",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 14705,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "borrowBaseRate",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 14707,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "lastRedemptionTime",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 14709,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "lastBorrowTime",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 14732,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "Troves",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_struct(Trove)14727_storage)"
      },
      {
        "astId": 14734,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "totalStakes",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 14736,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "totalStakesSnapshot",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 14738,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "totalCollateralSnapshot",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 14740,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "L_WStETH",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 14742,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "L_BaseFeeLMADebt",
        "offset": 0,
        "slot": "21",
        "type": "t_uint256"
      },
      {
        "astId": 14747,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "rewardSnapshots",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_address,t_struct(RewardSnapshot)14752_storage)"
      },
      {
        "astId": 14755,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "TroveOwners",
        "offset": 0,
        "slot": "23",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 14757,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "lastWStETHError_Redistribution",
        "offset": 0,
        "slot": "24",
        "type": "t_uint256"
      },
      {
        "astId": 14759,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "lastBaseFeeLMADebtError_Redistribution",
        "offset": 0,
        "slot": "25",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(IActivePool)20569": {
        "encoding": "inplace",
        "label": "contract IActivePool",
        "numberOfBytes": "20"
      },
      "t_contract(IBaseFeeLMAToken)20633": {
        "encoding": "inplace",
        "label": "contract IBaseFeeLMAToken",
        "numberOfBytes": "20"
      },
      "t_contract(ICollSurplusPool)20911": {
        "encoding": "inplace",
        "label": "contract ICollSurplusPool",
        "numberOfBytes": "20"
      },
      "t_contract(IDefaultPool)20973": {
        "encoding": "inplace",
        "label": "contract IDefaultPool",
        "numberOfBytes": "20"
      },
      "t_contract(IFeesRouter)20990": {
        "encoding": "inplace",
        "label": "contract IFeesRouter",
        "numberOfBytes": "20"
      },
      "t_contract(IHOGToken)21031": {
        "encoding": "inplace",
        "label": "contract IHOGToken",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceFeed)21107": {
        "encoding": "inplace",
        "label": "contract IPriceFeed",
        "numberOfBytes": "20"
      },
      "t_contract(ISortedTroves)21239": {
        "encoding": "inplace",
        "label": "contract ISortedTroves",
        "numberOfBytes": "20"
      },
      "t_contract(IStabilityPool)21412": {
        "encoding": "inplace",
        "label": "contract IStabilityPool",
        "numberOfBytes": "20"
      },
      "t_enum(Status)14715": {
        "encoding": "inplace",
        "label": "enum TroveManager.Status",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(RewardSnapshot)14752_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct TroveManager.RewardSnapshot)",
        "numberOfBytes": "32",
        "value": "t_struct(RewardSnapshot)14752_storage"
      },
      "t_mapping(t_address,t_struct(Trove)14727_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct TroveManager.Trove)",
        "numberOfBytes": "32",
        "value": "t_struct(Trove)14727_storage"
      },
      "t_struct(RewardSnapshot)14752_storage": {
        "encoding": "inplace",
        "label": "struct TroveManager.RewardSnapshot",
        "members": [
          {
            "astId": 14749,
            "contract": "contracts/TroveManager.sol:TroveManager",
            "label": "WStETH",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 14751,
            "contract": "contracts/TroveManager.sol:TroveManager",
            "label": "BaseFeeLMADebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Trove)14727_storage": {
        "encoding": "inplace",
        "label": "struct TroveManager.Trove",
        "members": [
          {
            "astId": 14717,
            "contract": "contracts/TroveManager.sol:TroveManager",
            "label": "debt",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 14719,
            "contract": "contracts/TroveManager.sol:TroveManager",
            "label": "coll",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 14721,
            "contract": "contracts/TroveManager.sol:TroveManager",
            "label": "stake",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 14724,
            "contract": "contracts/TroveManager.sol:TroveManager",
            "label": "status",
            "offset": 0,
            "slot": "3",
            "type": "t_enum(Status)14715"
          },
          {
            "astId": 14726,
            "contract": "contracts/TroveManager.sol:TroveManager",
            "label": "arrayIndex",
            "offset": 1,
            "slot": "3",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}