{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "contracts/dependencies/BaseMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\ncontract BaseMath {\n    uint public constant DECIMAL_PRECISION = 1e18;\n}\n"
    },
    "contracts/dependencies/CheckContract.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.19;\n\ncontract CheckContract {\n    /**\n     * Check that the account is an already deployed non-destroyed contract.\n     * See: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol#L12\n     */\n    function checkContract(address _account) internal view {\n        require(_account != address(0), \"Account cannot be zero address\");\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            size := extcodesize(_account)\n        }\n        require(size > 0, \"Account code size cannot be zero\");\n    }\n}\n"
    },
    "contracts/dependencies/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.19;\n\n// Buidler's helper contract for console logging\nlibrary console {\n    address constant CONSOLE_ADDRESS =\n        address(0x000000000000000000636F6e736F6c652e6c6f67);\n\n    function log() internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log()\")\n        );\n        ignored;\n    }\n\n    function logInt(int p0) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(int)\", p0)\n        );\n        ignored;\n    }\n\n    function logUint(uint p0) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(uint)\", p0)\n        );\n        ignored;\n    }\n\n    function logString(string memory p0) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(string)\", p0)\n        );\n        ignored;\n    }\n\n    function logBool(bool p0) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(bool)\", p0)\n        );\n        ignored;\n    }\n\n    function logAddress(address p0) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(address)\", p0)\n        );\n        ignored;\n    }\n\n    function logBytes(bytes memory p0) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(bytes)\", p0)\n        );\n        ignored;\n    }\n\n    function logByte(bytes1 p0) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(byte)\", p0)\n        );\n        ignored;\n    }\n\n    function logBytes1(bytes1 p0) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(bytes1)\", p0)\n        );\n        ignored;\n    }\n\n    function logBytes2(bytes2 p0) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(bytes2)\", p0)\n        );\n        ignored;\n    }\n\n    function logBytes3(bytes3 p0) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(bytes3)\", p0)\n        );\n        ignored;\n    }\n\n    function logBytes4(bytes4 p0) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(bytes4)\", p0)\n        );\n        ignored;\n    }\n\n    function logBytes5(bytes5 p0) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(bytes5)\", p0)\n        );\n        ignored;\n    }\n\n    function logBytes6(bytes6 p0) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(bytes6)\", p0)\n        );\n        ignored;\n    }\n\n    function logBytes7(bytes7 p0) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(bytes7)\", p0)\n        );\n        ignored;\n    }\n\n    function logBytes8(bytes8 p0) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(bytes8)\", p0)\n        );\n        ignored;\n    }\n\n    function logBytes9(bytes9 p0) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(bytes9)\", p0)\n        );\n        ignored;\n    }\n\n    function logBytes10(bytes10 p0) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(bytes10)\", p0)\n        );\n        ignored;\n    }\n\n    function logBytes11(bytes11 p0) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(bytes11)\", p0)\n        );\n        ignored;\n    }\n\n    function logBytes12(bytes12 p0) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(bytes12)\", p0)\n        );\n        ignored;\n    }\n\n    function logBytes13(bytes13 p0) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(bytes13)\", p0)\n        );\n        ignored;\n    }\n\n    function logBytes14(bytes14 p0) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(bytes14)\", p0)\n        );\n        ignored;\n    }\n\n    function logBytes15(bytes15 p0) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(bytes15)\", p0)\n        );\n        ignored;\n    }\n\n    function logBytes16(bytes16 p0) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(bytes16)\", p0)\n        );\n        ignored;\n    }\n\n    function logBytes17(bytes17 p0) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(bytes17)\", p0)\n        );\n        ignored;\n    }\n\n    function logBytes18(bytes18 p0) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(bytes18)\", p0)\n        );\n        ignored;\n    }\n\n    function logBytes19(bytes19 p0) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(bytes19)\", p0)\n        );\n        ignored;\n    }\n\n    function logBytes20(bytes20 p0) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(bytes20)\", p0)\n        );\n        ignored;\n    }\n\n    function logBytes21(bytes21 p0) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(bytes21)\", p0)\n        );\n        ignored;\n    }\n\n    function logBytes22(bytes22 p0) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(bytes22)\", p0)\n        );\n        ignored;\n    }\n\n    function logBytes23(bytes23 p0) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(bytes23)\", p0)\n        );\n        ignored;\n    }\n\n    function logBytes24(bytes24 p0) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(bytes24)\", p0)\n        );\n        ignored;\n    }\n\n    function logBytes25(bytes25 p0) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(bytes25)\", p0)\n        );\n        ignored;\n    }\n\n    function logBytes26(bytes26 p0) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(bytes26)\", p0)\n        );\n        ignored;\n    }\n\n    function logBytes27(bytes27 p0) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(bytes27)\", p0)\n        );\n        ignored;\n    }\n\n    function logBytes28(bytes28 p0) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(bytes28)\", p0)\n        );\n        ignored;\n    }\n\n    function logBytes29(bytes29 p0) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(bytes29)\", p0)\n        );\n        ignored;\n    }\n\n    function logBytes30(bytes30 p0) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(bytes30)\", p0)\n        );\n        ignored;\n    }\n\n    function logBytes31(bytes31 p0) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(bytes31)\", p0)\n        );\n        ignored;\n    }\n\n    function logBytes32(bytes32 p0) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(bytes32)\", p0)\n        );\n        ignored;\n    }\n\n    function log(uint p0) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(uint)\", p0)\n        );\n        ignored;\n    }\n\n    function log(string memory p0) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(string)\", p0)\n        );\n        ignored;\n    }\n\n    function log(bool p0) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(bool)\", p0)\n        );\n        ignored;\n    }\n\n    function log(address p0) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(address)\", p0)\n        );\n        ignored;\n    }\n\n    function log(uint p0, uint p1) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(uint,uint)\", p0, p1)\n        );\n        ignored;\n    }\n\n    function log(uint p0, string memory p1) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(uint,string)\", p0, p1)\n        );\n        ignored;\n    }\n\n    function log(uint p0, bool p1) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(uint,bool)\", p0, p1)\n        );\n        ignored;\n    }\n\n    function log(uint p0, address p1) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(uint,address)\", p0, p1)\n        );\n        ignored;\n    }\n\n    function log(string memory p0, uint p1) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(string,uint)\", p0, p1)\n        );\n        ignored;\n    }\n\n    function log(string memory p0, string memory p1) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(string,string)\", p0, p1)\n        );\n        ignored;\n    }\n\n    function log(string memory p0, bool p1) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(string,bool)\", p0, p1)\n        );\n        ignored;\n    }\n\n    function log(string memory p0, address p1) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(string,address)\", p0, p1)\n        );\n        ignored;\n    }\n\n    function log(bool p0, uint p1) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(bool,uint)\", p0, p1)\n        );\n        ignored;\n    }\n\n    function log(bool p0, string memory p1) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(bool,string)\", p0, p1)\n        );\n        ignored;\n    }\n\n    function log(bool p0, bool p1) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(bool,bool)\", p0, p1)\n        );\n        ignored;\n    }\n\n    function log(bool p0, address p1) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(bool,address)\", p0, p1)\n        );\n        ignored;\n    }\n\n    function log(address p0, uint p1) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(address,uint)\", p0, p1)\n        );\n        ignored;\n    }\n\n    function log(address p0, string memory p1) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(address,string)\", p0, p1)\n        );\n        ignored;\n    }\n\n    function log(address p0, bool p1) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(address,bool)\", p0, p1)\n        );\n        ignored;\n    }\n\n    function log(address p0, address p1) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(address,address)\", p0, p1)\n        );\n        ignored;\n    }\n\n    function log(uint p0, uint p1, uint p2) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(uint,uint,uint)\", p0, p1, p2)\n        );\n        ignored;\n    }\n\n    function log(uint p0, uint p1, string memory p2) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(uint,uint,string)\", p0, p1, p2)\n        );\n        ignored;\n    }\n\n    function log(uint p0, uint p1, bool p2) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(uint,uint,bool)\", p0, p1, p2)\n        );\n        ignored;\n    }\n\n    function log(uint p0, uint p1, address p2) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(uint,uint,address)\", p0, p1, p2)\n        );\n        ignored;\n    }\n\n    function log(uint p0, string memory p1, uint p2) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(uint,string,uint)\", p0, p1, p2)\n        );\n        ignored;\n    }\n\n    function log(uint p0, string memory p1, string memory p2) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(uint,string,string)\", p0, p1, p2)\n        );\n        ignored;\n    }\n\n    function log(uint p0, string memory p1, bool p2) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(uint,string,bool)\", p0, p1, p2)\n        );\n        ignored;\n    }\n\n    function log(uint p0, string memory p1, address p2) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(uint,string,address)\", p0, p1, p2)\n        );\n        ignored;\n    }\n\n    function log(uint p0, bool p1, uint p2) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(uint,bool,uint)\", p0, p1, p2)\n        );\n        ignored;\n    }\n\n    function log(uint p0, bool p1, string memory p2) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(uint,bool,string)\", p0, p1, p2)\n        );\n        ignored;\n    }\n\n    function log(uint p0, bool p1, bool p2) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(uint,bool,bool)\", p0, p1, p2)\n        );\n        ignored;\n    }\n\n    function log(uint p0, bool p1, address p2) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(uint,bool,address)\", p0, p1, p2)\n        );\n        ignored;\n    }\n\n    function log(uint p0, address p1, uint p2) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(uint,address,uint)\", p0, p1, p2)\n        );\n        ignored;\n    }\n\n    function log(uint p0, address p1, string memory p2) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(uint,address,string)\", p0, p1, p2)\n        );\n        ignored;\n    }\n\n    function log(uint p0, address p1, bool p2) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(uint,address,bool)\", p0, p1, p2)\n        );\n        ignored;\n    }\n\n    function log(uint p0, address p1, address p2) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(uint,address,address)\", p0, p1, p2)\n        );\n        ignored;\n    }\n\n    function log(string memory p0, uint p1, uint p2) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(string,uint,uint)\", p0, p1, p2)\n        );\n        ignored;\n    }\n\n    function log(string memory p0, uint p1, string memory p2) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(string,uint,string)\", p0, p1, p2)\n        );\n        ignored;\n    }\n\n    function log(string memory p0, uint p1, bool p2) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(string,uint,bool)\", p0, p1, p2)\n        );\n        ignored;\n    }\n\n    function log(string memory p0, uint p1, address p2) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(string,uint,address)\", p0, p1, p2)\n        );\n        ignored;\n    }\n\n    function log(string memory p0, string memory p1, uint p2) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(string,string,uint)\", p0, p1, p2)\n        );\n        ignored;\n    }\n\n    function log(\n        string memory p0,\n        string memory p1,\n        string memory p2\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2)\n        );\n        ignored;\n    }\n\n    function log(string memory p0, string memory p1, bool p2) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2)\n        );\n        ignored;\n    }\n\n    function log(string memory p0, string memory p1, address p2) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2)\n        );\n        ignored;\n    }\n\n    function log(string memory p0, bool p1, uint p2) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(string,bool,uint)\", p0, p1, p2)\n        );\n        ignored;\n    }\n\n    function log(string memory p0, bool p1, string memory p2) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2)\n        );\n        ignored;\n    }\n\n    function log(string memory p0, bool p1, bool p2) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2)\n        );\n        ignored;\n    }\n\n    function log(string memory p0, bool p1, address p2) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2)\n        );\n        ignored;\n    }\n\n    function log(string memory p0, address p1, uint p2) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(string,address,uint)\", p0, p1, p2)\n        );\n        ignored;\n    }\n\n    function log(string memory p0, address p1, string memory p2) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2)\n        );\n        ignored;\n    }\n\n    function log(string memory p0, address p1, bool p2) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2)\n        );\n        ignored;\n    }\n\n    function log(string memory p0, address p1, address p2) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2)\n        );\n        ignored;\n    }\n\n    function log(bool p0, uint p1, uint p2) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(bool,uint,uint)\", p0, p1, p2)\n        );\n        ignored;\n    }\n\n    function log(bool p0, uint p1, string memory p2) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(bool,uint,string)\", p0, p1, p2)\n        );\n        ignored;\n    }\n\n    function log(bool p0, uint p1, bool p2) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(bool,uint,bool)\", p0, p1, p2)\n        );\n        ignored;\n    }\n\n    function log(bool p0, uint p1, address p2) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(bool,uint,address)\", p0, p1, p2)\n        );\n        ignored;\n    }\n\n    function log(bool p0, string memory p1, uint p2) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(bool,string,uint)\", p0, p1, p2)\n        );\n        ignored;\n    }\n\n    function log(bool p0, string memory p1, string memory p2) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2)\n        );\n        ignored;\n    }\n\n    function log(bool p0, string memory p1, bool p2) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2)\n        );\n        ignored;\n    }\n\n    function log(bool p0, string memory p1, address p2) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2)\n        );\n        ignored;\n    }\n\n    function log(bool p0, bool p1, uint p2) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(bool,bool,uint)\", p0, p1, p2)\n        );\n        ignored;\n    }\n\n    function log(bool p0, bool p1, string memory p2) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2)\n        );\n        ignored;\n    }\n\n    function log(bool p0, bool p1, bool p2) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2)\n        );\n        ignored;\n    }\n\n    function log(bool p0, bool p1, address p2) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2)\n        );\n        ignored;\n    }\n\n    function log(bool p0, address p1, uint p2) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(bool,address,uint)\", p0, p1, p2)\n        );\n        ignored;\n    }\n\n    function log(bool p0, address p1, string memory p2) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2)\n        );\n        ignored;\n    }\n\n    function log(bool p0, address p1, bool p2) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2)\n        );\n        ignored;\n    }\n\n    function log(bool p0, address p1, address p2) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2)\n        );\n        ignored;\n    }\n\n    function log(address p0, uint p1, uint p2) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(address,uint,uint)\", p0, p1, p2)\n        );\n        ignored;\n    }\n\n    function log(address p0, uint p1, string memory p2) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(address,uint,string)\", p0, p1, p2)\n        );\n        ignored;\n    }\n\n    function log(address p0, uint p1, bool p2) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(address,uint,bool)\", p0, p1, p2)\n        );\n        ignored;\n    }\n\n    function log(address p0, uint p1, address p2) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(address,uint,address)\", p0, p1, p2)\n        );\n        ignored;\n    }\n\n    function log(address p0, string memory p1, uint p2) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(address,string,uint)\", p0, p1, p2)\n        );\n        ignored;\n    }\n\n    function log(address p0, string memory p1, string memory p2) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2)\n        );\n        ignored;\n    }\n\n    function log(address p0, string memory p1, bool p2) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2)\n        );\n        ignored;\n    }\n\n    function log(address p0, string memory p1, address p2) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2)\n        );\n        ignored;\n    }\n\n    function log(address p0, bool p1, uint p2) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(address,bool,uint)\", p0, p1, p2)\n        );\n        ignored;\n    }\n\n    function log(address p0, bool p1, string memory p2) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2)\n        );\n        ignored;\n    }\n\n    function log(address p0, bool p1, bool p2) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2)\n        );\n        ignored;\n    }\n\n    function log(address p0, bool p1, address p2) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2)\n        );\n        ignored;\n    }\n\n    function log(address p0, address p1, uint p2) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(address,address,uint)\", p0, p1, p2)\n        );\n        ignored;\n    }\n\n    function log(address p0, address p1, string memory p2) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2)\n        );\n        ignored;\n    }\n\n    function log(address p0, address p1, bool p2) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2)\n        );\n        ignored;\n    }\n\n    function log(address p0, address p1, address p2) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2)\n        );\n        ignored;\n    }\n\n    function log(uint p0, uint p1, uint p2, uint p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(uint,uint,uint,uint)\", p0, p1, p2, p3)\n        );\n        ignored;\n    }\n\n    function log(uint p0, uint p1, uint p2, string memory p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(uint,uint,uint,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(uint p0, uint p1, uint p2, bool p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(uint,uint,uint,bool)\", p0, p1, p2, p3)\n        );\n        ignored;\n    }\n\n    function log(uint p0, uint p1, uint p2, address p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(uint,uint,uint,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(uint p0, uint p1, string memory p2, uint p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(uint,uint,string,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        uint p0,\n        uint p1,\n        string memory p2,\n        string memory p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(uint,uint,string,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(uint p0, uint p1, string memory p2, bool p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(uint,uint,string,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(uint p0, uint p1, string memory p2, address p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(uint,uint,string,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(uint p0, uint p1, bool p2, uint p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(uint,uint,bool,uint)\", p0, p1, p2, p3)\n        );\n        ignored;\n    }\n\n    function log(uint p0, uint p1, bool p2, string memory p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(uint,uint,bool,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(uint p0, uint p1, bool p2, bool p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(uint,uint,bool,bool)\", p0, p1, p2, p3)\n        );\n        ignored;\n    }\n\n    function log(uint p0, uint p1, bool p2, address p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(uint,uint,bool,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(uint p0, uint p1, address p2, uint p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(uint,uint,address,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(uint p0, uint p1, address p2, string memory p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(uint,uint,address,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(uint p0, uint p1, address p2, bool p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(uint,uint,address,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(uint p0, uint p1, address p2, address p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(uint,uint,address,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(uint p0, string memory p1, uint p2, uint p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(uint,string,uint,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        uint p0,\n        string memory p1,\n        uint p2,\n        string memory p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(uint,string,uint,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(uint p0, string memory p1, uint p2, bool p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(uint,string,uint,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(uint p0, string memory p1, uint p2, address p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(uint,string,uint,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        uint p0,\n        string memory p1,\n        string memory p2,\n        uint p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(uint,string,string,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        uint p0,\n        string memory p1,\n        string memory p2,\n        string memory p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(uint,string,string,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        uint p0,\n        string memory p1,\n        string memory p2,\n        bool p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(uint,string,string,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        uint p0,\n        string memory p1,\n        string memory p2,\n        address p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(uint,string,string,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(uint p0, string memory p1, bool p2, uint p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(uint,string,bool,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        uint p0,\n        string memory p1,\n        bool p2,\n        string memory p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(uint,string,bool,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(uint p0, string memory p1, bool p2, bool p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(uint,string,bool,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(uint p0, string memory p1, bool p2, address p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(uint,string,bool,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(uint p0, string memory p1, address p2, uint p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(uint,string,address,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        uint p0,\n        string memory p1,\n        address p2,\n        string memory p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(uint,string,address,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(uint p0, string memory p1, address p2, bool p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(uint,string,address,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        uint p0,\n        string memory p1,\n        address p2,\n        address p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(uint,string,address,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(uint p0, bool p1, uint p2, uint p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(uint,bool,uint,uint)\", p0, p1, p2, p3)\n        );\n        ignored;\n    }\n\n    function log(uint p0, bool p1, uint p2, string memory p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(uint,bool,uint,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(uint p0, bool p1, uint p2, bool p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(uint,bool,uint,bool)\", p0, p1, p2, p3)\n        );\n        ignored;\n    }\n\n    function log(uint p0, bool p1, uint p2, address p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(uint,bool,uint,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(uint p0, bool p1, string memory p2, uint p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(uint,bool,string,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        uint p0,\n        bool p1,\n        string memory p2,\n        string memory p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(uint,bool,string,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(uint p0, bool p1, string memory p2, bool p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(uint,bool,string,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(uint p0, bool p1, string memory p2, address p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(uint,bool,string,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(uint p0, bool p1, bool p2, uint p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(uint,bool,bool,uint)\", p0, p1, p2, p3)\n        );\n        ignored;\n    }\n\n    function log(uint p0, bool p1, bool p2, string memory p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(uint,bool,bool,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(uint p0, bool p1, bool p2, bool p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(uint,bool,bool,bool)\", p0, p1, p2, p3)\n        );\n        ignored;\n    }\n\n    function log(uint p0, bool p1, bool p2, address p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(uint,bool,bool,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(uint p0, bool p1, address p2, uint p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(uint,bool,address,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(uint p0, bool p1, address p2, string memory p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(uint,bool,address,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(uint p0, bool p1, address p2, bool p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(uint,bool,address,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(uint p0, bool p1, address p2, address p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(uint,bool,address,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(uint p0, address p1, uint p2, uint p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(uint,address,uint,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(uint p0, address p1, uint p2, string memory p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(uint,address,uint,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(uint p0, address p1, uint p2, bool p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(uint,address,uint,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(uint p0, address p1, uint p2, address p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(uint,address,uint,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(uint p0, address p1, string memory p2, uint p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(uint,address,string,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        uint p0,\n        address p1,\n        string memory p2,\n        string memory p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(uint,address,string,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(uint p0, address p1, string memory p2, bool p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(uint,address,string,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        uint p0,\n        address p1,\n        string memory p2,\n        address p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(uint,address,string,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(uint p0, address p1, bool p2, uint p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(uint,address,bool,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(uint p0, address p1, bool p2, string memory p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(uint,address,bool,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(uint p0, address p1, bool p2, bool p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(uint,address,bool,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(uint p0, address p1, bool p2, address p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(uint,address,bool,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(uint p0, address p1, address p2, uint p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(uint,address,address,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        uint p0,\n        address p1,\n        address p2,\n        string memory p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(uint,address,address,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(uint p0, address p1, address p2, bool p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(uint,address,address,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(uint p0, address p1, address p2, address p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(uint,address,address,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(string memory p0, uint p1, uint p2, uint p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(string,uint,uint,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        string memory p0,\n        uint p1,\n        uint p2,\n        string memory p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(string,uint,uint,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(string memory p0, uint p1, uint p2, bool p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(string,uint,uint,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(string memory p0, uint p1, uint p2, address p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(string,uint,uint,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        string memory p0,\n        uint p1,\n        string memory p2,\n        uint p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(string,uint,string,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        string memory p0,\n        uint p1,\n        string memory p2,\n        string memory p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(string,uint,string,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        string memory p0,\n        uint p1,\n        string memory p2,\n        bool p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(string,uint,string,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        string memory p0,\n        uint p1,\n        string memory p2,\n        address p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(string,uint,string,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(string memory p0, uint p1, bool p2, uint p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(string,uint,bool,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        string memory p0,\n        uint p1,\n        bool p2,\n        string memory p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(string,uint,bool,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(string memory p0, uint p1, bool p2, bool p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(string,uint,bool,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(string memory p0, uint p1, bool p2, address p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(string,uint,bool,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(string memory p0, uint p1, address p2, uint p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(string,uint,address,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        string memory p0,\n        uint p1,\n        address p2,\n        string memory p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(string,uint,address,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(string memory p0, uint p1, address p2, bool p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(string,uint,address,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        string memory p0,\n        uint p1,\n        address p2,\n        address p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(string,uint,address,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        string memory p0,\n        string memory p1,\n        uint p2,\n        uint p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(string,string,uint,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        string memory p0,\n        string memory p1,\n        uint p2,\n        string memory p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(string,string,uint,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        string memory p0,\n        string memory p1,\n        uint p2,\n        bool p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(string,string,uint,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        string memory p0,\n        string memory p1,\n        uint p2,\n        address p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(string,string,uint,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        string memory p0,\n        string memory p1,\n        string memory p2,\n        uint p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(string,string,string,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        string memory p0,\n        string memory p1,\n        string memory p2,\n        string memory p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(string,string,string,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        string memory p0,\n        string memory p1,\n        string memory p2,\n        bool p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(string,string,string,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        string memory p0,\n        string memory p1,\n        string memory p2,\n        address p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(string,string,string,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        string memory p0,\n        string memory p1,\n        bool p2,\n        uint p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(string,string,bool,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        string memory p0,\n        string memory p1,\n        bool p2,\n        string memory p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(string,string,bool,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        string memory p0,\n        string memory p1,\n        bool p2,\n        bool p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(string,string,bool,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        string memory p0,\n        string memory p1,\n        bool p2,\n        address p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(string,string,bool,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        string memory p0,\n        string memory p1,\n        address p2,\n        uint p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(string,string,address,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        string memory p0,\n        string memory p1,\n        address p2,\n        string memory p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(string,string,address,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        string memory p0,\n        string memory p1,\n        address p2,\n        bool p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(string,string,address,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        string memory p0,\n        string memory p1,\n        address p2,\n        address p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(string,string,address,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(string memory p0, bool p1, uint p2, uint p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(string,bool,uint,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        string memory p0,\n        bool p1,\n        uint p2,\n        string memory p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(string,bool,uint,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(string memory p0, bool p1, uint p2, bool p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(string,bool,uint,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(string memory p0, bool p1, uint p2, address p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(string,bool,uint,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        string memory p0,\n        bool p1,\n        string memory p2,\n        uint p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(string,bool,string,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        string memory p0,\n        bool p1,\n        string memory p2,\n        string memory p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(string,bool,string,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        string memory p0,\n        bool p1,\n        string memory p2,\n        bool p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(string,bool,string,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        string memory p0,\n        bool p1,\n        string memory p2,\n        address p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(string,bool,string,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(string memory p0, bool p1, bool p2, uint p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(string,bool,bool,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        string memory p0,\n        bool p1,\n        bool p2,\n        string memory p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(string,bool,bool,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(string memory p0, bool p1, bool p2, bool p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(string,bool,bool,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(string memory p0, bool p1, bool p2, address p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(string,bool,bool,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(string memory p0, bool p1, address p2, uint p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(string,bool,address,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        string memory p0,\n        bool p1,\n        address p2,\n        string memory p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(string,bool,address,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(string memory p0, bool p1, address p2, bool p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(string,bool,address,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        string memory p0,\n        bool p1,\n        address p2,\n        address p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(string,bool,address,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(string memory p0, address p1, uint p2, uint p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(string,address,uint,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        string memory p0,\n        address p1,\n        uint p2,\n        string memory p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(string,address,uint,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(string memory p0, address p1, uint p2, bool p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(string,address,uint,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        string memory p0,\n        address p1,\n        uint p2,\n        address p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(string,address,uint,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        string memory p0,\n        address p1,\n        string memory p2,\n        uint p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(string,address,string,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        string memory p0,\n        address p1,\n        string memory p2,\n        string memory p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(string,address,string,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        string memory p0,\n        address p1,\n        string memory p2,\n        bool p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(string,address,string,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        string memory p0,\n        address p1,\n        string memory p2,\n        address p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(string,address,string,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(string memory p0, address p1, bool p2, uint p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(string,address,bool,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        string memory p0,\n        address p1,\n        bool p2,\n        string memory p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(string,address,bool,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(string memory p0, address p1, bool p2, bool p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(string,address,bool,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        string memory p0,\n        address p1,\n        bool p2,\n        address p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(string,address,bool,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        string memory p0,\n        address p1,\n        address p2,\n        uint p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(string,address,address,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        string memory p0,\n        address p1,\n        address p2,\n        string memory p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(string,address,address,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        string memory p0,\n        address p1,\n        address p2,\n        bool p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(string,address,address,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        string memory p0,\n        address p1,\n        address p2,\n        address p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(string,address,address,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(bool p0, uint p1, uint p2, uint p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(bool,uint,uint,uint)\", p0, p1, p2, p3)\n        );\n        ignored;\n    }\n\n    function log(bool p0, uint p1, uint p2, string memory p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(bool,uint,uint,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(bool p0, uint p1, uint p2, bool p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(bool,uint,uint,bool)\", p0, p1, p2, p3)\n        );\n        ignored;\n    }\n\n    function log(bool p0, uint p1, uint p2, address p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(bool,uint,uint,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(bool p0, uint p1, string memory p2, uint p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(bool,uint,string,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        bool p0,\n        uint p1,\n        string memory p2,\n        string memory p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(bool,uint,string,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(bool p0, uint p1, string memory p2, bool p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(bool,uint,string,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(bool p0, uint p1, string memory p2, address p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(bool,uint,string,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(bool p0, uint p1, bool p2, uint p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(bool,uint,bool,uint)\", p0, p1, p2, p3)\n        );\n        ignored;\n    }\n\n    function log(bool p0, uint p1, bool p2, string memory p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(bool,uint,bool,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(bool p0, uint p1, bool p2, bool p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(bool,uint,bool,bool)\", p0, p1, p2, p3)\n        );\n        ignored;\n    }\n\n    function log(bool p0, uint p1, bool p2, address p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(bool,uint,bool,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(bool p0, uint p1, address p2, uint p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(bool,uint,address,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(bool p0, uint p1, address p2, string memory p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(bool,uint,address,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(bool p0, uint p1, address p2, bool p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(bool,uint,address,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(bool p0, uint p1, address p2, address p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(bool,uint,address,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(bool p0, string memory p1, uint p2, uint p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(bool,string,uint,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        bool p0,\n        string memory p1,\n        uint p2,\n        string memory p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(bool,string,uint,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(bool p0, string memory p1, uint p2, bool p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(bool,string,uint,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(bool p0, string memory p1, uint p2, address p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(bool,string,uint,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        bool p0,\n        string memory p1,\n        string memory p2,\n        uint p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(bool,string,string,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        bool p0,\n        string memory p1,\n        string memory p2,\n        string memory p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(bool,string,string,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        bool p0,\n        string memory p1,\n        string memory p2,\n        bool p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(bool,string,string,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        bool p0,\n        string memory p1,\n        string memory p2,\n        address p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(bool,string,string,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(bool p0, string memory p1, bool p2, uint p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(bool,string,bool,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        bool p0,\n        string memory p1,\n        bool p2,\n        string memory p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(bool,string,bool,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(bool p0, string memory p1, bool p2, bool p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(bool,string,bool,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(bool p0, string memory p1, bool p2, address p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(bool,string,bool,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(bool p0, string memory p1, address p2, uint p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(bool,string,address,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        bool p0,\n        string memory p1,\n        address p2,\n        string memory p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(bool,string,address,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(bool p0, string memory p1, address p2, bool p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(bool,string,address,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        bool p0,\n        string memory p1,\n        address p2,\n        address p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(bool,string,address,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(bool p0, bool p1, uint p2, uint p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(bool,bool,uint,uint)\", p0, p1, p2, p3)\n        );\n        ignored;\n    }\n\n    function log(bool p0, bool p1, uint p2, string memory p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(bool,bool,uint,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(bool p0, bool p1, uint p2, bool p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(bool,bool,uint,bool)\", p0, p1, p2, p3)\n        );\n        ignored;\n    }\n\n    function log(bool p0, bool p1, uint p2, address p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(bool,bool,uint,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(bool p0, bool p1, string memory p2, uint p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(bool,bool,string,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        bool p0,\n        bool p1,\n        string memory p2,\n        string memory p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(bool,bool,string,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(bool p0, bool p1, string memory p2, bool p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(bool,bool,string,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(bool p0, bool p1, string memory p2, address p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(bool,bool,string,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(bool p0, bool p1, bool p2, uint p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(bool,bool,bool,uint)\", p0, p1, p2, p3)\n        );\n        ignored;\n    }\n\n    function log(bool p0, bool p1, bool p2, string memory p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(bool,bool,bool,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(bool p0, bool p1, bool p2, bool p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3)\n        );\n        ignored;\n    }\n\n    function log(bool p0, bool p1, bool p2, address p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(bool,bool,bool,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(bool p0, bool p1, address p2, uint p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(bool,bool,address,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(bool p0, bool p1, address p2, string memory p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(bool,bool,address,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(bool p0, bool p1, address p2, bool p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(bool,bool,address,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(bool p0, bool p1, address p2, address p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(bool,bool,address,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(bool p0, address p1, uint p2, uint p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(bool,address,uint,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(bool p0, address p1, uint p2, string memory p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(bool,address,uint,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(bool p0, address p1, uint p2, bool p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(bool,address,uint,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(bool p0, address p1, uint p2, address p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(bool,address,uint,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(bool p0, address p1, string memory p2, uint p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(bool,address,string,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        bool p0,\n        address p1,\n        string memory p2,\n        string memory p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(bool,address,string,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(bool p0, address p1, string memory p2, bool p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(bool,address,string,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        bool p0,\n        address p1,\n        string memory p2,\n        address p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(bool,address,string,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(bool p0, address p1, bool p2, uint p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(bool,address,bool,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(bool p0, address p1, bool p2, string memory p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(bool,address,bool,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(bool p0, address p1, bool p2, bool p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(bool,address,bool,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(bool p0, address p1, bool p2, address p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(bool,address,bool,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(bool p0, address p1, address p2, uint p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(bool,address,address,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        bool p0,\n        address p1,\n        address p2,\n        string memory p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(bool,address,address,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(bool p0, address p1, address p2, bool p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(bool,address,address,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(bool p0, address p1, address p2, address p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(bool,address,address,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(address p0, uint p1, uint p2, uint p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(address,uint,uint,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(address p0, uint p1, uint p2, string memory p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(address,uint,uint,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(address p0, uint p1, uint p2, bool p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(address,uint,uint,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(address p0, uint p1, uint p2, address p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(address,uint,uint,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(address p0, uint p1, string memory p2, uint p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(address,uint,string,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        address p0,\n        uint p1,\n        string memory p2,\n        string memory p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(address,uint,string,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(address p0, uint p1, string memory p2, bool p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(address,uint,string,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        address p0,\n        uint p1,\n        string memory p2,\n        address p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(address,uint,string,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(address p0, uint p1, bool p2, uint p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(address,uint,bool,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(address p0, uint p1, bool p2, string memory p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(address,uint,bool,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(address p0, uint p1, bool p2, bool p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(address,uint,bool,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(address p0, uint p1, bool p2, address p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(address,uint,bool,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(address p0, uint p1, address p2, uint p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(address,uint,address,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        address p0,\n        uint p1,\n        address p2,\n        string memory p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(address,uint,address,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(address p0, uint p1, address p2, bool p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(address,uint,address,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(address p0, uint p1, address p2, address p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(address,uint,address,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(address p0, string memory p1, uint p2, uint p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(address,string,uint,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        address p0,\n        string memory p1,\n        uint p2,\n        string memory p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(address,string,uint,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(address p0, string memory p1, uint p2, bool p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(address,string,uint,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        address p0,\n        string memory p1,\n        uint p2,\n        address p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(address,string,uint,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        address p0,\n        string memory p1,\n        string memory p2,\n        uint p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(address,string,string,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        address p0,\n        string memory p1,\n        string memory p2,\n        string memory p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(address,string,string,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        address p0,\n        string memory p1,\n        string memory p2,\n        bool p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(address,string,string,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        address p0,\n        string memory p1,\n        string memory p2,\n        address p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(address,string,string,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(address p0, string memory p1, bool p2, uint p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(address,string,bool,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        address p0,\n        string memory p1,\n        bool p2,\n        string memory p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(address,string,bool,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(address p0, string memory p1, bool p2, bool p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(address,string,bool,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        address p0,\n        string memory p1,\n        bool p2,\n        address p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(address,string,bool,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        address p0,\n        string memory p1,\n        address p2,\n        uint p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(address,string,address,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        address p0,\n        string memory p1,\n        address p2,\n        string memory p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(address,string,address,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        address p0,\n        string memory p1,\n        address p2,\n        bool p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(address,string,address,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        address p0,\n        string memory p1,\n        address p2,\n        address p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(address,string,address,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(address p0, bool p1, uint p2, uint p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(address,bool,uint,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(address p0, bool p1, uint p2, string memory p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(address,bool,uint,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(address p0, bool p1, uint p2, bool p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(address,bool,uint,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(address p0, bool p1, uint p2, address p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(address,bool,uint,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(address p0, bool p1, string memory p2, uint p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(address,bool,string,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        address p0,\n        bool p1,\n        string memory p2,\n        string memory p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(address,bool,string,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(address p0, bool p1, string memory p2, bool p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(address,bool,string,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        address p0,\n        bool p1,\n        string memory p2,\n        address p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(address,bool,string,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(address p0, bool p1, bool p2, uint p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(address,bool,bool,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(address p0, bool p1, bool p2, string memory p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(address,bool,bool,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(address p0, bool p1, bool p2, bool p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(address,bool,bool,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(address p0, bool p1, bool p2, address p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(address,bool,bool,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(address p0, bool p1, address p2, uint p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(address,bool,address,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        address p0,\n        bool p1,\n        address p2,\n        string memory p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(address,bool,address,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(address p0, bool p1, address p2, bool p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(address,bool,address,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(address p0, bool p1, address p2, address p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(address,bool,address,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(address p0, address p1, uint p2, uint p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(address,address,uint,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        address p0,\n        address p1,\n        uint p2,\n        string memory p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(address,address,uint,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(address p0, address p1, uint p2, bool p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(address,address,uint,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(address p0, address p1, uint p2, address p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(address,address,uint,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        address p0,\n        address p1,\n        string memory p2,\n        uint p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(address,address,string,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        address p0,\n        address p1,\n        string memory p2,\n        string memory p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(address,address,string,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        address p0,\n        address p1,\n        string memory p2,\n        bool p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(address,address,string,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        address p0,\n        address p1,\n        string memory p2,\n        address p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(address,address,string,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(address p0, address p1, bool p2, uint p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(address,address,bool,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        address p0,\n        address p1,\n        bool p2,\n        string memory p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(address,address,bool,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(address p0, address p1, bool p2, bool p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(address,address,bool,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(address p0, address p1, bool p2, address p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(address,address,bool,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(address p0, address p1, address p2, uint p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(address,address,address,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(\n        address p0,\n        address p1,\n        address p2,\n        string memory p3\n    ) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(address,address,address,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(address p0, address p1, address p2, bool p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(address,address,address,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n\n    function log(address p0, address p1, address p2, address p3) internal view {\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\n            abi.encodeWithSignature(\n                \"log(address,address,address,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n        ignored;\n    }\n}\n"
    },
    "contracts/dependencies/IERC2612.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.19;\n\n/**\n * @dev Interface of the ERC2612 standard as defined in the EIP.\n *\n * Adds the {permit} method, which can be used to change one's\n * {IERC20-allowance} without having to send a transaction, by signing a\n * message. This allows users to spend tokens without having to hold StETH.\n *\n * See https://eips.stETHeum.org/EIPS/eip-2612.\n *\n * Code adapted from https://github.com/OpenZeppelin/openzeppelin-contracts/pull/2237/\n */\ninterface IERC2612 {\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over `owner`'s tokens,\n     * given `owner`'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.stETHeum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 amount,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current ERC2612 nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases `owner`'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     *\n     * `owner` can limit the time a Permit is valid for by setting `deadline` to\n     * a value in the near future. The deadline argument can be set to uint(-1) to\n     * create Permits that effectively never expire.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    function version() external view returns (string memory);\n\n    function permitTypeHash() external view returns (bytes32);\n\n    function domainSeparator() external view returns (bytes32);\n}\n"
    },
    "contracts/dependencies/LiquityMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.19;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"./console.sol\";\n\n/**\n * @notice A fork of Liquity Math library with an upgraded pragma\n *\n * Even though SafeMath is no longer required, the decision was made to keep it to avoid human factor errors\n */\n\nlibrary LiquityMath {\n    using SafeMath for uint;\n\n    uint internal constant DECIMAL_PRECISION = 1e18;\n\n    /* Precision for Nominal ICR (independent of price). Rationale for the value:\n     *\n     * - Making it “too high” could lead to overflows.\n     * - Making it “too low” could lead to an ICR equal to zero, due to truncation from Solidity floor division.\n     *\n     * This value of 1e20 is chosen for safety: the NICR will only overflow for numerator > ~1e39 StETH,\n     * and will only truncate to 0 if the denominator is at least 1e20 times greater than the numerator.\n     *\n     */\n    uint internal constant NICR_PRECISION = 1e20;\n\n    function _min(uint _a, uint _b) internal pure returns (uint) {\n        return (_a < _b) ? _a : _b;\n    }\n\n    function _max(uint _a, uint _b) internal pure returns (uint) {\n        return (_a >= _b) ? _a : _b;\n    }\n\n    /*\n     * Multiply two decimal numbers and use normal rounding rules:\n     * -round product up if 19'th mantissa digit >= 5\n     * -round product down if 19'th mantissa digit < 5\n     *\n     * Used only inside the exponentiation, _decPow().\n     */\n    function decMul(uint x, uint y) internal pure returns (uint decProd) {\n        uint prod_xy = x.mul(y);\n\n        decProd = prod_xy.add(DECIMAL_PRECISION / 2).div(DECIMAL_PRECISION);\n    }\n\n    /*\n     * _decPow: Exponentiation function for 18-digit decimal base, and integer exponent n.\n     *\n     * Uses the efficient \"exponentiation by squaring\" algorithm. O(log(n)) complexity.\n     *\n     * Called by two functions that represent time in units of minutes:\n     * 1) TroveManager._calcDecayedBaseRate\n     * 2) CommunityIssuance._getCumulativeIssuanceFraction\n     *\n     * The exponent is capped to avoid reverting due to overflow. The cap 525600000 equals\n     * \"minutes in 1000 years\": 60 * 24 * 365 * 1000\n     *\n     * If a period of > 1000 years is ever used as an exponent in either of the above functions, the result will be\n     * negligibly different from just passing the cap, since:\n     *\n     * In function 1), the decayed base rate will be 0 for 1000 years or > 1000 years\n     * In function 2), the difference in tokens issued at 1000 years and any time > 1000 years, will be negligible\n     */\n    function _decPow(uint _base, uint _minutes) internal pure returns (uint) {\n        if (_minutes > 525600000) {\n            _minutes = 525600000;\n        } // cap to avoid overflow\n\n        if (_minutes == 0) {\n            return DECIMAL_PRECISION;\n        }\n\n        uint y = DECIMAL_PRECISION;\n        uint x = _base;\n        uint n = _minutes;\n\n        // Exponentiation-by-squaring\n        while (n > 1) {\n            if (n % 2 == 0) {\n                x = decMul(x, x);\n                n = n.div(2);\n            } else {\n                // if (n % 2 != 0)\n                y = decMul(x, y);\n                x = decMul(x, x);\n                n = (n.sub(1)).div(2);\n            }\n        }\n\n        return decMul(x, y);\n    }\n\n    function _getAbsoluteDifference(\n        uint _a,\n        uint _b\n    ) internal pure returns (uint) {\n        return (_a >= _b) ? _a.sub(_b) : _b.sub(_a);\n    }\n\n    function _computeNominalCR(\n        uint _coll,\n        uint _debt\n    ) internal pure returns (uint) {\n        if (_debt > 0) {\n            return _coll.mul(NICR_PRECISION).div(_debt);\n        }\n        // Return the maximal value for uint256 if the Trove has a debt of 0. Represents \"infinite\" CR.\n        else {\n            // if (_debt == 0)\n            return 2 ** 256 - 1;\n        }\n    }\n\n    function _computeCR(\n        uint _coll,\n        uint _debt,\n        uint _price\n    ) internal pure returns (uint) {\n        if (_debt > 0) {\n            uint newCollRatio = _coll.mul(_price).div(_debt);\n\n            return newCollRatio;\n        }\n        // Return the maximal value for uint256 if the Trove has a debt of 0. Represents \"infinite\" CR.\n        else {\n            // if (_debt == 0)\n            return 2 ** 256 - 1;\n        }\n    }\n}\n"
    },
    "contracts/HOG/CommunityIssuance.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.19;\n\nimport \"../interfaces/IHOGToken.sol\";\nimport \"../interfaces/ICommunityIssuance.sol\";\nimport \"../dependencies/BaseMath.sol\";\nimport \"../dependencies/LiquityMath.sol\";\nimport \"../dependencies/CheckContract.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract CommunityIssuance is Ownable, CheckContract, BaseMath {\n    using SafeMath for uint;\n\n    // --- Data ---\n\n    string public constant NAME = \"CommunityIssuance\";\n\n    uint public constant SECONDS_IN_ONE_MINUTE = 60;\n\n    /* The issuance factor F determines the curvature of the issuance curve.\n     *\n     * Minutes in one year: 60*24*365 = 525600\n     *\n     * For 50% of remaining tokens issued each year, with minutes as time units, we have:\n     *\n     * F ** 525600 = 0.5\n     *\n     * Re-arranging:\n     *\n     * 525600 * ln(F) = ln(0.5)\n     * F = 0.5 ** (1/525600)\n     * F = 0.999998681227695000\n     */\n    uint public constant ISSUANCE_FACTOR = 999998681227695000;\n\n    /*\n     * The community HOG supply cap is the starting balance of the Community Issuance contract.\n     * It should be minted to this contract by HOGToken, when the token is deployed.\n     *\n     * Set to 32M (slightly less than 1/3) of total HOG supply.\n     */\n    uint public constant HOGSupplyCap = 32e24; // 32 million\n\n    IHOGToken public hogToken;\n\n    address public stabilityPoolAddress;\n\n    uint public totalHOGIssued;\n    uint public immutable deploymentTime;\n\n    // --- Events ---\n\n    event HOGTokenAddressSet(address _hogTokenAddress);\n    event StabilityPoolAddressSet(address _stabilityPoolAddress);\n    event TotalHOGIssuedUpdated(uint _totalHOGIssued);\n\n    // --- Functions ---\n\n    constructor() {\n        deploymentTime = block.timestamp;\n    }\n\n    function setAddresses(\n        address _hogTokenAddress,\n        address _stabilityPoolAddress\n    ) external onlyOwner {\n        checkContract(_hogTokenAddress);\n        checkContract(_stabilityPoolAddress);\n\n        hogToken = IHOGToken(_hogTokenAddress);\n        stabilityPoolAddress = _stabilityPoolAddress;\n\n        // When HOGToken deployed, it should have transferred CommunityIssuance's HOG entitlement\n        uint HOGBalance = hogToken.balanceOf(address(this));\n        require(HOGBalance >= HOGSupplyCap, \"CI: Ballance is not enough\");\n\n        emit HOGTokenAddressSet(_hogTokenAddress);\n        emit StabilityPoolAddressSet(_stabilityPoolAddress);\n\n        renounceOwnership();\n    }\n\n    function issueHOG() external returns (uint) {\n        _requireCallerIsStabilityPool();\n\n        uint latestTotalHOGIssued = HOGSupplyCap\n            .mul(_getCumulativeIssuanceFraction())\n            .div(DECIMAL_PRECISION);\n        uint issuance = latestTotalHOGIssued.sub(totalHOGIssued);\n\n        totalHOGIssued = latestTotalHOGIssued;\n        emit TotalHOGIssuedUpdated(latestTotalHOGIssued);\n\n        return issuance;\n    }\n\n    /* Gets 1-f^t    where: f < 1\n\n    f: issuance factor that determines the shape of the curve\n    t:  time passed since last HOG issuance event  */\n    function _getCumulativeIssuanceFraction() internal view returns (uint) {\n        // Get the time passed since deployment\n        uint timePassedInMinutes = block.timestamp.sub(deploymentTime).div(\n            SECONDS_IN_ONE_MINUTE\n        );\n\n        // f^t\n        uint power = LiquityMath._decPow(ISSUANCE_FACTOR, timePassedInMinutes);\n\n        //  (1 - f^t)\n        uint cumulativeIssuanceFraction = (uint(DECIMAL_PRECISION).sub(power));\n        assert(cumulativeIssuanceFraction <= DECIMAL_PRECISION); // must be in range [0,1]\n\n        return cumulativeIssuanceFraction;\n    }\n\n    function sendHOG(address _account, uint _HOGamount) external {\n        _requireCallerIsStabilityPool();\n\n        hogToken.transfer(_account, _HOGamount);\n    }\n\n    // --- 'require' functions ---\n\n    function _requireCallerIsStabilityPool() internal view {\n        require(\n            msg.sender == stabilityPoolAddress,\n            \"CommunityIssuance: caller is not SP\"\n        );\n    }\n}\n"
    },
    "contracts/interfaces/ICommunityIssuance.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.19;\n\ninterface ICommunityIssuance {\n    // --- Events ---\n\n    event HOGTokenAddressSet(address _hogTokenAddress);\n    event StabilityPoolAddressSet(address _stabilityPoolAddress);\n    event TotalHOGIssuedUpdated(uint _totalHOGIssued);\n\n    // --- Functions ---\n\n    function setAddresses(\n        address _hogTokenAddress,\n        address _stabilityPoolAddress\n    ) external;\n\n    function issueHOG() external returns (uint);\n\n    function sendHOG(address _account, uint _HOGamount) external;\n}\n"
    },
    "contracts/interfaces/IHOGToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.19;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../dependencies/IERC2612.sol\";\n\ninterface IHOGToken is IERC20, IERC2612 {\n    // --- Events ---\n\n    event CommunityIssuanceAddressSet(address _communityIssuanceAddress);\n    event HOGStakingAddressSet(address _hogStakingAddress);\n    event LockupContractFactoryAddressSet(\n        address _lockupContractFactoryAddress\n    );\n\n    // --- Functions ---\n\n    function sendToHOGStaking(address _sender, uint256 _amount) external;\n\n    function getDeploymentStartTime() external view returns (uint256);\n\n    function getLpRewardsEntitlement() external view returns (uint256);\n\n    function increaseAllowance(\n        address _spender,\n        uint256 _addedValues\n    ) external returns (bool);\n\n    function decreaseAllowance(\n        address _spender,\n        uint256 _decreasedValue\n    ) external returns (bool);\n}\n"
    },
    "contracts/TestContracts/CommunityIssuanceTester.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.19;\n\nimport \"../HOG/CommunityIssuance.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\ncontract CommunityIssuanceTester is CommunityIssuance {\n    using SafeMath for uint256;\n\n    function obtainHOG(uint _amount) external {\n        hogToken.transfer(msg.sender, _amount);\n    }\n\n    function getCumulativeIssuanceFraction() external view returns (uint) {\n        return _getCumulativeIssuanceFraction();\n    }\n\n    function unprotectedIssueHOG() external returns (uint) {\n        // No checks on caller address\n\n        uint latestTotalhogIssued = HOGSupplyCap\n            .mul(_getCumulativeIssuanceFraction())\n            .div(DECIMAL_PRECISION);\n        uint issuance = latestTotalhogIssued.sub(totalHOGIssued);\n\n        totalHOGIssued = latestTotalhogIssued;\n        return issuance;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 100
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}