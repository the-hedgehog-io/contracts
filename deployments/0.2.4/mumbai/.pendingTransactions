{
  "0xe5cbb3d3c2b05c022f88649c88f00c72dd407a8e96653f45af8165b42e695a6d": {
    "name": "TroveManager",
    "deployment": {
      "_format": "hh-sol-artifact-1",
      "contractName": "TroveManager",
      "sourceName": "contracts/TroveManager.sol",
      "abi": [
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "_activePoolAddress",
              "type": "address"
            }
          ],
          "name": "ActivePoolAddressChanged",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "_newBaseFeeLMATokenAddress",
              "type": "address"
            }
          ],
          "name": "BaseFeeLMATokenAddressChanged",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "_borrowBaseRate",
              "type": "uint256"
            }
          ],
          "name": "BorrowBaseRateUpdated",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "_newBorrowerOperationsAddress",
              "type": "address"
            }
          ],
          "name": "BorrowerOperationsAddressChanged",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "_collSurplusPoolAddress",
              "type": "address"
            }
          ],
          "name": "CollSurplusPoolAddressChanged",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "_defaultPoolAddress",
              "type": "address"
            }
          ],
          "name": "DefaultPoolAddressChanged",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "contract IFeesRouter",
              "name": "_feesRouter",
              "type": "address"
            }
          ],
          "name": "FeesRouterAddressUpdated",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "_gasPoolAddress",
              "type": "address"
            }
          ],
          "name": "GasPoolAddressChanged",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "_hogStakingAddress",
              "type": "address"
            }
          ],
          "name": "HOGStakingAddressChanged",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "_hogTokenAddress",
              "type": "address"
            }
          ],
          "name": "HOGTokenAddressChanged",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "_L_WStETH",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "_L_BaseFeeLMADebt",
              "type": "uint256"
            }
          ],
          "name": "LTermsUpdated",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "_lastBorrowTime",
              "type": "uint256"
            }
          ],
          "name": "LastBorrowTimeUpdated",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "_lastRedemptionTime",
              "type": "uint256"
            }
          ],
          "name": "LastRedemptionTimeUpdated",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "_liquidatedDebt",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "_liquidatedColl",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "_collGasCompensation",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "_BaseFeeLMAGasCompensation",
              "type": "uint256"
            }
          ],
          "name": "Liquidation",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "previousOwner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "name": "OwnershipTransferred",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "_newPriceFeedAddress",
              "type": "address"
            }
          ],
          "name": "PriceFeedAddressChanged",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "_attemptedBaseFeeLMAAmount",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "_actualBaseFeeLMAAmount",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "_WStETHSent",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "_WStETHFee",
              "type": "uint256"
            }
          ],
          "name": "Redemption",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "_redemptionBaseRate",
              "type": "uint256"
            }
          ],
          "name": "RedemptionBaseRateUpdated",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "_sortedTrovesAddress",
              "type": "address"
            }
          ],
          "name": "SortedTrovesAddressChanged",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "_stabilityPoolAddress",
              "type": "address"
            }
          ],
          "name": "StabilityPoolAddressChanged",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "_totalStakesSnapshot",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "_totalCollateralSnapshot",
              "type": "uint256"
            }
          ],
          "name": "SystemSnapshotsUpdated",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "_newTotalStakes",
              "type": "uint256"
            }
          ],
          "name": "TotalStakesUpdated",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "_borrower",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "_newIndex",
              "type": "uint256"
            }
          ],
          "name": "TroveIndexUpdated",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "_borrower",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "_debt",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "_coll",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "enum TroveManager.TroveManagerOperation",
              "name": "_operation",
              "type": "uint8"
            }
          ],
          "name": "TroveLiquidated",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "_L_WStETH",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "_L_BaseFeeLMADebt",
              "type": "uint256"
            }
          ],
          "name": "TroveSnapshotsUpdated",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "_borrower",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "_debt",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "_coll",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "_stake",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "enum TroveManager.TroveManagerOperation",
              "name": "_operation",
              "type": "uint8"
            }
          ],
          "name": "TroveUpdated",
          "type": "event"
        },
        {
          "inputs": [],
          "name": "BETA",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "BOOTSTRAP_PERIOD",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "BORROWING_FEE_FLOOR",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "BaseFeeLMA_GAS_COMPENSATION",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "CCR",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "DECIMAL_PRECISION",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "L_BaseFeeLMADebt",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "L_WStETH",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "MAX_BORROWING_FEE",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "MCR",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "MINUTE_DECAY_BORROWING_FACTOR",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "MINUTE_DECAY_REDEMPTION_FACTOR",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "MIN_NET_DEBT",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "NAME",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "PERCENT_DIVISOR",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "REDEMPTION_FEE_FLOOR",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "SECONDS_IN_ONE_MINUTE",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "name": "TroveOwners",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "name": "Troves",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "debt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "coll",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stake",
              "type": "uint256"
            },
            {
              "internalType": "enum TroveManager.Status",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint128",
              "name": "arrayIndex",
              "type": "uint128"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "_100pct",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "activePool",
          "outputs": [
            {
              "internalType": "contract IActivePool",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_borrower",
              "type": "address"
            }
          ],
          "name": "addTroveOwnerToArray",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_borrower",
              "type": "address"
            }
          ],
          "name": "applyPendingRewards",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "baseFeeLMAToken",
          "outputs": [
            {
              "internalType": "contract IBaseFeeLMAToken",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address[]",
              "name": "_troveArray",
              "type": "address[]"
            }
          ],
          "name": "batchLiquidateTroves",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "borrowBaseRate",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "borrowerOperationsAddress",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_price",
              "type": "uint256"
            }
          ],
          "name": "checkRecoveryMode",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "checkUnreliableRecoveryMode",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_borrower",
              "type": "address"
            }
          ],
          "name": "closeTrove",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "decayBaseRateFromBorrowing",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_borrower",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_collDecrease",
              "type": "uint256"
            }
          ],
          "name": "decreaseTroveColl",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_borrower",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_debtDecrease",
              "type": "uint256"
            }
          ],
          "name": "decreaseTroveDebt",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "defaultPool",
          "outputs": [
            {
              "internalType": "contract IDefaultPool",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "feesRouter",
          "outputs": [
            {
              "internalType": "contract IFeesRouter",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_BaseFeeLMADebt",
              "type": "uint256"
            }
          ],
          "name": "getBorrowingFee",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_BaseFeeLMADebt",
              "type": "uint256"
            }
          ],
          "name": "getBorrowingFeeWithDecay",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_issuedBaseFeeLMA",
              "type": "uint256"
            }
          ],
          "name": "getBorrowingRate",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_issuedBaseFeeLMA",
              "type": "uint256"
            }
          ],
          "name": "getBorrowingRateWithDecay",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_borrower",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_price",
              "type": "uint256"
            }
          ],
          "name": "getCurrentICR",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_borrower",
              "type": "address"
            }
          ],
          "name": "getEntireDebtAndColl",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "debt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "coll",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pendingBaseFeeLMADebtReward",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pendingWStETHReward",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "getEntireSystemColl",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "entireSystemColl",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "getEntireSystemDebt",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "entireSystemDebt",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_borrower",
              "type": "address"
            }
          ],
          "name": "getNominalICR",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_coll",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_debt",
              "type": "uint256"
            }
          ],
          "name": "getNormalLiquidationPrice",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_borrower",
              "type": "address"
            }
          ],
          "name": "getPendingBaseFeeLMADebtReward",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_borrower",
              "type": "address"
            }
          ],
          "name": "getPendingWStETHReward",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_coll",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_debt",
              "type": "uint256"
            }
          ],
          "name": "getRecoveryLiquidationPrice",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_WStETHDrawn",
              "type": "uint256"
            }
          ],
          "name": "getRedemptionFeeWithDecay",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_redemptionColl",
              "type": "uint256"
            }
          ],
          "name": "getRedemptionRate",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_redemptionColl",
              "type": "uint256"
            }
          ],
          "name": "getRedemptionRateWithDecay",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_price",
              "type": "uint256"
            }
          ],
          "name": "getTCR",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_borrower",
              "type": "address"
            }
          ],
          "name": "getTroveColl",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_borrower",
              "type": "address"
            }
          ],
          "name": "getTroveDebt",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_index",
              "type": "uint256"
            }
          ],
          "name": "getTroveFromTroveOwnersArray",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "getTroveOwnersCount",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_borrower",
              "type": "address"
            }
          ],
          "name": "getTroveStake",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_borrower",
              "type": "address"
            }
          ],
          "name": "getTroveStatus",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "getUnreliableTCR",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_borrower",
              "type": "address"
            }
          ],
          "name": "getUnreliableTroveICR",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_borrower",
              "type": "address"
            }
          ],
          "name": "hasPendingRewards",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "hogStaking",
          "outputs": [
            {
              "internalType": "contract IHOGStaking",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "hogToken",
          "outputs": [
            {
              "internalType": "contract IHOGToken",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_borrower",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_collIncrease",
              "type": "uint256"
            }
          ],
          "name": "increaseTroveColl",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_borrower",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_debtIncrease",
              "type": "uint256"
            }
          ],
          "name": "increaseTroveDebt",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "lastBaseFeeLMADebtError_Redistribution",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "lastBorrowTime",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "lastRedemptionTime",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "lastWStETHError_Redistribution",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_borrower",
              "type": "address"
            }
          ],
          "name": "liquidate",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_n",
              "type": "uint256"
            }
          ],
          "name": "liquidateTroves",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "owner",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "priceFeed",
          "outputs": [
            {
              "internalType": "contract IPriceFeed",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_BaseFeeLMAamount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "_firstRedemptionHint",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_upperPartialRedemptionHint",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_lowerPartialRedemptionHint",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_partialRedemptionHintNICR",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_maxIterations",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_maxFeePercentage",
              "type": "uint256"
            }
          ],
          "name": "redeemCollateral",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "redemptionBaseRate",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_borrower",
              "type": "address"
            }
          ],
          "name": "removeStake",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "renounceOwnership",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "name": "rewardSnapshots",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "WStETH",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "BaseFeeLMADebt",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_borrowerOperationsAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_activePoolAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_defaultPoolAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_stabilityPoolAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_gasPoolAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_collSurplusPoolAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_priceFeedAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_baseFeeLMATokenAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_sortedTrovesAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_hogTokenAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_hogStakingAddress",
              "type": "address"
            },
            {
              "internalType": "contract IFeesRouter",
              "name": "_feesRouterAddress",
              "type": "address"
            }
          ],
          "name": "setAddresses",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_borrower",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_num",
              "type": "uint256"
            }
          ],
          "name": "setTroveStatus",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "sortedTroves",
          "outputs": [
            {
              "internalType": "contract ISortedTroves",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "stabilityPool",
          "outputs": [
            {
              "internalType": "contract IStabilityPool",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "totalCollateralSnapshot",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "totalStakes",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "totalStakesSnapshot",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "name": "transferOwnership",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_newBaseRate",
              "type": "uint256"
            }
          ],
          "name": "updateBaseRateFromBorrowing",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_borrower",
              "type": "address"
            }
          ],
          "name": "updateStakeAndTotalStakes",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_borrower",
              "type": "address"
            }
          ],
          "name": "updateTroveRewardSnapshots",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        }
      ],
      "bytecode": "0x60806040523480156200001157600080fd5b506200001d3362000023565b62000075565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b615c5a80620000856000396000f3fe608060405234801561001057600080fd5b50600436106104e35760003560e01c8063807d138d1161028e578063bb6f030c11610167578063d3d6f843116100d9578063e2ac77b011610092578063e2ac77b014610b01578063e324634914610b14578063f2fde38b14610b1d578063f92d34331461060a578063fb0cbd4b14610b30578063fe2ba84814610b3f57600080fd5b8063d3d6f84314610a84578063d5b3563514610a97578063d66a255314610aaa578063d696629714610ad3578063d9a7244414610ae6578063e1f787e914610af957600080fd5b8063c35bc5501161012b578063c35bc55014610a2f578063c3eb5c6714610a39578063c42dab9914610a42578063c91a7e2f14610a55578063cbd138ae14610a5e578063d293c71014610a7157600080fd5b8063bb6f030c146109f8578063bcd3752614610a01578063bf9befb114610a14578063bf9ebee214610a1d578063c26c880014610a2657600080fd5b8063a201415211610200578063aead9dcc116101c4578063aead9dcc14610966578063b0d8e18114610979578063b36cd07f1461098c578063b7f8cf9b1461099f578063b82f263d146109b2578063b91af97c146109c557600080fd5b8063a2014152146108ff578063a20baee6146105fb578063a22b7d6814610908578063a3f4df7e1461091b578063ae9187541461095357600080fd5b8063900e664b11610252578063900e664b146108a1578063948ba6d2146108aa57806396d711ff146108bd578063981c4f48146108c65780639976cf45146108d95780639f7adb5e146108ec57600080fd5b8063807d138d1461085957806382fe3eb914610862578063887105d3146108755780638da5cb5b1461087d5780638f9137891461088e57600080fd5b80634e443d9e116103c0578063715018a611610332578063741bef1a116102f6578063741bef1a14610809578063756b253e1461081c578063794e5724146106e3578063795d26c31461082f5780637e024ad6146108375780637f7dde4a1461084657600080fd5b8063715018a6146107d357806371f256e2146107db57806372423c17146107e357806372fe25aa146105fb578063734f622d146107f657600080fd5b80635dba4c4a116103845780635dba4c4a1461071857806361ec893d14610720578063631203b01461072857806364cee2601461073b578063653d46e7146107675780636ef643381461077a57600080fd5b80634e443d9e146106ad578063570dc45e146106d05780635733d58f146106e357806358b8a5d6146106f25780635d6b480f1461070557600080fd5b806321e37801116104595780633cc742251161041d5780633cc742251461063857806347142aa31461064b578063477d66cf1461065e578063480cd578146106715780634870dd9a1461069d57806349eefeee146106a557600080fd5b806321e37801146105e857806324092669146105fb57806328d28b5b1461060a5780632d81dd56146106125780632f8655681461062557600080fd5b806315d549f1116104ab57806315d549f1146105625780631673c79a1461057557806318f2817a146105b15780631b199a64146105c45780631bf43555146105cd5780631e8b1c2b146105d557600080fd5b8063048c661d146104e8578063071a7541146105115780630b076557146105275780630c08ff5f1461053c57806312610e921461054f575b600080fd5b6005546104fb906001600160a01b031681565b6040516105089190615645565b60405180910390f35b610519600281565b604051908152602001610508565b61053a61053536600461567e565b610b52565b005b61051961054a36600461567e565b610b7a565b61051961055d36600461569b565b610c36565b61051961057036600461567e565b610c88565b61059c61058336600461567e565b6017602052600090815260409020805460019091015482565b60408051928352602083019190915201610508565b6105196105bf36600461567e565b610caa565b610519601a5481565b610519600181565b61053a6105e33660046156dd565b610cbd565b6105196105f636600461567e565b6110c6565b610519670de0b6b3a764000081565b6105196110f6565b6105196106203660046157a2565b611118565b61053a61063336600461567e565b611138565b6001546104fb906001600160a01b031681565b6105196106593660046157a2565b6111a4565b61051961066c3660046157c4565b6111bc565b61051961067f36600461567e565b6001600160a01b031660009081526011602052604090206001015490565b61051960c881565b601854610519565b6106c06106bb3660046157c4565b6111d0565b6040519015158152602001610508565b6009546104fb906001600160a01b031681565b6105196714d1120d7b16000081565b6105196107003660046157c4565b6111db565b61053a61071336600461569b565b6111e9565b61053a611241565b610519603c81565b61059c6107363660046157c4565b6112ad565b61051961074936600461567e565b6001600160a01b031660009081526011602052604090206002015490565b61053a6107753660046157c4565b6112d0565b6107c261078836600461567e565b60116020526000908152604090208054600182015460028301546003909301549192909160ff81169061010090046001600160801b031685565b6040516105089594939291906157f3565b61053a611641565b6106c0611655565b6105196107f136600461569b565b6116db565b61053a610804366004615839565b611732565b6002546104fb906001600160a01b031681565b6104fb61082a3660046157c4565b611afb565b610519611b25565b610519670ddd4b8c6c7d70d881565b6000546104fb906001600160a01b031681565b61051960135481565b61053a61087036600461567e565b611c21565b610519611c32565b6003546001600160a01b03166104fb565b6008546104fb906001600160a01b031681565b61051960165481565b6105196108b83660046157c4565b611cf7565b61051960145481565b6105196108d436600461567e565b611d0a565b6105196108e736600461569b565b611d32565b61053a6108fa3660046157c4565b611d5f565b61051961c35081565b6105196109163660046157c4565b611e64565b6109466040518060400160405280600c81526020016b2a3937bb32a6b0b730b3b2b960a11b81525081565b6040516105089190615921565b600c546104fb906001600160a01b031681565b600a546104fb906001600160a01b031681565b61051961098736600461567e565b611e77565b61051961099a3660046157c4565b611e9e565b6004546104fb906001600160a01b031681565b6105196109c03660046157c4565b611eac565b6109d86109d336600461567e565b611eb7565b604080519485526020850193909352918301526060820152608001610508565b610519600d5481565b61053a610a0f36600461596f565b611f0f565b61051960125481565b61051960155481565b61051960105481565b6105196212750081565b610519600e5481565b600b546104fb906001600160a01b031681565b61051960195481565b61053a610a6c36600461567e565b612630565b610519610a7f36600461569b565b612643565b610519610a9236600461569b565b612662565b610519610aa53660046157c4565b612692565b610519610ab836600461567e565b6001600160a01b031660009081526011602052604090205490565b610519610ae136600461567e565b6126a6565b6104fb610af43660046157c4565b61273f565b61051961276f565b6106c0610b0f36600461567e565b6127f0565b610519600f5481565b61053a610b2b36600461567e565b612853565b610519670dc14847bcc53b2081565b61053a610b4d36600461567e565b6128c9565b610b5a6128da565b600054600154610b77916001600160a01b0390811691168361295a565b50565b6001600160a01b0381166000908152601760205260408120600101546016548290610ba59083612a60565b9050801580610be4575060016001600160a01b03851660009081526011602052604090206003015460ff166004811115610be157610be16157dd565b14155b15610bf3575060009392505050565b6001600160a01b03841660009081526011602052604081206002015490610c2c670de0b6b3a7640000610c268486612a73565b90612a7f565b9695505050505050565b6000610c406128da565b6001600160a01b038316600090815260116020526040812054610c639084612a60565b6001600160a01b03851660009081526011602052604090208190559150505b92915050565b6000610c926128da565b610c9b82612a8b565b6001600160801b031692915050565b6000610cb46128da565b610c8282612b25565b8051600003610d325760405162461bcd60e51b815260206004820152603660248201527f54726f76654d616e616765723a2043616c6c646174612061646472657373206160448201527572726179206d757374206e6f7420626520656d70747960501b60648201526084015b60405180910390fd5b6000546001546005546001600160a01b03928316929182169116610d54615580565b610d5c6155b1565b600260009054906101000a90046001600160a01b03166001600160a01b0316630fdb11cf6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610db1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd591906159dd565b826000018181525050826001600160a01b031663488df0fc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4091906159dd565b60208301528151610e5090612bc9565b1580156040840152610e7857610e718585846000015185602001518a612be6565b9050610e90565b610e8d8585846000015185602001518a612e0d565b90505b6000816020015111610eb45760405162461bcd60e51b8152600401610d29906159f6565b608081015160a082015160405163335525ad60e01b81526001600160a01b0386169263335525ad92610ef192600401918252602082015260400190565b600060405180830381600087803b158015610f0b57600080fd5b505af1158015610f1f573d6000803e3d6000fd5b50505050610f3785858360c001518460e00151612edd565b610100810151156110155760075461010082015160405162f9332d60e61b81526001600160a01b0390921691633e4ccb4091610f799160040190815260200190565b600060405180830381600087803b158015610f9357600080fd5b505af1158015610fa7573d6000803e3d6000fd5b505060075461010084015160405163a51ba3b760e01b81526001600160a01b03808b16955063a51ba3b79450610fe293169190600401615a38565b600060405180830381600087803b158015610ffc57600080fd5b505af1158015611010573d6000803e3d6000fd5b505050505b611023858260400151613168565b602081015160608301526101008101516040820151825161104f92916110499190612a60565b90612a60565b6080838101829052606080850151604085810151868401518251938452602084019690965290820152908101929092527f4152c73dd2614c4f9fc35e8c9cf16013cd588c75b49a4c1673ecffdcbcda9403910160405180910390a16110be8533836060015184604001516132ac565b505050505050565b6001600160a01b03811660009081526011602052604081206003015460ff166004811115610c8257610c826157dd565b61110a6103e8670de0b6b3a7640000615a7d565b611115906005615a91565b81565b60008061113084846014670de0b6b3a764000061338f565b949350505050565b6111418161349a565b60408051600180825281830190925260009160208083019080368337019050509050818160008151811061117757611177615aa8565b60200260200101906001600160a01b031690816001600160a01b0316815250506111a081610cbd565b5050565b600080611130848460146714d1120d7b16000061338f565b6000610c826111ca83611cf7565b83613531565b6000610c8282612bc9565b6000610c82600d5483613549565b6111f16128da565b806004811115611203576112036157dd565b6001600160a01b0383166000908152601160205260409020600301805460ff19166001836004811115611238576112386157dd565b02179055505050565b6112496128da565b6000611253613601565b9050670de0b6b3a764000081111561126d5761126d615abe565b600e8190556040518181527fca870d46d67e9a1444a6b8f97a147e06e4cf71ee2a0f172d7ecd5441ae7c12019060200160405180910390a1610b77613645565b60008060006112bb84611e9e565b90506112c78185613531565b94909350915050565b6040805160e081018252600080546001600160a01b0390811683526001548116602084015292820181905260608201819052600c548316608083015260a0820181905260c0820152600554909116611326615580565b61132e6155b1565b600260009054906101000a90046001600160a01b03166001600160a01b0316630fdb11cf6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015611383573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a791906159dd565b826000018181525050826001600160a01b031663488df0fc6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113ee573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061141291906159dd565b6020830152815161142290612bc9565b15801560408401526114495761144284836000015184602001518861369c565b9050611469565b611466846000015185602001518460000151856020015189613a1a565b90505b600081602001511161148d5760405162461bcd60e51b8152600401610d29906159f6565b608081015160a082015160405163335525ad60e01b81526001600160a01b0386169263335525ad926114ca92600401918252602082015260400190565b600060405180830381600087803b1580156114e457600080fd5b505af11580156114f8573d6000803e3d6000fd5b50505050611518846000015185602001518360c001518460e00151612edd565b6101008101511561158f57835160075461010083015160405163a51ba3b760e01b81526001600160a01b039384169363a51ba3b79361155c93911691600401615a38565b600060405180830381600087803b15801561157657600080fd5b505af115801561158a573d6000803e3d6000fd5b505050505b6115a184600001518260400151613168565b60208101516060830152610100810151604082015182516115c792916110499190612a60565b6080838101829052606080850151604085810151868401518251938452602084019690965290820152908101929092527f4152c73dd2614c4f9fc35e8c9cf16013cd588c75b49a4c1673ecffdcbcda9403910160405180910390a161163a846000015133836060015184604001516132ac565b5050505050565b611649613b4b565b6116536000613ba5565b565b60006116d6600260009054906101000a90046001600160a01b03166001600160a01b0316630490be836040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116d191906159dd565b612bc9565b905090565b60006116e56128da565b6001600160a01b03831660009081526011602052604081206001015461170b9084613bf7565b6001600160a01b038516600090815260116020526040902060010181905591505092915050565b61173a613b4b565b6117438c613c03565b61174c8b613c03565b6117558a613c03565b61175e89613c03565b61176788613c03565b61177087613c03565b61177986613c03565b61178285613c03565b61178b84613c03565b61179483613c03565b61179d82613c03565b6117a681613c03565b600480546001600160a01b03199081166001600160a01b038f8116919091179092556000805482168e84161790556001805482168d84161790556005805482168c84161790556006805482168b84161790556007805482168a8416179055600280548216898416179055600880548216888416179055600c80548216878416179055600980548216868416179055600a80548216858416179055600b80549091169183169190911790556040517f3ca631ffcd2a9b5d9ae18543fc82f58eb4ca33af9e6ab01b7a8e95331e6ed98590611880908e90615645565b60405180910390a17f78f058b189175430c48dc02699e3a0031ea4ff781536dc2fab847de4babdd8828b6040516118b79190615645565b60405180910390a17f5ee0cae2f063ed938bb55046f6a932fb6ae792bf43624806bb90abe68a50be9b8a6040516118ee9190615645565b60405180910390a17f82966d27eea39b038ee0fa30cd16532bb24f6e65d31cb58fb227aa5766cdcc7f896040516119259190615645565b60405180910390a17fcfb07d791fcafc032b35837b50eb84b74df518cf4cc287e8084f47630fa70fa08860405161195c9190615645565b60405180910390a17fe67f36a6e961157d6eff83b91f3af5a62131ceb6f04954ef74f51c1c05e7f88d876040516119939190615645565b60405180910390a17f8c537274438aa850a330284665d81a85dd38267d09e4050d416bfc94142db264866040516119ca9190615645565b60405180910390a17f7faa560f2889840c377209fbc4b6b92d05f43f1fc60bf336ab546fd60c0051ad85604051611a019190615645565b60405180910390a17f65f4cf077bc01e4742eb5ad98326f6e95b63548ea24b17f8d5e823111fe7880084604051611a389190615645565b60405180910390a17f0d32e4ef3d389440323b172cfc07c6c01bdd1d3e8334379048eec21e8d919b7783604051611a6f9190615645565b60405180910390a17ffe7e5f521efd6e9fda9261f1223b2cda79ba84d0393e8b6629d27db91048126f82604051611aa69190615645565b60405180910390a17f6877e00d9059f8716bd795b5d4c2c89a4bc3cef71ba3dd99b168ac9cc1f2a6c281604051611add9190615645565b60405180910390a1611aed611641565b505050505050505050505050565b60188181548110611b0b57600080fd5b6000918252602090912001546001600160a01b0316905081565b60008054604080516315b3137b60e21b8152905183926001600160a01b0316916356cc4dec9160048083019260209291908290030181865afa158015611b6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b9391906159dd565b90506000600160009054906101000a90046001600160a01b03166001600160a01b03166356cc4dec6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611bea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c0e91906159dd565b9050611c1a8282613bf7565b9250505090565b611c296128da565b610b7781613ca8565b600080546040805163a2f0398360e01b8152905183926001600160a01b03169163a2f039839160048083019260209291908290030181865afa158015611c7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ca091906159dd565b90506000600160009054906101000a90046001600160a01b03166001600160a01b031663a2f039836040518163ffffffff1660e01b8152600401602060405180830381865afa158015611bea573d6000803e3d6000fd5b6000610c82611d04613d0c565b83613d50565b6001600160a01b0381166000908152601760205260408120546015548290610ba59083612a60565b6000611d3c6128da565b6001600160a01b038316600090815260116020526040812054610c639084613bf7565b6004546001600160a01b03163314611dd15760405162461bcd60e51b815260206004820152602f60248201527f54726f76654d616e616765723a204f6e6c7920426f72726f776572206f70657260448201526e185d1a5bdb9cc81b585e4818d85b1b608a1b6064820152608401610d29565b611de56103e8670de0b6b3a7640000615a7d565b611df0906005615a91565b8110611e2757611e0a6103e8670de0b6b3a7640000615a7d565b611e15906005615a91565b611e1f9082615ad4565b600e55611e2d565b6000600e555b6040518181527fca870d46d67e9a1444a6b8f97a147e06e4cf71ee2a0f172d7ecd5441ae7c1201906020015b60405180910390a150565b6000610c82611e71613d0c565b83613549565b6000806000611e8584613e2f565b915091506000611e958383613ea9565b95945050505050565b6000610c82600e5483613d50565b6000610c8282613ed8565b6001600160a01b03811660009081526011602052604081208054600190910154909180611ee385610b7a565b9150611eee85611d0a565b9050611efa8483613bf7565b9350611f068382613bf7565b92509193509193565b6040805160e08082018352600080546001600160a01b0390811684526001548116602080860191909152600854821685870152600a548216606080870191909152600c548316608080880191909152600754841660a08089019190915260065490941660c080890191909152885161010081018a5286815293840186905297830185905290820184905281018390529081018290529384018190529083015290611fb883613efc565b600260009054906101000a90046001600160a01b03166001600160a01b0316630fdb11cf6040518163ffffffff1660e01b81526004016020604051808303816000875af115801561200d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061203191906159dd565b60c0820181905261204190613f97565b61204a8961400a565b6120598260400151338b614071565b612061611b25565b60e0820181905260408084015190516370a0823160e01b81526001600160a01b03909116906370a082319061209a903390600401615645565b602060405180830381865afa1580156120b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120db91906159dd565b11156120e9576120e9615abe565b888152608082015160c0820151600091612104918b90614171565b15612110575087612222565b82608001516001600160a01b0316634d6228316040518163ffffffff1660e01b8152600401602060405180830381865afa158015612152573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121769190615ae7565b90505b6001600160a01b038116158015906121a557506714d1120d7b1600006121a3828460c00151612643565b105b156122225782608001516001600160a01b031663b72703ac826040518263ffffffff1660e01b81526004016121da9190615645565b602060405180830381865afa1580156121f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061221b9190615ae7565b9050612179565b846000036122305760001994505b6001600160a01b038116158015906122485750815115155b80156122545750600085115b15612360578461226381615b04565b955050600083608001516001600160a01b031663b72703ac836040518263ffffffff1660e01b81526004016122989190615645565b602060405180830381865afa1580156122b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122d99190615ae7565b90506122ee846000015185602001518461295a565b6000612307858486600001518760c001518e8e8e6142bb565b905080604001511561231a575050612360565b8051602085015161232a91613bf7565b602080860191909152810151604085015161234491613bf7565b60408501528051845161235691612a60565b8452509050612230565b60008260400151116123c65760405162461bcd60e51b815260206004820152602960248201527f54726f76654d616e616765723a20556e61626c6520746f2072656465656d20616044820152681b9e48185b5bdd5b9d60ba1b6064820152608401610d29565b6123dd82604001518360c001518460e00151614505565b506123eb8260400151614612565b606083018190526040830151612402919086614620565b600b54604080840151606085015191516318ddad8960e21b81526001600160a01b0390931692636376b624926124449291600401918252602082015260400190565b600060405180830381600087803b15801561245e57600080fd5b505af1158015612472573d6000803e3d6000fd5b505050506060820151604083015161248991612a60565b60808301526020820151604080840151606085015191517f43a3f4082a4dbc33d78e317d2497d3a730bc7fc3574159dcea1056e62e5d9ad8936124e5938f93919293845260208401929092526040830152606082015260800190565b60405180910390a182604001516001600160a01b0316639dc29fac3384602001516040518363ffffffff1660e01b8152600401612523929190615a38565b600060405180830381600087803b15801561253d57600080fd5b505af1158015612551573d6000803e3d6000fd5b505084516020850151604051633b4009ff60e11b81526001600160a01b03909216935063768013fe925061258b9160040190815260200190565b600060405180830381600087803b1580156125a557600080fd5b505af11580156125b9573d6000803e3d6000fd5b50508451608085015160405163a51ba3b760e01b81526001600160a01b03909216935063a51ba3b792506125f291339190600401615a38565b600060405180830381600087803b15801561260c57600080fd5b505af1158015612620573d6000803e3d6000fd5b5050505050505050505050505050565b6126386128da565b610b7781600261468a565b600080600061265185613e2f565b915091506000610c2c8383876147b7565b600061266c6128da565b6001600160a01b03831660009081526011602052604081206001015461170b9084612a60565b6000610c826126a083611e64565b836147eb565b600080600260009054906101000a90046001600160a01b03166001600160a01b0316630490be836040518163ffffffff1660e01b8152600401602060405180830381865afa1580156126fc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061272091906159dd565b905060008061272e85613e2f565b915091506000610c2c8383866147b7565b60006018828154811061275457612754615aa8565b6000918252602090912001546001600160a01b031692915050565b60006116d6600260009054906101000a90046001600160a01b03166001600160a01b0316630490be836040518163ffffffff1660e01b8152600401602060405180830381865afa1580156127c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127eb91906159dd565b613ed8565b600060016001600160a01b03831660009081526011602052604090206003015460ff166004811115612824576128246157dd565b1461283157506000919050565b506015546001600160a01b039091166000908152601760205260409020541090565b61285b613b4b565b6001600160a01b0381166128c05760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610d29565b610b7781613ba5565b6128d16128da565b610b7781614874565b6004546001600160a01b031633146116535760405162461bcd60e51b815260206004820152603b60248201527f54726f76654d616e616765723a2043616c6c6572206973206e6f74207468652060448201527f426f72726f7765724f7065726174696f6e7320636f6e747261637400000000006064820152608401610d29565b612963816127f0565b15612a5b576129718161349a565b600061297c82611d0a565b9050600061298983610b7a565b6001600160a01b0384166000908152601160205260409020600101549091506129b29083613bf7565b6001600160a01b03841660009081526011602052604090206001810191909155546129dd9082613bf7565b6001600160a01b0384166000908152601160205260409020556129ff83613ca8565b612a0b858583856148be565b6001600160a01b038316600081815260116020526040808220805460018201546002909201549251600080516020615c0583398151915294612a509492939291615b2f565b60405180910390a250505b505050565b6000612a6c8284615ad4565b9392505050565b6000612a6c8284615a91565b6000612a6c8284615a7d565b601880546001808201835560008381527fb13d2d76d1f4b7be834882e410b3e3a8afaf69f83600ae24db354391d2378d2e90920180546001600160a01b0319166001600160a01b03861617905591549091612ae69190612a60565b6001600160a01b039290921660009081526011602052604090206003018054610100600160881b0319166101006001600160801b038516021790555090565b6001600160a01b0381166000908152601160205260408120600101548190612b4c9061499f565b6001600160a01b038416600090815260116020526040902060020180549082905560125491925090612b8a908390612b849084612a60565b90613bf7565b60128190556040519081527f6bac5e0eb3c44eb03a60ab11ec3a2c051771616aecadbcfff2630aabae5203829060200160405180910390a15092915050565b600080612bd583613ed8565b6714d1120d7b160000119392505050565b612bee6155b1565b612bf66155fd565b612bfe6155b1565b84825260006080830152612c10611b25565b60a0830152612c1d611c32565b60c0830152600060208301525b835182602001511015612e025783826020015181518110612c4d57612c4d615aa8565b6020908102919091018101516001600160a01b03166060840181905260009081526011909152604090206003015460019060ff166004811115612c9257612c926157dd565b03612dea57612ca5826060015187612643565b60408301526080820151612d92576714d1120d7b160000826040015110158015612cce57508151155b612dea576000612ce78360c001518460a00151896147b7565b9050612d048989856060015186604001518760000151868d6149e0565b60808101518451919350612d189190612a60565b8352608082015160a0840151612d2d91612a60565b8360a0018181525050612d6282610100015161104984604001516110498660a001518860c00151612a6090919063ffffffff16565b60c0840152612d718483614cd3565b9350612d868360c001518460a0015189614db4565b15608084015250612dea565b81608001518015612dae57506714d1120d7b1600008260400151105b15612dea57612dc7888884606001518560000151614dd5565b60808101518351919250612ddb9190612a60565b8252612de78382614cd3565b92505b60208201805190612dfa82615b51565b905250612c2a565b505095945050505050565b612e156155b1565b612e1d6155fd565b612e256155b1565b848252600060208301525b835182602001511015612e025783826020015181518110612e5357612e53615aa8565b60209081029190910101516001600160a01b031660608301819052612e789087612643565b604083018190526714d1120d7b1600001115612ec557612ea2888884606001518560000151614dd5565b60808101518351919250612eb69190612a60565b8252612ec28382614cd3565b92505b60208201805190612ed582615b51565b905250612e30565b811561316257601954600090612eff90612b8484670de0b6b3a7640000612a73565b90506000612f24601a54612b84670de0b6b3a764000087612a7390919063ffffffff16565b90506000612f3d60125484612a7f90919063ffffffff16565b90506000612f5660125484612a7f90919063ffffffff16565b9050612f77612f7060125484612a7390919063ffffffff16565b8590612a60565b601955601254612f9390612f8c908390612a73565b8490612a60565b601a55601554612fa39083613bf7565b601555601654612fb39082613bf7565b60168190556015546040517f9f8bc8ab0daf5bceef75ecfd2085d1fcc6548c657ea970d9a23a60610d0737e392612ff1928252602082015260400190565b60405180910390a1604051633b4009ff60e11b8152600481018790526001600160a01b0389169063768013fe90602401600060405180830381600087803b15801561303b57600080fd5b505af115801561304f573d6000803e3d6000fd5b505060405163262b890160e01b8152600481018990526001600160a01b038a16925063262b89019150602401600060405180830381600087803b15801561309557600080fd5b505af11580156130a9573d6000803e3d6000fd5b505060405162f9332d60e61b8152600481018890526001600160a01b038a169250633e4ccb409150602401600060405180830381600087803b1580156130ee57600080fd5b505af1158015613102573d6000803e3d6000fd5b505060405163a51ba3b760e01b81526001600160a01b038b16925063a51ba3b79150613134908a908990600401615a38565b600060405180830381600087803b15801561314e57600080fd5b505af1158015611aed573d6000803e3d6000fd5b50505050565b6012546013819055506000826001600160a01b031663a2f039836040518163ffffffff1660e01b8152600401602060405180830381865afa1580156131b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131d591906159dd565b90506000600160009054906101000a90046001600160a01b03166001600160a01b031663a2f039836040518163ffffffff1660e01b8152600401602060405180830381865afa15801561322c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061325091906159dd565b905061326081612b848486612a60565b60148190556013546040517f51bf4c63ec3cba9d03d43238abbdd979dd91bd16d9895c74ceea9118c7baaf609261329e928252602082015260400190565b60405180910390a150505050565b811561332357600854600654604051631062c15f60e11b81526001600160a01b0391821660048201528582166024820152604481018590529116906320c582be90606401600060405180830381600087803b15801561330a57600080fd5b505af115801561331e573d6000803e3d6000fd5b505050505b80156131625760405163a51ba3b760e01b81526001600160a01b0385169063a51ba3b7906133579086908590600401615a38565b600060405180830381600087803b15801561337157600080fd5b505af1158015613385573d6000803e3d6000fd5b5050505050505050565b60006001633b9aca00826133a38287615a91565b905060006133b18388615a91565b90505b6133c0836102ee615a91565b811161348b5760006133d38a8a846147b7565b90508681101561342f57825b8281111580156133f857506133f4858a615a91565b8110155b1561342d57876134098c8c846147b7565b101561341c579550611130945050505050565b6134268582615ad4565b90506133df565b505b6134416702c68af0bb14000088615ad4565b81101561345a57613453846014615a91565b9450613476565b61346b8766b1a2bc2ec50000615b6a565b811115613476578394505b509050806134848482615b6a565b90506133b4565b50600098975050505050505050565b60016001600160a01b03821660009081526011602052604090206003015460ff1660048111156134cc576134cc6157dd565b14610b775760405162461bcd60e51b815260206004820152602f60248201527f54726f76654d616e616765723a2054726f766520646f6573206e6f742065786960448201526e1cdd081bdc881a5cc818db1bdcd959608a1b6064820152608401610d29565b6000612a6c670de0b6b3a7640000610c268585612a73565b6000612a6c6135f36135d060008054906101000a90046001600160a01b03166001600160a01b031663a2f039836040518163ffffffff1660e01b8152600401602060405180830381865afa1580156135a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135c991906159dd565b8590612a7f565b612b84866135e86103e8670de0b6b3a7640000615a7d565b612b84906005615a91565b670de0b6b3a7640000614f16565b60008061360c614f2c565b90506000613622670dc14847bcc53b2083614f48565b9050611c1a670de0b6b3a7640000610c2683600e54612a7390919063ffffffff16565b600061365c60105442612a6090919063ffffffff16565b9050603c8110610b77574260108190556040519081527f4ac50c32a269c2cfea9cf04e466da1ab839008441fadf7108e4f05410c2bfd5f90602001611e59565b6136a46155b1565b6136ac6155fd565b6136b46155b1565b848252600060808301526136c6611b25565b60a08301526136d3611c32565b8260c001818152505086608001516001600160a01b0316634d6228316040518163ffffffff1660e01b8152600401602060405180830381865afa15801561371e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137429190615ae7565b82606001906001600160a01b031690816001600160a01b031681525050600087608001516001600160a01b0316631e2231436040518163ffffffff1660e01b8152600401602060405180830381865afa1580156137a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137c79190615ae7565b6000602085015290505b8483602001511080156137fa5750806001600160a01b031683606001516001600160a01b031614155b15613a0f5760808801516060840151604051632dc9c0eb60e21b81526000926001600160a01b03169163b72703ac916138369190600401615645565b602060405180830381865afa158015613853573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138779190615ae7565b9050613887846060015189612643565b6040850152608084015161397f576714d1120d7b1600008460400151101580156138b057508351155b156138bb5750613a0f565b60006138d08560c001518660a001518b6147b7565b8a5160208c01516060880151604089015189519495506138f194868f6149e0565b608081015186519195506139059190612a60565b8552608084015160a086015161391a91612a60565b8560a001818152505061394f84610100015161104986604001516110498860a001518a60c00151612a6090919063ffffffff16565b60c086015261395e8685614cd3565b95506139738560c001518660a001518b614db4565b156080860152506139e9565b8360800151801561399b57506714d1120d7b1600008460400151105b156139e3576139bc89600001518a6020015186606001518760000151614dd5565b608081015185519194506139d09190612a60565b84526139dc8584614cd3565b94506139e9565b50613a0f565b6001600160a01b0316606084015260208301805190613a0782615b51565b9052506137d1565b505050949350505050565b613a226155b1565b613a2a6155fd565b613a326155b1565b600c54858352600060208401526001600160a01b03165b8483602001511015613b3f57806001600160a01b0316634d6228316040518163ffffffff1660e01b8152600401602060405180830381865afa158015613a93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ab79190615ae7565b6001600160a01b031660608401819052613ad19088612643565b604084018190526714d1120d7b1600001115613b2257613afb898985606001518660000151614dd5565b60808101518451919350613b0f9190612a60565b8352613b1b8483614cd3565b9350613b27565b613b3f565b60208301805190613b3782615b51565b905250613a49565b50505095945050505050565b6003546001600160a01b031633146116535760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610d29565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000612a6c8284615b6a565b6001600160a01b038116613c595760405162461bcd60e51b815260206004820152601e60248201527f4163636f756e742063616e6e6f74206265207a65726f206164647265737300006044820152606401610d29565b803b806111a05760405162461bcd60e51b815260206004820181905260248201527f4163636f756e7420636f64652073697a652063616e6e6f74206265207a65726f6044820152606401610d29565b601580546001600160a01b038316600090815260176020526040908190209182556016546001909201829055915491517fc437f324d85e369394148dd9d62f98f534b382e01ed3dd2eb98138fb6d3ab49a92611e5992908252602082015260400190565b600080613d17614fec565b90506000613d2d670ddd4b8c6c7d70d883614f48565b9050611c1a670de0b6b3a7640000610c2683600d54612a7390919063ffffffff16565b600080600860009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613da6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613dca91906159dd565b905080600003613dfb57613de86103e8670de0b6b3a7640000615a7d565b613df3906005615a91565b915050610c82565b6111306135f3613e1783610c2687670de0b6b3a7640000612a73565b612b84876135e86103e8670de0b6b3a7640000615a7d565b6000806000613e3d84611d0a565b90506000613e4a85610b7a565b6001600160a01b03861660009081526011602052604081206001015491925090613e749084613bf7565b6001600160a01b03871660009081526011602052604081205491925090613e9b9084613bf7565b919791965090945050505050565b60008115613ecf57613ec882610c268568056bc75e2d63100000612a73565b9050610c82565b50600019610c82565b600080613ee3611c32565b90506000613eef611b25565b90506111308282866147b7565b613f106103e8670de0b6b3a7640000615a7d565b613f1b906005615a91565b8110158015613f325750670de0b6b3a76400008111155b610b775760405162461bcd60e51b815260206004820152603060248201527f4d6178206665652070657263656e74616765206d75737420626520626574776560448201526f656e20302e352520616e64203130302560801b6064820152608401610d29565b6714d1120d7b160000613fa982613ed8565b1015610b775760405162461bcd60e51b815260206004820152602a60248201527f54726f76654d616e616765723a2043616e6e6f742072656465656d207768656e604482015269102a21a9101e1026a1a960b11b6064820152608401610d29565b60008111610b775760405162461bcd60e51b815260206004820152602e60248201527f54726f76654d616e616765723a20416d6f756e74206d7573742062652067726560448201526d61746572207468616e207a65726f60901b6064820152608401610d29565b6040516370a0823160e01b815281906001600160a01b038516906370a082319061409f908690600401615645565b602060405180830381865afa1580156140bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140e091906159dd565b1015612a5b5760405162461bcd60e51b815260206004820152605460248201527f54726f76654d616e616765723a2052657175657374656420726564656d70746960448201527f6f6e20616d6f756e74206d757374206265203c3d2075736572277320426173656064820152734665654c4d4120746f6b656e2062616c616e636560601b608482015260a401610d29565b60006001600160a01b03831615806141f35750604051630bb7c8fd60e31b81526001600160a01b03851690635dbe47e8906141b0908690600401615645565b602060405180830381865afa1580156141cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141f19190615b7d565b155b8061420e57506714d1120d7b16000061420c8484612643565b105b1561421b57506000612a6c565b60405163765e015960e01b81526000906001600160a01b0386169063765e01599061424a908790600401615645565b602060405180830381865afa158015614267573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061428b9190615ae7565b90506001600160a01b0381161580611e9557506714d1120d7b1600006142b18285612643565b1095945050505050565b6142e1604051806060016040528060008152602001600081526020016000151581525090565b6001600160a01b038716600090815260116020526040902054614305908790614f16565b8082526143129086612a73565b60208083019190915281516001600160a01b03891660009081526011909252604082205461433f91612a60565b6020808401516001600160a01b038b16600090815260119092526040822060010154929350909161436f91612a60565b905061c35082036143d95761438389614874565b61438e89600461468a565b61439c8a8a61c35084615008565b886001600160a01b0316600080516020615c05833981519152600080600060036040516143cc9493929190615b2f565b60405180910390a26144f7565b60006143e58284613ea9565b905084811415806143f65750600183105b1561440a57505060016040830152506144fa565b60808b015160405163015f109360e51b81526001600160a01b038c81166004830152602482018490528981166044830152888116606483015290911690632be2126090608401600060405180830381600087803b15801561446a57600080fd5b505af115801561447e573d6000803e3d6000fd5b5050506001600160a01b038b166000908152601160205260409020848155600101839055506144ac8a612b25565b506001600160a01b038a1660008181526011602052604090819020600201549051600080516020615c05833981519152916144ed9187918791600390615b2f565b60405180910390a2505b50505b979650505050505050565b600080614510613d0c565b9050600061459e60008054906101000a90046001600160a01b03166001600160a01b031663a2f039836040518163ffffffff1660e01b8152600401602060405180830381865afa158015614568573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061458c91906159dd565b610c2688670de0b6b3a7640000612a73565b905060006145ac8383613bf7565b90506145c081670de0b6b3a7640000614f16565b9050600081116145d2576145d2615abe565b600d8190556040518181527fbcd47f9685f1ffa254d0ac495b2e47d57feda8840e9d1f2a54d9d499650502a89060200160405180910390a1610c2c615167565b6000610c826126a0836111db565b600061463883610c2686670de0b6b3a7640000612a73565b9050818111156131625760405162461bcd60e51b815260206004820152601d60248201527f4665652065786365656465642070726f7669646564206d6178696d756d0000006044820152606401610d29565b600081600481111561469e5761469e6157dd565b141580156146be575060018160048111156146bb576146bb6157dd565b14155b6146ca576146ca615abe565b6018546146d6816151be565b6001600160a01b0383166000908152601160205260409020600301805483919060ff1916600183600481111561470e5761470e6157dd565b02179055506001600160a01b03831660009081526011602090815260408083206001808201859055908490556017909252822082815501556147508382615298565b600c54604051631484968760e11b81526001600160a01b03909116906329092d0e90614780908690600401615645565b600060405180830381600087803b15801561479a57600080fd5b505af11580156147ae573d6000803e3d6000fd5b50505050505050565b600082156147e25760006147d983610c26868189670de0b6b3a7640000612a73565b9150612a6c9050565b50600019612a6c565b600080614804670de0b6b3a7640000610c268686612a73565b9050828110612a6c5760405162461bcd60e51b815260206004820152603660248201527f54726f76654d616e616765723a2046656520776f756c642065617420757020616044820152751b1b081c995d1d5c9b99590818dbdb1b185d195c985b60521b6064820152608401610d29565b6001600160a01b03811660009081526011602052604090206002015460125461489d9082612a60565b601255506001600160a01b0316600090815260116020526040812060020155565b604051633b4009ff60e11b8152600481018390526001600160a01b0384169063768013fe90602401600060405180830381600087803b15801561490057600080fd5b505af1158015614914573d6000803e3d6000fd5b505060405163262b890160e01b8152600481018590526001600160a01b038716925063262b89019150602401600060405180830381600087803b15801561495a57600080fd5b505af115801561496e573d6000803e3d6000fd5b50506040516331534de160e01b8152600481018490526001600160a01b03861692506331534de19150602401613357565b6000806014546000036149b3575081610c82565b6000601354116149c5576149c5615abe565b612a6c601454610c2660135486612a7390919063ffffffff16565b6149e86155b1565b614a0c60405180606001604052806000815260200160008152602001600081525090565b601854600110614a1c57506144fa565b614a2587611eb7565b60408501526020848101919091528401819052908352614a4490615468565b6040830181905261c35060608401526020830151614a6191612a60565b8152670de0b6b3a76400008611614b2c57614a868989836020015184604001516148be565b614a8f87614874565b60006080830181905260a0830152815160c0830152805160e0830152614ab687600361468a565b815160208301516040516001600160a01b038a1692600080516020615be583398151915292614ae792600290615b9f565b60405180910390a2866001600160a01b0316600080516020615c0583398151915260008060006002604051614b1f9493929190615b2f565b60405180910390a2614cc7565b670de0b6b3a764000086118015614b4a57506714d1120d7b16000086105b15614b9a57614b638989836020015184604001516148be565b614b6c87614874565b81518151614b7b919087615475565b60e086015260c085015260a08401526080830152614ab687600361468a565b6714d1120d7b1600008610158015614bb157508386105b8015614bbe575081518510155b15614cb657614bd78989836020015184604001516148be565b84600003614be757614be7615abe565b614bf087614874565b614c0382600001518360200151856154cf565b9150614c1087600361468a565b61010082015115614c8557600754610100830151604051633f10abab60e01b81526001600160a01b0390921691633f10abab91614c52918b9190600401615a38565b600060405180830381600087803b158015614c6c57600080fd5b505af1158015614c80573d6000803e3d6000fd5b505050505b815160a08301516040516001600160a01b038a1692600080516020615be583398151915292614ae792600290615b9f565b614cbe6155b1565b91506144fa9050565b50979650505050505050565b614cdb6155b1565b60408083015190840151614cee91613bf7565b604082015260608083015190840151614d0691613bf7565b606082015281516020840151614d1b91613bf7565b6020808301919091528201518351614d3291613bf7565b815260808083015190840151614d4791613bf7565b608082015260a08083015190840151614d5f91613bf7565b60a082015260c08083015190840151614d7791613bf7565b60c082015260e08083015190840151614d8f91613bf7565b60e08201526101008083015190840151614da891613bf7565b61010082015292915050565b600080614dc28585856147b7565b6714d1120d7b1600001195945050505050565b614ddd6155b1565b614e0160405180606001604052806000815260200160008152602001600081525090565b614e0a84611eb7565b60408501908152602085810192835286019290925291845290519051614e349188918891906148be565b614e3d84614874565b614e4a8260200151615468565b6040830181905261c35060608401526020830151600091614e6b9190612a60565b9050614e7c83600001518286615475565b60e087015260c086015260a08501526080840152614e9b85600361468a565b825160208401516040516001600160a01b03881692600080516020615be583398151915292614ecc92600190615b9f565b60405180910390a2846001600160a01b0316600080516020615c0583398151915260008060006001604051614f049493929190615b2f565b60405180910390a25050949350505050565b6000818310614f255781612a6c565b5090919050565b60006116d6603c610c2660105442612a6090919063ffffffff16565b6000631f540500821115614f5e57631f54050091505b81600003614f755750670de0b6b3a7640000610c82565b670de0b6b3a764000083835b6001811115614fe257614f95600282615bba565b600003614fba57614fa68283615550565b9150614fb3816002612a7f565b9050614f81565b614fc48284615550565b9250614fd08283615550565b9150614fb36002610c26836001612a60565b610c2c8284615550565b60006116d6603c610c26600f5442612a6090919063ffffffff16565b6040808501516006549151632770a7eb60e21b81526001600160a01b0391821692639dc29fac92615040929116908690600401615a38565b600060405180830381600087803b15801561505a57600080fd5b505af115801561506e573d6000803e3d6000fd5b50508551604051633b4009ff60e11b8152600481018690526001600160a01b03909116925063768013fe9150602401600060405180830381600087803b1580156150b757600080fd5b505af11580156150cb573d6000803e3d6000fd5b505050508360a001516001600160a01b0316633f10abab84836040518363ffffffff1660e01b8152600401615101929190615a38565b600060405180830381600087803b15801561511b57600080fd5b505af115801561512f573d6000803e3d6000fd5b5050855160a087015160405163a51ba3b760e01b81526001600160a01b03909216935063a51ba3b79250613357918590600401615a38565b600061517e600f5442612a6090919063ffffffff16565b9050603c8110610b775742600f8190556040519081527fbab964312bdd13595266f3e549bca3102965a6d718c6c1f8cd7eaac076b9c6c290602001611e59565b6001811180156152395750600c546040805163de8fa43160e01b815290516001926001600160a01b03169163de8fa4319160048083019260209291908290030181865afa158015615213573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061523791906159dd565b115b610b775760405162461bcd60e51b815260206004820152602a60248201527f54726f76654d616e616765723a204f6e6c79206f6e652074726f766520696e206044820152697468652073797374656d60b01b6064820152608401610d29565b6001600160a01b03821660009081526011602052604081206003015460ff16908160048111156152ca576152ca6157dd565b141580156152ea575060018160048111156152e7576152e76157dd565b14155b6152f6576152f6615abe565b6001600160a01b03831660009081526011602052604081206003015461010090046001600160801b031690839061532e826001612a60565b905080836001600160801b0316111561534957615349615abe565b60006018828154811061535e5761535e615aa8565b600091825260209091200154601880546001600160a01b03909216925082916001600160801b03871690811061539657615396615aa8565b600091825260208083209190910180546001600160a01b0319166001600160a01b03948516179055918316808252601183526040918290206003018054610100600160881b0319166101006001600160801b038a16908102919091179091558251918252928101929092527f02b04ae5f7be9ca7c103293a2aa15f3c339d15d6eda53b721fef7b0e609c831a910160405180910390a1601880548061543d5761543d615bce565b600082815260209020810160001990810180546001600160a01b031916905501905550505050505050565b6000610c8260c883615a7d565b600080808084156154b95761548a8786614f16565b935061549a87610c268887612a73565b92506154a68785612a60565b91506154b28684612a60565b90506154c6565b5060009250829150859050845b93509350935093565b6154d76155b1565b8381526020810183905260006154f983610c26876714d1120d7b160000612a73565b905061550481615468565b6040830181905261c350606084015260808301869052615525908290612a60565b60a08301526155348482612a60565b61010083015250600060c0820181905260e08201529392505050565b60008061555d8484612a73565b9050611130670de0b6b3a7640000610c26615579600283615a7d565b8490613bf7565b6040518060a00160405280600081526020016000815260200160001515815260200160008152602001600081525090565b6040518061012001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040518060e0016040528060008152602001600081526020016000815260200160006001600160a01b0316815260200160001515815260200160008152602001600081525090565b6001600160a01b0391909116815260200190565b6001600160a01b0381168114610b7757600080fd5b803561567981615659565b919050565b60006020828403121561569057600080fd5b8135612a6c81615659565b600080604083850312156156ae57600080fd5b82356156b981615659565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b600060208083850312156156f057600080fd5b823567ffffffffffffffff8082111561570857600080fd5b818501915085601f83011261571c57600080fd5b81358181111561572e5761572e6156c7565b8060051b604051601f19603f83011681018181108582111715615753576157536156c7565b60405291825284820192508381018501918883111561577157600080fd5b938501935b82851015615796576157878561566e565b84529385019392850192615776565b98975050505050505050565b600080604083850312156157b557600080fd5b50508035926020909101359150565b6000602082840312156157d657600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b858152602081018590526040810184905260a0810160058410615818576158186157dd565b60608201939093526001600160801b03919091166080909101529392505050565b6000806000806000806000806000806000806101808d8f03121561585c57600080fd5b8c3561586781615659565b9b5060208d013561587781615659565b9a5060408d013561588781615659565b995060608d013561589781615659565b985060808d01356158a781615659565b975060a08d01356158b781615659565b96506158c560c08e0161566e565b95506158d360e08e0161566e565b94506158e26101008e0161566e565b93506158f16101208e0161566e565b92506159006101408e0161566e565b915061590f6101608e0161566e565b90509295989b509295989b509295989b565b600060208083528351808285015260005b8181101561594e57858101830151858201604001528201615932565b506000604082860101526040601f19601f8301168501019250505092915050565b600080600080600080600060e0888a03121561598a57600080fd5b87359650602088013561599c81615659565b955060408801356159ac81615659565b945060608801356159bc81615659565b9699959850939660808101359560a0820135955060c0909101359350915050565b6000602082840312156159ef57600080fd5b5051919050565b60208082526022908201527f54726f76654d616e616765723a206e6f7468696e6720746f206c697175696461604082015261746560f01b606082015260800190565b6001600160a01b03929092168252602082015260400190565b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082615a8c57615a8c615a51565b500490565b8082028115828204841417610c8257610c82615a67565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052600160045260246000fd5b81810381811115610c8257610c82615a67565b600060208284031215615af957600080fd5b8151612a6c81615659565b600081615b1357615b13615a67565b506000190190565b60048110615b2b57615b2b6157dd565b9052565b848152602081018490526040810183905260808101611e956060830184615b1b565b600060018201615b6357615b63615a67565b5060010190565b80820180821115610c8257610c82615a67565b600060208284031215615b8f57600080fd5b81518015158114612a6c57600080fd5b83815260208101839052606081016111306040830184615b1b565b600082615bc957615bc9615a51565b500690565b634e487b7160e01b600052603160045260246000fdfeea67486ed7ebe3eea8ab3390efd4a3c8aae48be5bea27df104a8af786c408434c3770d654ed33aeea6bf11ac8ef05d02a6a04ed4686dd2f624d853bbec43cc8ba264697066735822122036e25d8ccdeb6ffb9a60b4af8bd352ce9e512612eca5222d7ef6e20808a18e5e64736f6c63430008130033",
      "deployedBytecode": "",
      "linkReferences": {},
      "deployedLinkReferences": {},
      "devdoc": {
        "kind": "dev",
        "methods": {
          "owner()": {
            "details": "Returns the address of the current owner."
          },
          "renounceOwnership()": {
            "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
          },
          "transferOwnership(address)": {
            "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
          }
        },
        "version": 1
      },
      "evm": {
        "bytecode": {
          "functionDebugData": {
            "@_412": {
              "entryPoint": null,
              "id": 412,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@_msgSender_1333": {
              "entryPoint": null,
              "id": 1333,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@_transferOwnership_500": {
              "entryPoint": 35,
              "id": 500,
              "parameterSlots": 1,
              "returnSlots": 0
            }
          },
          "generatedSources": [],
          "linkReferences": {},
          "object": "",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x1D CALLER PUSH3 0x23 JUMP JUMPDEST PUSH3 0x75 JUMP JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0x5C5A DUP1 PUSH3 0x85 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x4E3 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x807D138D GT PUSH2 0x28E JUMPI DUP1 PUSH4 0xBB6F030C GT PUSH2 0x167 JUMPI DUP1 PUSH4 0xD3D6F843 GT PUSH2 0xD9 JUMPI DUP1 PUSH4 0xE2AC77B0 GT PUSH2 0x92 JUMPI DUP1 PUSH4 0xE2AC77B0 EQ PUSH2 0xB01 JUMPI DUP1 PUSH4 0xE3246349 EQ PUSH2 0xB14 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0xB1D JUMPI DUP1 PUSH4 0xF92D3433 EQ PUSH2 0x60A JUMPI DUP1 PUSH4 0xFB0CBD4B EQ PUSH2 0xB30 JUMPI DUP1 PUSH4 0xFE2BA848 EQ PUSH2 0xB3F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xD3D6F843 EQ PUSH2 0xA84 JUMPI DUP1 PUSH4 0xD5B35635 EQ PUSH2 0xA97 JUMPI DUP1 PUSH4 0xD66A2553 EQ PUSH2 0xAAA JUMPI DUP1 PUSH4 0xD6966297 EQ PUSH2 0xAD3 JUMPI DUP1 PUSH4 0xD9A72444 EQ PUSH2 0xAE6 JUMPI DUP1 PUSH4 0xE1F787E9 EQ PUSH2 0xAF9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xC35BC550 GT PUSH2 0x12B JUMPI DUP1 PUSH4 0xC35BC550 EQ PUSH2 0xA2F JUMPI DUP1 PUSH4 0xC3EB5C67 EQ PUSH2 0xA39 JUMPI DUP1 PUSH4 0xC42DAB99 EQ PUSH2 0xA42 JUMPI DUP1 PUSH4 0xC91A7E2F EQ PUSH2 0xA55 JUMPI DUP1 PUSH4 0xCBD138AE EQ PUSH2 0xA5E JUMPI DUP1 PUSH4 0xD293C710 EQ PUSH2 0xA71 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xBB6F030C EQ PUSH2 0x9F8 JUMPI DUP1 PUSH4 0xBCD37526 EQ PUSH2 0xA01 JUMPI DUP1 PUSH4 0xBF9BEFB1 EQ PUSH2 0xA14 JUMPI DUP1 PUSH4 0xBF9EBEE2 EQ PUSH2 0xA1D JUMPI DUP1 PUSH4 0xC26C8800 EQ PUSH2 0xA26 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xA2014152 GT PUSH2 0x200 JUMPI DUP1 PUSH4 0xAEAD9DCC GT PUSH2 0x1C4 JUMPI DUP1 PUSH4 0xAEAD9DCC EQ PUSH2 0x966 JUMPI DUP1 PUSH4 0xB0D8E181 EQ PUSH2 0x979 JUMPI DUP1 PUSH4 0xB36CD07F EQ PUSH2 0x98C JUMPI DUP1 PUSH4 0xB7F8CF9B EQ PUSH2 0x99F JUMPI DUP1 PUSH4 0xB82F263D EQ PUSH2 0x9B2 JUMPI DUP1 PUSH4 0xB91AF97C EQ PUSH2 0x9C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xA2014152 EQ PUSH2 0x8FF JUMPI DUP1 PUSH4 0xA20BAEE6 EQ PUSH2 0x5FB JUMPI DUP1 PUSH4 0xA22B7D68 EQ PUSH2 0x908 JUMPI DUP1 PUSH4 0xA3F4DF7E EQ PUSH2 0x91B JUMPI DUP1 PUSH4 0xAE918754 EQ PUSH2 0x953 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x900E664B GT PUSH2 0x252 JUMPI DUP1 PUSH4 0x900E664B EQ PUSH2 0x8A1 JUMPI DUP1 PUSH4 0x948BA6D2 EQ PUSH2 0x8AA JUMPI DUP1 PUSH4 0x96D711FF EQ PUSH2 0x8BD JUMPI DUP1 PUSH4 0x981C4F48 EQ PUSH2 0x8C6 JUMPI DUP1 PUSH4 0x9976CF45 EQ PUSH2 0x8D9 JUMPI DUP1 PUSH4 0x9F7ADB5E EQ PUSH2 0x8EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x807D138D EQ PUSH2 0x859 JUMPI DUP1 PUSH4 0x82FE3EB9 EQ PUSH2 0x862 JUMPI DUP1 PUSH4 0x887105D3 EQ PUSH2 0x875 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x87D JUMPI DUP1 PUSH4 0x8F913789 EQ PUSH2 0x88E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x4E443D9E GT PUSH2 0x3C0 JUMPI DUP1 PUSH4 0x715018A6 GT PUSH2 0x332 JUMPI DUP1 PUSH4 0x741BEF1A GT PUSH2 0x2F6 JUMPI DUP1 PUSH4 0x741BEF1A EQ PUSH2 0x809 JUMPI DUP1 PUSH4 0x756B253E EQ PUSH2 0x81C JUMPI DUP1 PUSH4 0x794E5724 EQ PUSH2 0x6E3 JUMPI DUP1 PUSH4 0x795D26C3 EQ PUSH2 0x82F JUMPI DUP1 PUSH4 0x7E024AD6 EQ PUSH2 0x837 JUMPI DUP1 PUSH4 0x7F7DDE4A EQ PUSH2 0x846 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x715018A6 EQ PUSH2 0x7D3 JUMPI DUP1 PUSH4 0x71F256E2 EQ PUSH2 0x7DB JUMPI DUP1 PUSH4 0x72423C17 EQ PUSH2 0x7E3 JUMPI DUP1 PUSH4 0x72FE25AA EQ PUSH2 0x5FB JUMPI DUP1 PUSH4 0x734F622D EQ PUSH2 0x7F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x5DBA4C4A GT PUSH2 0x384 JUMPI DUP1 PUSH4 0x5DBA4C4A EQ PUSH2 0x718 JUMPI DUP1 PUSH4 0x61EC893D EQ PUSH2 0x720 JUMPI DUP1 PUSH4 0x631203B0 EQ PUSH2 0x728 JUMPI DUP1 PUSH4 0x64CEE260 EQ PUSH2 0x73B JUMPI DUP1 PUSH4 0x653D46E7 EQ PUSH2 0x767 JUMPI DUP1 PUSH4 0x6EF64338 EQ PUSH2 0x77A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x4E443D9E EQ PUSH2 0x6AD JUMPI DUP1 PUSH4 0x570DC45E EQ PUSH2 0x6D0 JUMPI DUP1 PUSH4 0x5733D58F EQ PUSH2 0x6E3 JUMPI DUP1 PUSH4 0x58B8A5D6 EQ PUSH2 0x6F2 JUMPI DUP1 PUSH4 0x5D6B480F EQ PUSH2 0x705 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x21E37801 GT PUSH2 0x459 JUMPI DUP1 PUSH4 0x3CC74225 GT PUSH2 0x41D JUMPI DUP1 PUSH4 0x3CC74225 EQ PUSH2 0x638 JUMPI DUP1 PUSH4 0x47142AA3 EQ PUSH2 0x64B JUMPI DUP1 PUSH4 0x477D66CF EQ PUSH2 0x65E JUMPI DUP1 PUSH4 0x480CD578 EQ PUSH2 0x671 JUMPI DUP1 PUSH4 0x4870DD9A EQ PUSH2 0x69D JUMPI DUP1 PUSH4 0x49EEFEEE EQ PUSH2 0x6A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x21E37801 EQ PUSH2 0x5E8 JUMPI DUP1 PUSH4 0x24092669 EQ PUSH2 0x5FB JUMPI DUP1 PUSH4 0x28D28B5B EQ PUSH2 0x60A JUMPI DUP1 PUSH4 0x2D81DD56 EQ PUSH2 0x612 JUMPI DUP1 PUSH4 0x2F865568 EQ PUSH2 0x625 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x15D549F1 GT PUSH2 0x4AB JUMPI DUP1 PUSH4 0x15D549F1 EQ PUSH2 0x562 JUMPI DUP1 PUSH4 0x1673C79A EQ PUSH2 0x575 JUMPI DUP1 PUSH4 0x18F2817A EQ PUSH2 0x5B1 JUMPI DUP1 PUSH4 0x1B199A64 EQ PUSH2 0x5C4 JUMPI DUP1 PUSH4 0x1BF43555 EQ PUSH2 0x5CD JUMPI DUP1 PUSH4 0x1E8B1C2B EQ PUSH2 0x5D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x48C661D EQ PUSH2 0x4E8 JUMPI DUP1 PUSH4 0x71A7541 EQ PUSH2 0x511 JUMPI DUP1 PUSH4 0xB076557 EQ PUSH2 0x527 JUMPI DUP1 PUSH4 0xC08FF5F EQ PUSH2 0x53C JUMPI DUP1 PUSH4 0x12610E92 EQ PUSH2 0x54F JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x5 SLOAD PUSH2 0x4FB SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x508 SWAP2 SWAP1 PUSH2 0x5645 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x519 PUSH1 0x2 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x508 JUMP JUMPDEST PUSH2 0x53A PUSH2 0x535 CALLDATASIZE PUSH1 0x4 PUSH2 0x567E JUMP JUMPDEST PUSH2 0xB52 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x519 PUSH2 0x54A CALLDATASIZE PUSH1 0x4 PUSH2 0x567E JUMP JUMPDEST PUSH2 0xB7A JUMP JUMPDEST PUSH2 0x519 PUSH2 0x55D CALLDATASIZE PUSH1 0x4 PUSH2 0x569B JUMP JUMPDEST PUSH2 0xC36 JUMP JUMPDEST PUSH2 0x519 PUSH2 0x570 CALLDATASIZE PUSH1 0x4 PUSH2 0x567E JUMP JUMPDEST PUSH2 0xC88 JUMP JUMPDEST PUSH2 0x59C PUSH2 0x583 CALLDATASIZE PUSH1 0x4 PUSH2 0x567E JUMP JUMPDEST PUSH1 0x17 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP1 SWAP2 ADD SLOAD DUP3 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE ADD PUSH2 0x508 JUMP JUMPDEST PUSH2 0x519 PUSH2 0x5BF CALLDATASIZE PUSH1 0x4 PUSH2 0x567E JUMP JUMPDEST PUSH2 0xCAA JUMP JUMPDEST PUSH2 0x519 PUSH1 0x1A SLOAD DUP2 JUMP JUMPDEST PUSH2 0x519 PUSH1 0x1 DUP2 JUMP JUMPDEST PUSH2 0x53A PUSH2 0x5E3 CALLDATASIZE PUSH1 0x4 PUSH2 0x56DD JUMP JUMPDEST PUSH2 0xCBD JUMP JUMPDEST PUSH2 0x519 PUSH2 0x5F6 CALLDATASIZE PUSH1 0x4 PUSH2 0x567E JUMP JUMPDEST PUSH2 0x10C6 JUMP JUMPDEST PUSH2 0x519 PUSH8 0xDE0B6B3A7640000 DUP2 JUMP JUMPDEST PUSH2 0x519 PUSH2 0x10F6 JUMP JUMPDEST PUSH2 0x519 PUSH2 0x620 CALLDATASIZE PUSH1 0x4 PUSH2 0x57A2 JUMP JUMPDEST PUSH2 0x1118 JUMP JUMPDEST PUSH2 0x53A PUSH2 0x633 CALLDATASIZE PUSH1 0x4 PUSH2 0x567E JUMP JUMPDEST PUSH2 0x1138 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH2 0x4FB SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x519 PUSH2 0x659 CALLDATASIZE PUSH1 0x4 PUSH2 0x57A2 JUMP JUMPDEST PUSH2 0x11A4 JUMP JUMPDEST PUSH2 0x519 PUSH2 0x66C CALLDATASIZE PUSH1 0x4 PUSH2 0x57C4 JUMP JUMPDEST PUSH2 0x11BC JUMP JUMPDEST PUSH2 0x519 PUSH2 0x67F CALLDATASIZE PUSH1 0x4 PUSH2 0x567E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x11 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x519 PUSH1 0xC8 DUP2 JUMP JUMPDEST PUSH1 0x18 SLOAD PUSH2 0x519 JUMP JUMPDEST PUSH2 0x6C0 PUSH2 0x6BB CALLDATASIZE PUSH1 0x4 PUSH2 0x57C4 JUMP JUMPDEST PUSH2 0x11D0 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x508 JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH2 0x4FB SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x519 PUSH8 0x14D1120D7B160000 DUP2 JUMP JUMPDEST PUSH2 0x519 PUSH2 0x700 CALLDATASIZE PUSH1 0x4 PUSH2 0x57C4 JUMP JUMPDEST PUSH2 0x11DB JUMP JUMPDEST PUSH2 0x53A PUSH2 0x713 CALLDATASIZE PUSH1 0x4 PUSH2 0x569B JUMP JUMPDEST PUSH2 0x11E9 JUMP JUMPDEST PUSH2 0x53A PUSH2 0x1241 JUMP JUMPDEST PUSH2 0x519 PUSH1 0x3C DUP2 JUMP JUMPDEST PUSH2 0x59C PUSH2 0x736 CALLDATASIZE PUSH1 0x4 PUSH2 0x57C4 JUMP JUMPDEST PUSH2 0x12AD JUMP JUMPDEST PUSH2 0x519 PUSH2 0x749 CALLDATASIZE PUSH1 0x4 PUSH2 0x567E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x11 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x53A PUSH2 0x775 CALLDATASIZE PUSH1 0x4 PUSH2 0x57C4 JUMP JUMPDEST PUSH2 0x12D0 JUMP JUMPDEST PUSH2 0x7C2 PUSH2 0x788 CALLDATASIZE PUSH1 0x4 PUSH2 0x567E JUMP JUMPDEST PUSH1 0x11 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x3 SWAP1 SWAP4 ADD SLOAD SWAP2 SWAP3 SWAP1 SWAP2 PUSH1 0xFF DUP2 AND SWAP1 PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x508 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x57F3 JUMP JUMPDEST PUSH2 0x53A PUSH2 0x1641 JUMP JUMPDEST PUSH2 0x6C0 PUSH2 0x1655 JUMP JUMPDEST PUSH2 0x519 PUSH2 0x7F1 CALLDATASIZE PUSH1 0x4 PUSH2 0x569B JUMP JUMPDEST PUSH2 0x16DB JUMP JUMPDEST PUSH2 0x53A PUSH2 0x804 CALLDATASIZE PUSH1 0x4 PUSH2 0x5839 JUMP JUMPDEST PUSH2 0x1732 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH2 0x4FB SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x4FB PUSH2 0x82A CALLDATASIZE PUSH1 0x4 PUSH2 0x57C4 JUMP JUMPDEST PUSH2 0x1AFB JUMP JUMPDEST PUSH2 0x519 PUSH2 0x1B25 JUMP JUMPDEST PUSH2 0x519 PUSH8 0xDDD4B8C6C7D70D8 DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x4FB SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x519 PUSH1 0x13 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x53A PUSH2 0x870 CALLDATASIZE PUSH1 0x4 PUSH2 0x567E JUMP JUMPDEST PUSH2 0x1C21 JUMP JUMPDEST PUSH2 0x519 PUSH2 0x1C32 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x4FB JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH2 0x4FB SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x519 PUSH1 0x16 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x519 PUSH2 0x8B8 CALLDATASIZE PUSH1 0x4 PUSH2 0x57C4 JUMP JUMPDEST PUSH2 0x1CF7 JUMP JUMPDEST PUSH2 0x519 PUSH1 0x14 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x519 PUSH2 0x8D4 CALLDATASIZE PUSH1 0x4 PUSH2 0x567E JUMP JUMPDEST PUSH2 0x1D0A JUMP JUMPDEST PUSH2 0x519 PUSH2 0x8E7 CALLDATASIZE PUSH1 0x4 PUSH2 0x569B JUMP JUMPDEST PUSH2 0x1D32 JUMP JUMPDEST PUSH2 0x53A PUSH2 0x8FA CALLDATASIZE PUSH1 0x4 PUSH2 0x57C4 JUMP JUMPDEST PUSH2 0x1D5F JUMP JUMPDEST PUSH2 0x519 PUSH2 0xC350 DUP2 JUMP JUMPDEST PUSH2 0x519 PUSH2 0x916 CALLDATASIZE PUSH1 0x4 PUSH2 0x57C4 JUMP JUMPDEST PUSH2 0x1E64 JUMP JUMPDEST PUSH2 0x946 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xC DUP2 MSTORE PUSH1 0x20 ADD PUSH12 0x2A3937BB32A6B0B730B3B2B9 PUSH1 0xA1 SHL DUP2 MSTORE POP DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x508 SWAP2 SWAP1 PUSH2 0x5921 JUMP JUMPDEST PUSH1 0xC SLOAD PUSH2 0x4FB SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0xA SLOAD PUSH2 0x4FB SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x519 PUSH2 0x987 CALLDATASIZE PUSH1 0x4 PUSH2 0x567E JUMP JUMPDEST PUSH2 0x1E77 JUMP JUMPDEST PUSH2 0x519 PUSH2 0x99A CALLDATASIZE PUSH1 0x4 PUSH2 0x57C4 JUMP JUMPDEST PUSH2 0x1E9E JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH2 0x4FB SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x519 PUSH2 0x9C0 CALLDATASIZE PUSH1 0x4 PUSH2 0x57C4 JUMP JUMPDEST PUSH2 0x1EAC JUMP JUMPDEST PUSH2 0x9D8 PUSH2 0x9D3 CALLDATASIZE PUSH1 0x4 PUSH2 0x567E JUMP JUMPDEST PUSH2 0x1EB7 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP5 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP2 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD PUSH2 0x508 JUMP JUMPDEST PUSH2 0x519 PUSH1 0xD SLOAD DUP2 JUMP JUMPDEST PUSH2 0x53A PUSH2 0xA0F CALLDATASIZE PUSH1 0x4 PUSH2 0x596F JUMP JUMPDEST PUSH2 0x1F0F JUMP JUMPDEST PUSH2 0x519 PUSH1 0x12 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x519 PUSH1 0x15 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x519 PUSH1 0x10 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x519 PUSH3 0x127500 DUP2 JUMP JUMPDEST PUSH2 0x519 PUSH1 0xE SLOAD DUP2 JUMP JUMPDEST PUSH1 0xB SLOAD PUSH2 0x4FB SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x519 PUSH1 0x19 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x53A PUSH2 0xA6C CALLDATASIZE PUSH1 0x4 PUSH2 0x567E JUMP JUMPDEST PUSH2 0x2630 JUMP JUMPDEST PUSH2 0x519 PUSH2 0xA7F CALLDATASIZE PUSH1 0x4 PUSH2 0x569B JUMP JUMPDEST PUSH2 0x2643 JUMP JUMPDEST PUSH2 0x519 PUSH2 0xA92 CALLDATASIZE PUSH1 0x4 PUSH2 0x569B JUMP JUMPDEST PUSH2 0x2662 JUMP JUMPDEST PUSH2 0x519 PUSH2 0xAA5 CALLDATASIZE PUSH1 0x4 PUSH2 0x57C4 JUMP JUMPDEST PUSH2 0x2692 JUMP JUMPDEST PUSH2 0x519 PUSH2 0xAB8 CALLDATASIZE PUSH1 0x4 PUSH2 0x567E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x11 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x519 PUSH2 0xAE1 CALLDATASIZE PUSH1 0x4 PUSH2 0x567E JUMP JUMPDEST PUSH2 0x26A6 JUMP JUMPDEST PUSH2 0x4FB PUSH2 0xAF4 CALLDATASIZE PUSH1 0x4 PUSH2 0x57C4 JUMP JUMPDEST PUSH2 0x273F JUMP JUMPDEST PUSH2 0x519 PUSH2 0x276F JUMP JUMPDEST PUSH2 0x6C0 PUSH2 0xB0F CALLDATASIZE PUSH1 0x4 PUSH2 0x567E JUMP JUMPDEST PUSH2 0x27F0 JUMP JUMPDEST PUSH2 0x519 PUSH1 0xF SLOAD DUP2 JUMP JUMPDEST PUSH2 0x53A PUSH2 0xB2B CALLDATASIZE PUSH1 0x4 PUSH2 0x567E JUMP JUMPDEST PUSH2 0x2853 JUMP JUMPDEST PUSH2 0x519 PUSH8 0xDC14847BCC53B20 DUP2 JUMP JUMPDEST PUSH2 0x53A PUSH2 0xB4D CALLDATASIZE PUSH1 0x4 PUSH2 0x567E JUMP JUMPDEST PUSH2 0x28C9 JUMP JUMPDEST PUSH2 0xB5A PUSH2 0x28DA JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 SLOAD PUSH2 0xB77 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP2 AND DUP4 PUSH2 0x295A JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x17 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH1 0x16 SLOAD DUP3 SWAP1 PUSH2 0xBA5 SWAP1 DUP4 PUSH2 0x2A60 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO DUP1 PUSH2 0xBE4 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x11 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 ADD SLOAD PUSH1 0xFF AND PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xBE1 JUMPI PUSH2 0xBE1 PUSH2 0x57DD JUMP JUMPDEST EQ ISZERO JUMPDEST ISZERO PUSH2 0xBF3 JUMPI POP PUSH1 0x0 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x11 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x2 ADD SLOAD SWAP1 PUSH2 0xC2C PUSH8 0xDE0B6B3A7640000 PUSH2 0xC26 DUP5 DUP7 PUSH2 0x2A73 JUMP JUMPDEST SWAP1 PUSH2 0x2A7F JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC40 PUSH2 0x28DA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x11 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0xC63 SWAP1 DUP5 PUSH2 0x2A60 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x11 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP2 SWAP1 SSTORE SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC92 PUSH2 0x28DA JUMP JUMPDEST PUSH2 0xC9B DUP3 PUSH2 0x2A8B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCB4 PUSH2 0x28DA JUMP JUMPDEST PUSH2 0xC82 DUP3 PUSH2 0x2B25 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0xD32 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x36 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54726F76654D616E616765723A2043616C6C6461746120616464726573732061 PUSH1 0x44 DUP3 ADD MSTORE PUSH22 0x72726179206D757374206E6F7420626520656D707479 PUSH1 0x50 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 SLOAD PUSH1 0x5 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND SWAP3 SWAP2 DUP3 AND SWAP2 AND PUSH2 0xD54 PUSH2 0x5580 JUMP JUMPDEST PUSH2 0xD5C PUSH2 0x55B1 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xFDB11CF PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0xDB1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xDD5 SWAP2 SWAP1 PUSH2 0x59DD JUMP JUMPDEST DUP3 PUSH1 0x0 ADD DUP2 DUP2 MSTORE POP POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x488DF0FC PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xE1C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xE40 SWAP2 SWAP1 PUSH2 0x59DD JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE DUP2 MLOAD PUSH2 0xE50 SWAP1 PUSH2 0x2BC9 JUMP JUMPDEST ISZERO DUP1 ISZERO PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0xE78 JUMPI PUSH2 0xE71 DUP6 DUP6 DUP5 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x20 ADD MLOAD DUP11 PUSH2 0x2BE6 JUMP JUMPDEST SWAP1 POP PUSH2 0xE90 JUMP JUMPDEST PUSH2 0xE8D DUP6 DUP6 DUP5 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x20 ADD MLOAD DUP11 PUSH2 0x2E0D JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD MLOAD GT PUSH2 0xEB4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD29 SWAP1 PUSH2 0x59F6 JUMP JUMPDEST PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0xA0 DUP3 ADD MLOAD PUSH1 0x40 MLOAD PUSH4 0x335525AD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP3 PUSH4 0x335525AD SWAP3 PUSH2 0xEF1 SWAP3 PUSH1 0x4 ADD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xF0B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xF1F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0xF37 DUP6 DUP6 DUP4 PUSH1 0xC0 ADD MLOAD DUP5 PUSH1 0xE0 ADD MLOAD PUSH2 0x2EDD JUMP JUMPDEST PUSH2 0x100 DUP2 ADD MLOAD ISZERO PUSH2 0x1015 JUMPI PUSH1 0x7 SLOAD PUSH2 0x100 DUP3 ADD MLOAD PUSH1 0x40 MLOAD PUSH3 0xF9332D PUSH1 0xE6 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 PUSH4 0x3E4CCB40 SWAP2 PUSH2 0xF79 SWAP2 PUSH1 0x4 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xF93 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xFA7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x7 SLOAD PUSH2 0x100 DUP5 ADD MLOAD PUSH1 0x40 MLOAD PUSH4 0xA51BA3B7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP12 AND SWAP6 POP PUSH4 0xA51BA3B7 SWAP5 POP PUSH2 0xFE2 SWAP4 AND SWAP2 SWAP1 PUSH1 0x4 ADD PUSH2 0x5A38 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xFFC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1010 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST PUSH2 0x1023 DUP6 DUP3 PUSH1 0x40 ADD MLOAD PUSH2 0x3168 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x100 DUP2 ADD MLOAD PUSH1 0x40 DUP3 ADD MLOAD DUP3 MLOAD PUSH2 0x104F SWAP3 SWAP2 PUSH2 0x1049 SWAP2 SWAP1 PUSH2 0x2A60 JUMP JUMPDEST SWAP1 PUSH2 0x2A60 JUMP JUMPDEST PUSH1 0x80 DUP4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP1 DUP6 ADD MLOAD PUSH1 0x40 DUP6 DUP2 ADD MLOAD DUP7 DUP5 ADD MLOAD DUP3 MLOAD SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP7 SWAP1 SWAP7 MSTORE SWAP1 DUP3 ADD MSTORE SWAP1 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH32 0x4152C73DD2614C4F9FC35E8C9CF16013CD588C75B49A4C1673ECFFDCBCDA9403 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH2 0x10BE DUP6 CALLER DUP4 PUSH1 0x60 ADD MLOAD DUP5 PUSH1 0x40 ADD MLOAD PUSH2 0x32AC JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x11 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x3 ADD SLOAD PUSH1 0xFF AND PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xC82 JUMPI PUSH2 0xC82 PUSH2 0x57DD JUMP JUMPDEST PUSH2 0x110A PUSH2 0x3E8 PUSH8 0xDE0B6B3A7640000 PUSH2 0x5A7D JUMP JUMPDEST PUSH2 0x1115 SWAP1 PUSH1 0x5 PUSH2 0x5A91 JUMP JUMPDEST DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1130 DUP5 DUP5 PUSH1 0x14 PUSH8 0xDE0B6B3A7640000 PUSH2 0x338F JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x1141 DUP2 PUSH2 0x349A JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x0 SWAP2 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP2 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1177 JUMPI PUSH2 0x1177 PUSH2 0x5AA8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP PUSH2 0x11A0 DUP2 PUSH2 0xCBD JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1130 DUP5 DUP5 PUSH1 0x14 PUSH8 0x14D1120D7B160000 PUSH2 0x338F JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC82 PUSH2 0x11CA DUP4 PUSH2 0x1CF7 JUMP JUMPDEST DUP4 PUSH2 0x3531 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC82 DUP3 PUSH2 0x2BC9 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC82 PUSH1 0xD SLOAD DUP4 PUSH2 0x3549 JUMP JUMPDEST PUSH2 0x11F1 PUSH2 0x28DA JUMP JUMPDEST DUP1 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1203 JUMPI PUSH2 0x1203 PUSH2 0x57DD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x11 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 ADD DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 DUP4 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1238 JUMPI PUSH2 0x1238 PUSH2 0x57DD JUMP JUMPDEST MUL OR SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH2 0x1249 PUSH2 0x28DA JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1253 PUSH2 0x3601 JUMP JUMPDEST SWAP1 POP PUSH8 0xDE0B6B3A7640000 DUP2 GT ISZERO PUSH2 0x126D JUMPI PUSH2 0x126D PUSH2 0x5ABE JUMP JUMPDEST PUSH1 0xE DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH32 0xCA870D46D67E9A1444A6B8F97A147E06E4CF71EE2A0F172D7ECD5441AE7C1201 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH2 0xB77 PUSH2 0x3645 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x12BB DUP5 PUSH2 0x1E9E JUMP JUMPDEST SWAP1 POP PUSH2 0x12C7 DUP2 DUP6 PUSH2 0x3531 JUMP JUMPDEST SWAP5 SWAP1 SWAP4 POP SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xE0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP4 MSTORE PUSH1 0x1 SLOAD DUP2 AND PUSH1 0x20 DUP5 ADD MSTORE SWAP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0xC SLOAD DUP4 AND PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0x5 SLOAD SWAP1 SWAP2 AND PUSH2 0x1326 PUSH2 0x5580 JUMP JUMPDEST PUSH2 0x132E PUSH2 0x55B1 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xFDB11CF PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1383 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x13A7 SWAP2 SWAP1 PUSH2 0x59DD JUMP JUMPDEST DUP3 PUSH1 0x0 ADD DUP2 DUP2 MSTORE POP POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x488DF0FC PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x13EE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1412 SWAP2 SWAP1 PUSH2 0x59DD JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE DUP2 MLOAD PUSH2 0x1422 SWAP1 PUSH2 0x2BC9 JUMP JUMPDEST ISZERO DUP1 ISZERO PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x1449 JUMPI PUSH2 0x1442 DUP5 DUP4 PUSH1 0x0 ADD MLOAD DUP5 PUSH1 0x20 ADD MLOAD DUP9 PUSH2 0x369C JUMP JUMPDEST SWAP1 POP PUSH2 0x1469 JUMP JUMPDEST PUSH2 0x1466 DUP5 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x20 ADD MLOAD DUP5 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x20 ADD MLOAD DUP10 PUSH2 0x3A1A JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD MLOAD GT PUSH2 0x148D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD29 SWAP1 PUSH2 0x59F6 JUMP JUMPDEST PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0xA0 DUP3 ADD MLOAD PUSH1 0x40 MLOAD PUSH4 0x335525AD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP3 PUSH4 0x335525AD SWAP3 PUSH2 0x14CA SWAP3 PUSH1 0x4 ADD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x14E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x14F8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0x1518 DUP5 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x20 ADD MLOAD DUP4 PUSH1 0xC0 ADD MLOAD DUP5 PUSH1 0xE0 ADD MLOAD PUSH2 0x2EDD JUMP JUMPDEST PUSH2 0x100 DUP2 ADD MLOAD ISZERO PUSH2 0x158F JUMPI DUP4 MLOAD PUSH1 0x7 SLOAD PUSH2 0x100 DUP4 ADD MLOAD PUSH1 0x40 MLOAD PUSH4 0xA51BA3B7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND SWAP4 PUSH4 0xA51BA3B7 SWAP4 PUSH2 0x155C SWAP4 SWAP2 AND SWAP2 PUSH1 0x4 ADD PUSH2 0x5A38 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1576 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x158A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST PUSH2 0x15A1 DUP5 PUSH1 0x0 ADD MLOAD DUP3 PUSH1 0x40 ADD MLOAD PUSH2 0x3168 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x100 DUP2 ADD MLOAD PUSH1 0x40 DUP3 ADD MLOAD DUP3 MLOAD PUSH2 0x15C7 SWAP3 SWAP2 PUSH2 0x1049 SWAP2 SWAP1 PUSH2 0x2A60 JUMP JUMPDEST PUSH1 0x80 DUP4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP1 DUP6 ADD MLOAD PUSH1 0x40 DUP6 DUP2 ADD MLOAD DUP7 DUP5 ADD MLOAD DUP3 MLOAD SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP7 SWAP1 SWAP7 MSTORE SWAP1 DUP3 ADD MSTORE SWAP1 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH32 0x4152C73DD2614C4F9FC35E8C9CF16013CD588C75B49A4C1673ECFFDCBCDA9403 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH2 0x163A DUP5 PUSH1 0x0 ADD MLOAD CALLER DUP4 PUSH1 0x60 ADD MLOAD DUP5 PUSH1 0x40 ADD MLOAD PUSH2 0x32AC JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1649 PUSH2 0x3B4B JUMP JUMPDEST PUSH2 0x1653 PUSH1 0x0 PUSH2 0x3BA5 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH2 0x16D6 PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x490BE83 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x16AD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x16D1 SWAP2 SWAP1 PUSH2 0x59DD JUMP JUMPDEST PUSH2 0x2BC9 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x16E5 PUSH2 0x28DA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x11 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x170B SWAP1 DUP5 PUSH2 0x3BF7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x11 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x173A PUSH2 0x3B4B JUMP JUMPDEST PUSH2 0x1743 DUP13 PUSH2 0x3C03 JUMP JUMPDEST PUSH2 0x174C DUP12 PUSH2 0x3C03 JUMP JUMPDEST PUSH2 0x1755 DUP11 PUSH2 0x3C03 JUMP JUMPDEST PUSH2 0x175E DUP10 PUSH2 0x3C03 JUMP JUMPDEST PUSH2 0x1767 DUP9 PUSH2 0x3C03 JUMP JUMPDEST PUSH2 0x1770 DUP8 PUSH2 0x3C03 JUMP JUMPDEST PUSH2 0x1779 DUP7 PUSH2 0x3C03 JUMP JUMPDEST PUSH2 0x1782 DUP6 PUSH2 0x3C03 JUMP JUMPDEST PUSH2 0x178B DUP5 PUSH2 0x3C03 JUMP JUMPDEST PUSH2 0x1794 DUP4 PUSH2 0x3C03 JUMP JUMPDEST PUSH2 0x179D DUP3 PUSH2 0x3C03 JUMP JUMPDEST PUSH2 0x17A6 DUP2 PUSH2 0x3C03 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP16 DUP2 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SWAP3 SSTORE PUSH1 0x0 DUP1 SLOAD DUP3 AND DUP15 DUP5 AND OR SWAP1 SSTORE PUSH1 0x1 DUP1 SLOAD DUP3 AND DUP14 DUP5 AND OR SWAP1 SSTORE PUSH1 0x5 DUP1 SLOAD DUP3 AND DUP13 DUP5 AND OR SWAP1 SSTORE PUSH1 0x6 DUP1 SLOAD DUP3 AND DUP12 DUP5 AND OR SWAP1 SSTORE PUSH1 0x7 DUP1 SLOAD DUP3 AND DUP11 DUP5 AND OR SWAP1 SSTORE PUSH1 0x2 DUP1 SLOAD DUP3 AND DUP10 DUP5 AND OR SWAP1 SSTORE PUSH1 0x8 DUP1 SLOAD DUP3 AND DUP9 DUP5 AND OR SWAP1 SSTORE PUSH1 0xC DUP1 SLOAD DUP3 AND DUP8 DUP5 AND OR SWAP1 SSTORE PUSH1 0x9 DUP1 SLOAD DUP3 AND DUP7 DUP5 AND OR SWAP1 SSTORE PUSH1 0xA DUP1 SLOAD DUP3 AND DUP6 DUP5 AND OR SWAP1 SSTORE PUSH1 0xB DUP1 SLOAD SWAP1 SWAP2 AND SWAP2 DUP4 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0x3CA631FFCD2A9B5D9AE18543FC82F58EB4CA33AF9E6AB01B7A8E95331E6ED985 SWAP1 PUSH2 0x1880 SWAP1 DUP15 SWAP1 PUSH2 0x5645 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH32 0x78F058B189175430C48DC02699E3A0031EA4FF781536DC2FAB847DE4BABDD882 DUP12 PUSH1 0x40 MLOAD PUSH2 0x18B7 SWAP2 SWAP1 PUSH2 0x5645 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH32 0x5EE0CAE2F063ED938BB55046F6A932FB6AE792BF43624806BB90ABE68A50BE9B DUP11 PUSH1 0x40 MLOAD PUSH2 0x18EE SWAP2 SWAP1 PUSH2 0x5645 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH32 0x82966D27EEA39B038EE0FA30CD16532BB24F6E65D31CB58FB227AA5766CDCC7F DUP10 PUSH1 0x40 MLOAD PUSH2 0x1925 SWAP2 SWAP1 PUSH2 0x5645 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH32 0xCFB07D791FCAFC032B35837B50EB84B74DF518CF4CC287E8084F47630FA70FA0 DUP9 PUSH1 0x40 MLOAD PUSH2 0x195C SWAP2 SWAP1 PUSH2 0x5645 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH32 0xE67F36A6E961157D6EFF83B91F3AF5A62131CEB6F04954EF74F51C1C05E7F88D DUP8 PUSH1 0x40 MLOAD PUSH2 0x1993 SWAP2 SWAP1 PUSH2 0x5645 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH32 0x8C537274438AA850A330284665D81A85DD38267D09E4050D416BFC94142DB264 DUP7 PUSH1 0x40 MLOAD PUSH2 0x19CA SWAP2 SWAP1 PUSH2 0x5645 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH32 0x7FAA560F2889840C377209FBC4B6B92D05F43F1FC60BF336AB546FD60C0051AD DUP6 PUSH1 0x40 MLOAD PUSH2 0x1A01 SWAP2 SWAP1 PUSH2 0x5645 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH32 0x65F4CF077BC01E4742EB5AD98326F6E95B63548EA24B17F8D5E823111FE78800 DUP5 PUSH1 0x40 MLOAD PUSH2 0x1A38 SWAP2 SWAP1 PUSH2 0x5645 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH32 0xD32E4EF3D389440323B172CFC07C6C01BDD1D3E8334379048EEC21E8D919B77 DUP4 PUSH1 0x40 MLOAD PUSH2 0x1A6F SWAP2 SWAP1 PUSH2 0x5645 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH32 0xFE7E5F521EFD6E9FDA9261F1223B2CDA79BA84D0393E8B6629D27DB91048126F DUP3 PUSH1 0x40 MLOAD PUSH2 0x1AA6 SWAP2 SWAP1 PUSH2 0x5645 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH32 0x6877E00D9059F8716BD795B5D4C2C89A4BC3CEF71BA3DD99B168AC9CC1F2A6C2 DUP2 PUSH1 0x40 MLOAD PUSH2 0x1ADD SWAP2 SWAP1 PUSH2 0x5645 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH2 0x1AED PUSH2 0x1641 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x18 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x1B0B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 POP DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x15B3137B PUSH1 0xE2 SHL DUP2 MSTORE SWAP1 MLOAD DUP4 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0x56CC4DEC SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1B6F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1B93 SWAP2 SWAP1 PUSH2 0x59DD JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x56CC4DEC PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1BEA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1C0E SWAP2 SWAP1 PUSH2 0x59DD JUMP JUMPDEST SWAP1 POP PUSH2 0x1C1A DUP3 DUP3 PUSH2 0x3BF7 JUMP JUMPDEST SWAP3 POP POP POP SWAP1 JUMP JUMPDEST PUSH2 0x1C29 PUSH2 0x28DA JUMP JUMPDEST PUSH2 0xB77 DUP2 PUSH2 0x3CA8 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0xA2F03983 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD DUP4 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0xA2F03983 SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1C7C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1CA0 SWAP2 SWAP1 PUSH2 0x59DD JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA2F03983 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1BEA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xC82 PUSH2 0x1D04 PUSH2 0x3D0C JUMP JUMPDEST DUP4 PUSH2 0x3D50 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x17 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x15 SLOAD DUP3 SWAP1 PUSH2 0xBA5 SWAP1 DUP4 PUSH2 0x2A60 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D3C PUSH2 0x28DA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x11 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0xC63 SWAP1 DUP5 PUSH2 0x3BF7 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1DD1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54726F76654D616E616765723A204F6E6C7920426F72726F776572206F706572 PUSH1 0x44 DUP3 ADD MSTORE PUSH15 0x185D1A5BDB9CC81B585E4818D85B1B PUSH1 0x8A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xD29 JUMP JUMPDEST PUSH2 0x1DE5 PUSH2 0x3E8 PUSH8 0xDE0B6B3A7640000 PUSH2 0x5A7D JUMP JUMPDEST PUSH2 0x1DF0 SWAP1 PUSH1 0x5 PUSH2 0x5A91 JUMP JUMPDEST DUP2 LT PUSH2 0x1E27 JUMPI PUSH2 0x1E0A PUSH2 0x3E8 PUSH8 0xDE0B6B3A7640000 PUSH2 0x5A7D JUMP JUMPDEST PUSH2 0x1E15 SWAP1 PUSH1 0x5 PUSH2 0x5A91 JUMP JUMPDEST PUSH2 0x1E1F SWAP1 DUP3 PUSH2 0x5AD4 JUMP JUMPDEST PUSH1 0xE SSTORE PUSH2 0x1E2D JUMP JUMPDEST PUSH1 0x0 PUSH1 0xE SSTORE JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH32 0xCA870D46D67E9A1444A6B8F97A147E06E4CF71EE2A0F172D7ECD5441AE7C1201 SWAP1 PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC82 PUSH2 0x1E71 PUSH2 0x3D0C JUMP JUMPDEST DUP4 PUSH2 0x3549 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1E85 DUP5 PUSH2 0x3E2F JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 PUSH2 0x1E95 DUP4 DUP4 PUSH2 0x3EA9 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC82 PUSH1 0xE SLOAD DUP4 PUSH2 0x3D50 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC82 DUP3 PUSH2 0x3ED8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x11 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP1 SWAP2 ADD SLOAD SWAP1 SWAP2 DUP1 PUSH2 0x1EE3 DUP6 PUSH2 0xB7A JUMP JUMPDEST SWAP2 POP PUSH2 0x1EEE DUP6 PUSH2 0x1D0A JUMP JUMPDEST SWAP1 POP PUSH2 0x1EFA DUP5 DUP4 PUSH2 0x3BF7 JUMP JUMPDEST SWAP4 POP PUSH2 0x1F06 DUP4 DUP3 PUSH2 0x3BF7 JUMP JUMPDEST SWAP3 POP SWAP2 SWAP4 POP SWAP2 SWAP4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xE0 DUP1 DUP3 ADD DUP4 MSTORE PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP5 MSTORE PUSH1 0x1 SLOAD DUP2 AND PUSH1 0x20 DUP1 DUP7 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x8 SLOAD DUP3 AND DUP6 DUP8 ADD MSTORE PUSH1 0xA SLOAD DUP3 AND PUSH1 0x60 DUP1 DUP8 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xC SLOAD DUP4 AND PUSH1 0x80 DUP1 DUP9 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x7 SLOAD DUP5 AND PUSH1 0xA0 DUP1 DUP10 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x6 SLOAD SWAP1 SWAP5 AND PUSH1 0xC0 DUP1 DUP10 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP9 MLOAD PUSH2 0x100 DUP2 ADD DUP11 MSTORE DUP7 DUP2 MSTORE SWAP4 DUP5 ADD DUP7 SWAP1 MSTORE SWAP8 DUP4 ADD DUP6 SWAP1 MSTORE SWAP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP2 ADD DUP4 SWAP1 MSTORE SWAP1 DUP2 ADD DUP3 SWAP1 MSTORE SWAP4 DUP5 ADD DUP2 SWAP1 MSTORE SWAP1 DUP4 ADD MSTORE SWAP1 PUSH2 0x1FB8 DUP4 PUSH2 0x3EFC JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xFDB11CF PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x200D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2031 SWAP2 SWAP1 PUSH2 0x59DD JUMP JUMPDEST PUSH1 0xC0 DUP3 ADD DUP2 SWAP1 MSTORE PUSH2 0x2041 SWAP1 PUSH2 0x3F97 JUMP JUMPDEST PUSH2 0x204A DUP10 PUSH2 0x400A JUMP JUMPDEST PUSH2 0x2059 DUP3 PUSH1 0x40 ADD MLOAD CALLER DUP12 PUSH2 0x4071 JUMP JUMPDEST PUSH2 0x2061 PUSH2 0x1B25 JUMP JUMPDEST PUSH1 0xE0 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP5 ADD MLOAD SWAP1 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0x209A SWAP1 CALLER SWAP1 PUSH1 0x4 ADD PUSH2 0x5645 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x20B7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x20DB SWAP2 SWAP1 PUSH2 0x59DD JUMP JUMPDEST GT ISZERO PUSH2 0x20E9 JUMPI PUSH2 0x20E9 PUSH2 0x5ABE JUMP JUMPDEST DUP9 DUP2 MSTORE PUSH1 0x80 DUP3 ADD MLOAD PUSH1 0xC0 DUP3 ADD MLOAD PUSH1 0x0 SWAP2 PUSH2 0x2104 SWAP2 DUP12 SWAP1 PUSH2 0x4171 JUMP JUMPDEST ISZERO PUSH2 0x2110 JUMPI POP DUP8 PUSH2 0x2222 JUMP JUMPDEST DUP3 PUSH1 0x80 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x4D622831 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2152 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2176 SWAP2 SWAP1 PUSH2 0x5AE7 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x21A5 JUMPI POP PUSH8 0x14D1120D7B160000 PUSH2 0x21A3 DUP3 DUP5 PUSH1 0xC0 ADD MLOAD PUSH2 0x2643 JUMP JUMPDEST LT JUMPDEST ISZERO PUSH2 0x2222 JUMPI DUP3 PUSH1 0x80 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xB72703AC DUP3 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x21DA SWAP2 SWAP1 PUSH2 0x5645 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x21F7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x221B SWAP2 SWAP1 PUSH2 0x5AE7 JUMP JUMPDEST SWAP1 POP PUSH2 0x2179 JUMP JUMPDEST DUP5 PUSH1 0x0 SUB PUSH2 0x2230 JUMPI PUSH1 0x0 NOT SWAP5 POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x2248 JUMPI POP DUP2 MLOAD ISZERO ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x2254 JUMPI POP PUSH1 0x0 DUP6 GT JUMPDEST ISZERO PUSH2 0x2360 JUMPI DUP5 PUSH2 0x2263 DUP2 PUSH2 0x5B04 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x0 DUP4 PUSH1 0x80 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xB72703AC DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2298 SWAP2 SWAP1 PUSH2 0x5645 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x22B5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x22D9 SWAP2 SWAP1 PUSH2 0x5AE7 JUMP JUMPDEST SWAP1 POP PUSH2 0x22EE DUP5 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x20 ADD MLOAD DUP5 PUSH2 0x295A JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2307 DUP6 DUP5 DUP7 PUSH1 0x0 ADD MLOAD DUP8 PUSH1 0xC0 ADD MLOAD DUP15 DUP15 DUP15 PUSH2 0x42BB JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x40 ADD MLOAD ISZERO PUSH2 0x231A JUMPI POP POP PUSH2 0x2360 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP6 ADD MLOAD PUSH2 0x232A SWAP2 PUSH2 0x3BF7 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP7 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP2 ADD MLOAD PUSH1 0x40 DUP6 ADD MLOAD PUSH2 0x2344 SWAP2 PUSH2 0x3BF7 JUMP JUMPDEST PUSH1 0x40 DUP6 ADD MSTORE DUP1 MLOAD DUP5 MLOAD PUSH2 0x2356 SWAP2 PUSH2 0x2A60 JUMP JUMPDEST DUP5 MSTORE POP SWAP1 POP PUSH2 0x2230 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x40 ADD MLOAD GT PUSH2 0x23C6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54726F76654D616E616765723A20556E61626C6520746F2072656465656D2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x1B9E48185B5BDD5B9D PUSH1 0xBA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xD29 JUMP JUMPDEST PUSH2 0x23DD DUP3 PUSH1 0x40 ADD MLOAD DUP4 PUSH1 0xC0 ADD MLOAD DUP5 PUSH1 0xE0 ADD MLOAD PUSH2 0x4505 JUMP JUMPDEST POP PUSH2 0x23EB DUP3 PUSH1 0x40 ADD MLOAD PUSH2 0x4612 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD DUP2 SWAP1 MSTORE PUSH1 0x40 DUP4 ADD MLOAD PUSH2 0x2402 SWAP2 SWAP1 DUP7 PUSH2 0x4620 JUMP JUMPDEST PUSH1 0xB SLOAD PUSH1 0x40 DUP1 DUP5 ADD MLOAD PUSH1 0x60 DUP6 ADD MLOAD SWAP2 MLOAD PUSH4 0x18DDAD89 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND SWAP3 PUSH4 0x6376B624 SWAP3 PUSH2 0x2444 SWAP3 SWAP2 PUSH1 0x4 ADD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x245E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2472 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x60 DUP3 ADD MLOAD PUSH1 0x40 DUP4 ADD MLOAD PUSH2 0x2489 SWAP2 PUSH2 0x2A60 JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x40 DUP1 DUP5 ADD MLOAD PUSH1 0x60 DUP6 ADD MLOAD SWAP2 MLOAD PUSH32 0x43A3F4082A4DBC33D78E317D2497D3A730BC7FC3574159DCEA1056E62E5D9AD8 SWAP4 PUSH2 0x24E5 SWAP4 DUP16 SWAP4 SWAP2 SWAP3 SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 DUP3 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x9DC29FAC CALLER DUP5 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2523 SWAP3 SWAP2 SWAP1 PUSH2 0x5A38 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x253D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2551 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP DUP5 MLOAD PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x40 MLOAD PUSH4 0x3B4009FF PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP4 POP PUSH4 0x768013FE SWAP3 POP PUSH2 0x258B SWAP2 PUSH1 0x4 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x25A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x25B9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP DUP5 MLOAD PUSH1 0x80 DUP6 ADD MLOAD PUSH1 0x40 MLOAD PUSH4 0xA51BA3B7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP4 POP PUSH4 0xA51BA3B7 SWAP3 POP PUSH2 0x25F2 SWAP2 CALLER SWAP2 SWAP1 PUSH1 0x4 ADD PUSH2 0x5A38 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x260C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2620 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x2638 PUSH2 0x28DA JUMP JUMPDEST PUSH2 0xB77 DUP2 PUSH1 0x2 PUSH2 0x468A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x2651 DUP6 PUSH2 0x3E2F JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 PUSH2 0xC2C DUP4 DUP4 DUP8 PUSH2 0x47B7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x266C PUSH2 0x28DA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x11 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x170B SWAP1 DUP5 PUSH2 0x2A60 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC82 PUSH2 0x26A0 DUP4 PUSH2 0x1E64 JUMP JUMPDEST DUP4 PUSH2 0x47EB JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x490BE83 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x26FC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2720 SWAP2 SWAP1 PUSH2 0x59DD JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH2 0x272E DUP6 PUSH2 0x3E2F JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 PUSH2 0xC2C DUP4 DUP4 DUP7 PUSH2 0x47B7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x18 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x2754 JUMPI PUSH2 0x2754 PUSH2 0x5AA8 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x16D6 PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x490BE83 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x27C7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x27EB SWAP2 SWAP1 PUSH2 0x59DD JUMP JUMPDEST PUSH2 0x3ED8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x11 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 ADD SLOAD PUSH1 0xFF AND PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x2824 JUMPI PUSH2 0x2824 PUSH2 0x57DD JUMP JUMPDEST EQ PUSH2 0x2831 JUMPI POP PUSH1 0x0 SWAP2 SWAP1 POP JUMP JUMPDEST POP PUSH1 0x15 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x17 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD LT SWAP1 JUMP JUMPDEST PUSH2 0x285B PUSH2 0x3B4B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x28C0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xD29 JUMP JUMPDEST PUSH2 0xB77 DUP2 PUSH2 0x3BA5 JUMP JUMPDEST PUSH2 0x28D1 PUSH2 0x28DA JUMP JUMPDEST PUSH2 0xB77 DUP2 PUSH2 0x4874 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1653 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54726F76654D616E616765723A2043616C6C6572206973206E6F742074686520 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x426F72726F7765724F7065726174696F6E7320636F6E74726163740000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xD29 JUMP JUMPDEST PUSH2 0x2963 DUP2 PUSH2 0x27F0 JUMP JUMPDEST ISZERO PUSH2 0x2A5B JUMPI PUSH2 0x2971 DUP2 PUSH2 0x349A JUMP JUMPDEST PUSH1 0x0 PUSH2 0x297C DUP3 PUSH2 0x1D0A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2989 DUP4 PUSH2 0xB7A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x11 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 SWAP2 POP PUSH2 0x29B2 SWAP1 DUP4 PUSH2 0x3BF7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x11 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 DUP2 ADD SWAP2 SWAP1 SWAP2 SSTORE SLOAD PUSH2 0x29DD SWAP1 DUP3 PUSH2 0x3BF7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x11 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH2 0x29FF DUP4 PUSH2 0x3CA8 JUMP JUMPDEST PUSH2 0x2A0B DUP6 DUP6 DUP4 DUP6 PUSH2 0x48BE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x11 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 SWAP1 SWAP3 ADD SLOAD SWAP3 MLOAD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5C05 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP5 PUSH2 0x2A50 SWAP5 SWAP3 SWAP4 SWAP3 SWAP2 PUSH2 0x5B2F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A6C DUP3 DUP5 PUSH2 0x5AD4 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A6C DUP3 DUP5 PUSH2 0x5A91 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A6C DUP3 DUP5 PUSH2 0x5A7D JUMP JUMPDEST PUSH1 0x18 DUP1 SLOAD PUSH1 0x1 DUP1 DUP3 ADD DUP4 SSTORE PUSH1 0x0 DUP4 DUP2 MSTORE PUSH32 0xB13D2D76D1F4B7BE834882E410B3E3A8AFAF69F83600AE24DB354391D2378D2E SWAP1 SWAP3 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND OR SWAP1 SSTORE SWAP2 SLOAD SWAP1 SWAP2 PUSH2 0x2AE6 SWAP2 SWAP1 PUSH2 0x2A60 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x11 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 ADD DUP1 SLOAD PUSH2 0x100 PUSH1 0x1 PUSH1 0x88 SHL SUB NOT AND PUSH2 0x100 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP6 AND MUL OR SWAP1 SSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x11 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 ADD SLOAD DUP2 SWAP1 PUSH2 0x2B4C SWAP1 PUSH2 0x499F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x11 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD DUP1 SLOAD SWAP1 DUP3 SWAP1 SSTORE PUSH1 0x12 SLOAD SWAP2 SWAP3 POP SWAP1 PUSH2 0x2B8A SWAP1 DUP4 SWAP1 PUSH2 0x2B84 SWAP1 DUP5 PUSH2 0x2A60 JUMP JUMPDEST SWAP1 PUSH2 0x3BF7 JUMP JUMPDEST PUSH1 0x12 DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0x6BAC5E0EB3C44EB03A60AB11EC3A2C051771616AECADBCFFF2630AABAE520382 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2BD5 DUP4 PUSH2 0x3ED8 JUMP JUMPDEST PUSH8 0x14D1120D7B160000 GT SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x2BEE PUSH2 0x55B1 JUMP JUMPDEST PUSH2 0x2BF6 PUSH2 0x55FD JUMP JUMPDEST PUSH2 0x2BFE PUSH2 0x55B1 JUMP JUMPDEST DUP5 DUP3 MSTORE PUSH1 0x0 PUSH1 0x80 DUP4 ADD MSTORE PUSH2 0x2C10 PUSH2 0x1B25 JUMP JUMPDEST PUSH1 0xA0 DUP4 ADD MSTORE PUSH2 0x2C1D PUSH2 0x1C32 JUMP JUMPDEST PUSH1 0xC0 DUP4 ADD MSTORE PUSH1 0x0 PUSH1 0x20 DUP4 ADD MSTORE JUMPDEST DUP4 MLOAD DUP3 PUSH1 0x20 ADD MLOAD LT ISZERO PUSH2 0x2E02 JUMPI DUP4 DUP3 PUSH1 0x20 ADD MLOAD DUP2 MLOAD DUP2 LT PUSH2 0x2C4D JUMPI PUSH2 0x2C4D PUSH2 0x5AA8 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x60 DUP5 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x11 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 ADD SLOAD PUSH1 0x1 SWAP1 PUSH1 0xFF AND PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x2C92 JUMPI PUSH2 0x2C92 PUSH2 0x57DD JUMP JUMPDEST SUB PUSH2 0x2DEA JUMPI PUSH2 0x2CA5 DUP3 PUSH1 0x60 ADD MLOAD DUP8 PUSH2 0x2643 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD MLOAD PUSH2 0x2D92 JUMPI PUSH8 0x14D1120D7B160000 DUP3 PUSH1 0x40 ADD MLOAD LT ISZERO DUP1 ISZERO PUSH2 0x2CCE JUMPI POP DUP2 MLOAD ISZERO JUMPDEST PUSH2 0x2DEA JUMPI PUSH1 0x0 PUSH2 0x2CE7 DUP4 PUSH1 0xC0 ADD MLOAD DUP5 PUSH1 0xA0 ADD MLOAD DUP10 PUSH2 0x47B7 JUMP JUMPDEST SWAP1 POP PUSH2 0x2D04 DUP10 DUP10 DUP6 PUSH1 0x60 ADD MLOAD DUP7 PUSH1 0x40 ADD MLOAD DUP8 PUSH1 0x0 ADD MLOAD DUP7 DUP14 PUSH2 0x49E0 JUMP JUMPDEST PUSH1 0x80 DUP2 ADD MLOAD DUP5 MLOAD SWAP2 SWAP4 POP PUSH2 0x2D18 SWAP2 SWAP1 PUSH2 0x2A60 JUMP JUMPDEST DUP4 MSTORE PUSH1 0x80 DUP3 ADD MLOAD PUSH1 0xA0 DUP5 ADD MLOAD PUSH2 0x2D2D SWAP2 PUSH2 0x2A60 JUMP JUMPDEST DUP4 PUSH1 0xA0 ADD DUP2 DUP2 MSTORE POP POP PUSH2 0x2D62 DUP3 PUSH2 0x100 ADD MLOAD PUSH2 0x1049 DUP5 PUSH1 0x40 ADD MLOAD PUSH2 0x1049 DUP7 PUSH1 0xA0 ADD MLOAD DUP9 PUSH1 0xC0 ADD MLOAD PUSH2 0x2A60 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0xC0 DUP5 ADD MSTORE PUSH2 0x2D71 DUP5 DUP4 PUSH2 0x4CD3 JUMP JUMPDEST SWAP4 POP PUSH2 0x2D86 DUP4 PUSH1 0xC0 ADD MLOAD DUP5 PUSH1 0xA0 ADD MLOAD DUP10 PUSH2 0x4DB4 JUMP JUMPDEST ISZERO PUSH1 0x80 DUP5 ADD MSTORE POP PUSH2 0x2DEA JUMP JUMPDEST DUP2 PUSH1 0x80 ADD MLOAD DUP1 ISZERO PUSH2 0x2DAE JUMPI POP PUSH8 0x14D1120D7B160000 DUP3 PUSH1 0x40 ADD MLOAD LT JUMPDEST ISZERO PUSH2 0x2DEA JUMPI PUSH2 0x2DC7 DUP9 DUP9 DUP5 PUSH1 0x60 ADD MLOAD DUP6 PUSH1 0x0 ADD MLOAD PUSH2 0x4DD5 JUMP JUMPDEST PUSH1 0x80 DUP2 ADD MLOAD DUP4 MLOAD SWAP2 SWAP3 POP PUSH2 0x2DDB SWAP2 SWAP1 PUSH2 0x2A60 JUMP JUMPDEST DUP3 MSTORE PUSH2 0x2DE7 DUP4 DUP3 PUSH2 0x4CD3 JUMP JUMPDEST SWAP3 POP JUMPDEST PUSH1 0x20 DUP3 ADD DUP1 MLOAD SWAP1 PUSH2 0x2DFA DUP3 PUSH2 0x5B51 JUMP JUMPDEST SWAP1 MSTORE POP PUSH2 0x2C2A JUMP JUMPDEST POP POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x2E15 PUSH2 0x55B1 JUMP JUMPDEST PUSH2 0x2E1D PUSH2 0x55FD JUMP JUMPDEST PUSH2 0x2E25 PUSH2 0x55B1 JUMP JUMPDEST DUP5 DUP3 MSTORE PUSH1 0x0 PUSH1 0x20 DUP4 ADD MSTORE JUMPDEST DUP4 MLOAD DUP3 PUSH1 0x20 ADD MLOAD LT ISZERO PUSH2 0x2E02 JUMPI DUP4 DUP3 PUSH1 0x20 ADD MLOAD DUP2 MLOAD DUP2 LT PUSH2 0x2E53 JUMPI PUSH2 0x2E53 PUSH2 0x5AA8 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x60 DUP4 ADD DUP2 SWAP1 MSTORE PUSH2 0x2E78 SWAP1 DUP8 PUSH2 0x2643 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD DUP2 SWAP1 MSTORE PUSH8 0x14D1120D7B160000 GT ISZERO PUSH2 0x2EC5 JUMPI PUSH2 0x2EA2 DUP9 DUP9 DUP5 PUSH1 0x60 ADD MLOAD DUP6 PUSH1 0x0 ADD MLOAD PUSH2 0x4DD5 JUMP JUMPDEST PUSH1 0x80 DUP2 ADD MLOAD DUP4 MLOAD SWAP2 SWAP3 POP PUSH2 0x2EB6 SWAP2 SWAP1 PUSH2 0x2A60 JUMP JUMPDEST DUP3 MSTORE PUSH2 0x2EC2 DUP4 DUP3 PUSH2 0x4CD3 JUMP JUMPDEST SWAP3 POP JUMPDEST PUSH1 0x20 DUP3 ADD DUP1 MLOAD SWAP1 PUSH2 0x2ED5 DUP3 PUSH2 0x5B51 JUMP JUMPDEST SWAP1 MSTORE POP PUSH2 0x2E30 JUMP JUMPDEST DUP2 ISZERO PUSH2 0x3162 JUMPI PUSH1 0x19 SLOAD PUSH1 0x0 SWAP1 PUSH2 0x2EFF SWAP1 PUSH2 0x2B84 DUP5 PUSH8 0xDE0B6B3A7640000 PUSH2 0x2A73 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2F24 PUSH1 0x1A SLOAD PUSH2 0x2B84 PUSH8 0xDE0B6B3A7640000 DUP8 PUSH2 0x2A73 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2F3D PUSH1 0x12 SLOAD DUP5 PUSH2 0x2A7F SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2F56 PUSH1 0x12 SLOAD DUP5 PUSH2 0x2A7F SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH2 0x2F77 PUSH2 0x2F70 PUSH1 0x12 SLOAD DUP5 PUSH2 0x2A73 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP6 SWAP1 PUSH2 0x2A60 JUMP JUMPDEST PUSH1 0x19 SSTORE PUSH1 0x12 SLOAD PUSH2 0x2F93 SWAP1 PUSH2 0x2F8C SWAP1 DUP4 SWAP1 PUSH2 0x2A73 JUMP JUMPDEST DUP5 SWAP1 PUSH2 0x2A60 JUMP JUMPDEST PUSH1 0x1A SSTORE PUSH1 0x15 SLOAD PUSH2 0x2FA3 SWAP1 DUP4 PUSH2 0x3BF7 JUMP JUMPDEST PUSH1 0x15 SSTORE PUSH1 0x16 SLOAD PUSH2 0x2FB3 SWAP1 DUP3 PUSH2 0x3BF7 JUMP JUMPDEST PUSH1 0x16 DUP2 SWAP1 SSTORE PUSH1 0x15 SLOAD PUSH1 0x40 MLOAD PUSH32 0x9F8BC8AB0DAF5BCEEF75ECFD2085D1FCC6548C657EA970D9A23A60610D0737E3 SWAP3 PUSH2 0x2FF1 SWAP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x40 MLOAD PUSH4 0x3B4009FF PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND SWAP1 PUSH4 0x768013FE SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x303B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x304F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH4 0x262B8901 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP10 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND SWAP3 POP PUSH4 0x262B8901 SWAP2 POP PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3095 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x30A9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH3 0xF9332D PUSH1 0xE6 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND SWAP3 POP PUSH4 0x3E4CCB40 SWAP2 POP PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x30EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3102 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH4 0xA51BA3B7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 AND SWAP3 POP PUSH4 0xA51BA3B7 SWAP2 POP PUSH2 0x3134 SWAP1 DUP11 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x5A38 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x314E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1AED JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x12 SLOAD PUSH1 0x13 DUP2 SWAP1 SSTORE POP PUSH1 0x0 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA2F03983 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x31B1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x31D5 SWAP2 SWAP1 PUSH2 0x59DD JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA2F03983 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x322C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3250 SWAP2 SWAP1 PUSH2 0x59DD JUMP JUMPDEST SWAP1 POP PUSH2 0x3260 DUP2 PUSH2 0x2B84 DUP5 DUP7 PUSH2 0x2A60 JUMP JUMPDEST PUSH1 0x14 DUP2 SWAP1 SSTORE PUSH1 0x13 SLOAD PUSH1 0x40 MLOAD PUSH32 0x51BF4C63EC3CBA9D03D43238ABBDD979DD91BD16D9895C74CEEA9118C7BAAF60 SWAP3 PUSH2 0x329E SWAP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP JUMP JUMPDEST DUP2 ISZERO PUSH2 0x3323 JUMPI PUSH1 0x8 SLOAD PUSH1 0x6 SLOAD PUSH1 0x40 MLOAD PUSH4 0x1062C15F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE DUP6 DUP3 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP6 SWAP1 MSTORE SWAP2 AND SWAP1 PUSH4 0x20C582BE SWAP1 PUSH1 0x64 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x330A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x331E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST DUP1 ISZERO PUSH2 0x3162 JUMPI PUSH1 0x40 MLOAD PUSH4 0xA51BA3B7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0xA51BA3B7 SWAP1 PUSH2 0x3357 SWAP1 DUP7 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x5A38 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3371 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3385 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH4 0x3B9ACA00 DUP3 PUSH2 0x33A3 DUP3 DUP8 PUSH2 0x5A91 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x33B1 DUP4 DUP9 PUSH2 0x5A91 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH2 0x33C0 DUP4 PUSH2 0x2EE PUSH2 0x5A91 JUMP JUMPDEST DUP2 GT PUSH2 0x348B JUMPI PUSH1 0x0 PUSH2 0x33D3 DUP11 DUP11 DUP5 PUSH2 0x47B7 JUMP JUMPDEST SWAP1 POP DUP7 DUP2 LT ISZERO PUSH2 0x342F JUMPI DUP3 JUMPDEST DUP3 DUP2 GT ISZERO DUP1 ISZERO PUSH2 0x33F8 JUMPI POP PUSH2 0x33F4 DUP6 DUP11 PUSH2 0x5A91 JUMP JUMPDEST DUP2 LT ISZERO JUMPDEST ISZERO PUSH2 0x342D JUMPI DUP8 PUSH2 0x3409 DUP13 DUP13 DUP5 PUSH2 0x47B7 JUMP JUMPDEST LT ISZERO PUSH2 0x341C JUMPI SWAP6 POP PUSH2 0x1130 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x3426 DUP6 DUP3 PUSH2 0x5AD4 JUMP JUMPDEST SWAP1 POP PUSH2 0x33DF JUMP JUMPDEST POP JUMPDEST PUSH2 0x3441 PUSH8 0x2C68AF0BB140000 DUP9 PUSH2 0x5AD4 JUMP JUMPDEST DUP2 LT ISZERO PUSH2 0x345A JUMPI PUSH2 0x3453 DUP5 PUSH1 0x14 PUSH2 0x5A91 JUMP JUMPDEST SWAP5 POP PUSH2 0x3476 JUMP JUMPDEST PUSH2 0x346B DUP8 PUSH7 0xB1A2BC2EC50000 PUSH2 0x5B6A JUMP JUMPDEST DUP2 GT ISZERO PUSH2 0x3476 JUMPI DUP4 SWAP5 POP JUMPDEST POP SWAP1 POP DUP1 PUSH2 0x3484 DUP5 DUP3 PUSH2 0x5B6A JUMP JUMPDEST SWAP1 POP PUSH2 0x33B4 JUMP JUMPDEST POP PUSH1 0x0 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x11 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 ADD SLOAD PUSH1 0xFF AND PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x34CC JUMPI PUSH2 0x34CC PUSH2 0x57DD JUMP JUMPDEST EQ PUSH2 0xB77 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54726F76654D616E616765723A2054726F766520646F6573206E6F7420657869 PUSH1 0x44 DUP3 ADD MSTORE PUSH15 0x1CDD081BDC881A5CC818DB1BDCD959 PUSH1 0x8A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xD29 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A6C PUSH8 0xDE0B6B3A7640000 PUSH2 0xC26 DUP6 DUP6 PUSH2 0x2A73 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A6C PUSH2 0x35F3 PUSH2 0x35D0 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA2F03983 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x35A5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x35C9 SWAP2 SWAP1 PUSH2 0x59DD JUMP JUMPDEST DUP6 SWAP1 PUSH2 0x2A7F JUMP JUMPDEST PUSH2 0x2B84 DUP7 PUSH2 0x35E8 PUSH2 0x3E8 PUSH8 0xDE0B6B3A7640000 PUSH2 0x5A7D JUMP JUMPDEST PUSH2 0x2B84 SWAP1 PUSH1 0x5 PUSH2 0x5A91 JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 PUSH2 0x4F16 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x360C PUSH2 0x4F2C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x3622 PUSH8 0xDC14847BCC53B20 DUP4 PUSH2 0x4F48 JUMP JUMPDEST SWAP1 POP PUSH2 0x1C1A PUSH8 0xDE0B6B3A7640000 PUSH2 0xC26 DUP4 PUSH1 0xE SLOAD PUSH2 0x2A73 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 PUSH2 0x365C PUSH1 0x10 SLOAD TIMESTAMP PUSH2 0x2A60 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x3C DUP2 LT PUSH2 0xB77 JUMPI TIMESTAMP PUSH1 0x10 DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0x4AC50C32A269C2CFEA9CF04E466DA1AB839008441FADF7108E4F05410C2BFD5F SWAP1 PUSH1 0x20 ADD PUSH2 0x1E59 JUMP JUMPDEST PUSH2 0x36A4 PUSH2 0x55B1 JUMP JUMPDEST PUSH2 0x36AC PUSH2 0x55FD JUMP JUMPDEST PUSH2 0x36B4 PUSH2 0x55B1 JUMP JUMPDEST DUP5 DUP3 MSTORE PUSH1 0x0 PUSH1 0x80 DUP4 ADD MSTORE PUSH2 0x36C6 PUSH2 0x1B25 JUMP JUMPDEST PUSH1 0xA0 DUP4 ADD MSTORE PUSH2 0x36D3 PUSH2 0x1C32 JUMP JUMPDEST DUP3 PUSH1 0xC0 ADD DUP2 DUP2 MSTORE POP POP DUP7 PUSH1 0x80 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x4D622831 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x371E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3742 SWAP2 SWAP1 PUSH2 0x5AE7 JUMP JUMPDEST DUP3 PUSH1 0x60 ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP PUSH1 0x0 DUP8 PUSH1 0x80 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1E223143 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x37A3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x37C7 SWAP2 SWAP1 PUSH2 0x5AE7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP6 ADD MSTORE SWAP1 POP JUMPDEST DUP5 DUP4 PUSH1 0x20 ADD MLOAD LT DUP1 ISZERO PUSH2 0x37FA JUMPI POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x3A0F JUMPI PUSH1 0x80 DUP9 ADD MLOAD PUSH1 0x60 DUP5 ADD MLOAD PUSH1 0x40 MLOAD PUSH4 0x2DC9C0EB PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x0 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0xB72703AC SWAP2 PUSH2 0x3836 SWAP2 SWAP1 PUSH1 0x4 ADD PUSH2 0x5645 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3853 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3877 SWAP2 SWAP1 PUSH2 0x5AE7 JUMP JUMPDEST SWAP1 POP PUSH2 0x3887 DUP5 PUSH1 0x60 ADD MLOAD DUP10 PUSH2 0x2643 JUMP JUMPDEST PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x80 DUP5 ADD MLOAD PUSH2 0x397F JUMPI PUSH8 0x14D1120D7B160000 DUP5 PUSH1 0x40 ADD MLOAD LT ISZERO DUP1 ISZERO PUSH2 0x38B0 JUMPI POP DUP4 MLOAD ISZERO JUMPDEST ISZERO PUSH2 0x38BB JUMPI POP PUSH2 0x3A0F JUMP JUMPDEST PUSH1 0x0 PUSH2 0x38D0 DUP6 PUSH1 0xC0 ADD MLOAD DUP7 PUSH1 0xA0 ADD MLOAD DUP12 PUSH2 0x47B7 JUMP JUMPDEST DUP11 MLOAD PUSH1 0x20 DUP13 ADD MLOAD PUSH1 0x60 DUP9 ADD MLOAD PUSH1 0x40 DUP10 ADD MLOAD DUP10 MLOAD SWAP5 SWAP6 POP PUSH2 0x38F1 SWAP5 DUP7 DUP16 PUSH2 0x49E0 JUMP JUMPDEST PUSH1 0x80 DUP2 ADD MLOAD DUP7 MLOAD SWAP2 SWAP6 POP PUSH2 0x3905 SWAP2 SWAP1 PUSH2 0x2A60 JUMP JUMPDEST DUP6 MSTORE PUSH1 0x80 DUP5 ADD MLOAD PUSH1 0xA0 DUP7 ADD MLOAD PUSH2 0x391A SWAP2 PUSH2 0x2A60 JUMP JUMPDEST DUP6 PUSH1 0xA0 ADD DUP2 DUP2 MSTORE POP POP PUSH2 0x394F DUP5 PUSH2 0x100 ADD MLOAD PUSH2 0x1049 DUP7 PUSH1 0x40 ADD MLOAD PUSH2 0x1049 DUP9 PUSH1 0xA0 ADD MLOAD DUP11 PUSH1 0xC0 ADD MLOAD PUSH2 0x2A60 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0xC0 DUP7 ADD MSTORE PUSH2 0x395E DUP7 DUP6 PUSH2 0x4CD3 JUMP JUMPDEST SWAP6 POP PUSH2 0x3973 DUP6 PUSH1 0xC0 ADD MLOAD DUP7 PUSH1 0xA0 ADD MLOAD DUP12 PUSH2 0x4DB4 JUMP JUMPDEST ISZERO PUSH1 0x80 DUP7 ADD MSTORE POP PUSH2 0x39E9 JUMP JUMPDEST DUP4 PUSH1 0x80 ADD MLOAD DUP1 ISZERO PUSH2 0x399B JUMPI POP PUSH8 0x14D1120D7B160000 DUP5 PUSH1 0x40 ADD MLOAD LT JUMPDEST ISZERO PUSH2 0x39E3 JUMPI PUSH2 0x39BC DUP10 PUSH1 0x0 ADD MLOAD DUP11 PUSH1 0x20 ADD MLOAD DUP7 PUSH1 0x60 ADD MLOAD DUP8 PUSH1 0x0 ADD MLOAD PUSH2 0x4DD5 JUMP JUMPDEST PUSH1 0x80 DUP2 ADD MLOAD DUP6 MLOAD SWAP2 SWAP5 POP PUSH2 0x39D0 SWAP2 SWAP1 PUSH2 0x2A60 JUMP JUMPDEST DUP5 MSTORE PUSH2 0x39DC DUP6 DUP5 PUSH2 0x4CD3 JUMP JUMPDEST SWAP5 POP PUSH2 0x39E9 JUMP JUMPDEST POP PUSH2 0x3A0F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x20 DUP4 ADD DUP1 MLOAD SWAP1 PUSH2 0x3A07 DUP3 PUSH2 0x5B51 JUMP JUMPDEST SWAP1 MSTORE POP PUSH2 0x37D1 JUMP JUMPDEST POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x3A22 PUSH2 0x55B1 JUMP JUMPDEST PUSH2 0x3A2A PUSH2 0x55FD JUMP JUMPDEST PUSH2 0x3A32 PUSH2 0x55B1 JUMP JUMPDEST PUSH1 0xC SLOAD DUP6 DUP4 MSTORE PUSH1 0x0 PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND JUMPDEST DUP5 DUP4 PUSH1 0x20 ADD MLOAD LT ISZERO PUSH2 0x3B3F JUMPI DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x4D622831 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3A93 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3AB7 SWAP2 SWAP1 PUSH2 0x5AE7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x60 DUP5 ADD DUP2 SWAP1 MSTORE PUSH2 0x3AD1 SWAP1 DUP9 PUSH2 0x2643 JUMP JUMPDEST PUSH1 0x40 DUP5 ADD DUP2 SWAP1 MSTORE PUSH8 0x14D1120D7B160000 GT ISZERO PUSH2 0x3B22 JUMPI PUSH2 0x3AFB DUP10 DUP10 DUP6 PUSH1 0x60 ADD MLOAD DUP7 PUSH1 0x0 ADD MLOAD PUSH2 0x4DD5 JUMP JUMPDEST PUSH1 0x80 DUP2 ADD MLOAD DUP5 MLOAD SWAP2 SWAP4 POP PUSH2 0x3B0F SWAP2 SWAP1 PUSH2 0x2A60 JUMP JUMPDEST DUP4 MSTORE PUSH2 0x3B1B DUP5 DUP4 PUSH2 0x4CD3 JUMP JUMPDEST SWAP4 POP PUSH2 0x3B27 JUMP JUMPDEST PUSH2 0x3B3F JUMP JUMPDEST PUSH1 0x20 DUP4 ADD DUP1 MLOAD SWAP1 PUSH2 0x3B37 DUP3 PUSH2 0x5B51 JUMP JUMPDEST SWAP1 MSTORE POP PUSH2 0x3A49 JUMP JUMPDEST POP POP POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1653 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xD29 JUMP JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A6C DUP3 DUP5 PUSH2 0x5B6A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x3C59 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4163636F756E742063616E6E6F74206265207A65726F20616464726573730000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xD29 JUMP JUMPDEST DUP1 EXTCODESIZE DUP1 PUSH2 0x11A0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4163636F756E7420636F64652073697A652063616E6E6F74206265207A65726F PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xD29 JUMP JUMPDEST PUSH1 0x15 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x17 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SWAP2 DUP3 SSTORE PUSH1 0x16 SLOAD PUSH1 0x1 SWAP1 SWAP3 ADD DUP3 SWAP1 SSTORE SWAP2 SLOAD SWAP2 MLOAD PUSH32 0xC437F324D85E369394148DD9D62F98F534B382E01ED3DD2EB98138FB6D3AB49A SWAP3 PUSH2 0x1E59 SWAP3 SWAP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3D17 PUSH2 0x4FEC JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x3D2D PUSH8 0xDDD4B8C6C7D70D8 DUP4 PUSH2 0x4F48 JUMP JUMPDEST SWAP1 POP PUSH2 0x1C1A PUSH8 0xDE0B6B3A7640000 PUSH2 0xC26 DUP4 PUSH1 0xD SLOAD PUSH2 0x2A73 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x8 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x18160DDD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3DA6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3DCA SWAP2 SWAP1 PUSH2 0x59DD JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x0 SUB PUSH2 0x3DFB JUMPI PUSH2 0x3DE8 PUSH2 0x3E8 PUSH8 0xDE0B6B3A7640000 PUSH2 0x5A7D JUMP JUMPDEST PUSH2 0x3DF3 SWAP1 PUSH1 0x5 PUSH2 0x5A91 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xC82 JUMP JUMPDEST PUSH2 0x1130 PUSH2 0x35F3 PUSH2 0x3E17 DUP4 PUSH2 0xC26 DUP8 PUSH8 0xDE0B6B3A7640000 PUSH2 0x2A73 JUMP JUMPDEST PUSH2 0x2B84 DUP8 PUSH2 0x35E8 PUSH2 0x3E8 PUSH8 0xDE0B6B3A7640000 PUSH2 0x5A7D JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x3E3D DUP5 PUSH2 0x1D0A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x3E4A DUP6 PUSH2 0xB7A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x11 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP2 SWAP3 POP SWAP1 PUSH2 0x3E74 SWAP1 DUP5 PUSH2 0x3BF7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x11 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP2 SWAP3 POP SWAP1 PUSH2 0x3E9B SWAP1 DUP5 PUSH2 0x3BF7 JUMP JUMPDEST SWAP2 SWAP8 SWAP2 SWAP7 POP SWAP1 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO PUSH2 0x3ECF JUMPI PUSH2 0x3EC8 DUP3 PUSH2 0xC26 DUP6 PUSH9 0x56BC75E2D63100000 PUSH2 0x2A73 JUMP JUMPDEST SWAP1 POP PUSH2 0xC82 JUMP JUMPDEST POP PUSH1 0x0 NOT PUSH2 0xC82 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3EE3 PUSH2 0x1C32 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x3EEF PUSH2 0x1B25 JUMP JUMPDEST SWAP1 POP PUSH2 0x1130 DUP3 DUP3 DUP7 PUSH2 0x47B7 JUMP JUMPDEST PUSH2 0x3F10 PUSH2 0x3E8 PUSH8 0xDE0B6B3A7640000 PUSH2 0x5A7D JUMP JUMPDEST PUSH2 0x3F1B SWAP1 PUSH1 0x5 PUSH2 0x5A91 JUMP JUMPDEST DUP2 LT ISZERO DUP1 ISZERO PUSH2 0x3F32 JUMPI POP PUSH8 0xDE0B6B3A7640000 DUP2 GT ISZERO JUMPDEST PUSH2 0xB77 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x30 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4D6178206665652070657263656E74616765206D757374206265206265747765 PUSH1 0x44 DUP3 ADD MSTORE PUSH16 0x656E20302E352520616E642031303025 PUSH1 0x80 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xD29 JUMP JUMPDEST PUSH8 0x14D1120D7B160000 PUSH2 0x3FA9 DUP3 PUSH2 0x3ED8 JUMP JUMPDEST LT ISZERO PUSH2 0xB77 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54726F76654D616E616765723A2043616E6E6F742072656465656D207768656E PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x102A21A9101E1026A1A9 PUSH1 0xB1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xD29 JUMP JUMPDEST PUSH1 0x0 DUP2 GT PUSH2 0xB77 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54726F76654D616E616765723A20416D6F756E74206D75737420626520677265 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x61746572207468616E207A65726F PUSH1 0x90 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xD29 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0x409F SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x5645 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x40BC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x40E0 SWAP2 SWAP1 PUSH2 0x59DD JUMP JUMPDEST LT ISZERO PUSH2 0x2A5B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x54 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54726F76654D616E616765723A2052657175657374656420726564656D707469 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F6E20616D6F756E74206D757374206265203C3D207573657227732042617365 PUSH1 0x64 DUP3 ADD MSTORE PUSH20 0x4665654C4D4120746F6B656E2062616C616E6365 PUSH1 0x60 SHL PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xA4 ADD PUSH2 0xD29 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO DUP1 PUSH2 0x41F3 JUMPI POP PUSH1 0x40 MLOAD PUSH4 0xBB7C8FD PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x5DBE47E8 SWAP1 PUSH2 0x41B0 SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x5645 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x41CD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x41F1 SWAP2 SWAP1 PUSH2 0x5B7D JUMP JUMPDEST ISZERO JUMPDEST DUP1 PUSH2 0x420E JUMPI POP PUSH8 0x14D1120D7B160000 PUSH2 0x420C DUP5 DUP5 PUSH2 0x2643 JUMP JUMPDEST LT JUMPDEST ISZERO PUSH2 0x421B JUMPI POP PUSH1 0x0 PUSH2 0x2A6C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x765E0159 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP1 PUSH4 0x765E0159 SWAP1 PUSH2 0x424A SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x5645 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4267 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x428B SWAP2 SWAP1 PUSH2 0x5AE7 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO DUP1 PUSH2 0x1E95 JUMPI POP PUSH8 0x14D1120D7B160000 PUSH2 0x42B1 DUP3 DUP6 PUSH2 0x2643 JUMP JUMPDEST LT SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x42E1 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x11 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x4305 SWAP1 DUP8 SWAP1 PUSH2 0x4F16 JUMP JUMPDEST DUP1 DUP3 MSTORE PUSH2 0x4312 SWAP1 DUP7 PUSH2 0x2A73 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x11 SWAP1 SWAP3 MSTORE PUSH1 0x40 DUP3 KECCAK256 SLOAD PUSH2 0x433F SWAP2 PUSH2 0x2A60 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP5 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x11 SWAP1 SWAP3 MSTORE PUSH1 0x40 DUP3 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP3 SWAP4 POP SWAP1 SWAP2 PUSH2 0x436F SWAP2 PUSH2 0x2A60 JUMP JUMPDEST SWAP1 POP PUSH2 0xC350 DUP3 SUB PUSH2 0x43D9 JUMPI PUSH2 0x4383 DUP10 PUSH2 0x4874 JUMP JUMPDEST PUSH2 0x438E DUP10 PUSH1 0x4 PUSH2 0x468A JUMP JUMPDEST PUSH2 0x439C DUP11 DUP11 PUSH2 0xC350 DUP5 PUSH2 0x5008 JUMP JUMPDEST DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5C05 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x3 PUSH1 0x40 MLOAD PUSH2 0x43CC SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x5B2F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH2 0x44F7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x43E5 DUP3 DUP5 PUSH2 0x3EA9 JUMP JUMPDEST SWAP1 POP DUP5 DUP2 EQ ISZERO DUP1 PUSH2 0x43F6 JUMPI POP PUSH1 0x1 DUP4 LT JUMPDEST ISZERO PUSH2 0x440A JUMPI POP POP PUSH1 0x1 PUSH1 0x40 DUP4 ADD MSTORE POP PUSH2 0x44FA JUMP JUMPDEST PUSH1 0x80 DUP12 ADD MLOAD PUSH1 0x40 MLOAD PUSH4 0x15F1093 PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP13 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP5 SWAP1 MSTORE DUP10 DUP2 AND PUSH1 0x44 DUP4 ADD MSTORE DUP9 DUP2 AND PUSH1 0x64 DUP4 ADD MSTORE SWAP1 SWAP2 AND SWAP1 PUSH4 0x2BE21260 SWAP1 PUSH1 0x84 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x446A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x447E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x11 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP5 DUP2 SSTORE PUSH1 0x1 ADD DUP4 SWAP1 SSTORE POP PUSH2 0x44AC DUP11 PUSH2 0x2B25 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x11 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD SWAP1 MLOAD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5C05 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 PUSH2 0x44ED SWAP2 DUP8 SWAP2 DUP8 SWAP2 PUSH1 0x3 SWAP1 PUSH2 0x5B2F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP JUMPDEST POP POP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x4510 PUSH2 0x3D0C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x459E PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA2F03983 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4568 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x458C SWAP2 SWAP1 PUSH2 0x59DD JUMP JUMPDEST PUSH2 0xC26 DUP9 PUSH8 0xDE0B6B3A7640000 PUSH2 0x2A73 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x45AC DUP4 DUP4 PUSH2 0x3BF7 JUMP JUMPDEST SWAP1 POP PUSH2 0x45C0 DUP2 PUSH8 0xDE0B6B3A7640000 PUSH2 0x4F16 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT PUSH2 0x45D2 JUMPI PUSH2 0x45D2 PUSH2 0x5ABE JUMP JUMPDEST PUSH1 0xD DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH32 0xBCD47F9685F1FFA254D0AC495B2E47D57FEDA8840E9D1F2A54D9D499650502A8 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH2 0xC2C PUSH2 0x5167 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC82 PUSH2 0x26A0 DUP4 PUSH2 0x11DB JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4638 DUP4 PUSH2 0xC26 DUP7 PUSH8 0xDE0B6B3A7640000 PUSH2 0x2A73 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x3162 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4665652065786365656465642070726F7669646564206D6178696D756D000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xD29 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x469E JUMPI PUSH2 0x469E PUSH2 0x57DD JUMP JUMPDEST EQ ISZERO DUP1 ISZERO PUSH2 0x46BE JUMPI POP PUSH1 0x1 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x46BB JUMPI PUSH2 0x46BB PUSH2 0x57DD JUMP JUMPDEST EQ ISZERO JUMPDEST PUSH2 0x46CA JUMPI PUSH2 0x46CA PUSH2 0x5ABE JUMP JUMPDEST PUSH1 0x18 SLOAD PUSH2 0x46D6 DUP2 PUSH2 0x51BE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x11 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 ADD DUP1 SLOAD DUP4 SWAP2 SWAP1 PUSH1 0xFF NOT AND PUSH1 0x1 DUP4 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x470E JUMPI PUSH2 0x470E PUSH2 0x57DD JUMP JUMPDEST MUL OR SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x11 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 DUP1 DUP3 ADD DUP6 SWAP1 SSTORE SWAP1 DUP5 SWAP1 SSTORE PUSH1 0x17 SWAP1 SWAP3 MSTORE DUP3 KECCAK256 DUP3 DUP2 SSTORE ADD SSTORE PUSH2 0x4750 DUP4 DUP3 PUSH2 0x5298 JUMP JUMPDEST PUSH1 0xC SLOAD PUSH1 0x40 MLOAD PUSH4 0x14849687 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x29092D0E SWAP1 PUSH2 0x4780 SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x5645 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x479A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x47AE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 ISZERO PUSH2 0x47E2 JUMPI PUSH1 0x0 PUSH2 0x47D9 DUP4 PUSH2 0xC26 DUP7 DUP2 DUP10 PUSH8 0xDE0B6B3A7640000 PUSH2 0x2A73 JUMP JUMPDEST SWAP2 POP PUSH2 0x2A6C SWAP1 POP JUMP JUMPDEST POP PUSH1 0x0 NOT PUSH2 0x2A6C JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x4804 PUSH8 0xDE0B6B3A7640000 PUSH2 0xC26 DUP7 DUP7 PUSH2 0x2A73 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 LT PUSH2 0x2A6C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x36 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54726F76654D616E616765723A2046656520776F756C64206561742075702061 PUSH1 0x44 DUP3 ADD MSTORE PUSH22 0x1B1B081C995D1D5C9B99590818DBDB1B185D195C985B PUSH1 0x52 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xD29 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x11 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0x12 SLOAD PUSH2 0x489D SWAP1 DUP3 PUSH2 0x2A60 JUMP JUMPDEST PUSH1 0x12 SSTORE POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x11 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x2 ADD SSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x3B4009FF PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x768013FE SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4900 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x4914 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH4 0x262B8901 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP3 POP PUSH4 0x262B8901 SWAP2 POP PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x495A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x496E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH4 0x31534DE1 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP3 POP PUSH4 0x31534DE1 SWAP2 POP PUSH1 0x24 ADD PUSH2 0x3357 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x14 SLOAD PUSH1 0x0 SUB PUSH2 0x49B3 JUMPI POP DUP2 PUSH2 0xC82 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x13 SLOAD GT PUSH2 0x49C5 JUMPI PUSH2 0x49C5 PUSH2 0x5ABE JUMP JUMPDEST PUSH2 0x2A6C PUSH1 0x14 SLOAD PUSH2 0xC26 PUSH1 0x13 SLOAD DUP7 PUSH2 0x2A73 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x49E8 PUSH2 0x55B1 JUMP JUMPDEST PUSH2 0x4A0C PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x18 SLOAD PUSH1 0x1 LT PUSH2 0x4A1C JUMPI POP PUSH2 0x44FA JUMP JUMPDEST PUSH2 0x4A25 DUP8 PUSH2 0x1EB7 JUMP JUMPDEST PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x20 DUP5 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP5 ADD DUP2 SWAP1 MSTORE SWAP1 DUP4 MSTORE PUSH2 0x4A44 SWAP1 PUSH2 0x5468 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD DUP2 SWAP1 MSTORE PUSH2 0xC350 PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x4A61 SWAP2 PUSH2 0x2A60 JUMP JUMPDEST DUP2 MSTORE PUSH8 0xDE0B6B3A7640000 DUP7 GT PUSH2 0x4B2C JUMPI PUSH2 0x4A86 DUP10 DUP10 DUP4 PUSH1 0x20 ADD MLOAD DUP5 PUSH1 0x40 ADD MLOAD PUSH2 0x48BE JUMP JUMPDEST PUSH2 0x4A8F DUP8 PUSH2 0x4874 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP4 ADD DUP2 SWAP1 MSTORE PUSH1 0xA0 DUP4 ADD MSTORE DUP2 MLOAD PUSH1 0xC0 DUP4 ADD MSTORE DUP1 MLOAD PUSH1 0xE0 DUP4 ADD MSTORE PUSH2 0x4AB6 DUP8 PUSH1 0x3 PUSH2 0x468A JUMP JUMPDEST DUP2 MLOAD PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND SWAP3 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5BE5 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP3 PUSH2 0x4AE7 SWAP3 PUSH1 0x2 SWAP1 PUSH2 0x5B9F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5C05 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x2 PUSH1 0x40 MLOAD PUSH2 0x4B1F SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x5B2F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH2 0x4CC7 JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 DUP7 GT DUP1 ISZERO PUSH2 0x4B4A JUMPI POP PUSH8 0x14D1120D7B160000 DUP7 LT JUMPDEST ISZERO PUSH2 0x4B9A JUMPI PUSH2 0x4B63 DUP10 DUP10 DUP4 PUSH1 0x20 ADD MLOAD DUP5 PUSH1 0x40 ADD MLOAD PUSH2 0x48BE JUMP JUMPDEST PUSH2 0x4B6C DUP8 PUSH2 0x4874 JUMP JUMPDEST DUP2 MLOAD DUP2 MLOAD PUSH2 0x4B7B SWAP2 SWAP1 DUP8 PUSH2 0x5475 JUMP JUMPDEST PUSH1 0xE0 DUP7 ADD MSTORE PUSH1 0xC0 DUP6 ADD MSTORE PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH2 0x4AB6 DUP8 PUSH1 0x3 PUSH2 0x468A JUMP JUMPDEST PUSH8 0x14D1120D7B160000 DUP7 LT ISZERO DUP1 ISZERO PUSH2 0x4BB1 JUMPI POP DUP4 DUP7 LT JUMPDEST DUP1 ISZERO PUSH2 0x4BBE JUMPI POP DUP2 MLOAD DUP6 LT ISZERO JUMPDEST ISZERO PUSH2 0x4CB6 JUMPI PUSH2 0x4BD7 DUP10 DUP10 DUP4 PUSH1 0x20 ADD MLOAD DUP5 PUSH1 0x40 ADD MLOAD PUSH2 0x48BE JUMP JUMPDEST DUP5 PUSH1 0x0 SUB PUSH2 0x4BE7 JUMPI PUSH2 0x4BE7 PUSH2 0x5ABE JUMP JUMPDEST PUSH2 0x4BF0 DUP8 PUSH2 0x4874 JUMP JUMPDEST PUSH2 0x4C03 DUP3 PUSH1 0x0 ADD MLOAD DUP4 PUSH1 0x20 ADD MLOAD DUP6 PUSH2 0x54CF JUMP JUMPDEST SWAP2 POP PUSH2 0x4C10 DUP8 PUSH1 0x3 PUSH2 0x468A JUMP JUMPDEST PUSH2 0x100 DUP3 ADD MLOAD ISZERO PUSH2 0x4C85 JUMPI PUSH1 0x7 SLOAD PUSH2 0x100 DUP4 ADD MLOAD PUSH1 0x40 MLOAD PUSH4 0x3F10ABAB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 PUSH4 0x3F10ABAB SWAP2 PUSH2 0x4C52 SWAP2 DUP12 SWAP2 SWAP1 PUSH1 0x4 ADD PUSH2 0x5A38 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4C6C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x4C80 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST DUP2 MLOAD PUSH1 0xA0 DUP4 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND SWAP3 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5BE5 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP3 PUSH2 0x4AE7 SWAP3 PUSH1 0x2 SWAP1 PUSH2 0x5B9F JUMP JUMPDEST PUSH2 0x4CBE PUSH2 0x55B1 JUMP JUMPDEST SWAP2 POP PUSH2 0x44FA SWAP1 POP JUMP JUMPDEST POP SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x4CDB PUSH2 0x55B1 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP4 ADD MLOAD SWAP1 DUP5 ADD MLOAD PUSH2 0x4CEE SWAP2 PUSH2 0x3BF7 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP1 DUP4 ADD MLOAD SWAP1 DUP5 ADD MLOAD PUSH2 0x4D06 SWAP2 PUSH2 0x3BF7 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE DUP2 MLOAD PUSH1 0x20 DUP5 ADD MLOAD PUSH2 0x4D1B SWAP2 PUSH2 0x3BF7 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP3 ADD MLOAD DUP4 MLOAD PUSH2 0x4D32 SWAP2 PUSH2 0x3BF7 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x80 DUP1 DUP4 ADD MLOAD SWAP1 DUP5 ADD MLOAD PUSH2 0x4D47 SWAP2 PUSH2 0x3BF7 JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 DUP1 DUP4 ADD MLOAD SWAP1 DUP5 ADD MLOAD PUSH2 0x4D5F SWAP2 PUSH2 0x3BF7 JUMP JUMPDEST PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP1 DUP4 ADD MLOAD SWAP1 DUP5 ADD MLOAD PUSH2 0x4D77 SWAP2 PUSH2 0x3BF7 JUMP JUMPDEST PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 DUP1 DUP4 ADD MLOAD SWAP1 DUP5 ADD MLOAD PUSH2 0x4D8F SWAP2 PUSH2 0x3BF7 JUMP JUMPDEST PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 DUP1 DUP4 ADD MLOAD SWAP1 DUP5 ADD MLOAD PUSH2 0x4DA8 SWAP2 PUSH2 0x3BF7 JUMP JUMPDEST PUSH2 0x100 DUP3 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x4DC2 DUP6 DUP6 DUP6 PUSH2 0x47B7 JUMP JUMPDEST PUSH8 0x14D1120D7B160000 GT SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x4DDD PUSH2 0x55B1 JUMP JUMPDEST PUSH2 0x4E01 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH2 0x4E0A DUP5 PUSH2 0x1EB7 JUMP JUMPDEST PUSH1 0x40 DUP6 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 ADD SWAP3 DUP4 MSTORE DUP7 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP2 DUP5 MSTORE SWAP1 MLOAD SWAP1 MLOAD PUSH2 0x4E34 SWAP2 DUP9 SWAP2 DUP9 SWAP2 SWAP1 PUSH2 0x48BE JUMP JUMPDEST PUSH2 0x4E3D DUP5 PUSH2 0x4874 JUMP JUMPDEST PUSH2 0x4E4A DUP3 PUSH1 0x20 ADD MLOAD PUSH2 0x5468 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD DUP2 SWAP1 MSTORE PUSH2 0xC350 PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x0 SWAP2 PUSH2 0x4E6B SWAP2 SWAP1 PUSH2 0x2A60 JUMP JUMPDEST SWAP1 POP PUSH2 0x4E7C DUP4 PUSH1 0x0 ADD MLOAD DUP3 DUP7 PUSH2 0x5475 JUMP JUMPDEST PUSH1 0xE0 DUP8 ADD MSTORE PUSH1 0xC0 DUP7 ADD MSTORE PUSH1 0xA0 DUP6 ADD MSTORE PUSH1 0x80 DUP5 ADD MSTORE PUSH2 0x4E9B DUP6 PUSH1 0x3 PUSH2 0x468A JUMP JUMPDEST DUP3 MLOAD PUSH1 0x20 DUP5 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP3 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5BE5 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP3 PUSH2 0x4ECC SWAP3 PUSH1 0x1 SWAP1 PUSH2 0x5B9F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5C05 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x1 PUSH1 0x40 MLOAD PUSH2 0x4F04 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x5B2F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x4F25 JUMPI DUP2 PUSH2 0x2A6C JUMP JUMPDEST POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x16D6 PUSH1 0x3C PUSH2 0xC26 PUSH1 0x10 SLOAD TIMESTAMP PUSH2 0x2A60 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 PUSH4 0x1F540500 DUP3 GT ISZERO PUSH2 0x4F5E JUMPI PUSH4 0x1F540500 SWAP2 POP JUMPDEST DUP2 PUSH1 0x0 SUB PUSH2 0x4F75 JUMPI POP PUSH8 0xDE0B6B3A7640000 PUSH2 0xC82 JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 DUP4 DUP4 JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x4FE2 JUMPI PUSH2 0x4F95 PUSH1 0x2 DUP3 PUSH2 0x5BBA JUMP JUMPDEST PUSH1 0x0 SUB PUSH2 0x4FBA JUMPI PUSH2 0x4FA6 DUP3 DUP4 PUSH2 0x5550 JUMP JUMPDEST SWAP2 POP PUSH2 0x4FB3 DUP2 PUSH1 0x2 PUSH2 0x2A7F JUMP JUMPDEST SWAP1 POP PUSH2 0x4F81 JUMP JUMPDEST PUSH2 0x4FC4 DUP3 DUP5 PUSH2 0x5550 JUMP JUMPDEST SWAP3 POP PUSH2 0x4FD0 DUP3 DUP4 PUSH2 0x5550 JUMP JUMPDEST SWAP2 POP PUSH2 0x4FB3 PUSH1 0x2 PUSH2 0xC26 DUP4 PUSH1 0x1 PUSH2 0x2A60 JUMP JUMPDEST PUSH2 0xC2C DUP3 DUP5 PUSH2 0x5550 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x16D6 PUSH1 0x3C PUSH2 0xC26 PUSH1 0xF SLOAD TIMESTAMP PUSH2 0x2A60 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x40 DUP1 DUP6 ADD MLOAD PUSH1 0x6 SLOAD SWAP2 MLOAD PUSH4 0x2770A7EB PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND SWAP3 PUSH4 0x9DC29FAC SWAP3 PUSH2 0x5040 SWAP3 SWAP2 AND SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x5A38 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x505A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x506E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP DUP6 MLOAD PUSH1 0x40 MLOAD PUSH4 0x3B4009FF PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP3 POP PUSH4 0x768013FE SWAP2 POP PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x50B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x50CB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP4 PUSH1 0xA0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x3F10ABAB DUP5 DUP4 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5101 SWAP3 SWAP2 SWAP1 PUSH2 0x5A38 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x511B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x512F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP DUP6 MLOAD PUSH1 0xA0 DUP8 ADD MLOAD PUSH1 0x40 MLOAD PUSH4 0xA51BA3B7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP4 POP PUSH4 0xA51BA3B7 SWAP3 POP PUSH2 0x3357 SWAP2 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x5A38 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x517E PUSH1 0xF SLOAD TIMESTAMP PUSH2 0x2A60 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x3C DUP2 LT PUSH2 0xB77 JUMPI TIMESTAMP PUSH1 0xF DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0xBAB964312BDD13595266F3E549BCA3102965A6D718C6C1F8CD7EAAC076B9C6C2 SWAP1 PUSH1 0x20 ADD PUSH2 0x1E59 JUMP JUMPDEST PUSH1 0x1 DUP2 GT DUP1 ISZERO PUSH2 0x5239 JUMPI POP PUSH1 0xC SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0xDE8FA431 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD PUSH1 0x1 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0xDE8FA431 SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5213 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5237 SWAP2 SWAP1 PUSH2 0x59DD JUMP JUMPDEST GT JUMPDEST PUSH2 0xB77 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54726F76654D616E616765723A204F6E6C79206F6E652074726F766520696E20 PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x7468652073797374656D PUSH1 0xB0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xD29 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x11 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x3 ADD SLOAD PUSH1 0xFF AND SWAP1 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x52CA JUMPI PUSH2 0x52CA PUSH2 0x57DD JUMP JUMPDEST EQ ISZERO DUP1 ISZERO PUSH2 0x52EA JUMPI POP PUSH1 0x1 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x52E7 JUMPI PUSH2 0x52E7 PUSH2 0x57DD JUMP JUMPDEST EQ ISZERO JUMPDEST PUSH2 0x52F6 JUMPI PUSH2 0x52F6 PUSH2 0x5ABE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x11 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x3 ADD SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND SWAP1 DUP4 SWAP1 PUSH2 0x532E DUP3 PUSH1 0x1 PUSH2 0x2A60 JUMP JUMPDEST SWAP1 POP DUP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND GT ISZERO PUSH2 0x5349 JUMPI PUSH2 0x5349 PUSH2 0x5ABE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x18 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x535E JUMPI PUSH2 0x535E PUSH2 0x5AA8 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x18 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP3 POP DUP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP8 AND SWAP1 DUP2 LT PUSH2 0x5396 JUMPI PUSH2 0x5396 PUSH2 0x5AA8 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP2 SWAP1 SWAP2 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND OR SWAP1 SSTORE SWAP2 DUP4 AND DUP1 DUP3 MSTORE PUSH1 0x11 DUP4 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 PUSH1 0x3 ADD DUP1 SLOAD PUSH2 0x100 PUSH1 0x1 PUSH1 0x88 SHL SUB NOT AND PUSH2 0x100 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP11 AND SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 OR SWAP1 SWAP2 SSTORE DUP3 MLOAD SWAP2 DUP3 MSTORE SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH32 0x2B04AE5F7BE9CA7C103293A2AA15F3C339D15D6EDA53B721FEF7B0E609C831A SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x18 DUP1 SLOAD DUP1 PUSH2 0x543D JUMPI PUSH2 0x543D PUSH2 0x5BCE JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 DUP2 ADD PUSH1 0x0 NOT SWAP1 DUP2 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE ADD SWAP1 SSTORE POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC82 PUSH1 0xC8 DUP4 PUSH2 0x5A7D JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 DUP1 DUP5 ISZERO PUSH2 0x54B9 JUMPI PUSH2 0x548A DUP8 DUP7 PUSH2 0x4F16 JUMP JUMPDEST SWAP4 POP PUSH2 0x549A DUP8 PUSH2 0xC26 DUP9 DUP8 PUSH2 0x2A73 JUMP JUMPDEST SWAP3 POP PUSH2 0x54A6 DUP8 DUP6 PUSH2 0x2A60 JUMP JUMPDEST SWAP2 POP PUSH2 0x54B2 DUP7 DUP5 PUSH2 0x2A60 JUMP JUMPDEST SWAP1 POP PUSH2 0x54C6 JUMP JUMPDEST POP PUSH1 0x0 SWAP3 POP DUP3 SWAP2 POP DUP6 SWAP1 POP DUP5 JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 JUMP JUMPDEST PUSH2 0x54D7 PUSH2 0x55B1 JUMP JUMPDEST DUP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x0 PUSH2 0x54F9 DUP4 PUSH2 0xC26 DUP8 PUSH8 0x14D1120D7B160000 PUSH2 0x2A73 JUMP JUMPDEST SWAP1 POP PUSH2 0x5504 DUP2 PUSH2 0x5468 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD DUP2 SWAP1 MSTORE PUSH2 0xC350 PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD DUP7 SWAP1 MSTORE PUSH2 0x5525 SWAP1 DUP3 SWAP1 PUSH2 0x2A60 JUMP JUMPDEST PUSH1 0xA0 DUP4 ADD MSTORE PUSH2 0x5534 DUP5 DUP3 PUSH2 0x2A60 JUMP JUMPDEST PUSH2 0x100 DUP4 ADD MSTORE POP PUSH1 0x0 PUSH1 0xC0 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0xE0 DUP3 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x555D DUP5 DUP5 PUSH2 0x2A73 JUMP JUMPDEST SWAP1 POP PUSH2 0x1130 PUSH8 0xDE0B6B3A7640000 PUSH2 0xC26 PUSH2 0x5579 PUSH1 0x2 DUP4 PUSH2 0x5A7D JUMP JUMPDEST DUP5 SWAP1 PUSH2 0x3BF7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x120 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xB77 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH2 0x5679 DUP2 PUSH2 0x5659 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5690 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2A6C DUP2 PUSH2 0x5659 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x56AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x56B9 DUP2 PUSH2 0x5659 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x56F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x5708 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x571C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x572E JUMPI PUSH2 0x572E PUSH2 0x56C7 JUMP JUMPDEST DUP1 PUSH1 0x5 SHL PUSH1 0x40 MLOAD PUSH1 0x1F NOT PUSH1 0x3F DUP4 ADD AND DUP2 ADD DUP2 DUP2 LT DUP6 DUP3 GT OR ISZERO PUSH2 0x5753 JUMPI PUSH2 0x5753 PUSH2 0x56C7 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 DUP3 MSTORE DUP5 DUP3 ADD SWAP3 POP DUP4 DUP2 ADD DUP6 ADD SWAP2 DUP9 DUP4 GT ISZERO PUSH2 0x5771 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 DUP6 ADD SWAP4 JUMPDEST DUP3 DUP6 LT ISZERO PUSH2 0x5796 JUMPI PUSH2 0x5787 DUP6 PUSH2 0x566E JUMP JUMPDEST DUP5 MSTORE SWAP4 DUP6 ADD SWAP4 SWAP3 DUP6 ADD SWAP3 PUSH2 0x5776 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x57B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x57D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x40 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0xA0 DUP2 ADD PUSH1 0x5 DUP5 LT PUSH2 0x5818 JUMPI PUSH2 0x5818 PUSH2 0x57DD JUMP JUMPDEST PUSH1 0x60 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB SWAP2 SWAP1 SWAP2 AND PUSH1 0x80 SWAP1 SWAP2 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x180 DUP14 DUP16 SUB SLT ISZERO PUSH2 0x585C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP13 CALLDATALOAD PUSH2 0x5867 DUP2 PUSH2 0x5659 JUMP JUMPDEST SWAP12 POP PUSH1 0x20 DUP14 ADD CALLDATALOAD PUSH2 0x5877 DUP2 PUSH2 0x5659 JUMP JUMPDEST SWAP11 POP PUSH1 0x40 DUP14 ADD CALLDATALOAD PUSH2 0x5887 DUP2 PUSH2 0x5659 JUMP JUMPDEST SWAP10 POP PUSH1 0x60 DUP14 ADD CALLDATALOAD PUSH2 0x5897 DUP2 PUSH2 0x5659 JUMP JUMPDEST SWAP9 POP PUSH1 0x80 DUP14 ADD CALLDATALOAD PUSH2 0x58A7 DUP2 PUSH2 0x5659 JUMP JUMPDEST SWAP8 POP PUSH1 0xA0 DUP14 ADD CALLDATALOAD PUSH2 0x58B7 DUP2 PUSH2 0x5659 JUMP JUMPDEST SWAP7 POP PUSH2 0x58C5 PUSH1 0xC0 DUP15 ADD PUSH2 0x566E JUMP JUMPDEST SWAP6 POP PUSH2 0x58D3 PUSH1 0xE0 DUP15 ADD PUSH2 0x566E JUMP JUMPDEST SWAP5 POP PUSH2 0x58E2 PUSH2 0x100 DUP15 ADD PUSH2 0x566E JUMP JUMPDEST SWAP4 POP PUSH2 0x58F1 PUSH2 0x120 DUP15 ADD PUSH2 0x566E JUMP JUMPDEST SWAP3 POP PUSH2 0x5900 PUSH2 0x140 DUP15 ADD PUSH2 0x566E JUMP JUMPDEST SWAP2 POP PUSH2 0x590F PUSH2 0x160 DUP15 ADD PUSH2 0x566E JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 SWAP9 SWAP12 POP SWAP3 SWAP6 SWAP9 SWAP12 POP SWAP3 SWAP6 SWAP9 SWAP12 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x594E JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x5932 JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x40 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x40 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x598A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 CALLDATALOAD SWAP7 POP PUSH1 0x20 DUP9 ADD CALLDATALOAD PUSH2 0x599C DUP2 PUSH2 0x5659 JUMP JUMPDEST SWAP6 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD PUSH2 0x59AC DUP2 PUSH2 0x5659 JUMP JUMPDEST SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD PUSH2 0x59BC DUP2 PUSH2 0x5659 JUMP JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 PUSH1 0x80 DUP2 ADD CALLDATALOAD SWAP6 PUSH1 0xA0 DUP3 ADD CALLDATALOAD SWAP6 POP PUSH1 0xC0 SWAP1 SWAP2 ADD CALLDATALOAD SWAP4 POP SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x59EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x22 SWAP1 DUP3 ADD MSTORE PUSH32 0x54726F76654D616E616765723A206E6F7468696E6720746F206C697175696461 PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x7465 PUSH1 0xF0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x5A8C JUMPI PUSH2 0x5A8C PUSH2 0x5A51 JUMP JUMPDEST POP DIV SWAP1 JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0xC82 JUMPI PUSH2 0xC82 PUSH2 0x5A67 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0xC82 JUMPI PUSH2 0xC82 PUSH2 0x5A67 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5AF9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x2A6C DUP2 PUSH2 0x5659 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x5B13 JUMPI PUSH2 0x5B13 PUSH2 0x5A67 JUMP JUMPDEST POP PUSH1 0x0 NOT ADD SWAP1 JUMP JUMPDEST PUSH1 0x4 DUP2 LT PUSH2 0x5B2B JUMPI PUSH2 0x5B2B PUSH2 0x57DD JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST DUP5 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x40 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD PUSH2 0x1E95 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x5B1B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x5B63 JUMPI PUSH2 0x5B63 PUSH2 0x5A67 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0xC82 JUMPI PUSH2 0xC82 PUSH2 0x5A67 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5B8F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x2A6C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD PUSH2 0x1130 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x5B1B JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x5BC9 JUMPI PUSH2 0x5BC9 PUSH2 0x5A51 JUMP JUMPDEST POP MOD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x31 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID 0xEA PUSH8 0x486ED7EBE3EEA8AB CALLER SWAP1 0xEF 0xD4 LOG3 0xC8 0xAA 0xE4 DUP12 0xE5 0xBE LOG2 PUSH30 0xF104A8AF786C408434C3770D654ED33AEEA6BF11AC8EF05D02A6A04ED468 PUSH14 0xD2F624D853BBEC43CC8BA2646970 PUSH7 0x735822122036E2 0x5D DUP13 0xCD 0xEB PUSH16 0xFB9A60B4AF8BD352CE9E512612ECA522 0x2D PUSH31 0xF6E20808A18E5E64736F6C6343000813003300000000000000000000000000 ",
          "sourceMap": "999:87267:19:-:0;;;;;;;;;;;;-1:-1:-1;936:32:2;719:10:7;936:18:2;:32::i;:::-;999:87267:19;;2426:187:2;2518:6;;;-1:-1:-1;;;;;2534:17:2;;;-1:-1:-1;;;;;;2534:17:2;;;;;;;2566:40;;2518:6;;;2534:17;2518:6;;2566:40;;2499:16;;2566:40;2489:124;2426:187;:::o;999:87267:19:-;;;;;;;"
        },
        "deployedBytecode": {
          "functionDebugData": {
            "@BETA_7919": {
              "entryPoint": null,
              "id": 7919,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@BOOTSTRAP_PERIOD_7916": {
              "entryPoint": null,
              "id": 7916,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@BORROWING_FEE_FLOOR_13014": {
              "entryPoint": null,
              "id": 13014,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@BaseFeeLMA_GAS_COMPENSATION_13000": {
              "entryPoint": null,
              "id": 13000,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@CCR_12997": {
              "entryPoint": null,
              "id": 12997,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@DECIMAL_PRECISION_12940": {
              "entryPoint": null,
              "id": 12940,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@L_BaseFeeLMADebt_7960": {
              "entryPoint": null,
              "id": 7960,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@L_WStETH_7958": {
              "entryPoint": null,
              "id": 7958,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@MAX_BORROWING_FEE_7913": {
              "entryPoint": null,
              "id": 7913,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@MCR_12994": {
              "entryPoint": null,
              "id": 12994,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@MINUTE_DECAY_BORROWING_FACTOR_7902": {
              "entryPoint": null,
              "id": 7902,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@MINUTE_DECAY_REDEMPTION_FACTOR_7899": {
              "entryPoint": null,
              "id": 7899,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@MIN_NET_DEBT_13003": {
              "entryPoint": null,
              "id": 13003,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@NAME_7868": {
              "entryPoint": null,
              "id": 7868,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@PERCENT_DIVISOR_13006": {
              "entryPoint": null,
              "id": 13006,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@REDEMPTION_FEE_FLOOR_7910": {
              "entryPoint": 4342,
              "id": 7910,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@SECONDS_IN_ONE_MINUTE_7896": {
              "entryPoint": null,
              "id": 7896,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@TroveOwners_7973": {
              "entryPoint": 6907,
              "id": 7973,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@Troves_7950": {
              "entryPoint": null,
              "id": 7950,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@_100pct_12991": {
              "entryPoint": null,
              "id": 12991,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@_addLiquidationValuesToTotals_10295": {
              "entryPoint": 19667,
              "id": 10295,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@_addTroveOwnerToArray_11893": {
              "entryPoint": 10891,
              "id": 11893,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@_applyPendingRewards_11220": {
              "entryPoint": 10586,
              "id": 11220,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@_calcBorrowingFee_12347": {
              "entryPoint": 13617,
              "id": 12347,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@_calcBorrowingRate_12291": {
              "entryPoint": 15696,
              "id": 12291,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@_calcDecayedBorrowBaseRate_12518": {
              "entryPoint": 13825,
              "id": 12518,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@_calcDecayedRedemptionBaseRate_12491": {
              "entryPoint": 15628,
              "id": 12491,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@_calcRedemptionFee_12223": {
              "entryPoint": 18411,
              "id": 12223,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@_calcRedemptionRate_12164": {
              "entryPoint": 13641,
              "id": 12164,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@_checkOwner_443": {
              "entryPoint": 15179,
              "id": 443,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@_checkPotentialRecoveryMode_12047": {
              "entryPoint": 19892,
              "id": 12047,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "@_checkRecoveryMode_13149": {
              "entryPoint": 11209,
              "id": 13149,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@_closeTrove_11804": {
              "entryPoint": 18058,
              "id": 11804,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_computeCR_13490": {
              "entryPoint": 18359,
              "id": 13490,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "@_computeNewStake_11592": {
              "entryPoint": 18847,
              "id": 11592,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@_computeNominalCR_13450": {
              "entryPoint": 16041,
              "id": 13450,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@_decPow_13396": {
              "entryPoint": 20296,
              "id": 13396,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@_findPriceBelowMCR_13612": {
              "entryPoint": 13199,
              "id": 13612,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "@_getCappedOffsetVals_9071": {
              "entryPoint": 21711,
              "id": 9071,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "@_getCollGasCompensation_13056": {
              "entryPoint": 21608,
              "id": 13056,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@_getCurrentTroveAmounts_11117": {
              "entryPoint": 15919,
              "id": 11117,
              "parameterSlots": 1,
              "returnSlots": 2
            },
            "@_getNetDebt_13044": {
              "entryPoint": null,
              "id": 13044,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@_getOffsetAndRedistributionVals_8985": {
              "entryPoint": 21621,
              "id": 8985,
              "parameterSlots": 3,
              "returnSlots": 4
            },
            "@_getRedemptionFee_12179": {
              "entryPoint": 17938,
              "id": 12179,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@_getTCR_13131": {
              "entryPoint": 16088,
              "id": 13131,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@_getTotalFromBatchLiquidate_RecoveryMode_10076": {
              "entryPoint": 11238,
              "id": 10076,
              "parameterSlots": 5,
              "returnSlots": 1
            },
            "@_getTotalsFromBatchLiquidate_NormalMode_10181": {
              "entryPoint": 11789,
              "id": 10181,
              "parameterSlots": 5,
              "returnSlots": 1
            },
            "@_getTotalsFromLiquidateTrovesSequence_NormalMode_9641": {
              "entryPoint": 14874,
              "id": 9641,
              "parameterSlots": 5,
              "returnSlots": 1
            },
            "@_getTotalsFromLiquidateTrovesSequence_RecoveryMode_9533": {
              "entryPoint": 13980,
              "id": 9533,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "@_isValidFirstRedemptionHint_10645": {
              "entryPoint": 16753,
              "id": 10645,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "@_liquidateNormalMode_8606": {
              "entryPoint": 19925,
              "id": 8606,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "@_liquidateRecoveryMode_8913": {
              "entryPoint": 18912,
              "id": 8913,
              "parameterSlots": 7,
              "returnSlots": 1
            },
            "@_min_13254": {
              "entryPoint": 20246,
              "id": 13254,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@_minutesPassedSinceLastBorrow_12550": {
              "entryPoint": 20268,
              "id": 12550,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@_minutesPassedSinceLastRedemption_12534": {
              "entryPoint": 20460,
              "id": 12534,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@_movePendingTroveRewardsToActivePool_10365": {
              "entryPoint": 18622,
              "id": 10365,
              "parameterSlots": 4,
              "returnSlots": 0
            },
            "@_msgSender_1333": {
              "entryPoint": null,
              "id": 1333,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@_redeemCloseTrove_10588": {
              "entryPoint": 20488,
              "id": 10588,
              "parameterSlots": 4,
              "returnSlots": 0
            },
            "@_redeemCollateralFromTrove_10536": {
              "entryPoint": 17083,
              "id": 10536,
              "parameterSlots": 7,
              "returnSlots": 1
            },
            "@_redistributeDebtAndColl_11713": {
              "entryPoint": 11997,
              "id": 11713,
              "parameterSlots": 4,
              "returnSlots": 0
            },
            "@_removeStake_11491": {
              "entryPoint": 18548,
              "id": 11491,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_removeTroveOwner_11974": {
              "entryPoint": 21144,
              "id": 11974,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_requireAmountGreaterThanZero_12632": {
              "entryPoint": 16394,
              "id": 12632,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_requireBaseFeeLMABalanceCoversRedemption_12600": {
              "entryPoint": 16497,
              "id": 12600,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@_requireCallerIsBorrowerOperations_12562": {
              "entryPoint": 10458,
              "id": 12562,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@_requireMoreThanOneTroveInSystem_12619": {
              "entryPoint": 20926,
              "id": 12619,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_requireTCRoverMCR_12647": {
              "entryPoint": 16279,
              "id": 12647,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_requireTroveIsActive_12579": {
              "entryPoint": 13466,
              "id": 12579,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_requireUserAcceptsFee_13176": {
              "entryPoint": 17952,
              "id": 13176,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@_requireValidMaxFeePercentage_12685": {
              "entryPoint": 16124,
              "id": 12685,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_sendGasCompensation_10333": {
              "entryPoint": 12972,
              "id": 10333,
              "parameterSlots": 4,
              "returnSlots": 0
            },
            "@_transferOwnership_500": {
              "entryPoint": 15269,
              "id": 500,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_updateLastBorrowTime_12464": {
              "entryPoint": 13893,
              "id": 12464,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@_updateLastRedemptionTime_12437": {
              "entryPoint": 20839,
              "id": 12437,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@_updateRedemptionBaseRateFromRedemption_12110": {
              "entryPoint": 17669,
              "id": 12110,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "@_updateStakeAndTotalStakes_11553": {
              "entryPoint": 11045,
              "id": 11553,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@_updateSystemSnapshots_excludeCollRemainder_11844": {
              "entryPoint": 12648,
              "id": 11844,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_updateTroveRewardSnapshots_11258": {
              "entryPoint": 15528,
              "id": 11258,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@activePool_13017": {
              "entryPoint": null,
              "id": 13017,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@addTroveOwnerToArray_11859": {
              "entryPoint": 3208,
              "id": 11859,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@add_2650": {
              "entryPoint": 15351,
              "id": 2650,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@applyPendingRewards_11132": {
              "entryPoint": 2898,
              "id": 11132,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@baseFeeLMAToken_7881": {
              "entryPoint": null,
              "id": 7881,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@batchLiquidateTroves_9832": {
              "entryPoint": 3261,
              "id": 9832,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@borrowBaseRate_7923": {
              "entryPoint": null,
              "id": 7923,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@borrowerOperationsAddress_7870": {
              "entryPoint": null,
              "id": 7870,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@checkContract_12971": {
              "entryPoint": 15363,
              "id": 12971,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@checkRecoveryMode_12010": {
              "entryPoint": 4560,
              "id": 12010,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@checkUnreliableRecoveryMode_12022": {
              "entryPoint": 5717,
              "id": 12022,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@closeTrove_11728": {
              "entryPoint": 9776,
              "id": 11728,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@decMul_13301": {
              "entryPoint": 21840,
              "id": 13301,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@decayBaseRateFromBorrowing_12410": {
              "entryPoint": 4673,
              "id": 12410,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@decreaseTroveColl_12824": {
              "entryPoint": 9826,
              "id": 12824,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@decreaseTroveDebt_12888": {
              "entryPoint": 3126,
              "id": 12888,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@defaultPool_13020": {
              "entryPoint": null,
              "id": 13020,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@div_2695": {
              "entryPoint": 10879,
              "id": 2695,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@feesRouter_7890": {
              "entryPoint": null,
              "id": 7890,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@getBorrowingFeeWithDecay_12329": {
              "entryPoint": 4540,
              "id": 12329,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@getBorrowingFee_12314": {
              "entryPoint": 4781,
              "id": 12314,
              "parameterSlots": 1,
              "returnSlots": 2
            },
            "@getBorrowingRateWithDecay_12250": {
              "entryPoint": 7415,
              "id": 12250,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@getBorrowingRate_12236": {
              "entryPoint": 7838,
              "id": 12236,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@getCurrentICR_11038": {
              "entryPoint": 9795,
              "id": 11038,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@getEntireDebtAndColl_11451": {
              "entryPoint": 7863,
              "id": 11451,
              "parameterSlots": 1,
              "returnSlots": 4
            },
            "@getEntireSystemColl_13079": {
              "entryPoint": 7218,
              "id": 13079,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@getEntireSystemDebt_13102": {
              "entryPoint": 6949,
              "id": 13102,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@getNominalICR_11008": {
              "entryPoint": 7799,
              "id": 11008,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@getNormalLiquidationPrice_12911": {
              "entryPoint": 4516,
              "id": 12911,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@getPendingBaseFeeLMADebtReward_11370": {
              "entryPoint": 2938,
              "id": 11370,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@getPendingWStETHReward_11314": {
              "entryPoint": 7434,
              "id": 11314,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@getRecoveryLiquidationPrice_12934": {
              "entryPoint": 4376,
              "id": 12934,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@getRedemptionFeeWithDecay_12194": {
              "entryPoint": 9874,
              "id": 12194,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@getRedemptionRateWithDecay_12137": {
              "entryPoint": 7780,
              "id": 12137,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@getRedemptionRate_12123": {
              "entryPoint": 4571,
              "id": 12123,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@getTCR_11986": {
              "entryPoint": 7852,
              "id": 11986,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@getTroveColl_12740": {
              "entryPoint": null,
              "id": 12740,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@getTroveDebt_12727": {
              "entryPoint": null,
              "id": 12727,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@getTroveFromTroveOwnersArray_8457": {
              "entryPoint": 10047,
              "id": 8457,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@getTroveOwnersCount_8445": {
              "entryPoint": null,
              "id": 8445,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@getTroveStake_12714": {
              "entryPoint": null,
              "id": 12714,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@getTroveStatus_12701": {
              "entryPoint": 4294,
              "id": 12701,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@getUnreliableTCR_11998": {
              "entryPoint": 10095,
              "id": 11998,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@getUnreliableTroveICR_11071": {
              "entryPoint": 9894,
              "id": 11071,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@hasPendingRewards_11397": {
              "entryPoint": 10224,
              "id": 11397,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@hogStaking_7887": {
              "entryPoint": null,
              "id": 7887,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@hogToken_7884": {
              "entryPoint": null,
              "id": 7884,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@increaseTroveColl_12792": {
              "entryPoint": 5851,
              "id": 12792,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@increaseTroveDebt_12856": {
              "entryPoint": 7474,
              "id": 12856,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@lastBaseFeeLMADebtError_Redistribution_7977": {
              "entryPoint": null,
              "id": 7977,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@lastBorrowTime_7927": {
              "entryPoint": null,
              "id": 7927,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@lastRedemptionTime_7925": {
              "entryPoint": null,
              "id": 7925,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@lastWStETHError_Redistribution_7975": {
              "entryPoint": null,
              "id": 7975,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@liquidateTroves_9274": {
              "entryPoint": 4816,
              "id": 9274,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@liquidate_8488": {
              "entryPoint": 4408,
              "id": 8488,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@mul_2680": {
              "entryPoint": 10867,
              "id": 2680,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@owner_429": {
              "entryPoint": null,
              "id": 429,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@priceFeed_13024": {
              "entryPoint": null,
              "id": 13024,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@redeemCollateral_10982": {
              "entryPoint": 7951,
              "id": 10982,
              "parameterSlots": 7,
              "returnSlots": 0
            },
            "@redemptionBaseRate_7921": {
              "entryPoint": null,
              "id": 7921,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@removeStake_11464": {
              "entryPoint": 10441,
              "id": 11464,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@renounceOwnership_457": {
              "entryPoint": 5697,
              "id": 457,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@rewardSnapshots_7965": {
              "entryPoint": null,
              "id": 7965,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@setAddresses_8436": {
              "entryPoint": 5938,
              "id": 8436,
              "parameterSlots": 12,
              "returnSlots": 0
            },
            "@setTroveStatus_12760": {
              "entryPoint": 4585,
              "id": 12760,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@sortedTroves_7893": {
              "entryPoint": null,
              "id": 7893,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@stabilityPool_7873": {
              "entryPoint": null,
              "id": 7873,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@sub_2665": {
              "entryPoint": 10848,
              "id": 2665,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@totalCollateralSnapshot_7956": {
              "entryPoint": null,
              "id": 7956,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@totalStakesSnapshot_7954": {
              "entryPoint": null,
              "id": 7954,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@totalStakes_7952": {
              "entryPoint": null,
              "id": 7952,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@transferOwnership_480": {
              "entryPoint": 10323,
              "id": 480,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@updateBaseRateFromBorrowing_12381": {
              "entryPoint": 7519,
              "id": 12381,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@updateStakeAndTotalStakes_11506": {
              "entryPoint": 3242,
              "id": 11506,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@updateTroveRewardSnapshots_11233": {
              "entryPoint": 7201,
              "id": 11233,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "abi_decode_address": {
              "entryPoint": 22126,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_address": {
              "entryPoint": 22142,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_address_fromMemory": {
              "entryPoint": 23271,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_addresst_addresst_addresst_addresst_addresst_addresst_addresst_addresst_addresst_addresst_addresst_contract$_IFeesRouter_$14008": {
              "entryPoint": 22585,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 12
            },
            "abi_decode_tuple_t_addresst_uint256": {
              "entryPoint": 22171,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_tuple_t_array$_t_address_$dyn_memory_ptr": {
              "entryPoint": 22237,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_bool_fromMemory": {
              "entryPoint": 23421,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_uint256": {
              "entryPoint": 22468,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_uint256_fromMemory": {
              "entryPoint": 23005,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_uint256t_addresst_addresst_addresst_uint256t_uint256t_uint256": {
              "entryPoint": 22895,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 7
            },
            "abi_decode_tuple_t_uint256t_uint256": {
              "entryPoint": 22434,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_encode_enum_TroveManagerOperation": {
              "entryPoint": 23323,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address_t_uint128__to_t_address_t_uint256__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed": {
              "entryPoint": 23096,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address_t_uint256_t_address_t_address__to_t_address_t_uint256_t_address_t_address__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 5,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_contract$_IActivePool_$13652__to_t_address__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_contract$_IBaseFeeLMAToken_$13716__to_t_address__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_contract$_IDefaultPool_$13991__to_t_address__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_contract$_IFeesRouter_$14008__to_t_address__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_contract$_IHOGStaking_$14118__to_t_address__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_contract$_IHOGToken_$14174__to_t_address__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_contract$_IPriceFeed_$14250__to_t_address__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_contract$_ISortedTroves_$14382__to_t_address__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_contract$_IStabilityPool_$14555__to_t_address__fromStack_reversed": {
              "entryPoint": 22085,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_rational_0_by_1_t_rational_0_by_1_t_rational_0_by_1_t_enum$_TroveManagerOperation_$8235__to_t_uint256_t_uint256_t_uint256_t_uint8__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 5,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 22817,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_2b3f8ccb98757f90ed503a7ef387edf3c874358c4f9155d10247c121e50c7412__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_71630fb59e6335519b5c714c347f2b3d00653f9607ebc84cc566a5b693547569__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_7584fd4ebb0cfc561f0eebef7e5a101860c02bbe77aada4025c19bcc4b1d1057__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_7b5414abe95e9cf2c744b0f61600ea04d22012a84e8a670f9ebfa9f7a4d2d09f__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_a5b6d3f6db4f0a882ae833ad5428aedbdf437b271f162fd95dc97ff478b6c703__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_c5c02bb6f017f1fb4f7d5edc2496c9c92f139d3cb1a6efb75b0760a3f8a68acc__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_d50ee9a9848e4a1fc6c9aec8c7717d42a161185832a068487f8227dffd2c35b5__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_dcf7beb71f973a2a4b4f293fe67c3b380ce91c14fb11529cf06f13e17f4fde3b__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_dd863108bc79f5e98fcfa9b131016ea502270f18dd642de1be74d790d5c71286__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_e50be9df6f9cec2f12ef42eb933f1a808d16efcb95019f9e501cc93218919cd7__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_ef02c2bdac35413fdff17b472f65263dca9409d28ed2688a496d3823e2fa6573__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_f4ebe3f718dc44f9fc9f3936568db6f6f7c4cab90fa5f1f983d94b5f3c0c14d5__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_f53a59d0a88811be96067d6d327988285856817766082bcb22560117b222c207__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 23030,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_f8ec48568410e94e913ce626873fb69e955772a1f192a4412dc8945cf35ddca6__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_f95289a8642d0027690eb85480f9e7e95699494ee6326d5d4cb8b8b692354c5b__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint256_t_uint256_t_enum$_TroveManagerOperation_$8235__to_t_uint256_t_uint256_t_uint8__fromStack_reversed": {
              "entryPoint": 23455,
              "id": null,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_enum$_Status_$7933_t_uint128__to_t_uint256_t_uint256_t_uint256_t_uint8_t_uint128__fromStack_reversed": {
              "entryPoint": 22515,
              "id": null,
              "parameterSlots": 6,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_enum$_TroveManagerOperation_$8235__to_t_uint256_t_uint256_t_uint256_t_uint8__fromStack_reversed": {
              "entryPoint": 23343,
              "id": null,
              "parameterSlots": 5,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256_t_uint256__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 5,
              "returnSlots": 1
            },
            "checked_add_t_uint256": {
              "entryPoint": 23402,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_div_t_uint256": {
              "entryPoint": 23165,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_mul_t_uint256": {
              "entryPoint": 23185,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_sub_t_uint256": {
              "entryPoint": 23252,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "decrement_t_uint256": {
              "entryPoint": 23300,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "increment_t_uint256": {
              "entryPoint": 23377,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "mod_t_uint256": {
              "entryPoint": 23482,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "panic_error_0x01": {
              "entryPoint": 23230,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x11": {
              "entryPoint": 23143,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x12": {
              "entryPoint": 23121,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x21": {
              "entryPoint": 22493,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x31": {
              "entryPoint": 23502,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x32": {
              "entryPoint": 23208,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x41": {
              "entryPoint": 22215,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "validator_revert_address": {
              "entryPoint": 22105,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            }
          },
          "generatedSources": [
            {
              "ast": {
                "nodeType": "YulBlock",
                "src": "0:21488:40",
                "statements": [
                  {
                    "nodeType": "YulBlock",
                    "src": "6:3:40",
                    "statements": []
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "139:102:40",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "149:26:40",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "161:9:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "172:2:40",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "157:3:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "157:18:40"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "149:4:40"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "191:9:40"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "206:6:40"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "222:3:40",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "227:1:40",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "218:3:40"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "218:11:40"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "231:1:40",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "214:3:40"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "214:19:40"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "202:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "202:32:40"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "184:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "184:51:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "184:51:40"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_contract$_IStabilityPool_$14555__to_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "108:9:40",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "119:6:40",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "130:4:40",
                        "type": ""
                      }
                    ],
                    "src": "14:227:40"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "347:76:40",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "357:26:40",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "369:9:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "380:2:40",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "365:3:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "365:18:40"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "357:4:40"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "399:9:40"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "410:6:40"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "392:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "392:25:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "392:25:40"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "316:9:40",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "327:6:40",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "338:4:40",
                        "type": ""
                      }
                    ],
                    "src": "246:177:40"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "473:86:40",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "537:16:40",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "546:1:40",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "549:1:40",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "539:6:40"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "539:12:40"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "539:12:40"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "496:5:40"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "507:5:40"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "522:3:40",
                                                "type": "",
                                                "value": "160"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "527:1:40",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "shl",
                                              "nodeType": "YulIdentifier",
                                              "src": "518:3:40"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "518:11:40"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "531:1:40",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sub",
                                          "nodeType": "YulIdentifier",
                                          "src": "514:3:40"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "514:19:40"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "503:3:40"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "503:31:40"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "493:2:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "493:42:40"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "486:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "486:50:40"
                          },
                          "nodeType": "YulIf",
                          "src": "483:70:40"
                        }
                      ]
                    },
                    "name": "validator_revert_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "462:5:40",
                        "type": ""
                      }
                    ],
                    "src": "428:131:40"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "613:85:40",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "623:29:40",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "645:6:40"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "632:12:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "632:20:40"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "623:5:40"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "686:5:40"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "661:24:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "661:31:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "661:31:40"
                        }
                      ]
                    },
                    "name": "abi_decode_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "592:6:40",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "603:5:40",
                        "type": ""
                      }
                    ],
                    "src": "564:134:40"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "773:177:40",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "819:16:40",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "828:1:40",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "831:1:40",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "821:6:40"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "821:12:40"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "821:12:40"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "794:7:40"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "803:9:40"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "790:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "790:23:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "815:2:40",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "786:3:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "786:32:40"
                          },
                          "nodeType": "YulIf",
                          "src": "783:52:40"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "844:36:40",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "870:9:40"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "857:12:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "857:23:40"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "848:5:40",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "914:5:40"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "889:24:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "889:31:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "889:31:40"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "929:15:40",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "939:5:40"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "929:6:40"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "739:9:40",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "750:7:40",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "762:6:40",
                        "type": ""
                      }
                    ],
                    "src": "703:247:40"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1042:228:40",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1088:16:40",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1097:1:40",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1100:1:40",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1090:6:40"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1090:12:40"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1090:12:40"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "1063:7:40"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1072:9:40"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "1059:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1059:23:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1084:2:40",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "1055:3:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1055:32:40"
                          },
                          "nodeType": "YulIf",
                          "src": "1052:52:40"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1113:36:40",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1139:9:40"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "1126:12:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1126:23:40"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "1117:5:40",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "1183:5:40"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "1158:24:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1158:31:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1158:31:40"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1198:15:40",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "1208:5:40"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "1198:6:40"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1222:42:40",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1249:9:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1260:2:40",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1245:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1245:18:40"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "1232:12:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1232:32:40"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "1222:6:40"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1000:9:40",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "1011:7:40",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1023:6:40",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "1031:6:40",
                        "type": ""
                      }
                    ],
                    "src": "955:315:40"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1404:119:40",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "1414:26:40",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1426:9:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1437:2:40",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1422:3:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1422:18:40"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "1414:4:40"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1456:9:40"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "1467:6:40"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1449:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1449:25:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1449:25:40"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1494:9:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1505:2:40",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1490:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1490:18:40"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "1510:6:40"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1483:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1483:34:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1483:34:40"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1365:9:40",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "1376:6:40",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1384:6:40",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "1395:4:40",
                        "type": ""
                      }
                    ],
                    "src": "1275:248:40"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1560:95:40",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1577:1:40",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1584:3:40",
                                    "type": "",
                                    "value": "224"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1589:10:40",
                                    "type": "",
                                    "value": "0x4e487b71"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "1580:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1580:20:40"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1570:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1570:31:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1570:31:40"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1617:1:40",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1620:4:40",
                                "type": "",
                                "value": "0x41"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1610:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1610:15:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1610:15:40"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1641:1:40",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1644:4:40",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "1634:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1634:15:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1634:15:40"
                        }
                      ]
                    },
                    "name": "panic_error_0x41",
                    "nodeType": "YulFunctionDefinition",
                    "src": "1528:127:40"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1755:1026:40",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1765:12:40",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1775:2:40",
                            "type": "",
                            "value": "32"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "1769:2:40",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1822:16:40",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1831:1:40",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1834:1:40",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1824:6:40"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1824:12:40"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1824:12:40"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "1797:7:40"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1806:9:40"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "1793:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1793:23:40"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "1818:2:40"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "1789:3:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1789:32:40"
                          },
                          "nodeType": "YulIf",
                          "src": "1786:52:40"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1847:37:40",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1874:9:40"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "1861:12:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1861:23:40"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "1851:6:40",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1893:28:40",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1903:18:40",
                            "type": "",
                            "value": "0xffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_2",
                              "nodeType": "YulTypedName",
                              "src": "1897:2:40",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1948:16:40",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1957:1:40",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1960:1:40",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1950:6:40"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1950:12:40"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1950:12:40"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "1936:6:40"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "1944:2:40"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "1933:2:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1933:14:40"
                          },
                          "nodeType": "YulIf",
                          "src": "1930:34:40"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1973:32:40",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1987:9:40"
                              },
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "1998:6:40"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1983:3:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1983:22:40"
                          },
                          "variables": [
                            {
                              "name": "_3",
                              "nodeType": "YulTypedName",
                              "src": "1977:2:40",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2053:16:40",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2062:1:40",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2065:1:40",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2055:6:40"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2055:12:40"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2055:12:40"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_3",
                                        "nodeType": "YulIdentifier",
                                        "src": "2032:2:40"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "2036:4:40",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "2028:3:40"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2028:13:40"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "2043:7:40"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "2024:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2024:27:40"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "2017:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2017:35:40"
                          },
                          "nodeType": "YulIf",
                          "src": "2014:55:40"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2078:26:40",
                          "value": {
                            "arguments": [
                              {
                                "name": "_3",
                                "nodeType": "YulIdentifier",
                                "src": "2101:2:40"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "2088:12:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2088:16:40"
                          },
                          "variables": [
                            {
                              "name": "_4",
                              "nodeType": "YulTypedName",
                              "src": "2082:2:40",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2127:22:40",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "2129:16:40"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2129:18:40"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2129:18:40"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "_4",
                                "nodeType": "YulIdentifier",
                                "src": "2119:2:40"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "2123:2:40"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "2116:2:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2116:10:40"
                          },
                          "nodeType": "YulIf",
                          "src": "2113:36:40"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2158:20:40",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2172:1:40",
                                "type": "",
                                "value": "5"
                              },
                              {
                                "name": "_4",
                                "nodeType": "YulIdentifier",
                                "src": "2175:2:40"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "2168:3:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2168:10:40"
                          },
                          "variables": [
                            {
                              "name": "_5",
                              "nodeType": "YulTypedName",
                              "src": "2162:2:40",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2187:23:40",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2207:2:40",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "2201:5:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2201:9:40"
                          },
                          "variables": [
                            {
                              "name": "memPtr",
                              "nodeType": "YulTypedName",
                              "src": "2191:6:40",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2219:56:40",
                          "value": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "2241:6:40"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_5",
                                        "nodeType": "YulIdentifier",
                                        "src": "2257:2:40"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "2261:2:40",
                                        "type": "",
                                        "value": "63"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "2253:3:40"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2253:11:40"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "2270:2:40",
                                        "type": "",
                                        "value": "31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "not",
                                      "nodeType": "YulIdentifier",
                                      "src": "2266:3:40"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2266:7:40"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "2249:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2249:25:40"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2237:3:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2237:38:40"
                          },
                          "variables": [
                            {
                              "name": "newFreePtr",
                              "nodeType": "YulTypedName",
                              "src": "2223:10:40",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2334:22:40",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "2336:16:40"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2336:18:40"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2336:18:40"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "2293:10:40"
                                  },
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "2305:2:40"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "2290:2:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2290:18:40"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "2313:10:40"
                                  },
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "2325:6:40"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "2310:2:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2310:22:40"
                              }
                            ],
                            "functionName": {
                              "name": "or",
                              "nodeType": "YulIdentifier",
                              "src": "2287:2:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2287:46:40"
                          },
                          "nodeType": "YulIf",
                          "src": "2284:72:40"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2372:2:40",
                                "type": "",
                                "value": "64"
                              },
                              {
                                "name": "newFreePtr",
                                "nodeType": "YulIdentifier",
                                "src": "2376:10:40"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2365:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2365:22:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2365:22:40"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2396:17:40",
                          "value": {
                            "name": "memPtr",
                            "nodeType": "YulIdentifier",
                            "src": "2407:6:40"
                          },
                          "variables": [
                            {
                              "name": "dst",
                              "nodeType": "YulTypedName",
                              "src": "2400:3:40",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "2429:6:40"
                              },
                              {
                                "name": "_4",
                                "nodeType": "YulIdentifier",
                                "src": "2437:2:40"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2422:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2422:18:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2422:18:40"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2449:22:40",
                          "value": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "2460:6:40"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "2468:2:40"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2456:3:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2456:15:40"
                          },
                          "variableNames": [
                            {
                              "name": "dst",
                              "nodeType": "YulIdentifier",
                              "src": "2449:3:40"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2480:34:40",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_3",
                                    "nodeType": "YulIdentifier",
                                    "src": "2502:2:40"
                                  },
                                  {
                                    "name": "_5",
                                    "nodeType": "YulIdentifier",
                                    "src": "2506:2:40"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2498:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2498:11:40"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "2511:2:40"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2494:3:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2494:20:40"
                          },
                          "variables": [
                            {
                              "name": "srcEnd",
                              "nodeType": "YulTypedName",
                              "src": "2484:6:40",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2546:16:40",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2555:1:40",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2558:1:40",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2548:6:40"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2548:12:40"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2548:12:40"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "srcEnd",
                                "nodeType": "YulIdentifier",
                                "src": "2529:6:40"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "2537:7:40"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "2526:2:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2526:19:40"
                          },
                          "nodeType": "YulIf",
                          "src": "2523:39:40"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2571:22:40",
                          "value": {
                            "arguments": [
                              {
                                "name": "_3",
                                "nodeType": "YulIdentifier",
                                "src": "2586:2:40"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "2590:2:40"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2582:3:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2582:11:40"
                          },
                          "variables": [
                            {
                              "name": "src",
                              "nodeType": "YulTypedName",
                              "src": "2575:3:40",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2658:92:40",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "dst",
                                      "nodeType": "YulIdentifier",
                                      "src": "2679:3:40"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "name": "src",
                                          "nodeType": "YulIdentifier",
                                          "src": "2703:3:40"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "abi_decode_address",
                                        "nodeType": "YulIdentifier",
                                        "src": "2684:18:40"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2684:23:40"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "2672:6:40"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2672:36:40"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2672:36:40"
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "2721:19:40",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "dst",
                                      "nodeType": "YulIdentifier",
                                      "src": "2732:3:40"
                                    },
                                    {
                                      "name": "_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "2737:2:40"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "2728:3:40"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2728:12:40"
                                },
                                "variableNames": [
                                  {
                                    "name": "dst",
                                    "nodeType": "YulIdentifier",
                                    "src": "2721:3:40"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "src",
                                "nodeType": "YulIdentifier",
                                "src": "2613:3:40"
                              },
                              {
                                "name": "srcEnd",
                                "nodeType": "YulIdentifier",
                                "src": "2618:6:40"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "2610:2:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2610:15:40"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "2626:23:40",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "2628:19:40",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "src",
                                      "nodeType": "YulIdentifier",
                                      "src": "2639:3:40"
                                    },
                                    {
                                      "name": "_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "2644:2:40"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "2635:3:40"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2635:12:40"
                                },
                                "variableNames": [
                                  {
                                    "name": "src",
                                    "nodeType": "YulIdentifier",
                                    "src": "2628:3:40"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "2606:3:40",
                            "statements": []
                          },
                          "src": "2602:148:40"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2759:16:40",
                          "value": {
                            "name": "memPtr",
                            "nodeType": "YulIdentifier",
                            "src": "2769:6:40"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "2759:6:40"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_array$_t_address_$dyn_memory_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1721:9:40",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "1732:7:40",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1744:6:40",
                        "type": ""
                      }
                    ],
                    "src": "1660:1121:40"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2873:161:40",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2919:16:40",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2928:1:40",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2931:1:40",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2921:6:40"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2921:12:40"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2921:12:40"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "2894:7:40"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2903:9:40"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "2890:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2890:23:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2915:2:40",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "2886:3:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2886:32:40"
                          },
                          "nodeType": "YulIf",
                          "src": "2883:52:40"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2944:33:40",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2967:9:40"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "2954:12:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2954:23:40"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "2944:6:40"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2986:42:40",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3013:9:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3024:2:40",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3009:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3009:18:40"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "2996:12:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2996:32:40"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "2986:6:40"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "2831:9:40",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "2842:7:40",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "2854:6:40",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "2862:6:40",
                        "type": ""
                      }
                    ],
                    "src": "2786:248:40"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3162:102:40",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "3172:26:40",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3184:9:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3195:2:40",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3180:3:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3180:18:40"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "3172:4:40"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3214:9:40"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "3229:6:40"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "3245:3:40",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "3250:1:40",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "3241:3:40"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "3241:11:40"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "3254:1:40",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "3237:3:40"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3237:19:40"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "3225:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3225:32:40"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3207:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3207:51:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3207:51:40"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_contract$_IDefaultPool_$13991__to_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "3131:9:40",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "3142:6:40",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "3153:4:40",
                        "type": ""
                      }
                    ],
                    "src": "3039:225:40"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3339:110:40",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3385:16:40",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3394:1:40",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3397:1:40",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "3387:6:40"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3387:12:40"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3387:12:40"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "3360:7:40"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3369:9:40"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "3356:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3356:23:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3381:2:40",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "3352:3:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3352:32:40"
                          },
                          "nodeType": "YulIf",
                          "src": "3349:52:40"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3410:33:40",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3433:9:40"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "3420:12:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3420:23:40"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "3410:6:40"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "3305:9:40",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "3316:7:40",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "3328:6:40",
                        "type": ""
                      }
                    ],
                    "src": "3269:180:40"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3549:92:40",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "3559:26:40",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3571:9:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3582:2:40",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3567:3:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3567:18:40"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "3559:4:40"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3601:9:40"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "3626:6:40"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "3619:6:40"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3619:14:40"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "3612:6:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3612:22:40"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3594:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3594:41:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3594:41:40"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "3518:9:40",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "3529:6:40",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "3540:4:40",
                        "type": ""
                      }
                    ],
                    "src": "3454:187:40"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3766:102:40",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "3776:26:40",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3788:9:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3799:2:40",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3784:3:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3784:18:40"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "3776:4:40"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3818:9:40"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "3833:6:40"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "3849:3:40",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "3854:1:40",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "3845:3:40"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "3845:11:40"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "3858:1:40",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "3841:3:40"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3841:19:40"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "3829:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3829:32:40"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3811:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3811:51:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3811:51:40"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_contract$_IHOGToken_$14174__to_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "3735:9:40",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "3746:6:40",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "3757:4:40",
                        "type": ""
                      }
                    ],
                    "src": "3646:222:40"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3905:95:40",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3922:1:40",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3929:3:40",
                                    "type": "",
                                    "value": "224"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3934:10:40",
                                    "type": "",
                                    "value": "0x4e487b71"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "3925:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3925:20:40"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3915:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3915:31:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3915:31:40"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3962:1:40",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3965:4:40",
                                "type": "",
                                "value": "0x21"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3955:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3955:15:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3955:15:40"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3986:1:40",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3989:4:40",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "3979:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3979:15:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3979:15:40"
                        }
                      ]
                    },
                    "name": "panic_error_0x21",
                    "nodeType": "YulFunctionDefinition",
                    "src": "3873:127:40"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4227:332:40",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "4237:27:40",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4249:9:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4260:3:40",
                                "type": "",
                                "value": "160"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4245:3:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4245:19:40"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "4237:4:40"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4280:9:40"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "4291:6:40"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4273:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4273:25:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4273:25:40"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4318:9:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4329:2:40",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4314:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4314:18:40"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "4334:6:40"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4307:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4307:34:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4307:34:40"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4361:9:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4372:2:40",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4357:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4357:18:40"
                              },
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "4377:6:40"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4350:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4350:34:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4350:34:40"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4418:22:40",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x21",
                                    "nodeType": "YulIdentifier",
                                    "src": "4420:16:40"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4420:18:40"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4420:18:40"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value3",
                                    "nodeType": "YulIdentifier",
                                    "src": "4406:6:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4414:1:40",
                                    "type": "",
                                    "value": "5"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "4403:2:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4403:13:40"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "4396:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4396:21:40"
                          },
                          "nodeType": "YulIf",
                          "src": "4393:47:40"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4460:9:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4471:2:40",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4456:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4456:18:40"
                              },
                              {
                                "name": "value3",
                                "nodeType": "YulIdentifier",
                                "src": "4476:6:40"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4449:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4449:34:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4449:34:40"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4503:9:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4514:3:40",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4499:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4499:19:40"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value4",
                                    "nodeType": "YulIdentifier",
                                    "src": "4524:6:40"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "4540:3:40",
                                            "type": "",
                                            "value": "128"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "4545:1:40",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "4536:3:40"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "4536:11:40"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "4549:1:40",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "4532:3:40"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4532:19:40"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "4520:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4520:32:40"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4492:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4492:61:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4492:61:40"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_enum$_Status_$7933_t_uint128__to_t_uint256_t_uint256_t_uint256_t_uint8_t_uint128__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "4164:9:40",
                        "type": ""
                      },
                      {
                        "name": "value4",
                        "nodeType": "YulTypedName",
                        "src": "4175:6:40",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "4183:6:40",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "4191:6:40",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "4199:6:40",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "4207:6:40",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "4218:4:40",
                        "type": ""
                      }
                    ],
                    "src": "4005:554:40"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4844:1150:40",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4891:16:40",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4900:1:40",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4903:1:40",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "4893:6:40"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4893:12:40"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4893:12:40"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "4865:7:40"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4874:9:40"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "4861:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4861:23:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4886:3:40",
                                "type": "",
                                "value": "384"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "4857:3:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4857:33:40"
                          },
                          "nodeType": "YulIf",
                          "src": "4854:53:40"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4916:36:40",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4942:9:40"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "4929:12:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4929:23:40"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "4920:5:40",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "4986:5:40"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "4961:24:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4961:31:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4961:31:40"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5001:15:40",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "5011:5:40"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "5001:6:40"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5025:47:40",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5057:9:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5068:2:40",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5053:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5053:18:40"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "5040:12:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5040:32:40"
                          },
                          "variables": [
                            {
                              "name": "value_1",
                              "nodeType": "YulTypedName",
                              "src": "5029:7:40",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value_1",
                                "nodeType": "YulIdentifier",
                                "src": "5106:7:40"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "5081:24:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5081:33:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5081:33:40"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5123:17:40",
                          "value": {
                            "name": "value_1",
                            "nodeType": "YulIdentifier",
                            "src": "5133:7:40"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "5123:6:40"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5149:47:40",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5181:9:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5192:2:40",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5177:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5177:18:40"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "5164:12:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5164:32:40"
                          },
                          "variables": [
                            {
                              "name": "value_2",
                              "nodeType": "YulTypedName",
                              "src": "5153:7:40",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value_2",
                                "nodeType": "YulIdentifier",
                                "src": "5230:7:40"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "5205:24:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5205:33:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5205:33:40"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5247:17:40",
                          "value": {
                            "name": "value_2",
                            "nodeType": "YulIdentifier",
                            "src": "5257:7:40"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "5247:6:40"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5273:47:40",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5305:9:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5316:2:40",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5301:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5301:18:40"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "5288:12:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5288:32:40"
                          },
                          "variables": [
                            {
                              "name": "value_3",
                              "nodeType": "YulTypedName",
                              "src": "5277:7:40",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value_3",
                                "nodeType": "YulIdentifier",
                                "src": "5354:7:40"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "5329:24:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5329:33:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5329:33:40"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5371:17:40",
                          "value": {
                            "name": "value_3",
                            "nodeType": "YulIdentifier",
                            "src": "5381:7:40"
                          },
                          "variableNames": [
                            {
                              "name": "value3",
                              "nodeType": "YulIdentifier",
                              "src": "5371:6:40"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5397:48:40",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5429:9:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5440:3:40",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5425:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5425:19:40"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "5412:12:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5412:33:40"
                          },
                          "variables": [
                            {
                              "name": "value_4",
                              "nodeType": "YulTypedName",
                              "src": "5401:7:40",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value_4",
                                "nodeType": "YulIdentifier",
                                "src": "5479:7:40"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "5454:24:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5454:33:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5454:33:40"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5496:17:40",
                          "value": {
                            "name": "value_4",
                            "nodeType": "YulIdentifier",
                            "src": "5506:7:40"
                          },
                          "variableNames": [
                            {
                              "name": "value4",
                              "nodeType": "YulIdentifier",
                              "src": "5496:6:40"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5522:48:40",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5554:9:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5565:3:40",
                                    "type": "",
                                    "value": "160"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5550:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5550:19:40"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "5537:12:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5537:33:40"
                          },
                          "variables": [
                            {
                              "name": "value_5",
                              "nodeType": "YulTypedName",
                              "src": "5526:7:40",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value_5",
                                "nodeType": "YulIdentifier",
                                "src": "5604:7:40"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "5579:24:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5579:33:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5579:33:40"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5621:17:40",
                          "value": {
                            "name": "value_5",
                            "nodeType": "YulIdentifier",
                            "src": "5631:7:40"
                          },
                          "variableNames": [
                            {
                              "name": "value5",
                              "nodeType": "YulIdentifier",
                              "src": "5621:6:40"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5647:49:40",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5680:9:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5691:3:40",
                                    "type": "",
                                    "value": "192"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5676:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5676:19:40"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "5657:18:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5657:39:40"
                          },
                          "variableNames": [
                            {
                              "name": "value6",
                              "nodeType": "YulIdentifier",
                              "src": "5647:6:40"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5705:49:40",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5738:9:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5749:3:40",
                                    "type": "",
                                    "value": "224"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5734:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5734:19:40"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "5715:18:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5715:39:40"
                          },
                          "variableNames": [
                            {
                              "name": "value7",
                              "nodeType": "YulIdentifier",
                              "src": "5705:6:40"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5763:49:40",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5796:9:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5807:3:40",
                                    "type": "",
                                    "value": "256"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5792:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5792:19:40"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "5773:18:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5773:39:40"
                          },
                          "variableNames": [
                            {
                              "name": "value8",
                              "nodeType": "YulIdentifier",
                              "src": "5763:6:40"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5821:49:40",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5854:9:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5865:3:40",
                                    "type": "",
                                    "value": "288"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5850:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5850:19:40"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "5831:18:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5831:39:40"
                          },
                          "variableNames": [
                            {
                              "name": "value9",
                              "nodeType": "YulIdentifier",
                              "src": "5821:6:40"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5879:50:40",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5913:9:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5924:3:40",
                                    "type": "",
                                    "value": "320"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5909:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5909:19:40"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "5890:18:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5890:39:40"
                          },
                          "variableNames": [
                            {
                              "name": "value10",
                              "nodeType": "YulIdentifier",
                              "src": "5879:7:40"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5938:50:40",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5972:9:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5983:3:40",
                                    "type": "",
                                    "value": "352"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5968:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5968:19:40"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "5949:18:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5949:39:40"
                          },
                          "variableNames": [
                            {
                              "name": "value11",
                              "nodeType": "YulIdentifier",
                              "src": "5938:7:40"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_addresst_addresst_addresst_addresst_addresst_addresst_addresst_addresst_addresst_addresst_contract$_IFeesRouter_$14008",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "4720:9:40",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "4731:7:40",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "4743:6:40",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "4751:6:40",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "4759:6:40",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "4767:6:40",
                        "type": ""
                      },
                      {
                        "name": "value4",
                        "nodeType": "YulTypedName",
                        "src": "4775:6:40",
                        "type": ""
                      },
                      {
                        "name": "value5",
                        "nodeType": "YulTypedName",
                        "src": "4783:6:40",
                        "type": ""
                      },
                      {
                        "name": "value6",
                        "nodeType": "YulTypedName",
                        "src": "4791:6:40",
                        "type": ""
                      },
                      {
                        "name": "value7",
                        "nodeType": "YulTypedName",
                        "src": "4799:6:40",
                        "type": ""
                      },
                      {
                        "name": "value8",
                        "nodeType": "YulTypedName",
                        "src": "4807:6:40",
                        "type": ""
                      },
                      {
                        "name": "value9",
                        "nodeType": "YulTypedName",
                        "src": "4815:6:40",
                        "type": ""
                      },
                      {
                        "name": "value10",
                        "nodeType": "YulTypedName",
                        "src": "4823:7:40",
                        "type": ""
                      },
                      {
                        "name": "value11",
                        "nodeType": "YulTypedName",
                        "src": "4832:7:40",
                        "type": ""
                      }
                    ],
                    "src": "4564:1430:40"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6120:102:40",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "6130:26:40",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6142:9:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6153:2:40",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6138:3:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6138:18:40"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "6130:4:40"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6172:9:40"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "6187:6:40"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "6203:3:40",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "6208:1:40",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "6199:3:40"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "6199:11:40"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "6212:1:40",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "6195:3:40"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6195:19:40"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "6183:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6183:32:40"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6165:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6165:51:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6165:51:40"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_contract$_IPriceFeed_$14250__to_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "6089:9:40",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "6100:6:40",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "6111:4:40",
                        "type": ""
                      }
                    ],
                    "src": "5999:223:40"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6328:102:40",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "6338:26:40",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6350:9:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6361:2:40",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6346:3:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6346:18:40"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "6338:4:40"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6380:9:40"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "6395:6:40"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "6411:3:40",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "6416:1:40",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "6407:3:40"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "6407:11:40"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "6420:1:40",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "6403:3:40"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6403:19:40"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "6391:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6391:32:40"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6373:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6373:51:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6373:51:40"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "6297:9:40",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "6308:6:40",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "6319:4:40",
                        "type": ""
                      }
                    ],
                    "src": "6227:203:40"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6557:102:40",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "6567:26:40",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6579:9:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6590:2:40",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6575:3:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6575:18:40"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "6567:4:40"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6609:9:40"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "6624:6:40"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "6640:3:40",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "6645:1:40",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "6636:3:40"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "6636:11:40"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "6649:1:40",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "6632:3:40"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6632:19:40"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "6620:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6620:32:40"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6602:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6602:51:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6602:51:40"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_contract$_IActivePool_$13652__to_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "6526:9:40",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "6537:6:40",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "6548:4:40",
                        "type": ""
                      }
                    ],
                    "src": "6435:224:40"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6791:102:40",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "6801:26:40",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6813:9:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6824:2:40",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6809:3:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6809:18:40"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "6801:4:40"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6843:9:40"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "6858:6:40"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "6874:3:40",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "6879:1:40",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "6870:3:40"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "6870:11:40"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "6883:1:40",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "6866:3:40"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6866:19:40"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "6854:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6854:32:40"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6836:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6836:51:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6836:51:40"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_contract$_IBaseFeeLMAToken_$13716__to_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "6760:9:40",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "6771:6:40",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "6782:4:40",
                        "type": ""
                      }
                    ],
                    "src": "6664:229:40"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7019:427:40",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "7029:12:40",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7039:2:40",
                            "type": "",
                            "value": "32"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "7033:2:40",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7057:9:40"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "7068:2:40"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7050:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7050:21:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7050:21:40"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "7080:27:40",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "7100:6:40"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "7094:5:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7094:13:40"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "7084:6:40",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7127:9:40"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "7138:2:40"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7123:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7123:18:40"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "7143:6:40"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7116:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7116:34:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7116:34:40"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "7159:10:40",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7168:1:40",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "i",
                              "nodeType": "YulTypedName",
                              "src": "7163:1:40",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "7228:90:40",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "headStart",
                                              "nodeType": "YulIdentifier",
                                              "src": "7257:9:40"
                                            },
                                            {
                                              "name": "i",
                                              "nodeType": "YulIdentifier",
                                              "src": "7268:1:40"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "7253:3:40"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "7253:17:40"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "7272:2:40",
                                          "type": "",
                                          "value": "64"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "7249:3:40"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "7249:26:40"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                {
                                                  "name": "value0",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "7291:6:40"
                                                },
                                                {
                                                  "name": "i",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "7299:1:40"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "add",
                                                "nodeType": "YulIdentifier",
                                                "src": "7287:3:40"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "7287:14:40"
                                            },
                                            {
                                              "name": "_1",
                                              "nodeType": "YulIdentifier",
                                              "src": "7303:2:40"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "7283:3:40"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "7283:23:40"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "7277:5:40"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "7277:30:40"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "7242:6:40"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "7242:66:40"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "7242:66:40"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "7189:1:40"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "7192:6:40"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "7186:2:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7186:13:40"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "7200:19:40",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "7202:15:40",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "7211:1:40"
                                    },
                                    {
                                      "name": "_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "7214:2:40"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "7207:3:40"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "7207:10:40"
                                },
                                "variableNames": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "7202:1:40"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "7182:3:40",
                            "statements": []
                          },
                          "src": "7178:140:40"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "7342:9:40"
                                      },
                                      {
                                        "name": "length",
                                        "nodeType": "YulIdentifier",
                                        "src": "7353:6:40"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "7338:3:40"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7338:22:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7362:2:40",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7334:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7334:31:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7367:1:40",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7327:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7327:42:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7327:42:40"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "7378:62:40",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7394:9:40"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "length",
                                            "nodeType": "YulIdentifier",
                                            "src": "7413:6:40"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "7421:2:40",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "7409:3:40"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "7409:15:40"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "7430:2:40",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "not",
                                          "nodeType": "YulIdentifier",
                                          "src": "7426:3:40"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "7426:7:40"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "7405:3:40"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7405:29:40"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7390:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7390:45:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7437:2:40",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7386:3:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7386:54:40"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "7378:4:40"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "6988:9:40",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "6999:6:40",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "7010:4:40",
                        "type": ""
                      }
                    ],
                    "src": "6898:548:40"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7575:102:40",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "7585:26:40",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7597:9:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7608:2:40",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7593:3:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7593:18:40"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "7585:4:40"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7627:9:40"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "7642:6:40"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "7658:3:40",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "7663:1:40",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "7654:3:40"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "7654:11:40"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "7667:1:40",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "7650:3:40"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7650:19:40"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "7638:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7638:32:40"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7620:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7620:51:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7620:51:40"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_contract$_ISortedTroves_$14382__to_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "7544:9:40",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "7555:6:40",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "7566:4:40",
                        "type": ""
                      }
                    ],
                    "src": "7451:226:40"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7804:102:40",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "7814:26:40",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7826:9:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7837:2:40",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7822:3:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7822:18:40"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "7814:4:40"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7856:9:40"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "7871:6:40"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "7887:3:40",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "7892:1:40",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "7883:3:40"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "7883:11:40"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "7896:1:40",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "7879:3:40"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7879:19:40"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "7867:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7867:32:40"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7849:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7849:51:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7849:51:40"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_contract$_IHOGStaking_$14118__to_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "7773:9:40",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "7784:6:40",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "7795:4:40",
                        "type": ""
                      }
                    ],
                    "src": "7682:224:40"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "8096:206:40",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "8106:27:40",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8118:9:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8129:3:40",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8114:3:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8114:19:40"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "8106:4:40"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8149:9:40"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "8160:6:40"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8142:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8142:25:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8142:25:40"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8187:9:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8198:2:40",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8183:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8183:18:40"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "8203:6:40"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8176:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8176:34:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8176:34:40"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8230:9:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8241:2:40",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8226:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8226:18:40"
                              },
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "8246:6:40"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8219:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8219:34:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8219:34:40"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8273:9:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8284:2:40",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8269:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8269:18:40"
                              },
                              {
                                "name": "value3",
                                "nodeType": "YulIdentifier",
                                "src": "8289:6:40"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8262:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8262:34:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8262:34:40"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "8041:9:40",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "8052:6:40",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "8060:6:40",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "8068:6:40",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "8076:6:40",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "8087:4:40",
                        "type": ""
                      }
                    ],
                    "src": "7911:391:40"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "8479:633:40",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "8526:16:40",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "8535:1:40",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "8538:1:40",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "8528:6:40"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "8528:12:40"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "8528:12:40"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "8500:7:40"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8509:9:40"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "8496:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8496:23:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8521:3:40",
                                "type": "",
                                "value": "224"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "8492:3:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8492:33:40"
                          },
                          "nodeType": "YulIf",
                          "src": "8489:53:40"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "8551:33:40",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8574:9:40"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "8561:12:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8561:23:40"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "8551:6:40"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "8593:45:40",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8623:9:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8634:2:40",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8619:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8619:18:40"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "8606:12:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8606:32:40"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "8597:5:40",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "8672:5:40"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "8647:24:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8647:31:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8647:31:40"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "8687:15:40",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "8697:5:40"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "8687:6:40"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "8711:47:40",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8743:9:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8754:2:40",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8739:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8739:18:40"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "8726:12:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8726:32:40"
                          },
                          "variables": [
                            {
                              "name": "value_1",
                              "nodeType": "YulTypedName",
                              "src": "8715:7:40",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value_1",
                                "nodeType": "YulIdentifier",
                                "src": "8792:7:40"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "8767:24:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8767:33:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8767:33:40"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "8809:17:40",
                          "value": {
                            "name": "value_1",
                            "nodeType": "YulIdentifier",
                            "src": "8819:7:40"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "8809:6:40"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "8835:47:40",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8867:9:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8878:2:40",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8863:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8863:18:40"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "8850:12:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8850:32:40"
                          },
                          "variables": [
                            {
                              "name": "value_2",
                              "nodeType": "YulTypedName",
                              "src": "8839:7:40",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value_2",
                                "nodeType": "YulIdentifier",
                                "src": "8916:7:40"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "8891:24:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8891:33:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8891:33:40"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "8933:17:40",
                          "value": {
                            "name": "value_2",
                            "nodeType": "YulIdentifier",
                            "src": "8943:7:40"
                          },
                          "variableNames": [
                            {
                              "name": "value3",
                              "nodeType": "YulIdentifier",
                              "src": "8933:6:40"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "8959:43:40",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8986:9:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8997:3:40",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8982:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8982:19:40"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "8969:12:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8969:33:40"
                          },
                          "variableNames": [
                            {
                              "name": "value4",
                              "nodeType": "YulIdentifier",
                              "src": "8959:6:40"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "9011:43:40",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9038:9:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9049:3:40",
                                    "type": "",
                                    "value": "160"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9034:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9034:19:40"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "9021:12:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9021:33:40"
                          },
                          "variableNames": [
                            {
                              "name": "value5",
                              "nodeType": "YulIdentifier",
                              "src": "9011:6:40"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "9063:43:40",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9090:9:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9101:3:40",
                                    "type": "",
                                    "value": "192"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9086:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9086:19:40"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "9073:12:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9073:33:40"
                          },
                          "variableNames": [
                            {
                              "name": "value6",
                              "nodeType": "YulIdentifier",
                              "src": "9063:6:40"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256t_addresst_addresst_addresst_uint256t_uint256t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "8397:9:40",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "8408:7:40",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "8420:6:40",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "8428:6:40",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "8436:6:40",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "8444:6:40",
                        "type": ""
                      },
                      {
                        "name": "value4",
                        "nodeType": "YulTypedName",
                        "src": "8452:6:40",
                        "type": ""
                      },
                      {
                        "name": "value5",
                        "nodeType": "YulTypedName",
                        "src": "8460:6:40",
                        "type": ""
                      },
                      {
                        "name": "value6",
                        "nodeType": "YulTypedName",
                        "src": "8468:6:40",
                        "type": ""
                      }
                    ],
                    "src": "8307:805:40"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9239:102:40",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "9249:26:40",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9261:9:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9272:2:40",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9257:3:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9257:18:40"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "9249:4:40"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9291:9:40"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "9306:6:40"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "9322:3:40",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "9327:1:40",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "9318:3:40"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "9318:11:40"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "9331:1:40",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "9314:3:40"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9314:19:40"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "9302:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9302:32:40"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9284:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9284:51:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9284:51:40"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_contract$_IFeesRouter_$14008__to_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "9208:9:40",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "9219:6:40",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "9230:4:40",
                        "type": ""
                      }
                    ],
                    "src": "9117:224:40"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9520:244:40",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9537:9:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9548:2:40",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9530:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9530:21:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9530:21:40"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9571:9:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9582:2:40",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9567:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9567:18:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9587:2:40",
                                "type": "",
                                "value": "54"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9560:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9560:30:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9560:30:40"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9610:9:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9621:2:40",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9606:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9606:18:40"
                              },
                              {
                                "hexValue": "54726f76654d616e616765723a2043616c6c6461746120616464726573732061",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "9626:34:40",
                                "type": "",
                                "value": "TroveManager: Calldata address a"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9599:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9599:62:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9599:62:40"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9681:9:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9692:2:40",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9677:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9677:18:40"
                              },
                              {
                                "hexValue": "72726179206d757374206e6f7420626520656d707479",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "9697:24:40",
                                "type": "",
                                "value": "rray must not be empty"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9670:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9670:52:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9670:52:40"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "9731:27:40",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9743:9:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9754:3:40",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9739:3:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9739:19:40"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "9731:4:40"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_c5c02bb6f017f1fb4f7d5edc2496c9c92f139d3cb1a6efb75b0760a3f8a68acc__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "9497:9:40",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "9511:4:40",
                        "type": ""
                      }
                    ],
                    "src": "9346:418:40"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9850:103:40",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "9896:16:40",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "9905:1:40",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "9908:1:40",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "9898:6:40"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "9898:12:40"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "9898:12:40"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "9871:7:40"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9880:9:40"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "9867:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9867:23:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9892:2:40",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "9863:3:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9863:32:40"
                          },
                          "nodeType": "YulIf",
                          "src": "9860:52:40"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "9921:26:40",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9937:9:40"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "9931:5:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9931:16:40"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "9921:6:40"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "9816:9:40",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "9827:7:40",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "9839:6:40",
                        "type": ""
                      }
                    ],
                    "src": "9769:184:40"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "10132:224:40",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10149:9:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10160:2:40",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10142:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10142:21:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10142:21:40"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10183:9:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10194:2:40",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10179:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10179:18:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10199:2:40",
                                "type": "",
                                "value": "34"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10172:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10172:30:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10172:30:40"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10222:9:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10233:2:40",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10218:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10218:18:40"
                              },
                              {
                                "hexValue": "54726f76654d616e616765723a206e6f7468696e6720746f206c697175696461",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "10238:34:40",
                                "type": "",
                                "value": "TroveManager: nothing to liquida"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10211:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10211:62:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10211:62:40"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10293:9:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10304:2:40",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10289:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10289:18:40"
                              },
                              {
                                "hexValue": "7465",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "10309:4:40",
                                "type": "",
                                "value": "te"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10282:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10282:32:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10282:32:40"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "10323:27:40",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10335:9:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10346:3:40",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10331:3:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10331:19:40"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "10323:4:40"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_f53a59d0a88811be96067d6d327988285856817766082bcb22560117b222c207__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "10109:9:40",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "10123:4:40",
                        "type": ""
                      }
                    ],
                    "src": "9958:398:40"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "10490:145:40",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "10500:26:40",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10512:9:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10523:2:40",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10508:3:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10508:18:40"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "10500:4:40"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10542:9:40"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "10557:6:40"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "10573:3:40",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "10578:1:40",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "10569:3:40"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "10569:11:40"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "10582:1:40",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "10565:3:40"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "10565:19:40"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "10553:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10553:32:40"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10535:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10535:51:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10535:51:40"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10606:9:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10617:2:40",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10602:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10602:18:40"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "10622:6:40"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10595:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10595:34:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10595:34:40"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "10451:9:40",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "10462:6:40",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "10470:6:40",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "10481:4:40",
                        "type": ""
                      }
                    ],
                    "src": "10361:274:40"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "10672:95:40",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10689:1:40",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10696:3:40",
                                    "type": "",
                                    "value": "224"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10701:10:40",
                                    "type": "",
                                    "value": "0x4e487b71"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "10692:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10692:20:40"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10682:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10682:31:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10682:31:40"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10729:1:40",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10732:4:40",
                                "type": "",
                                "value": "0x12"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10722:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10722:15:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10722:15:40"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10753:1:40",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10756:4:40",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "10746:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10746:15:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10746:15:40"
                        }
                      ]
                    },
                    "name": "panic_error_0x12",
                    "nodeType": "YulFunctionDefinition",
                    "src": "10640:127:40"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "10804:95:40",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10821:1:40",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10828:3:40",
                                    "type": "",
                                    "value": "224"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10833:10:40",
                                    "type": "",
                                    "value": "0x4e487b71"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "10824:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10824:20:40"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10814:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10814:31:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10814:31:40"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10861:1:40",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10864:4:40",
                                "type": "",
                                "value": "0x11"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10854:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10854:15:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10854:15:40"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10885:1:40",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10888:4:40",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "10878:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10878:15:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10878:15:40"
                        }
                      ]
                    },
                    "name": "panic_error_0x11",
                    "nodeType": "YulFunctionDefinition",
                    "src": "10772:127:40"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "10950:74:40",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "10973:22:40",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x12",
                                    "nodeType": "YulIdentifier",
                                    "src": "10975:16:40"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "10975:18:40"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "10975:18:40"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "10970:1:40"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "10963:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10963:9:40"
                          },
                          "nodeType": "YulIf",
                          "src": "10960:35:40"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "11004:14:40",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "11013:1:40"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "11016:1:40"
                              }
                            ],
                            "functionName": {
                              "name": "div",
                              "nodeType": "YulIdentifier",
                              "src": "11009:3:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11009:9:40"
                          },
                          "variableNames": [
                            {
                              "name": "r",
                              "nodeType": "YulIdentifier",
                              "src": "11004:1:40"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_div_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "10935:1:40",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "10938:1:40",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "r",
                        "nodeType": "YulTypedName",
                        "src": "10944:1:40",
                        "type": ""
                      }
                    ],
                    "src": "10904:120:40"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "11081:116:40",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "11091:20:40",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "11106:1:40"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "11109:1:40"
                              }
                            ],
                            "functionName": {
                              "name": "mul",
                              "nodeType": "YulIdentifier",
                              "src": "11102:3:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11102:9:40"
                          },
                          "variableNames": [
                            {
                              "name": "product",
                              "nodeType": "YulIdentifier",
                              "src": "11091:7:40"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "11169:22:40",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "11171:16:40"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "11171:18:40"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "11171:18:40"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "x",
                                        "nodeType": "YulIdentifier",
                                        "src": "11140:1:40"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "11133:6:40"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "11133:9:40"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "y",
                                        "nodeType": "YulIdentifier",
                                        "src": "11147:1:40"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "name": "product",
                                            "nodeType": "YulIdentifier",
                                            "src": "11154:7:40"
                                          },
                                          {
                                            "name": "x",
                                            "nodeType": "YulIdentifier",
                                            "src": "11163:1:40"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "div",
                                          "nodeType": "YulIdentifier",
                                          "src": "11150:3:40"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "11150:15:40"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "eq",
                                      "nodeType": "YulIdentifier",
                                      "src": "11144:2:40"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "11144:22:40"
                                  }
                                ],
                                "functionName": {
                                  "name": "or",
                                  "nodeType": "YulIdentifier",
                                  "src": "11130:2:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11130:37:40"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "11123:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11123:45:40"
                          },
                          "nodeType": "YulIf",
                          "src": "11120:71:40"
                        }
                      ]
                    },
                    "name": "checked_mul_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "11060:1:40",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "11063:1:40",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "product",
                        "nodeType": "YulTypedName",
                        "src": "11069:7:40",
                        "type": ""
                      }
                    ],
                    "src": "11029:168:40"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "11234:95:40",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11251:1:40",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11258:3:40",
                                    "type": "",
                                    "value": "224"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11263:10:40",
                                    "type": "",
                                    "value": "0x4e487b71"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "11254:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11254:20:40"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11244:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11244:31:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11244:31:40"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11291:1:40",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11294:4:40",
                                "type": "",
                                "value": "0x32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11284:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11284:15:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11284:15:40"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11315:1:40",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11318:4:40",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "11308:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11308:15:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11308:15:40"
                        }
                      ]
                    },
                    "name": "panic_error_0x32",
                    "nodeType": "YulFunctionDefinition",
                    "src": "11202:127:40"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "11366:95:40",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11383:1:40",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11390:3:40",
                                    "type": "",
                                    "value": "224"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11395:10:40",
                                    "type": "",
                                    "value": "0x4e487b71"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "11386:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11386:20:40"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11376:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11376:31:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11376:31:40"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11423:1:40",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11426:4:40",
                                "type": "",
                                "value": "0x01"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11416:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11416:15:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11416:15:40"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11447:1:40",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11450:4:40",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "11440:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11440:15:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11440:15:40"
                        }
                      ]
                    },
                    "name": "panic_error_0x01",
                    "nodeType": "YulFunctionDefinition",
                    "src": "11334:127:40"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "11640:237:40",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11657:9:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11668:2:40",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11650:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11650:21:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11650:21:40"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11691:9:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11702:2:40",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11687:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11687:18:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11707:2:40",
                                "type": "",
                                "value": "47"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11680:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11680:30:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11680:30:40"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11730:9:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11741:2:40",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11726:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11726:18:40"
                              },
                              {
                                "hexValue": "54726f76654d616e616765723a204f6e6c7920426f72726f776572206f706572",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "11746:34:40",
                                "type": "",
                                "value": "TroveManager: Only Borrower oper"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11719:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11719:62:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11719:62:40"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11801:9:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11812:2:40",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11797:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11797:18:40"
                              },
                              {
                                "hexValue": "6174696f6e73206d61792063616c6c",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "11817:17:40",
                                "type": "",
                                "value": "ations may call"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11790:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11790:45:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11790:45:40"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "11844:27:40",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11856:9:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11867:3:40",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "11852:3:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11852:19:40"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "11844:4:40"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_7584fd4ebb0cfc561f0eebef7e5a101860c02bbe77aada4025c19bcc4b1d1057__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "11617:9:40",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "11631:4:40",
                        "type": ""
                      }
                    ],
                    "src": "11466:411:40"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "11931:79:40",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "11941:17:40",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "11953:1:40"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "11956:1:40"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "11949:3:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11949:9:40"
                          },
                          "variableNames": [
                            {
                              "name": "diff",
                              "nodeType": "YulIdentifier",
                              "src": "11941:4:40"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "11982:22:40",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "11984:16:40"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "11984:18:40"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "11984:18:40"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "diff",
                                "nodeType": "YulIdentifier",
                                "src": "11973:4:40"
                              },
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "11979:1:40"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "11970:2:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11970:11:40"
                          },
                          "nodeType": "YulIf",
                          "src": "11967:37:40"
                        }
                      ]
                    },
                    "name": "checked_sub_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "11913:1:40",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "11916:1:40",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "diff",
                        "nodeType": "YulTypedName",
                        "src": "11922:4:40",
                        "type": ""
                      }
                    ],
                    "src": "11882:128:40"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12096:170:40",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "12142:16:40",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "12151:1:40",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "12154:1:40",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "12144:6:40"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "12144:12:40"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "12144:12:40"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "12117:7:40"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12126:9:40"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "12113:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12113:23:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12138:2:40",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "12109:3:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12109:32:40"
                          },
                          "nodeType": "YulIf",
                          "src": "12106:52:40"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "12167:29:40",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12186:9:40"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "12180:5:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12180:16:40"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "12171:5:40",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "12230:5:40"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "12205:24:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12205:31:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12205:31:40"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "12245:15:40",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "12255:5:40"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "12245:6:40"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_address_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "12062:9:40",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "12073:7:40",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "12085:6:40",
                        "type": ""
                      }
                    ],
                    "src": "12015:251:40"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12318:89:40",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "12345:22:40",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "12347:16:40"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "12347:18:40"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "12347:18:40"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "12338:5:40"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "12331:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12331:13:40"
                          },
                          "nodeType": "YulIf",
                          "src": "12328:39:40"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "12376:25:40",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "12387:5:40"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12398:1:40",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "not",
                                  "nodeType": "YulIdentifier",
                                  "src": "12394:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12394:6:40"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12383:3:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12383:18:40"
                          },
                          "variableNames": [
                            {
                              "name": "ret",
                              "nodeType": "YulIdentifier",
                              "src": "12376:3:40"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "decrement_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "12300:5:40",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "ret",
                        "nodeType": "YulTypedName",
                        "src": "12310:3:40",
                        "type": ""
                      }
                    ],
                    "src": "12271:136:40"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12586:231:40",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12603:9:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12614:2:40",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12596:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12596:21:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12596:21:40"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12637:9:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12648:2:40",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12633:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12633:18:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12653:2:40",
                                "type": "",
                                "value": "41"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12626:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12626:30:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12626:30:40"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12676:9:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12687:2:40",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12672:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12672:18:40"
                              },
                              {
                                "hexValue": "54726f76654d616e616765723a20556e61626c6520746f2072656465656d2061",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "12692:34:40",
                                "type": "",
                                "value": "TroveManager: Unable to redeem a"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12665:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12665:62:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12665:62:40"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12747:9:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12758:2:40",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12743:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12743:18:40"
                              },
                              {
                                "hexValue": "6e7920616d6f756e74",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "12763:11:40",
                                "type": "",
                                "value": "ny amount"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12736:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12736:39:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12736:39:40"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "12784:27:40",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12796:9:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12807:3:40",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12792:3:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12792:19:40"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "12784:4:40"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_2b3f8ccb98757f90ed503a7ef387edf3c874358c4f9155d10247c121e50c7412__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "12563:9:40",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "12577:4:40",
                        "type": ""
                      }
                    ],
                    "src": "12412:405:40"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12996:228:40",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13013:9:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13024:2:40",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13006:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13006:21:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13006:21:40"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13047:9:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13058:2:40",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "13043:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13043:18:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13063:2:40",
                                "type": "",
                                "value": "38"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13036:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13036:30:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13036:30:40"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13086:9:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13097:2:40",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "13082:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13082:18:40"
                              },
                              {
                                "hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "13102:34:40",
                                "type": "",
                                "value": "Ownable: new owner is the zero a"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13075:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13075:62:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13075:62:40"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13157:9:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13168:2:40",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "13153:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13153:18:40"
                              },
                              {
                                "hexValue": "646472657373",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "13173:8:40",
                                "type": "",
                                "value": "ddress"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13146:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13146:36:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13146:36:40"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "13191:27:40",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13203:9:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13214:3:40",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "13199:3:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13199:19:40"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "13191:4:40"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "12973:9:40",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "12987:4:40",
                        "type": ""
                      }
                    ],
                    "src": "12822:402:40"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "13403:249:40",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13420:9:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13431:2:40",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13413:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13413:21:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13413:21:40"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13454:9:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13465:2:40",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "13450:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13450:18:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13470:2:40",
                                "type": "",
                                "value": "59"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13443:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13443:30:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13443:30:40"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13493:9:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13504:2:40",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "13489:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13489:18:40"
                              },
                              {
                                "hexValue": "54726f76654d616e616765723a2043616c6c6572206973206e6f742074686520",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "13509:34:40",
                                "type": "",
                                "value": "TroveManager: Caller is not the "
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13482:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13482:62:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13482:62:40"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13564:9:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13575:2:40",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "13560:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13560:18:40"
                              },
                              {
                                "hexValue": "426f72726f7765724f7065726174696f6e7320636f6e7472616374",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "13580:29:40",
                                "type": "",
                                "value": "BorrowerOperations contract"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13553:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13553:57:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13553:57:40"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "13619:27:40",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13631:9:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13642:3:40",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "13627:3:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13627:19:40"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "13619:4:40"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_a5b6d3f6db4f0a882ae833ad5428aedbdf437b271f162fd95dc97ff478b6c703__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "13380:9:40",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "13394:4:40",
                        "type": ""
                      }
                    ],
                    "src": "13229:423:40"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "13720:89:40",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "13754:22:40",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x21",
                                    "nodeType": "YulIdentifier",
                                    "src": "13756:16:40"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "13756:18:40"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "13756:18:40"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "13743:5:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13750:1:40",
                                    "type": "",
                                    "value": "4"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "13740:2:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13740:12:40"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "13733:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13733:20:40"
                          },
                          "nodeType": "YulIf",
                          "src": "13730:46:40"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "13792:3:40"
                              },
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "13797:5:40"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13785:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13785:18:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13785:18:40"
                        }
                      ]
                    },
                    "name": "abi_encode_enum_TroveManagerOperation",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "13704:5:40",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "13711:3:40",
                        "type": ""
                      }
                    ],
                    "src": "13657:152:40"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "14023:237:40",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "14033:27:40",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14045:9:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14056:3:40",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "14041:3:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14041:19:40"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "14033:4:40"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14076:9:40"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "14087:6:40"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14069:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14069:25:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14069:25:40"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14114:9:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14125:2:40",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "14110:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14110:18:40"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "14130:6:40"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14103:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14103:34:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14103:34:40"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14157:9:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14168:2:40",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "14153:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14153:18:40"
                              },
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "14173:6:40"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14146:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14146:34:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14146:34:40"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value3",
                                "nodeType": "YulIdentifier",
                                "src": "14227:6:40"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14239:9:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14250:2:40",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "14235:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14235:18:40"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_enum_TroveManagerOperation",
                              "nodeType": "YulIdentifier",
                              "src": "14189:37:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14189:65:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14189:65:40"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_enum$_TroveManagerOperation_$8235__to_t_uint256_t_uint256_t_uint256_t_uint8__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "13968:9:40",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "13979:6:40",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "13987:6:40",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "13995:6:40",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "14003:6:40",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "14014:4:40",
                        "type": ""
                      }
                    ],
                    "src": "13814:446:40"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "14312:88:40",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "14343:22:40",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "14345:16:40"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "14345:18:40"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "14345:18:40"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "14328:5:40"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14339:1:40",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "not",
                                  "nodeType": "YulIdentifier",
                                  "src": "14335:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14335:6:40"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "14325:2:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14325:17:40"
                          },
                          "nodeType": "YulIf",
                          "src": "14322:43:40"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "14374:20:40",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "14385:5:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14392:1:40",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "14381:3:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14381:13:40"
                          },
                          "variableNames": [
                            {
                              "name": "ret",
                              "nodeType": "YulIdentifier",
                              "src": "14374:3:40"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "increment_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "14294:5:40",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "ret",
                        "nodeType": "YulTypedName",
                        "src": "14304:3:40",
                        "type": ""
                      }
                    ],
                    "src": "14265:135:40"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "14562:218:40",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "14572:26:40",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14584:9:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14595:2:40",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "14580:3:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14580:18:40"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "14572:4:40"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "14607:29:40",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14625:3:40",
                                    "type": "",
                                    "value": "160"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14630:1:40",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "14621:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14621:11:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14634:1:40",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "14617:3:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14617:19:40"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "14611:2:40",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14652:9:40"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "14667:6:40"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "14675:2:40"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "14663:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14663:15:40"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14645:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14645:34:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14645:34:40"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14699:9:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14710:2:40",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "14695:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14695:18:40"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "14719:6:40"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "14727:2:40"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "14715:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14715:15:40"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14688:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14688:43:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14688:43:40"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14751:9:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14762:2:40",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "14747:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14747:18:40"
                              },
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "14767:6:40"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14740:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14740:34:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14740:34:40"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "14515:9:40",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "14526:6:40",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "14534:6:40",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "14542:6:40",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "14553:4:40",
                        "type": ""
                      }
                    ],
                    "src": "14405:375:40"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "14833:77:40",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "14843:16:40",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "14854:1:40"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "14857:1:40"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "14850:3:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14850:9:40"
                          },
                          "variableNames": [
                            {
                              "name": "sum",
                              "nodeType": "YulIdentifier",
                              "src": "14843:3:40"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "14882:22:40",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "14884:16:40"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "14884:18:40"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "14884:18:40"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "14874:1:40"
                              },
                              {
                                "name": "sum",
                                "nodeType": "YulIdentifier",
                                "src": "14877:3:40"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "14871:2:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14871:10:40"
                          },
                          "nodeType": "YulIf",
                          "src": "14868:36:40"
                        }
                      ]
                    },
                    "name": "checked_add_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "14816:1:40",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "14819:1:40",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "sum",
                        "nodeType": "YulTypedName",
                        "src": "14825:3:40",
                        "type": ""
                      }
                    ],
                    "src": "14785:125:40"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "15089:237:40",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15106:9:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15117:2:40",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15099:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15099:21:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15099:21:40"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15140:9:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15151:2:40",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "15136:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15136:18:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15156:2:40",
                                "type": "",
                                "value": "47"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15129:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15129:30:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15129:30:40"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15179:9:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15190:2:40",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "15175:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15175:18:40"
                              },
                              {
                                "hexValue": "54726f76654d616e616765723a2054726f766520646f6573206e6f7420657869",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "15195:34:40",
                                "type": "",
                                "value": "TroveManager: Trove does not exi"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15168:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15168:62:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15168:62:40"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15250:9:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15261:2:40",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "15246:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15246:18:40"
                              },
                              {
                                "hexValue": "7374206f7220697320636c6f736564",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "15266:17:40",
                                "type": "",
                                "value": "st or is closed"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15239:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15239:45:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15239:45:40"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "15293:27:40",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15305:9:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15316:3:40",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "15301:3:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15301:19:40"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "15293:4:40"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_f8ec48568410e94e913ce626873fb69e955772a1f192a4412dc8945cf35ddca6__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "15066:9:40",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "15080:4:40",
                        "type": ""
                      }
                    ],
                    "src": "14915:411:40"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "15505:182:40",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15522:9:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15533:2:40",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15515:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15515:21:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15515:21:40"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15556:9:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15567:2:40",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "15552:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15552:18:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15572:2:40",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15545:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15545:30:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15545:30:40"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15595:9:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15606:2:40",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "15591:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15591:18:40"
                              },
                              {
                                "hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "15611:34:40",
                                "type": "",
                                "value": "Ownable: caller is not the owner"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15584:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15584:62:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15584:62:40"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "15655:26:40",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15667:9:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15678:2:40",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "15663:3:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15663:18:40"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "15655:4:40"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "15482:9:40",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "15496:4:40",
                        "type": ""
                      }
                    ],
                    "src": "15331:356:40"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "15866:180:40",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15883:9:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15894:2:40",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15876:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15876:21:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15876:21:40"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15917:9:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15928:2:40",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "15913:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15913:18:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15933:2:40",
                                "type": "",
                                "value": "30"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15906:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15906:30:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15906:30:40"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15956:9:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15967:2:40",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "15952:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15952:18:40"
                              },
                              {
                                "hexValue": "4163636f756e742063616e6e6f74206265207a65726f2061646472657373",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "15972:32:40",
                                "type": "",
                                "value": "Account cannot be zero address"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15945:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15945:60:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15945:60:40"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "16014:26:40",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16026:9:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16037:2:40",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "16022:3:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16022:18:40"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "16014:4:40"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_71630fb59e6335519b5c714c347f2b3d00653f9607ebc84cc566a5b693547569__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "15843:9:40",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "15857:4:40",
                        "type": ""
                      }
                    ],
                    "src": "15692:354:40"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "16225:182:40",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16242:9:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16253:2:40",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16235:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16235:21:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16235:21:40"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16276:9:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16287:2:40",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16272:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16272:18:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16292:2:40",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16265:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16265:30:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16265:30:40"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16315:9:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16326:2:40",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16311:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16311:18:40"
                              },
                              {
                                "hexValue": "4163636f756e7420636f64652073697a652063616e6e6f74206265207a65726f",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "16331:34:40",
                                "type": "",
                                "value": "Account code size cannot be zero"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16304:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16304:62:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16304:62:40"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "16375:26:40",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16387:9:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16398:2:40",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "16383:3:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16383:18:40"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "16375:4:40"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_dcf7beb71f973a2a4b4f293fe67c3b380ce91c14fb11529cf06f13e17f4fde3b__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "16202:9:40",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "16216:4:40",
                        "type": ""
                      }
                    ],
                    "src": "16051:356:40"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "16586:238:40",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16603:9:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16614:2:40",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16596:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16596:21:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16596:21:40"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16637:9:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16648:2:40",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16633:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16633:18:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16653:2:40",
                                "type": "",
                                "value": "48"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16626:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16626:30:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16626:30:40"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16676:9:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16687:2:40",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16672:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16672:18:40"
                              },
                              {
                                "hexValue": "4d6178206665652070657263656e74616765206d757374206265206265747765",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "16692:34:40",
                                "type": "",
                                "value": "Max fee percentage must be betwe"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16665:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16665:62:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16665:62:40"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16747:9:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16758:2:40",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16743:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16743:18:40"
                              },
                              {
                                "hexValue": "656e20302e352520616e642031303025",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "16763:18:40",
                                "type": "",
                                "value": "en 0.5% and 100%"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16736:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16736:46:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16736:46:40"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "16791:27:40",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16803:9:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16814:3:40",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "16799:3:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16799:19:40"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "16791:4:40"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_e50be9df6f9cec2f12ef42eb933f1a808d16efcb95019f9e501cc93218919cd7__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "16563:9:40",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "16577:4:40",
                        "type": ""
                      }
                    ],
                    "src": "16412:412:40"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "17003:232:40",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17020:9:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17031:2:40",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17013:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17013:21:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17013:21:40"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "17054:9:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17065:2:40",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "17050:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17050:18:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17070:2:40",
                                "type": "",
                                "value": "42"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17043:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17043:30:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17043:30:40"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "17093:9:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17104:2:40",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "17089:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17089:18:40"
                              },
                              {
                                "hexValue": "54726f76654d616e616765723a2043616e6e6f742072656465656d207768656e",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "17109:34:40",
                                "type": "",
                                "value": "TroveManager: Cannot redeem when"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17082:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17082:62:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17082:62:40"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "17164:9:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17175:2:40",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "17160:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17160:18:40"
                              },
                              {
                                "hexValue": "20544352203c204d4352",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "17180:12:40",
                                "type": "",
                                "value": " TCR < MCR"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17153:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17153:40:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17153:40:40"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "17202:27:40",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17214:9:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17225:3:40",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "17210:3:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17210:19:40"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "17202:4:40"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_ef02c2bdac35413fdff17b472f65263dca9409d28ed2688a496d3823e2fa6573__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "16980:9:40",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "16994:4:40",
                        "type": ""
                      }
                    ],
                    "src": "16829:406:40"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "17414:236:40",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17431:9:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17442:2:40",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17424:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17424:21:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17424:21:40"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "17465:9:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17476:2:40",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "17461:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17461:18:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17481:2:40",
                                "type": "",
                                "value": "46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17454:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17454:30:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17454:30:40"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "17504:9:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17515:2:40",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "17500:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17500:18:40"
                              },
                              {
                                "hexValue": "54726f76654d616e616765723a20416d6f756e74206d75737420626520677265",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "17520:34:40",
                                "type": "",
                                "value": "TroveManager: Amount must be gre"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17493:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17493:62:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17493:62:40"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "17575:9:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17586:2:40",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "17571:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17571:18:40"
                              },
                              {
                                "hexValue": "61746572207468616e207a65726f",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "17591:16:40",
                                "type": "",
                                "value": "ater than zero"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17564:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17564:44:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17564:44:40"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "17617:27:40",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17629:9:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17640:3:40",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "17625:3:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17625:19:40"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "17617:4:40"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_d50ee9a9848e4a1fc6c9aec8c7717d42a161185832a068487f8227dffd2c35b5__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "17391:9:40",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "17405:4:40",
                        "type": ""
                      }
                    ],
                    "src": "17240:410:40"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "17829:314:40",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17846:9:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17857:2:40",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17839:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17839:21:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17839:21:40"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "17880:9:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17891:2:40",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "17876:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17876:18:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17896:2:40",
                                "type": "",
                                "value": "84"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17869:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17869:30:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17869:30:40"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "17919:9:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17930:2:40",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "17915:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17915:18:40"
                              },
                              {
                                "hexValue": "54726f76654d616e616765723a2052657175657374656420726564656d707469",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "17935:34:40",
                                "type": "",
                                "value": "TroveManager: Requested redempti"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17908:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17908:62:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17908:62:40"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "17990:9:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18001:2:40",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "17986:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17986:18:40"
                              },
                              {
                                "hexValue": "6f6e20616d6f756e74206d757374206265203c3d207573657227732042617365",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "18006:34:40",
                                "type": "",
                                "value": "on amount must be <= user's Base"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17979:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17979:62:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17979:62:40"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "18061:9:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18072:3:40",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "18057:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18057:19:40"
                              },
                              {
                                "hexValue": "4665654c4d4120746f6b656e2062616c616e6365",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "18078:22:40",
                                "type": "",
                                "value": "FeeLMA token balance"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "18050:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18050:51:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18050:51:40"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "18110:27:40",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "18122:9:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18133:3:40",
                                "type": "",
                                "value": "160"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "18118:3:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18118:19:40"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "18110:4:40"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_f95289a8642d0027690eb85480f9e7e95699494ee6326d5d4cb8b8b692354c5b__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "17806:9:40",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "17820:4:40",
                        "type": ""
                      }
                    ],
                    "src": "17655:488:40"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "18226:199:40",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "18272:16:40",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "18281:1:40",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "18284:1:40",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "18274:6:40"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "18274:12:40"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "18274:12:40"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "18247:7:40"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "18256:9:40"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "18243:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18243:23:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18268:2:40",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "18239:3:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18239:32:40"
                          },
                          "nodeType": "YulIf",
                          "src": "18236:52:40"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "18297:29:40",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "18316:9:40"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "18310:5:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18310:16:40"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "18301:5:40",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "18379:16:40",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "18388:1:40",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "18391:1:40",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "18381:6:40"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "18381:12:40"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "18381:12:40"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "18348:5:40"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "value",
                                            "nodeType": "YulIdentifier",
                                            "src": "18369:5:40"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "iszero",
                                          "nodeType": "YulIdentifier",
                                          "src": "18362:6:40"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "18362:13:40"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "18355:6:40"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "18355:21:40"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "18345:2:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18345:32:40"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "18338:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18338:40:40"
                          },
                          "nodeType": "YulIf",
                          "src": "18335:60:40"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "18404:15:40",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "18414:5:40"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "18404:6:40"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bool_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "18192:9:40",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "18203:7:40",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "18215:6:40",
                        "type": ""
                      }
                    ],
                    "src": "18148:277:40"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "18663:237:40",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "18673:27:40",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "18685:9:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18696:3:40",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "18681:3:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18681:19:40"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "18673:4:40"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "18716:9:40"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "18727:6:40"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "18709:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18709:25:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18709:25:40"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "18754:9:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18765:2:40",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "18750:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18750:18:40"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "18770:6:40"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "18743:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18743:34:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18743:34:40"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "18797:9:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18808:2:40",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "18793:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18793:18:40"
                              },
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "18813:6:40"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "18786:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18786:34:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18786:34:40"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value3",
                                "nodeType": "YulIdentifier",
                                "src": "18867:6:40"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "18879:9:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18890:2:40",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "18875:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18875:18:40"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_enum_TroveManagerOperation",
                              "nodeType": "YulIdentifier",
                              "src": "18829:37:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18829:65:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18829:65:40"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_rational_0_by_1_t_rational_0_by_1_t_rational_0_by_1_t_enum$_TroveManagerOperation_$8235__to_t_uint256_t_uint256_t_uint256_t_uint8__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "18608:9:40",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "18619:6:40",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "18627:6:40",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "18635:6:40",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "18643:6:40",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "18654:4:40",
                        "type": ""
                      }
                    ],
                    "src": "18430:470:40"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "19090:271:40",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "19100:27:40",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "19112:9:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19123:3:40",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "19108:3:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19108:19:40"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "19100:4:40"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "19136:29:40",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19154:3:40",
                                    "type": "",
                                    "value": "160"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19159:1:40",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "19150:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19150:11:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19163:1:40",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "19146:3:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19146:19:40"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "19140:2:40",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "19181:9:40"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "19196:6:40"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "19204:2:40"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "19192:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19192:15:40"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19174:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19174:34:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19174:34:40"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19228:9:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19239:2:40",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19224:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19224:18:40"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "19244:6:40"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19217:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19217:34:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19217:34:40"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19271:9:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19282:2:40",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19267:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19267:18:40"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value2",
                                    "nodeType": "YulIdentifier",
                                    "src": "19291:6:40"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "19299:2:40"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "19287:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19287:15:40"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19260:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19260:43:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19260:43:40"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19323:9:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19334:2:40",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19319:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19319:18:40"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value3",
                                    "nodeType": "YulIdentifier",
                                    "src": "19343:6:40"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "19351:2:40"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "19339:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19339:15:40"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19312:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19312:43:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19312:43:40"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_uint256_t_address_t_address__to_t_address_t_uint256_t_address_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "19035:9:40",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "19046:6:40",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "19054:6:40",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "19062:6:40",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "19070:6:40",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "19081:4:40",
                        "type": ""
                      }
                    ],
                    "src": "18905:456:40"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "19540:179:40",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "19557:9:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19568:2:40",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19550:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19550:21:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19550:21:40"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19591:9:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19602:2:40",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19587:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19587:18:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19607:2:40",
                                "type": "",
                                "value": "29"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19580:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19580:30:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19580:30:40"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19630:9:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19641:2:40",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19626:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19626:18:40"
                              },
                              {
                                "hexValue": "4665652065786365656465642070726f7669646564206d6178696d756d",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "19646:31:40",
                                "type": "",
                                "value": "Fee exceeded provided maximum"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19619:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19619:59:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19619:59:40"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "19687:26:40",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "19699:9:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19710:2:40",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "19695:3:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19695:18:40"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "19687:4:40"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_f4ebe3f718dc44f9fc9f3936568db6f6f7c4cab90fa5f1f983d94b5f3c0c14d5__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "19517:9:40",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "19531:4:40",
                        "type": ""
                      }
                    ],
                    "src": "19366:353:40"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "19898:244:40",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "19915:9:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19926:2:40",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19908:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19908:21:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19908:21:40"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19949:9:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19960:2:40",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19945:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19945:18:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19965:2:40",
                                "type": "",
                                "value": "54"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19938:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19938:30:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19938:30:40"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19988:9:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19999:2:40",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19984:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19984:18:40"
                              },
                              {
                                "hexValue": "54726f76654d616e616765723a2046656520776f756c64206561742075702061",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "20004:34:40",
                                "type": "",
                                "value": "TroveManager: Fee would eat up a"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19977:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19977:62:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19977:62:40"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "20059:9:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20070:2:40",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "20055:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20055:18:40"
                              },
                              {
                                "hexValue": "6c6c2072657475726e656420636f6c6c61746572616c",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "20075:24:40",
                                "type": "",
                                "value": "ll returned collateral"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20048:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20048:52:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20048:52:40"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "20109:27:40",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "20121:9:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20132:3:40",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "20117:3:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20117:19:40"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "20109:4:40"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_dd863108bc79f5e98fcfa9b131016ea502270f18dd642de1be74d790d5c71286__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "19875:9:40",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "19889:4:40",
                        "type": ""
                      }
                    ],
                    "src": "19724:418:40"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "20328:193:40",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "20338:26:40",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "20350:9:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20361:2:40",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "20346:3:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20346:18:40"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "20338:4:40"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "20380:9:40"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "20391:6:40"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20373:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20373:25:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20373:25:40"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "20418:9:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20429:2:40",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "20414:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20414:18:40"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "20434:6:40"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20407:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20407:34:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20407:34:40"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "20488:6:40"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "20500:9:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20511:2:40",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "20496:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20496:18:40"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_enum_TroveManagerOperation",
                              "nodeType": "YulIdentifier",
                              "src": "20450:37:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20450:65:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20450:65:40"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256_t_uint256_t_enum$_TroveManagerOperation_$8235__to_t_uint256_t_uint256_t_uint8__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "20281:9:40",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "20292:6:40",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "20300:6:40",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "20308:6:40",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "20319:4:40",
                        "type": ""
                      }
                    ],
                    "src": "20147:374:40"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "20564:74:40",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "20587:22:40",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x12",
                                    "nodeType": "YulIdentifier",
                                    "src": "20589:16:40"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "20589:18:40"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "20589:18:40"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "20584:1:40"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "20577:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20577:9:40"
                          },
                          "nodeType": "YulIf",
                          "src": "20574:35:40"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "20618:14:40",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "20627:1:40"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "20630:1:40"
                              }
                            ],
                            "functionName": {
                              "name": "mod",
                              "nodeType": "YulIdentifier",
                              "src": "20623:3:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20623:9:40"
                          },
                          "variableNames": [
                            {
                              "name": "r",
                              "nodeType": "YulIdentifier",
                              "src": "20618:1:40"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "mod_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "20549:1:40",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "20552:1:40",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "r",
                        "nodeType": "YulTypedName",
                        "src": "20558:1:40",
                        "type": ""
                      }
                    ],
                    "src": "20526:112:40"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "20817:232:40",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "20834:9:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20845:2:40",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20827:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20827:21:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20827:21:40"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "20868:9:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20879:2:40",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "20864:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20864:18:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20884:2:40",
                                "type": "",
                                "value": "42"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20857:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20857:30:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20857:30:40"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "20907:9:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20918:2:40",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "20903:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20903:18:40"
                              },
                              {
                                "hexValue": "54726f76654d616e616765723a204f6e6c79206f6e652074726f766520696e20",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "20923:34:40",
                                "type": "",
                                "value": "TroveManager: Only one trove in "
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20896:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20896:62:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20896:62:40"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "20978:9:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20989:2:40",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "20974:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20974:18:40"
                              },
                              {
                                "hexValue": "7468652073797374656d",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "20994:12:40",
                                "type": "",
                                "value": "the system"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20967:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20967:40:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20967:40:40"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "21016:27:40",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "21028:9:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21039:3:40",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "21024:3:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21024:19:40"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "21016:4:40"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_7b5414abe95e9cf2c744b0f61600ea04d22012a84e8a670f9ebfa9f7a4d2d09f__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "20794:9:40",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "20808:4:40",
                        "type": ""
                      }
                    ],
                    "src": "20643:406:40"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "21183:171:40",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "21193:26:40",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "21205:9:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21216:2:40",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "21201:3:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21201:18:40"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "21193:4:40"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "21235:9:40"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "21250:6:40"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "21266:3:40",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "21271:1:40",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "21262:3:40"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "21262:11:40"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "21275:1:40",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "21258:3:40"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "21258:19:40"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "21246:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21246:32:40"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21228:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21228:51:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21228:51:40"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "21299:9:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21310:2:40",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "21295:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21295:18:40"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "21319:6:40"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "21335:3:40",
                                            "type": "",
                                            "value": "128"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "21340:1:40",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "21331:3:40"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "21331:11:40"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "21344:1:40",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "21327:3:40"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "21327:19:40"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "21315:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21315:32:40"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21288:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21288:60:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21288:60:40"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_uint128__to_t_address_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "21144:9:40",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "21155:6:40",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "21163:6:40",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "21174:4:40",
                        "type": ""
                      }
                    ],
                    "src": "21054:300:40"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "21391:95:40",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21408:1:40",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21415:3:40",
                                    "type": "",
                                    "value": "224"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21420:10:40",
                                    "type": "",
                                    "value": "0x4e487b71"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "21411:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21411:20:40"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21401:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21401:31:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21401:31:40"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21448:1:40",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21451:4:40",
                                "type": "",
                                "value": "0x31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21441:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21441:15:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21441:15:40"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21472:1:40",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21475:4:40",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "21465:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21465:15:40"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21465:15:40"
                        }
                      ]
                    },
                    "name": "panic_error_0x31",
                    "nodeType": "YulFunctionDefinition",
                    "src": "21359:127:40"
                  }
                ]
              },
              "contents": "{\n    { }\n    function abi_encode_tuple_t_contract$_IStabilityPool_$14555__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        validator_revert_address(value)\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_array$_t_address_$dyn_memory_ptr(headStart, dataEnd) -> value0\n    {\n        let _1 := 32\n        if slt(sub(dataEnd, headStart), _1) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _2 := 0xffffffffffffffff\n        if gt(offset, _2) { revert(0, 0) }\n        let _3 := add(headStart, offset)\n        if iszero(slt(add(_3, 0x1f), dataEnd)) { revert(0, 0) }\n        let _4 := calldataload(_3)\n        if gt(_4, _2) { panic_error_0x41() }\n        let _5 := shl(5, _4)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(_5, 63), not(31)))\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        let dst := memPtr\n        mstore(memPtr, _4)\n        dst := add(memPtr, _1)\n        let srcEnd := add(add(_3, _5), _1)\n        if gt(srcEnd, dataEnd) { revert(0, 0) }\n        let src := add(_3, _1)\n        for { } lt(src, srcEnd) { src := add(src, _1) }\n        {\n            mstore(dst, abi_decode_address(src))\n            dst := add(dst, _1)\n        }\n        value0 := memPtr\n    }\n    function abi_decode_tuple_t_uint256t_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_contract$_IDefaultPool_$13991__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_contract$_IHOGToken_$14174__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function panic_error_0x21()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_enum$_Status_$7933_t_uint128__to_t_uint256_t_uint256_t_uint256_t_uint8_t_uint128__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        if iszero(lt(value3, 5)) { panic_error_0x21() }\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), and(value4, sub(shl(128, 1), 1)))\n    }\n    function abi_decode_tuple_t_addresst_addresst_addresst_addresst_addresst_addresst_addresst_addresst_addresst_addresst_addresst_contract$_IFeesRouter_$14008(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11\n    {\n        if slt(sub(dataEnd, headStart), 384) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        let value_2 := calldataload(add(headStart, 64))\n        validator_revert_address(value_2)\n        value2 := value_2\n        let value_3 := calldataload(add(headStart, 96))\n        validator_revert_address(value_3)\n        value3 := value_3\n        let value_4 := calldataload(add(headStart, 128))\n        validator_revert_address(value_4)\n        value4 := value_4\n        let value_5 := calldataload(add(headStart, 160))\n        validator_revert_address(value_5)\n        value5 := value_5\n        value6 := abi_decode_address(add(headStart, 192))\n        value7 := abi_decode_address(add(headStart, 224))\n        value8 := abi_decode_address(add(headStart, 256))\n        value9 := abi_decode_address(add(headStart, 288))\n        value10 := abi_decode_address(add(headStart, 320))\n        value11 := abi_decode_address(add(headStart, 352))\n    }\n    function abi_encode_tuple_t_contract$_IPriceFeed_$14250__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_contract$_IActivePool_$13652__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_contract$_IBaseFeeLMAToken_$13716__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        mstore(headStart, _1)\n        let length := mload(value0)\n        mstore(add(headStart, _1), length)\n        let i := 0\n        for { } lt(i, length) { i := add(i, _1) }\n        {\n            mstore(add(add(headStart, i), 64), mload(add(add(value0, i), _1)))\n        }\n        mstore(add(add(headStart, length), 64), 0)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function abi_encode_tuple_t_contract$_ISortedTroves_$14382__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_contract$_IHOGStaking_$14118__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n    }\n    function abi_decode_tuple_t_uint256t_addresst_addresst_addresst_uint256t_uint256t_uint256(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6\n    {\n        if slt(sub(dataEnd, headStart), 224) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let value := calldataload(add(headStart, 32))\n        validator_revert_address(value)\n        value1 := value\n        let value_1 := calldataload(add(headStart, 64))\n        validator_revert_address(value_1)\n        value2 := value_1\n        let value_2 := calldataload(add(headStart, 96))\n        validator_revert_address(value_2)\n        value3 := value_2\n        value4 := calldataload(add(headStart, 128))\n        value5 := calldataload(add(headStart, 160))\n        value6 := calldataload(add(headStart, 192))\n    }\n    function abi_encode_tuple_t_contract$_IFeesRouter_$14008__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_stringliteral_c5c02bb6f017f1fb4f7d5edc2496c9c92f139d3cb1a6efb75b0760a3f8a68acc__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 54)\n        mstore(add(headStart, 64), \"TroveManager: Calldata address a\")\n        mstore(add(headStart, 96), \"rray must not be empty\")\n        tail := add(headStart, 128)\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_stringliteral_f53a59d0a88811be96067d6d327988285856817766082bcb22560117b222c207__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"TroveManager: nothing to liquida\")\n        mstore(add(headStart, 96), \"te\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function panic_error_0x12()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y) { panic_error_0x12() }\n        r := div(x, y)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        product := mul(x, y)\n        if iszero(or(iszero(x), eq(y, div(product, x)))) { panic_error_0x11() }\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function panic_error_0x01()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x01)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_stringliteral_7584fd4ebb0cfc561f0eebef7e5a101860c02bbe77aada4025c19bcc4b1d1057__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 47)\n        mstore(add(headStart, 64), \"TroveManager: Only Borrower oper\")\n        mstore(add(headStart, 96), \"ations may call\")\n        tail := add(headStart, 128)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function decrement_t_uint256(value) -> ret\n    {\n        if iszero(value) { panic_error_0x11() }\n        ret := add(value, not(0))\n    }\n    function abi_encode_tuple_t_stringliteral_2b3f8ccb98757f90ed503a7ef387edf3c874358c4f9155d10247c121e50c7412__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 41)\n        mstore(add(headStart, 64), \"TroveManager: Unable to redeem a\")\n        mstore(add(headStart, 96), \"ny amount\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_a5b6d3f6db4f0a882ae833ad5428aedbdf437b271f162fd95dc97ff478b6c703__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 59)\n        mstore(add(headStart, 64), \"TroveManager: Caller is not the \")\n        mstore(add(headStart, 96), \"BorrowerOperations contract\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_enum_TroveManagerOperation(value, pos)\n    {\n        if iszero(lt(value, 4)) { panic_error_0x21() }\n        mstore(pos, value)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_enum$_TroveManagerOperation_$8235__to_t_uint256_t_uint256_t_uint256_t_uint8__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        abi_encode_enum_TroveManagerOperation(value3, add(headStart, 96))\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_stringliteral_f8ec48568410e94e913ce626873fb69e955772a1f192a4412dc8945cf35ddca6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 47)\n        mstore(add(headStart, 64), \"TroveManager: Trove does not exi\")\n        mstore(add(headStart, 96), \"st or is closed\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_71630fb59e6335519b5c714c347f2b3d00653f9607ebc84cc566a5b693547569__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 30)\n        mstore(add(headStart, 64), \"Account cannot be zero address\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_dcf7beb71f973a2a4b4f293fe67c3b380ce91c14fb11529cf06f13e17f4fde3b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Account code size cannot be zero\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_e50be9df6f9cec2f12ef42eb933f1a808d16efcb95019f9e501cc93218919cd7__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 48)\n        mstore(add(headStart, 64), \"Max fee percentage must be betwe\")\n        mstore(add(headStart, 96), \"en 0.5% and 100%\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_ef02c2bdac35413fdff17b472f65263dca9409d28ed2688a496d3823e2fa6573__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"TroveManager: Cannot redeem when\")\n        mstore(add(headStart, 96), \" TCR < MCR\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_d50ee9a9848e4a1fc6c9aec8c7717d42a161185832a068487f8227dffd2c35b5__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 46)\n        mstore(add(headStart, 64), \"TroveManager: Amount must be gre\")\n        mstore(add(headStart, 96), \"ater than zero\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_f95289a8642d0027690eb85480f9e7e95699494ee6326d5d4cb8b8b692354c5b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 84)\n        mstore(add(headStart, 64), \"TroveManager: Requested redempti\")\n        mstore(add(headStart, 96), \"on amount must be <= user's Base\")\n        mstore(add(headStart, 128), \"FeeLMA token balance\")\n        tail := add(headStart, 160)\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_rational_0_by_1_t_rational_0_by_1_t_rational_0_by_1_t_enum$_TroveManagerOperation_$8235__to_t_uint256_t_uint256_t_uint256_t_uint8__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        abi_encode_enum_TroveManagerOperation(value3, add(headStart, 96))\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_address_t_address__to_t_address_t_uint256_t_address_t_address__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), and(value2, _1))\n        mstore(add(headStart, 96), and(value3, _1))\n    }\n    function abi_encode_tuple_t_stringliteral_f4ebe3f718dc44f9fc9f3936568db6f6f7c4cab90fa5f1f983d94b5f3c0c14d5__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Fee exceeded provided maximum\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_dd863108bc79f5e98fcfa9b131016ea502270f18dd642de1be74d790d5c71286__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 54)\n        mstore(add(headStart, 64), \"TroveManager: Fee would eat up a\")\n        mstore(add(headStart, 96), \"ll returned collateral\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_enum$_TroveManagerOperation_$8235__to_t_uint256_t_uint256_t_uint8__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        abi_encode_enum_TroveManagerOperation(value2, add(headStart, 64))\n    }\n    function mod_t_uint256(x, y) -> r\n    {\n        if iszero(y) { panic_error_0x12() }\n        r := mod(x, y)\n    }\n    function abi_encode_tuple_t_stringliteral_7b5414abe95e9cf2c744b0f61600ea04d22012a84e8a670f9ebfa9f7a4d2d09f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"TroveManager: Only one trove in \")\n        mstore(add(headStart, 96), \"the system\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_address_t_uint128__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), and(value1, sub(shl(128, 1), 1)))\n    }\n    function panic_error_0x31()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x31)\n        revert(0, 0x24)\n    }\n}",
              "id": 40,
              "language": "Yul",
              "name": "#utility.yul"
            }
          ],
          "immutableReferences": {},
          "linkReferences": {},
          "object": "",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x4E3 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x807D138D GT PUSH2 0x28E JUMPI DUP1 PUSH4 0xBB6F030C GT PUSH2 0x167 JUMPI DUP1 PUSH4 0xD3D6F843 GT PUSH2 0xD9 JUMPI DUP1 PUSH4 0xE2AC77B0 GT PUSH2 0x92 JUMPI DUP1 PUSH4 0xE2AC77B0 EQ PUSH2 0xB01 JUMPI DUP1 PUSH4 0xE3246349 EQ PUSH2 0xB14 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0xB1D JUMPI DUP1 PUSH4 0xF92D3433 EQ PUSH2 0x60A JUMPI DUP1 PUSH4 0xFB0CBD4B EQ PUSH2 0xB30 JUMPI DUP1 PUSH4 0xFE2BA848 EQ PUSH2 0xB3F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xD3D6F843 EQ PUSH2 0xA84 JUMPI DUP1 PUSH4 0xD5B35635 EQ PUSH2 0xA97 JUMPI DUP1 PUSH4 0xD66A2553 EQ PUSH2 0xAAA JUMPI DUP1 PUSH4 0xD6966297 EQ PUSH2 0xAD3 JUMPI DUP1 PUSH4 0xD9A72444 EQ PUSH2 0xAE6 JUMPI DUP1 PUSH4 0xE1F787E9 EQ PUSH2 0xAF9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xC35BC550 GT PUSH2 0x12B JUMPI DUP1 PUSH4 0xC35BC550 EQ PUSH2 0xA2F JUMPI DUP1 PUSH4 0xC3EB5C67 EQ PUSH2 0xA39 JUMPI DUP1 PUSH4 0xC42DAB99 EQ PUSH2 0xA42 JUMPI DUP1 PUSH4 0xC91A7E2F EQ PUSH2 0xA55 JUMPI DUP1 PUSH4 0xCBD138AE EQ PUSH2 0xA5E JUMPI DUP1 PUSH4 0xD293C710 EQ PUSH2 0xA71 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xBB6F030C EQ PUSH2 0x9F8 JUMPI DUP1 PUSH4 0xBCD37526 EQ PUSH2 0xA01 JUMPI DUP1 PUSH4 0xBF9BEFB1 EQ PUSH2 0xA14 JUMPI DUP1 PUSH4 0xBF9EBEE2 EQ PUSH2 0xA1D JUMPI DUP1 PUSH4 0xC26C8800 EQ PUSH2 0xA26 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xA2014152 GT PUSH2 0x200 JUMPI DUP1 PUSH4 0xAEAD9DCC GT PUSH2 0x1C4 JUMPI DUP1 PUSH4 0xAEAD9DCC EQ PUSH2 0x966 JUMPI DUP1 PUSH4 0xB0D8E181 EQ PUSH2 0x979 JUMPI DUP1 PUSH4 0xB36CD07F EQ PUSH2 0x98C JUMPI DUP1 PUSH4 0xB7F8CF9B EQ PUSH2 0x99F JUMPI DUP1 PUSH4 0xB82F263D EQ PUSH2 0x9B2 JUMPI DUP1 PUSH4 0xB91AF97C EQ PUSH2 0x9C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xA2014152 EQ PUSH2 0x8FF JUMPI DUP1 PUSH4 0xA20BAEE6 EQ PUSH2 0x5FB JUMPI DUP1 PUSH4 0xA22B7D68 EQ PUSH2 0x908 JUMPI DUP1 PUSH4 0xA3F4DF7E EQ PUSH2 0x91B JUMPI DUP1 PUSH4 0xAE918754 EQ PUSH2 0x953 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x900E664B GT PUSH2 0x252 JUMPI DUP1 PUSH4 0x900E664B EQ PUSH2 0x8A1 JUMPI DUP1 PUSH4 0x948BA6D2 EQ PUSH2 0x8AA JUMPI DUP1 PUSH4 0x96D711FF EQ PUSH2 0x8BD JUMPI DUP1 PUSH4 0x981C4F48 EQ PUSH2 0x8C6 JUMPI DUP1 PUSH4 0x9976CF45 EQ PUSH2 0x8D9 JUMPI DUP1 PUSH4 0x9F7ADB5E EQ PUSH2 0x8EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x807D138D EQ PUSH2 0x859 JUMPI DUP1 PUSH4 0x82FE3EB9 EQ PUSH2 0x862 JUMPI DUP1 PUSH4 0x887105D3 EQ PUSH2 0x875 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x87D JUMPI DUP1 PUSH4 0x8F913789 EQ PUSH2 0x88E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x4E443D9E GT PUSH2 0x3C0 JUMPI DUP1 PUSH4 0x715018A6 GT PUSH2 0x332 JUMPI DUP1 PUSH4 0x741BEF1A GT PUSH2 0x2F6 JUMPI DUP1 PUSH4 0x741BEF1A EQ PUSH2 0x809 JUMPI DUP1 PUSH4 0x756B253E EQ PUSH2 0x81C JUMPI DUP1 PUSH4 0x794E5724 EQ PUSH2 0x6E3 JUMPI DUP1 PUSH4 0x795D26C3 EQ PUSH2 0x82F JUMPI DUP1 PUSH4 0x7E024AD6 EQ PUSH2 0x837 JUMPI DUP1 PUSH4 0x7F7DDE4A EQ PUSH2 0x846 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x715018A6 EQ PUSH2 0x7D3 JUMPI DUP1 PUSH4 0x71F256E2 EQ PUSH2 0x7DB JUMPI DUP1 PUSH4 0x72423C17 EQ PUSH2 0x7E3 JUMPI DUP1 PUSH4 0x72FE25AA EQ PUSH2 0x5FB JUMPI DUP1 PUSH4 0x734F622D EQ PUSH2 0x7F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x5DBA4C4A GT PUSH2 0x384 JUMPI DUP1 PUSH4 0x5DBA4C4A EQ PUSH2 0x718 JUMPI DUP1 PUSH4 0x61EC893D EQ PUSH2 0x720 JUMPI DUP1 PUSH4 0x631203B0 EQ PUSH2 0x728 JUMPI DUP1 PUSH4 0x64CEE260 EQ PUSH2 0x73B JUMPI DUP1 PUSH4 0x653D46E7 EQ PUSH2 0x767 JUMPI DUP1 PUSH4 0x6EF64338 EQ PUSH2 0x77A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x4E443D9E EQ PUSH2 0x6AD JUMPI DUP1 PUSH4 0x570DC45E EQ PUSH2 0x6D0 JUMPI DUP1 PUSH4 0x5733D58F EQ PUSH2 0x6E3 JUMPI DUP1 PUSH4 0x58B8A5D6 EQ PUSH2 0x6F2 JUMPI DUP1 PUSH4 0x5D6B480F EQ PUSH2 0x705 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x21E37801 GT PUSH2 0x459 JUMPI DUP1 PUSH4 0x3CC74225 GT PUSH2 0x41D JUMPI DUP1 PUSH4 0x3CC74225 EQ PUSH2 0x638 JUMPI DUP1 PUSH4 0x47142AA3 EQ PUSH2 0x64B JUMPI DUP1 PUSH4 0x477D66CF EQ PUSH2 0x65E JUMPI DUP1 PUSH4 0x480CD578 EQ PUSH2 0x671 JUMPI DUP1 PUSH4 0x4870DD9A EQ PUSH2 0x69D JUMPI DUP1 PUSH4 0x49EEFEEE EQ PUSH2 0x6A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x21E37801 EQ PUSH2 0x5E8 JUMPI DUP1 PUSH4 0x24092669 EQ PUSH2 0x5FB JUMPI DUP1 PUSH4 0x28D28B5B EQ PUSH2 0x60A JUMPI DUP1 PUSH4 0x2D81DD56 EQ PUSH2 0x612 JUMPI DUP1 PUSH4 0x2F865568 EQ PUSH2 0x625 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x15D549F1 GT PUSH2 0x4AB JUMPI DUP1 PUSH4 0x15D549F1 EQ PUSH2 0x562 JUMPI DUP1 PUSH4 0x1673C79A EQ PUSH2 0x575 JUMPI DUP1 PUSH4 0x18F2817A EQ PUSH2 0x5B1 JUMPI DUP1 PUSH4 0x1B199A64 EQ PUSH2 0x5C4 JUMPI DUP1 PUSH4 0x1BF43555 EQ PUSH2 0x5CD JUMPI DUP1 PUSH4 0x1E8B1C2B EQ PUSH2 0x5D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x48C661D EQ PUSH2 0x4E8 JUMPI DUP1 PUSH4 0x71A7541 EQ PUSH2 0x511 JUMPI DUP1 PUSH4 0xB076557 EQ PUSH2 0x527 JUMPI DUP1 PUSH4 0xC08FF5F EQ PUSH2 0x53C JUMPI DUP1 PUSH4 0x12610E92 EQ PUSH2 0x54F JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x5 SLOAD PUSH2 0x4FB SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x508 SWAP2 SWAP1 PUSH2 0x5645 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x519 PUSH1 0x2 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x508 JUMP JUMPDEST PUSH2 0x53A PUSH2 0x535 CALLDATASIZE PUSH1 0x4 PUSH2 0x567E JUMP JUMPDEST PUSH2 0xB52 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x519 PUSH2 0x54A CALLDATASIZE PUSH1 0x4 PUSH2 0x567E JUMP JUMPDEST PUSH2 0xB7A JUMP JUMPDEST PUSH2 0x519 PUSH2 0x55D CALLDATASIZE PUSH1 0x4 PUSH2 0x569B JUMP JUMPDEST PUSH2 0xC36 JUMP JUMPDEST PUSH2 0x519 PUSH2 0x570 CALLDATASIZE PUSH1 0x4 PUSH2 0x567E JUMP JUMPDEST PUSH2 0xC88 JUMP JUMPDEST PUSH2 0x59C PUSH2 0x583 CALLDATASIZE PUSH1 0x4 PUSH2 0x567E JUMP JUMPDEST PUSH1 0x17 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP1 SWAP2 ADD SLOAD DUP3 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE ADD PUSH2 0x508 JUMP JUMPDEST PUSH2 0x519 PUSH2 0x5BF CALLDATASIZE PUSH1 0x4 PUSH2 0x567E JUMP JUMPDEST PUSH2 0xCAA JUMP JUMPDEST PUSH2 0x519 PUSH1 0x1A SLOAD DUP2 JUMP JUMPDEST PUSH2 0x519 PUSH1 0x1 DUP2 JUMP JUMPDEST PUSH2 0x53A PUSH2 0x5E3 CALLDATASIZE PUSH1 0x4 PUSH2 0x56DD JUMP JUMPDEST PUSH2 0xCBD JUMP JUMPDEST PUSH2 0x519 PUSH2 0x5F6 CALLDATASIZE PUSH1 0x4 PUSH2 0x567E JUMP JUMPDEST PUSH2 0x10C6 JUMP JUMPDEST PUSH2 0x519 PUSH8 0xDE0B6B3A7640000 DUP2 JUMP JUMPDEST PUSH2 0x519 PUSH2 0x10F6 JUMP JUMPDEST PUSH2 0x519 PUSH2 0x620 CALLDATASIZE PUSH1 0x4 PUSH2 0x57A2 JUMP JUMPDEST PUSH2 0x1118 JUMP JUMPDEST PUSH2 0x53A PUSH2 0x633 CALLDATASIZE PUSH1 0x4 PUSH2 0x567E JUMP JUMPDEST PUSH2 0x1138 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH2 0x4FB SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x519 PUSH2 0x659 CALLDATASIZE PUSH1 0x4 PUSH2 0x57A2 JUMP JUMPDEST PUSH2 0x11A4 JUMP JUMPDEST PUSH2 0x519 PUSH2 0x66C CALLDATASIZE PUSH1 0x4 PUSH2 0x57C4 JUMP JUMPDEST PUSH2 0x11BC JUMP JUMPDEST PUSH2 0x519 PUSH2 0x67F CALLDATASIZE PUSH1 0x4 PUSH2 0x567E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x11 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x519 PUSH1 0xC8 DUP2 JUMP JUMPDEST PUSH1 0x18 SLOAD PUSH2 0x519 JUMP JUMPDEST PUSH2 0x6C0 PUSH2 0x6BB CALLDATASIZE PUSH1 0x4 PUSH2 0x57C4 JUMP JUMPDEST PUSH2 0x11D0 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x508 JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH2 0x4FB SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x519 PUSH8 0x14D1120D7B160000 DUP2 JUMP JUMPDEST PUSH2 0x519 PUSH2 0x700 CALLDATASIZE PUSH1 0x4 PUSH2 0x57C4 JUMP JUMPDEST PUSH2 0x11DB JUMP JUMPDEST PUSH2 0x53A PUSH2 0x713 CALLDATASIZE PUSH1 0x4 PUSH2 0x569B JUMP JUMPDEST PUSH2 0x11E9 JUMP JUMPDEST PUSH2 0x53A PUSH2 0x1241 JUMP JUMPDEST PUSH2 0x519 PUSH1 0x3C DUP2 JUMP JUMPDEST PUSH2 0x59C PUSH2 0x736 CALLDATASIZE PUSH1 0x4 PUSH2 0x57C4 JUMP JUMPDEST PUSH2 0x12AD JUMP JUMPDEST PUSH2 0x519 PUSH2 0x749 CALLDATASIZE PUSH1 0x4 PUSH2 0x567E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x11 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x53A PUSH2 0x775 CALLDATASIZE PUSH1 0x4 PUSH2 0x57C4 JUMP JUMPDEST PUSH2 0x12D0 JUMP JUMPDEST PUSH2 0x7C2 PUSH2 0x788 CALLDATASIZE PUSH1 0x4 PUSH2 0x567E JUMP JUMPDEST PUSH1 0x11 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x3 SWAP1 SWAP4 ADD SLOAD SWAP2 SWAP3 SWAP1 SWAP2 PUSH1 0xFF DUP2 AND SWAP1 PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x508 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x57F3 JUMP JUMPDEST PUSH2 0x53A PUSH2 0x1641 JUMP JUMPDEST PUSH2 0x6C0 PUSH2 0x1655 JUMP JUMPDEST PUSH2 0x519 PUSH2 0x7F1 CALLDATASIZE PUSH1 0x4 PUSH2 0x569B JUMP JUMPDEST PUSH2 0x16DB JUMP JUMPDEST PUSH2 0x53A PUSH2 0x804 CALLDATASIZE PUSH1 0x4 PUSH2 0x5839 JUMP JUMPDEST PUSH2 0x1732 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH2 0x4FB SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x4FB PUSH2 0x82A CALLDATASIZE PUSH1 0x4 PUSH2 0x57C4 JUMP JUMPDEST PUSH2 0x1AFB JUMP JUMPDEST PUSH2 0x519 PUSH2 0x1B25 JUMP JUMPDEST PUSH2 0x519 PUSH8 0xDDD4B8C6C7D70D8 DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x4FB SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x519 PUSH1 0x13 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x53A PUSH2 0x870 CALLDATASIZE PUSH1 0x4 PUSH2 0x567E JUMP JUMPDEST PUSH2 0x1C21 JUMP JUMPDEST PUSH2 0x519 PUSH2 0x1C32 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x4FB JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH2 0x4FB SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x519 PUSH1 0x16 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x519 PUSH2 0x8B8 CALLDATASIZE PUSH1 0x4 PUSH2 0x57C4 JUMP JUMPDEST PUSH2 0x1CF7 JUMP JUMPDEST PUSH2 0x519 PUSH1 0x14 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x519 PUSH2 0x8D4 CALLDATASIZE PUSH1 0x4 PUSH2 0x567E JUMP JUMPDEST PUSH2 0x1D0A JUMP JUMPDEST PUSH2 0x519 PUSH2 0x8E7 CALLDATASIZE PUSH1 0x4 PUSH2 0x569B JUMP JUMPDEST PUSH2 0x1D32 JUMP JUMPDEST PUSH2 0x53A PUSH2 0x8FA CALLDATASIZE PUSH1 0x4 PUSH2 0x57C4 JUMP JUMPDEST PUSH2 0x1D5F JUMP JUMPDEST PUSH2 0x519 PUSH2 0xC350 DUP2 JUMP JUMPDEST PUSH2 0x519 PUSH2 0x916 CALLDATASIZE PUSH1 0x4 PUSH2 0x57C4 JUMP JUMPDEST PUSH2 0x1E64 JUMP JUMPDEST PUSH2 0x946 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xC DUP2 MSTORE PUSH1 0x20 ADD PUSH12 0x2A3937BB32A6B0B730B3B2B9 PUSH1 0xA1 SHL DUP2 MSTORE POP DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x508 SWAP2 SWAP1 PUSH2 0x5921 JUMP JUMPDEST PUSH1 0xC SLOAD PUSH2 0x4FB SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0xA SLOAD PUSH2 0x4FB SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x519 PUSH2 0x987 CALLDATASIZE PUSH1 0x4 PUSH2 0x567E JUMP JUMPDEST PUSH2 0x1E77 JUMP JUMPDEST PUSH2 0x519 PUSH2 0x99A CALLDATASIZE PUSH1 0x4 PUSH2 0x57C4 JUMP JUMPDEST PUSH2 0x1E9E JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH2 0x4FB SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x519 PUSH2 0x9C0 CALLDATASIZE PUSH1 0x4 PUSH2 0x57C4 JUMP JUMPDEST PUSH2 0x1EAC JUMP JUMPDEST PUSH2 0x9D8 PUSH2 0x9D3 CALLDATASIZE PUSH1 0x4 PUSH2 0x567E JUMP JUMPDEST PUSH2 0x1EB7 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP5 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP2 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD PUSH2 0x508 JUMP JUMPDEST PUSH2 0x519 PUSH1 0xD SLOAD DUP2 JUMP JUMPDEST PUSH2 0x53A PUSH2 0xA0F CALLDATASIZE PUSH1 0x4 PUSH2 0x596F JUMP JUMPDEST PUSH2 0x1F0F JUMP JUMPDEST PUSH2 0x519 PUSH1 0x12 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x519 PUSH1 0x15 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x519 PUSH1 0x10 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x519 PUSH3 0x127500 DUP2 JUMP JUMPDEST PUSH2 0x519 PUSH1 0xE SLOAD DUP2 JUMP JUMPDEST PUSH1 0xB SLOAD PUSH2 0x4FB SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x519 PUSH1 0x19 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x53A PUSH2 0xA6C CALLDATASIZE PUSH1 0x4 PUSH2 0x567E JUMP JUMPDEST PUSH2 0x2630 JUMP JUMPDEST PUSH2 0x519 PUSH2 0xA7F CALLDATASIZE PUSH1 0x4 PUSH2 0x569B JUMP JUMPDEST PUSH2 0x2643 JUMP JUMPDEST PUSH2 0x519 PUSH2 0xA92 CALLDATASIZE PUSH1 0x4 PUSH2 0x569B JUMP JUMPDEST PUSH2 0x2662 JUMP JUMPDEST PUSH2 0x519 PUSH2 0xAA5 CALLDATASIZE PUSH1 0x4 PUSH2 0x57C4 JUMP JUMPDEST PUSH2 0x2692 JUMP JUMPDEST PUSH2 0x519 PUSH2 0xAB8 CALLDATASIZE PUSH1 0x4 PUSH2 0x567E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x11 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x519 PUSH2 0xAE1 CALLDATASIZE PUSH1 0x4 PUSH2 0x567E JUMP JUMPDEST PUSH2 0x26A6 JUMP JUMPDEST PUSH2 0x4FB PUSH2 0xAF4 CALLDATASIZE PUSH1 0x4 PUSH2 0x57C4 JUMP JUMPDEST PUSH2 0x273F JUMP JUMPDEST PUSH2 0x519 PUSH2 0x276F JUMP JUMPDEST PUSH2 0x6C0 PUSH2 0xB0F CALLDATASIZE PUSH1 0x4 PUSH2 0x567E JUMP JUMPDEST PUSH2 0x27F0 JUMP JUMPDEST PUSH2 0x519 PUSH1 0xF SLOAD DUP2 JUMP JUMPDEST PUSH2 0x53A PUSH2 0xB2B CALLDATASIZE PUSH1 0x4 PUSH2 0x567E JUMP JUMPDEST PUSH2 0x2853 JUMP JUMPDEST PUSH2 0x519 PUSH8 0xDC14847BCC53B20 DUP2 JUMP JUMPDEST PUSH2 0x53A PUSH2 0xB4D CALLDATASIZE PUSH1 0x4 PUSH2 0x567E JUMP JUMPDEST PUSH2 0x28C9 JUMP JUMPDEST PUSH2 0xB5A PUSH2 0x28DA JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 SLOAD PUSH2 0xB77 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP2 AND DUP4 PUSH2 0x295A JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x17 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH1 0x16 SLOAD DUP3 SWAP1 PUSH2 0xBA5 SWAP1 DUP4 PUSH2 0x2A60 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO DUP1 PUSH2 0xBE4 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x11 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 ADD SLOAD PUSH1 0xFF AND PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xBE1 JUMPI PUSH2 0xBE1 PUSH2 0x57DD JUMP JUMPDEST EQ ISZERO JUMPDEST ISZERO PUSH2 0xBF3 JUMPI POP PUSH1 0x0 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x11 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x2 ADD SLOAD SWAP1 PUSH2 0xC2C PUSH8 0xDE0B6B3A7640000 PUSH2 0xC26 DUP5 DUP7 PUSH2 0x2A73 JUMP JUMPDEST SWAP1 PUSH2 0x2A7F JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC40 PUSH2 0x28DA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x11 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0xC63 SWAP1 DUP5 PUSH2 0x2A60 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x11 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP2 SWAP1 SSTORE SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC92 PUSH2 0x28DA JUMP JUMPDEST PUSH2 0xC9B DUP3 PUSH2 0x2A8B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCB4 PUSH2 0x28DA JUMP JUMPDEST PUSH2 0xC82 DUP3 PUSH2 0x2B25 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0xD32 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x36 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54726F76654D616E616765723A2043616C6C6461746120616464726573732061 PUSH1 0x44 DUP3 ADD MSTORE PUSH22 0x72726179206D757374206E6F7420626520656D707479 PUSH1 0x50 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 SLOAD PUSH1 0x5 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND SWAP3 SWAP2 DUP3 AND SWAP2 AND PUSH2 0xD54 PUSH2 0x5580 JUMP JUMPDEST PUSH2 0xD5C PUSH2 0x55B1 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xFDB11CF PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0xDB1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xDD5 SWAP2 SWAP1 PUSH2 0x59DD JUMP JUMPDEST DUP3 PUSH1 0x0 ADD DUP2 DUP2 MSTORE POP POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x488DF0FC PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xE1C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xE40 SWAP2 SWAP1 PUSH2 0x59DD JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE DUP2 MLOAD PUSH2 0xE50 SWAP1 PUSH2 0x2BC9 JUMP JUMPDEST ISZERO DUP1 ISZERO PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0xE78 JUMPI PUSH2 0xE71 DUP6 DUP6 DUP5 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x20 ADD MLOAD DUP11 PUSH2 0x2BE6 JUMP JUMPDEST SWAP1 POP PUSH2 0xE90 JUMP JUMPDEST PUSH2 0xE8D DUP6 DUP6 DUP5 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x20 ADD MLOAD DUP11 PUSH2 0x2E0D JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD MLOAD GT PUSH2 0xEB4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD29 SWAP1 PUSH2 0x59F6 JUMP JUMPDEST PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0xA0 DUP3 ADD MLOAD PUSH1 0x40 MLOAD PUSH4 0x335525AD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP3 PUSH4 0x335525AD SWAP3 PUSH2 0xEF1 SWAP3 PUSH1 0x4 ADD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xF0B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xF1F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0xF37 DUP6 DUP6 DUP4 PUSH1 0xC0 ADD MLOAD DUP5 PUSH1 0xE0 ADD MLOAD PUSH2 0x2EDD JUMP JUMPDEST PUSH2 0x100 DUP2 ADD MLOAD ISZERO PUSH2 0x1015 JUMPI PUSH1 0x7 SLOAD PUSH2 0x100 DUP3 ADD MLOAD PUSH1 0x40 MLOAD PUSH3 0xF9332D PUSH1 0xE6 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 PUSH4 0x3E4CCB40 SWAP2 PUSH2 0xF79 SWAP2 PUSH1 0x4 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xF93 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xFA7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x7 SLOAD PUSH2 0x100 DUP5 ADD MLOAD PUSH1 0x40 MLOAD PUSH4 0xA51BA3B7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP12 AND SWAP6 POP PUSH4 0xA51BA3B7 SWAP5 POP PUSH2 0xFE2 SWAP4 AND SWAP2 SWAP1 PUSH1 0x4 ADD PUSH2 0x5A38 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xFFC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1010 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST PUSH2 0x1023 DUP6 DUP3 PUSH1 0x40 ADD MLOAD PUSH2 0x3168 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x100 DUP2 ADD MLOAD PUSH1 0x40 DUP3 ADD MLOAD DUP3 MLOAD PUSH2 0x104F SWAP3 SWAP2 PUSH2 0x1049 SWAP2 SWAP1 PUSH2 0x2A60 JUMP JUMPDEST SWAP1 PUSH2 0x2A60 JUMP JUMPDEST PUSH1 0x80 DUP4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP1 DUP6 ADD MLOAD PUSH1 0x40 DUP6 DUP2 ADD MLOAD DUP7 DUP5 ADD MLOAD DUP3 MLOAD SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP7 SWAP1 SWAP7 MSTORE SWAP1 DUP3 ADD MSTORE SWAP1 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH32 0x4152C73DD2614C4F9FC35E8C9CF16013CD588C75B49A4C1673ECFFDCBCDA9403 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH2 0x10BE DUP6 CALLER DUP4 PUSH1 0x60 ADD MLOAD DUP5 PUSH1 0x40 ADD MLOAD PUSH2 0x32AC JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x11 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x3 ADD SLOAD PUSH1 0xFF AND PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xC82 JUMPI PUSH2 0xC82 PUSH2 0x57DD JUMP JUMPDEST PUSH2 0x110A PUSH2 0x3E8 PUSH8 0xDE0B6B3A7640000 PUSH2 0x5A7D JUMP JUMPDEST PUSH2 0x1115 SWAP1 PUSH1 0x5 PUSH2 0x5A91 JUMP JUMPDEST DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1130 DUP5 DUP5 PUSH1 0x14 PUSH8 0xDE0B6B3A7640000 PUSH2 0x338F JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x1141 DUP2 PUSH2 0x349A JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x0 SWAP2 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP2 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1177 JUMPI PUSH2 0x1177 PUSH2 0x5AA8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP PUSH2 0x11A0 DUP2 PUSH2 0xCBD JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1130 DUP5 DUP5 PUSH1 0x14 PUSH8 0x14D1120D7B160000 PUSH2 0x338F JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC82 PUSH2 0x11CA DUP4 PUSH2 0x1CF7 JUMP JUMPDEST DUP4 PUSH2 0x3531 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC82 DUP3 PUSH2 0x2BC9 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC82 PUSH1 0xD SLOAD DUP4 PUSH2 0x3549 JUMP JUMPDEST PUSH2 0x11F1 PUSH2 0x28DA JUMP JUMPDEST DUP1 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1203 JUMPI PUSH2 0x1203 PUSH2 0x57DD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x11 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 ADD DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 DUP4 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1238 JUMPI PUSH2 0x1238 PUSH2 0x57DD JUMP JUMPDEST MUL OR SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH2 0x1249 PUSH2 0x28DA JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1253 PUSH2 0x3601 JUMP JUMPDEST SWAP1 POP PUSH8 0xDE0B6B3A7640000 DUP2 GT ISZERO PUSH2 0x126D JUMPI PUSH2 0x126D PUSH2 0x5ABE JUMP JUMPDEST PUSH1 0xE DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH32 0xCA870D46D67E9A1444A6B8F97A147E06E4CF71EE2A0F172D7ECD5441AE7C1201 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH2 0xB77 PUSH2 0x3645 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x12BB DUP5 PUSH2 0x1E9E JUMP JUMPDEST SWAP1 POP PUSH2 0x12C7 DUP2 DUP6 PUSH2 0x3531 JUMP JUMPDEST SWAP5 SWAP1 SWAP4 POP SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xE0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP4 MSTORE PUSH1 0x1 SLOAD DUP2 AND PUSH1 0x20 DUP5 ADD MSTORE SWAP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0xC SLOAD DUP4 AND PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0x5 SLOAD SWAP1 SWAP2 AND PUSH2 0x1326 PUSH2 0x5580 JUMP JUMPDEST PUSH2 0x132E PUSH2 0x55B1 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xFDB11CF PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1383 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x13A7 SWAP2 SWAP1 PUSH2 0x59DD JUMP JUMPDEST DUP3 PUSH1 0x0 ADD DUP2 DUP2 MSTORE POP POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x488DF0FC PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x13EE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1412 SWAP2 SWAP1 PUSH2 0x59DD JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE DUP2 MLOAD PUSH2 0x1422 SWAP1 PUSH2 0x2BC9 JUMP JUMPDEST ISZERO DUP1 ISZERO PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x1449 JUMPI PUSH2 0x1442 DUP5 DUP4 PUSH1 0x0 ADD MLOAD DUP5 PUSH1 0x20 ADD MLOAD DUP9 PUSH2 0x369C JUMP JUMPDEST SWAP1 POP PUSH2 0x1469 JUMP JUMPDEST PUSH2 0x1466 DUP5 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x20 ADD MLOAD DUP5 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x20 ADD MLOAD DUP10 PUSH2 0x3A1A JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD MLOAD GT PUSH2 0x148D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD29 SWAP1 PUSH2 0x59F6 JUMP JUMPDEST PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0xA0 DUP3 ADD MLOAD PUSH1 0x40 MLOAD PUSH4 0x335525AD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP3 PUSH4 0x335525AD SWAP3 PUSH2 0x14CA SWAP3 PUSH1 0x4 ADD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x14E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x14F8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0x1518 DUP5 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x20 ADD MLOAD DUP4 PUSH1 0xC0 ADD MLOAD DUP5 PUSH1 0xE0 ADD MLOAD PUSH2 0x2EDD JUMP JUMPDEST PUSH2 0x100 DUP2 ADD MLOAD ISZERO PUSH2 0x158F JUMPI DUP4 MLOAD PUSH1 0x7 SLOAD PUSH2 0x100 DUP4 ADD MLOAD PUSH1 0x40 MLOAD PUSH4 0xA51BA3B7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND SWAP4 PUSH4 0xA51BA3B7 SWAP4 PUSH2 0x155C SWAP4 SWAP2 AND SWAP2 PUSH1 0x4 ADD PUSH2 0x5A38 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1576 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x158A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST PUSH2 0x15A1 DUP5 PUSH1 0x0 ADD MLOAD DUP3 PUSH1 0x40 ADD MLOAD PUSH2 0x3168 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x100 DUP2 ADD MLOAD PUSH1 0x40 DUP3 ADD MLOAD DUP3 MLOAD PUSH2 0x15C7 SWAP3 SWAP2 PUSH2 0x1049 SWAP2 SWAP1 PUSH2 0x2A60 JUMP JUMPDEST PUSH1 0x80 DUP4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP1 DUP6 ADD MLOAD PUSH1 0x40 DUP6 DUP2 ADD MLOAD DUP7 DUP5 ADD MLOAD DUP3 MLOAD SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP7 SWAP1 SWAP7 MSTORE SWAP1 DUP3 ADD MSTORE SWAP1 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH32 0x4152C73DD2614C4F9FC35E8C9CF16013CD588C75B49A4C1673ECFFDCBCDA9403 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH2 0x163A DUP5 PUSH1 0x0 ADD MLOAD CALLER DUP4 PUSH1 0x60 ADD MLOAD DUP5 PUSH1 0x40 ADD MLOAD PUSH2 0x32AC JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1649 PUSH2 0x3B4B JUMP JUMPDEST PUSH2 0x1653 PUSH1 0x0 PUSH2 0x3BA5 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH2 0x16D6 PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x490BE83 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x16AD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x16D1 SWAP2 SWAP1 PUSH2 0x59DD JUMP JUMPDEST PUSH2 0x2BC9 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x16E5 PUSH2 0x28DA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x11 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x170B SWAP1 DUP5 PUSH2 0x3BF7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x11 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x173A PUSH2 0x3B4B JUMP JUMPDEST PUSH2 0x1743 DUP13 PUSH2 0x3C03 JUMP JUMPDEST PUSH2 0x174C DUP12 PUSH2 0x3C03 JUMP JUMPDEST PUSH2 0x1755 DUP11 PUSH2 0x3C03 JUMP JUMPDEST PUSH2 0x175E DUP10 PUSH2 0x3C03 JUMP JUMPDEST PUSH2 0x1767 DUP9 PUSH2 0x3C03 JUMP JUMPDEST PUSH2 0x1770 DUP8 PUSH2 0x3C03 JUMP JUMPDEST PUSH2 0x1779 DUP7 PUSH2 0x3C03 JUMP JUMPDEST PUSH2 0x1782 DUP6 PUSH2 0x3C03 JUMP JUMPDEST PUSH2 0x178B DUP5 PUSH2 0x3C03 JUMP JUMPDEST PUSH2 0x1794 DUP4 PUSH2 0x3C03 JUMP JUMPDEST PUSH2 0x179D DUP3 PUSH2 0x3C03 JUMP JUMPDEST PUSH2 0x17A6 DUP2 PUSH2 0x3C03 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP16 DUP2 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SWAP3 SSTORE PUSH1 0x0 DUP1 SLOAD DUP3 AND DUP15 DUP5 AND OR SWAP1 SSTORE PUSH1 0x1 DUP1 SLOAD DUP3 AND DUP14 DUP5 AND OR SWAP1 SSTORE PUSH1 0x5 DUP1 SLOAD DUP3 AND DUP13 DUP5 AND OR SWAP1 SSTORE PUSH1 0x6 DUP1 SLOAD DUP3 AND DUP12 DUP5 AND OR SWAP1 SSTORE PUSH1 0x7 DUP1 SLOAD DUP3 AND DUP11 DUP5 AND OR SWAP1 SSTORE PUSH1 0x2 DUP1 SLOAD DUP3 AND DUP10 DUP5 AND OR SWAP1 SSTORE PUSH1 0x8 DUP1 SLOAD DUP3 AND DUP9 DUP5 AND OR SWAP1 SSTORE PUSH1 0xC DUP1 SLOAD DUP3 AND DUP8 DUP5 AND OR SWAP1 SSTORE PUSH1 0x9 DUP1 SLOAD DUP3 AND DUP7 DUP5 AND OR SWAP1 SSTORE PUSH1 0xA DUP1 SLOAD DUP3 AND DUP6 DUP5 AND OR SWAP1 SSTORE PUSH1 0xB DUP1 SLOAD SWAP1 SWAP2 AND SWAP2 DUP4 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0x3CA631FFCD2A9B5D9AE18543FC82F58EB4CA33AF9E6AB01B7A8E95331E6ED985 SWAP1 PUSH2 0x1880 SWAP1 DUP15 SWAP1 PUSH2 0x5645 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH32 0x78F058B189175430C48DC02699E3A0031EA4FF781536DC2FAB847DE4BABDD882 DUP12 PUSH1 0x40 MLOAD PUSH2 0x18B7 SWAP2 SWAP1 PUSH2 0x5645 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH32 0x5EE0CAE2F063ED938BB55046F6A932FB6AE792BF43624806BB90ABE68A50BE9B DUP11 PUSH1 0x40 MLOAD PUSH2 0x18EE SWAP2 SWAP1 PUSH2 0x5645 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH32 0x82966D27EEA39B038EE0FA30CD16532BB24F6E65D31CB58FB227AA5766CDCC7F DUP10 PUSH1 0x40 MLOAD PUSH2 0x1925 SWAP2 SWAP1 PUSH2 0x5645 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH32 0xCFB07D791FCAFC032B35837B50EB84B74DF518CF4CC287E8084F47630FA70FA0 DUP9 PUSH1 0x40 MLOAD PUSH2 0x195C SWAP2 SWAP1 PUSH2 0x5645 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH32 0xE67F36A6E961157D6EFF83B91F3AF5A62131CEB6F04954EF74F51C1C05E7F88D DUP8 PUSH1 0x40 MLOAD PUSH2 0x1993 SWAP2 SWAP1 PUSH2 0x5645 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH32 0x8C537274438AA850A330284665D81A85DD38267D09E4050D416BFC94142DB264 DUP7 PUSH1 0x40 MLOAD PUSH2 0x19CA SWAP2 SWAP1 PUSH2 0x5645 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH32 0x7FAA560F2889840C377209FBC4B6B92D05F43F1FC60BF336AB546FD60C0051AD DUP6 PUSH1 0x40 MLOAD PUSH2 0x1A01 SWAP2 SWAP1 PUSH2 0x5645 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH32 0x65F4CF077BC01E4742EB5AD98326F6E95B63548EA24B17F8D5E823111FE78800 DUP5 PUSH1 0x40 MLOAD PUSH2 0x1A38 SWAP2 SWAP1 PUSH2 0x5645 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH32 0xD32E4EF3D389440323B172CFC07C6C01BDD1D3E8334379048EEC21E8D919B77 DUP4 PUSH1 0x40 MLOAD PUSH2 0x1A6F SWAP2 SWAP1 PUSH2 0x5645 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH32 0xFE7E5F521EFD6E9FDA9261F1223B2CDA79BA84D0393E8B6629D27DB91048126F DUP3 PUSH1 0x40 MLOAD PUSH2 0x1AA6 SWAP2 SWAP1 PUSH2 0x5645 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH32 0x6877E00D9059F8716BD795B5D4C2C89A4BC3CEF71BA3DD99B168AC9CC1F2A6C2 DUP2 PUSH1 0x40 MLOAD PUSH2 0x1ADD SWAP2 SWAP1 PUSH2 0x5645 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH2 0x1AED PUSH2 0x1641 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x18 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x1B0B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 POP DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x15B3137B PUSH1 0xE2 SHL DUP2 MSTORE SWAP1 MLOAD DUP4 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0x56CC4DEC SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1B6F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1B93 SWAP2 SWAP1 PUSH2 0x59DD JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x56CC4DEC PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1BEA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1C0E SWAP2 SWAP1 PUSH2 0x59DD JUMP JUMPDEST SWAP1 POP PUSH2 0x1C1A DUP3 DUP3 PUSH2 0x3BF7 JUMP JUMPDEST SWAP3 POP POP POP SWAP1 JUMP JUMPDEST PUSH2 0x1C29 PUSH2 0x28DA JUMP JUMPDEST PUSH2 0xB77 DUP2 PUSH2 0x3CA8 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0xA2F03983 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD DUP4 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0xA2F03983 SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1C7C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1CA0 SWAP2 SWAP1 PUSH2 0x59DD JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA2F03983 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1BEA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xC82 PUSH2 0x1D04 PUSH2 0x3D0C JUMP JUMPDEST DUP4 PUSH2 0x3D50 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x17 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x15 SLOAD DUP3 SWAP1 PUSH2 0xBA5 SWAP1 DUP4 PUSH2 0x2A60 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D3C PUSH2 0x28DA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x11 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0xC63 SWAP1 DUP5 PUSH2 0x3BF7 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1DD1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54726F76654D616E616765723A204F6E6C7920426F72726F776572206F706572 PUSH1 0x44 DUP3 ADD MSTORE PUSH15 0x185D1A5BDB9CC81B585E4818D85B1B PUSH1 0x8A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xD29 JUMP JUMPDEST PUSH2 0x1DE5 PUSH2 0x3E8 PUSH8 0xDE0B6B3A7640000 PUSH2 0x5A7D JUMP JUMPDEST PUSH2 0x1DF0 SWAP1 PUSH1 0x5 PUSH2 0x5A91 JUMP JUMPDEST DUP2 LT PUSH2 0x1E27 JUMPI PUSH2 0x1E0A PUSH2 0x3E8 PUSH8 0xDE0B6B3A7640000 PUSH2 0x5A7D JUMP JUMPDEST PUSH2 0x1E15 SWAP1 PUSH1 0x5 PUSH2 0x5A91 JUMP JUMPDEST PUSH2 0x1E1F SWAP1 DUP3 PUSH2 0x5AD4 JUMP JUMPDEST PUSH1 0xE SSTORE PUSH2 0x1E2D JUMP JUMPDEST PUSH1 0x0 PUSH1 0xE SSTORE JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH32 0xCA870D46D67E9A1444A6B8F97A147E06E4CF71EE2A0F172D7ECD5441AE7C1201 SWAP1 PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC82 PUSH2 0x1E71 PUSH2 0x3D0C JUMP JUMPDEST DUP4 PUSH2 0x3549 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1E85 DUP5 PUSH2 0x3E2F JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 PUSH2 0x1E95 DUP4 DUP4 PUSH2 0x3EA9 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC82 PUSH1 0xE SLOAD DUP4 PUSH2 0x3D50 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC82 DUP3 PUSH2 0x3ED8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x11 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP1 SWAP2 ADD SLOAD SWAP1 SWAP2 DUP1 PUSH2 0x1EE3 DUP6 PUSH2 0xB7A JUMP JUMPDEST SWAP2 POP PUSH2 0x1EEE DUP6 PUSH2 0x1D0A JUMP JUMPDEST SWAP1 POP PUSH2 0x1EFA DUP5 DUP4 PUSH2 0x3BF7 JUMP JUMPDEST SWAP4 POP PUSH2 0x1F06 DUP4 DUP3 PUSH2 0x3BF7 JUMP JUMPDEST SWAP3 POP SWAP2 SWAP4 POP SWAP2 SWAP4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xE0 DUP1 DUP3 ADD DUP4 MSTORE PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP5 MSTORE PUSH1 0x1 SLOAD DUP2 AND PUSH1 0x20 DUP1 DUP7 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x8 SLOAD DUP3 AND DUP6 DUP8 ADD MSTORE PUSH1 0xA SLOAD DUP3 AND PUSH1 0x60 DUP1 DUP8 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xC SLOAD DUP4 AND PUSH1 0x80 DUP1 DUP9 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x7 SLOAD DUP5 AND PUSH1 0xA0 DUP1 DUP10 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x6 SLOAD SWAP1 SWAP5 AND PUSH1 0xC0 DUP1 DUP10 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP9 MLOAD PUSH2 0x100 DUP2 ADD DUP11 MSTORE DUP7 DUP2 MSTORE SWAP4 DUP5 ADD DUP7 SWAP1 MSTORE SWAP8 DUP4 ADD DUP6 SWAP1 MSTORE SWAP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP2 ADD DUP4 SWAP1 MSTORE SWAP1 DUP2 ADD DUP3 SWAP1 MSTORE SWAP4 DUP5 ADD DUP2 SWAP1 MSTORE SWAP1 DUP4 ADD MSTORE SWAP1 PUSH2 0x1FB8 DUP4 PUSH2 0x3EFC JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xFDB11CF PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x200D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2031 SWAP2 SWAP1 PUSH2 0x59DD JUMP JUMPDEST PUSH1 0xC0 DUP3 ADD DUP2 SWAP1 MSTORE PUSH2 0x2041 SWAP1 PUSH2 0x3F97 JUMP JUMPDEST PUSH2 0x204A DUP10 PUSH2 0x400A JUMP JUMPDEST PUSH2 0x2059 DUP3 PUSH1 0x40 ADD MLOAD CALLER DUP12 PUSH2 0x4071 JUMP JUMPDEST PUSH2 0x2061 PUSH2 0x1B25 JUMP JUMPDEST PUSH1 0xE0 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP5 ADD MLOAD SWAP1 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0x209A SWAP1 CALLER SWAP1 PUSH1 0x4 ADD PUSH2 0x5645 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x20B7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x20DB SWAP2 SWAP1 PUSH2 0x59DD JUMP JUMPDEST GT ISZERO PUSH2 0x20E9 JUMPI PUSH2 0x20E9 PUSH2 0x5ABE JUMP JUMPDEST DUP9 DUP2 MSTORE PUSH1 0x80 DUP3 ADD MLOAD PUSH1 0xC0 DUP3 ADD MLOAD PUSH1 0x0 SWAP2 PUSH2 0x2104 SWAP2 DUP12 SWAP1 PUSH2 0x4171 JUMP JUMPDEST ISZERO PUSH2 0x2110 JUMPI POP DUP8 PUSH2 0x2222 JUMP JUMPDEST DUP3 PUSH1 0x80 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x4D622831 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2152 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2176 SWAP2 SWAP1 PUSH2 0x5AE7 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x21A5 JUMPI POP PUSH8 0x14D1120D7B160000 PUSH2 0x21A3 DUP3 DUP5 PUSH1 0xC0 ADD MLOAD PUSH2 0x2643 JUMP JUMPDEST LT JUMPDEST ISZERO PUSH2 0x2222 JUMPI DUP3 PUSH1 0x80 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xB72703AC DUP3 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x21DA SWAP2 SWAP1 PUSH2 0x5645 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x21F7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x221B SWAP2 SWAP1 PUSH2 0x5AE7 JUMP JUMPDEST SWAP1 POP PUSH2 0x2179 JUMP JUMPDEST DUP5 PUSH1 0x0 SUB PUSH2 0x2230 JUMPI PUSH1 0x0 NOT SWAP5 POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x2248 JUMPI POP DUP2 MLOAD ISZERO ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x2254 JUMPI POP PUSH1 0x0 DUP6 GT JUMPDEST ISZERO PUSH2 0x2360 JUMPI DUP5 PUSH2 0x2263 DUP2 PUSH2 0x5B04 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x0 DUP4 PUSH1 0x80 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xB72703AC DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2298 SWAP2 SWAP1 PUSH2 0x5645 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x22B5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x22D9 SWAP2 SWAP1 PUSH2 0x5AE7 JUMP JUMPDEST SWAP1 POP PUSH2 0x22EE DUP5 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x20 ADD MLOAD DUP5 PUSH2 0x295A JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2307 DUP6 DUP5 DUP7 PUSH1 0x0 ADD MLOAD DUP8 PUSH1 0xC0 ADD MLOAD DUP15 DUP15 DUP15 PUSH2 0x42BB JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x40 ADD MLOAD ISZERO PUSH2 0x231A JUMPI POP POP PUSH2 0x2360 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP6 ADD MLOAD PUSH2 0x232A SWAP2 PUSH2 0x3BF7 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP7 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP2 ADD MLOAD PUSH1 0x40 DUP6 ADD MLOAD PUSH2 0x2344 SWAP2 PUSH2 0x3BF7 JUMP JUMPDEST PUSH1 0x40 DUP6 ADD MSTORE DUP1 MLOAD DUP5 MLOAD PUSH2 0x2356 SWAP2 PUSH2 0x2A60 JUMP JUMPDEST DUP5 MSTORE POP SWAP1 POP PUSH2 0x2230 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x40 ADD MLOAD GT PUSH2 0x23C6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54726F76654D616E616765723A20556E61626C6520746F2072656465656D2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x1B9E48185B5BDD5B9D PUSH1 0xBA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xD29 JUMP JUMPDEST PUSH2 0x23DD DUP3 PUSH1 0x40 ADD MLOAD DUP4 PUSH1 0xC0 ADD MLOAD DUP5 PUSH1 0xE0 ADD MLOAD PUSH2 0x4505 JUMP JUMPDEST POP PUSH2 0x23EB DUP3 PUSH1 0x40 ADD MLOAD PUSH2 0x4612 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD DUP2 SWAP1 MSTORE PUSH1 0x40 DUP4 ADD MLOAD PUSH2 0x2402 SWAP2 SWAP1 DUP7 PUSH2 0x4620 JUMP JUMPDEST PUSH1 0xB SLOAD PUSH1 0x40 DUP1 DUP5 ADD MLOAD PUSH1 0x60 DUP6 ADD MLOAD SWAP2 MLOAD PUSH4 0x18DDAD89 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND SWAP3 PUSH4 0x6376B624 SWAP3 PUSH2 0x2444 SWAP3 SWAP2 PUSH1 0x4 ADD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x245E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2472 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x60 DUP3 ADD MLOAD PUSH1 0x40 DUP4 ADD MLOAD PUSH2 0x2489 SWAP2 PUSH2 0x2A60 JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x40 DUP1 DUP5 ADD MLOAD PUSH1 0x60 DUP6 ADD MLOAD SWAP2 MLOAD PUSH32 0x43A3F4082A4DBC33D78E317D2497D3A730BC7FC3574159DCEA1056E62E5D9AD8 SWAP4 PUSH2 0x24E5 SWAP4 DUP16 SWAP4 SWAP2 SWAP3 SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 DUP3 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x9DC29FAC CALLER DUP5 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2523 SWAP3 SWAP2 SWAP1 PUSH2 0x5A38 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x253D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2551 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP DUP5 MLOAD PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x40 MLOAD PUSH4 0x3B4009FF PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP4 POP PUSH4 0x768013FE SWAP3 POP PUSH2 0x258B SWAP2 PUSH1 0x4 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x25A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x25B9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP DUP5 MLOAD PUSH1 0x80 DUP6 ADD MLOAD PUSH1 0x40 MLOAD PUSH4 0xA51BA3B7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP4 POP PUSH4 0xA51BA3B7 SWAP3 POP PUSH2 0x25F2 SWAP2 CALLER SWAP2 SWAP1 PUSH1 0x4 ADD PUSH2 0x5A38 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x260C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2620 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x2638 PUSH2 0x28DA JUMP JUMPDEST PUSH2 0xB77 DUP2 PUSH1 0x2 PUSH2 0x468A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x2651 DUP6 PUSH2 0x3E2F JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 PUSH2 0xC2C DUP4 DUP4 DUP8 PUSH2 0x47B7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x266C PUSH2 0x28DA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x11 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x170B SWAP1 DUP5 PUSH2 0x2A60 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC82 PUSH2 0x26A0 DUP4 PUSH2 0x1E64 JUMP JUMPDEST DUP4 PUSH2 0x47EB JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x490BE83 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x26FC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2720 SWAP2 SWAP1 PUSH2 0x59DD JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH2 0x272E DUP6 PUSH2 0x3E2F JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 PUSH2 0xC2C DUP4 DUP4 DUP7 PUSH2 0x47B7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x18 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x2754 JUMPI PUSH2 0x2754 PUSH2 0x5AA8 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x16D6 PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x490BE83 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x27C7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x27EB SWAP2 SWAP1 PUSH2 0x59DD JUMP JUMPDEST PUSH2 0x3ED8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x11 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 ADD SLOAD PUSH1 0xFF AND PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x2824 JUMPI PUSH2 0x2824 PUSH2 0x57DD JUMP JUMPDEST EQ PUSH2 0x2831 JUMPI POP PUSH1 0x0 SWAP2 SWAP1 POP JUMP JUMPDEST POP PUSH1 0x15 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x17 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD LT SWAP1 JUMP JUMPDEST PUSH2 0x285B PUSH2 0x3B4B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x28C0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xD29 JUMP JUMPDEST PUSH2 0xB77 DUP2 PUSH2 0x3BA5 JUMP JUMPDEST PUSH2 0x28D1 PUSH2 0x28DA JUMP JUMPDEST PUSH2 0xB77 DUP2 PUSH2 0x4874 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1653 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54726F76654D616E616765723A2043616C6C6572206973206E6F742074686520 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x426F72726F7765724F7065726174696F6E7320636F6E74726163740000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xD29 JUMP JUMPDEST PUSH2 0x2963 DUP2 PUSH2 0x27F0 JUMP JUMPDEST ISZERO PUSH2 0x2A5B JUMPI PUSH2 0x2971 DUP2 PUSH2 0x349A JUMP JUMPDEST PUSH1 0x0 PUSH2 0x297C DUP3 PUSH2 0x1D0A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2989 DUP4 PUSH2 0xB7A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x11 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 SWAP2 POP PUSH2 0x29B2 SWAP1 DUP4 PUSH2 0x3BF7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x11 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 DUP2 ADD SWAP2 SWAP1 SWAP2 SSTORE SLOAD PUSH2 0x29DD SWAP1 DUP3 PUSH2 0x3BF7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x11 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH2 0x29FF DUP4 PUSH2 0x3CA8 JUMP JUMPDEST PUSH2 0x2A0B DUP6 DUP6 DUP4 DUP6 PUSH2 0x48BE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x11 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 SWAP1 SWAP3 ADD SLOAD SWAP3 MLOAD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5C05 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP5 PUSH2 0x2A50 SWAP5 SWAP3 SWAP4 SWAP3 SWAP2 PUSH2 0x5B2F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A6C DUP3 DUP5 PUSH2 0x5AD4 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A6C DUP3 DUP5 PUSH2 0x5A91 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A6C DUP3 DUP5 PUSH2 0x5A7D JUMP JUMPDEST PUSH1 0x18 DUP1 SLOAD PUSH1 0x1 DUP1 DUP3 ADD DUP4 SSTORE PUSH1 0x0 DUP4 DUP2 MSTORE PUSH32 0xB13D2D76D1F4B7BE834882E410B3E3A8AFAF69F83600AE24DB354391D2378D2E SWAP1 SWAP3 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND OR SWAP1 SSTORE SWAP2 SLOAD SWAP1 SWAP2 PUSH2 0x2AE6 SWAP2 SWAP1 PUSH2 0x2A60 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x11 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 ADD DUP1 SLOAD PUSH2 0x100 PUSH1 0x1 PUSH1 0x88 SHL SUB NOT AND PUSH2 0x100 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP6 AND MUL OR SWAP1 SSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x11 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 ADD SLOAD DUP2 SWAP1 PUSH2 0x2B4C SWAP1 PUSH2 0x499F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x11 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD DUP1 SLOAD SWAP1 DUP3 SWAP1 SSTORE PUSH1 0x12 SLOAD SWAP2 SWAP3 POP SWAP1 PUSH2 0x2B8A SWAP1 DUP4 SWAP1 PUSH2 0x2B84 SWAP1 DUP5 PUSH2 0x2A60 JUMP JUMPDEST SWAP1 PUSH2 0x3BF7 JUMP JUMPDEST PUSH1 0x12 DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0x6BAC5E0EB3C44EB03A60AB11EC3A2C051771616AECADBCFFF2630AABAE520382 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2BD5 DUP4 PUSH2 0x3ED8 JUMP JUMPDEST PUSH8 0x14D1120D7B160000 GT SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x2BEE PUSH2 0x55B1 JUMP JUMPDEST PUSH2 0x2BF6 PUSH2 0x55FD JUMP JUMPDEST PUSH2 0x2BFE PUSH2 0x55B1 JUMP JUMPDEST DUP5 DUP3 MSTORE PUSH1 0x0 PUSH1 0x80 DUP4 ADD MSTORE PUSH2 0x2C10 PUSH2 0x1B25 JUMP JUMPDEST PUSH1 0xA0 DUP4 ADD MSTORE PUSH2 0x2C1D PUSH2 0x1C32 JUMP JUMPDEST PUSH1 0xC0 DUP4 ADD MSTORE PUSH1 0x0 PUSH1 0x20 DUP4 ADD MSTORE JUMPDEST DUP4 MLOAD DUP3 PUSH1 0x20 ADD MLOAD LT ISZERO PUSH2 0x2E02 JUMPI DUP4 DUP3 PUSH1 0x20 ADD MLOAD DUP2 MLOAD DUP2 LT PUSH2 0x2C4D JUMPI PUSH2 0x2C4D PUSH2 0x5AA8 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x60 DUP5 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x11 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 ADD SLOAD PUSH1 0x1 SWAP1 PUSH1 0xFF AND PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x2C92 JUMPI PUSH2 0x2C92 PUSH2 0x57DD JUMP JUMPDEST SUB PUSH2 0x2DEA JUMPI PUSH2 0x2CA5 DUP3 PUSH1 0x60 ADD MLOAD DUP8 PUSH2 0x2643 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD MLOAD PUSH2 0x2D92 JUMPI PUSH8 0x14D1120D7B160000 DUP3 PUSH1 0x40 ADD MLOAD LT ISZERO DUP1 ISZERO PUSH2 0x2CCE JUMPI POP DUP2 MLOAD ISZERO JUMPDEST PUSH2 0x2DEA JUMPI PUSH1 0x0 PUSH2 0x2CE7 DUP4 PUSH1 0xC0 ADD MLOAD DUP5 PUSH1 0xA0 ADD MLOAD DUP10 PUSH2 0x47B7 JUMP JUMPDEST SWAP1 POP PUSH2 0x2D04 DUP10 DUP10 DUP6 PUSH1 0x60 ADD MLOAD DUP7 PUSH1 0x40 ADD MLOAD DUP8 PUSH1 0x0 ADD MLOAD DUP7 DUP14 PUSH2 0x49E0 JUMP JUMPDEST PUSH1 0x80 DUP2 ADD MLOAD DUP5 MLOAD SWAP2 SWAP4 POP PUSH2 0x2D18 SWAP2 SWAP1 PUSH2 0x2A60 JUMP JUMPDEST DUP4 MSTORE PUSH1 0x80 DUP3 ADD MLOAD PUSH1 0xA0 DUP5 ADD MLOAD PUSH2 0x2D2D SWAP2 PUSH2 0x2A60 JUMP JUMPDEST DUP4 PUSH1 0xA0 ADD DUP2 DUP2 MSTORE POP POP PUSH2 0x2D62 DUP3 PUSH2 0x100 ADD MLOAD PUSH2 0x1049 DUP5 PUSH1 0x40 ADD MLOAD PUSH2 0x1049 DUP7 PUSH1 0xA0 ADD MLOAD DUP9 PUSH1 0xC0 ADD MLOAD PUSH2 0x2A60 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0xC0 DUP5 ADD MSTORE PUSH2 0x2D71 DUP5 DUP4 PUSH2 0x4CD3 JUMP JUMPDEST SWAP4 POP PUSH2 0x2D86 DUP4 PUSH1 0xC0 ADD MLOAD DUP5 PUSH1 0xA0 ADD MLOAD DUP10 PUSH2 0x4DB4 JUMP JUMPDEST ISZERO PUSH1 0x80 DUP5 ADD MSTORE POP PUSH2 0x2DEA JUMP JUMPDEST DUP2 PUSH1 0x80 ADD MLOAD DUP1 ISZERO PUSH2 0x2DAE JUMPI POP PUSH8 0x14D1120D7B160000 DUP3 PUSH1 0x40 ADD MLOAD LT JUMPDEST ISZERO PUSH2 0x2DEA JUMPI PUSH2 0x2DC7 DUP9 DUP9 DUP5 PUSH1 0x60 ADD MLOAD DUP6 PUSH1 0x0 ADD MLOAD PUSH2 0x4DD5 JUMP JUMPDEST PUSH1 0x80 DUP2 ADD MLOAD DUP4 MLOAD SWAP2 SWAP3 POP PUSH2 0x2DDB SWAP2 SWAP1 PUSH2 0x2A60 JUMP JUMPDEST DUP3 MSTORE PUSH2 0x2DE7 DUP4 DUP3 PUSH2 0x4CD3 JUMP JUMPDEST SWAP3 POP JUMPDEST PUSH1 0x20 DUP3 ADD DUP1 MLOAD SWAP1 PUSH2 0x2DFA DUP3 PUSH2 0x5B51 JUMP JUMPDEST SWAP1 MSTORE POP PUSH2 0x2C2A JUMP JUMPDEST POP POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x2E15 PUSH2 0x55B1 JUMP JUMPDEST PUSH2 0x2E1D PUSH2 0x55FD JUMP JUMPDEST PUSH2 0x2E25 PUSH2 0x55B1 JUMP JUMPDEST DUP5 DUP3 MSTORE PUSH1 0x0 PUSH1 0x20 DUP4 ADD MSTORE JUMPDEST DUP4 MLOAD DUP3 PUSH1 0x20 ADD MLOAD LT ISZERO PUSH2 0x2E02 JUMPI DUP4 DUP3 PUSH1 0x20 ADD MLOAD DUP2 MLOAD DUP2 LT PUSH2 0x2E53 JUMPI PUSH2 0x2E53 PUSH2 0x5AA8 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x60 DUP4 ADD DUP2 SWAP1 MSTORE PUSH2 0x2E78 SWAP1 DUP8 PUSH2 0x2643 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD DUP2 SWAP1 MSTORE PUSH8 0x14D1120D7B160000 GT ISZERO PUSH2 0x2EC5 JUMPI PUSH2 0x2EA2 DUP9 DUP9 DUP5 PUSH1 0x60 ADD MLOAD DUP6 PUSH1 0x0 ADD MLOAD PUSH2 0x4DD5 JUMP JUMPDEST PUSH1 0x80 DUP2 ADD MLOAD DUP4 MLOAD SWAP2 SWAP3 POP PUSH2 0x2EB6 SWAP2 SWAP1 PUSH2 0x2A60 JUMP JUMPDEST DUP3 MSTORE PUSH2 0x2EC2 DUP4 DUP3 PUSH2 0x4CD3 JUMP JUMPDEST SWAP3 POP JUMPDEST PUSH1 0x20 DUP3 ADD DUP1 MLOAD SWAP1 PUSH2 0x2ED5 DUP3 PUSH2 0x5B51 JUMP JUMPDEST SWAP1 MSTORE POP PUSH2 0x2E30 JUMP JUMPDEST DUP2 ISZERO PUSH2 0x3162 JUMPI PUSH1 0x19 SLOAD PUSH1 0x0 SWAP1 PUSH2 0x2EFF SWAP1 PUSH2 0x2B84 DUP5 PUSH8 0xDE0B6B3A7640000 PUSH2 0x2A73 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2F24 PUSH1 0x1A SLOAD PUSH2 0x2B84 PUSH8 0xDE0B6B3A7640000 DUP8 PUSH2 0x2A73 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2F3D PUSH1 0x12 SLOAD DUP5 PUSH2 0x2A7F SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2F56 PUSH1 0x12 SLOAD DUP5 PUSH2 0x2A7F SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH2 0x2F77 PUSH2 0x2F70 PUSH1 0x12 SLOAD DUP5 PUSH2 0x2A73 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP6 SWAP1 PUSH2 0x2A60 JUMP JUMPDEST PUSH1 0x19 SSTORE PUSH1 0x12 SLOAD PUSH2 0x2F93 SWAP1 PUSH2 0x2F8C SWAP1 DUP4 SWAP1 PUSH2 0x2A73 JUMP JUMPDEST DUP5 SWAP1 PUSH2 0x2A60 JUMP JUMPDEST PUSH1 0x1A SSTORE PUSH1 0x15 SLOAD PUSH2 0x2FA3 SWAP1 DUP4 PUSH2 0x3BF7 JUMP JUMPDEST PUSH1 0x15 SSTORE PUSH1 0x16 SLOAD PUSH2 0x2FB3 SWAP1 DUP3 PUSH2 0x3BF7 JUMP JUMPDEST PUSH1 0x16 DUP2 SWAP1 SSTORE PUSH1 0x15 SLOAD PUSH1 0x40 MLOAD PUSH32 0x9F8BC8AB0DAF5BCEEF75ECFD2085D1FCC6548C657EA970D9A23A60610D0737E3 SWAP3 PUSH2 0x2FF1 SWAP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x40 MLOAD PUSH4 0x3B4009FF PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND SWAP1 PUSH4 0x768013FE SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x303B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x304F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH4 0x262B8901 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP10 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND SWAP3 POP PUSH4 0x262B8901 SWAP2 POP PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3095 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x30A9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH3 0xF9332D PUSH1 0xE6 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND SWAP3 POP PUSH4 0x3E4CCB40 SWAP2 POP PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x30EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3102 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH4 0xA51BA3B7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 AND SWAP3 POP PUSH4 0xA51BA3B7 SWAP2 POP PUSH2 0x3134 SWAP1 DUP11 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x5A38 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x314E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1AED JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x12 SLOAD PUSH1 0x13 DUP2 SWAP1 SSTORE POP PUSH1 0x0 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA2F03983 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x31B1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x31D5 SWAP2 SWAP1 PUSH2 0x59DD JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA2F03983 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x322C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3250 SWAP2 SWAP1 PUSH2 0x59DD JUMP JUMPDEST SWAP1 POP PUSH2 0x3260 DUP2 PUSH2 0x2B84 DUP5 DUP7 PUSH2 0x2A60 JUMP JUMPDEST PUSH1 0x14 DUP2 SWAP1 SSTORE PUSH1 0x13 SLOAD PUSH1 0x40 MLOAD PUSH32 0x51BF4C63EC3CBA9D03D43238ABBDD979DD91BD16D9895C74CEEA9118C7BAAF60 SWAP3 PUSH2 0x329E SWAP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP JUMP JUMPDEST DUP2 ISZERO PUSH2 0x3323 JUMPI PUSH1 0x8 SLOAD PUSH1 0x6 SLOAD PUSH1 0x40 MLOAD PUSH4 0x1062C15F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE DUP6 DUP3 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP6 SWAP1 MSTORE SWAP2 AND SWAP1 PUSH4 0x20C582BE SWAP1 PUSH1 0x64 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x330A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x331E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST DUP1 ISZERO PUSH2 0x3162 JUMPI PUSH1 0x40 MLOAD PUSH4 0xA51BA3B7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0xA51BA3B7 SWAP1 PUSH2 0x3357 SWAP1 DUP7 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x5A38 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3371 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3385 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH4 0x3B9ACA00 DUP3 PUSH2 0x33A3 DUP3 DUP8 PUSH2 0x5A91 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x33B1 DUP4 DUP9 PUSH2 0x5A91 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH2 0x33C0 DUP4 PUSH2 0x2EE PUSH2 0x5A91 JUMP JUMPDEST DUP2 GT PUSH2 0x348B JUMPI PUSH1 0x0 PUSH2 0x33D3 DUP11 DUP11 DUP5 PUSH2 0x47B7 JUMP JUMPDEST SWAP1 POP DUP7 DUP2 LT ISZERO PUSH2 0x342F JUMPI DUP3 JUMPDEST DUP3 DUP2 GT ISZERO DUP1 ISZERO PUSH2 0x33F8 JUMPI POP PUSH2 0x33F4 DUP6 DUP11 PUSH2 0x5A91 JUMP JUMPDEST DUP2 LT ISZERO JUMPDEST ISZERO PUSH2 0x342D JUMPI DUP8 PUSH2 0x3409 DUP13 DUP13 DUP5 PUSH2 0x47B7 JUMP JUMPDEST LT ISZERO PUSH2 0x341C JUMPI SWAP6 POP PUSH2 0x1130 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x3426 DUP6 DUP3 PUSH2 0x5AD4 JUMP JUMPDEST SWAP1 POP PUSH2 0x33DF JUMP JUMPDEST POP JUMPDEST PUSH2 0x3441 PUSH8 0x2C68AF0BB140000 DUP9 PUSH2 0x5AD4 JUMP JUMPDEST DUP2 LT ISZERO PUSH2 0x345A JUMPI PUSH2 0x3453 DUP5 PUSH1 0x14 PUSH2 0x5A91 JUMP JUMPDEST SWAP5 POP PUSH2 0x3476 JUMP JUMPDEST PUSH2 0x346B DUP8 PUSH7 0xB1A2BC2EC50000 PUSH2 0x5B6A JUMP JUMPDEST DUP2 GT ISZERO PUSH2 0x3476 JUMPI DUP4 SWAP5 POP JUMPDEST POP SWAP1 POP DUP1 PUSH2 0x3484 DUP5 DUP3 PUSH2 0x5B6A JUMP JUMPDEST SWAP1 POP PUSH2 0x33B4 JUMP JUMPDEST POP PUSH1 0x0 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x11 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 ADD SLOAD PUSH1 0xFF AND PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x34CC JUMPI PUSH2 0x34CC PUSH2 0x57DD JUMP JUMPDEST EQ PUSH2 0xB77 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54726F76654D616E616765723A2054726F766520646F6573206E6F7420657869 PUSH1 0x44 DUP3 ADD MSTORE PUSH15 0x1CDD081BDC881A5CC818DB1BDCD959 PUSH1 0x8A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xD29 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A6C PUSH8 0xDE0B6B3A7640000 PUSH2 0xC26 DUP6 DUP6 PUSH2 0x2A73 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A6C PUSH2 0x35F3 PUSH2 0x35D0 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA2F03983 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x35A5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x35C9 SWAP2 SWAP1 PUSH2 0x59DD JUMP JUMPDEST DUP6 SWAP1 PUSH2 0x2A7F JUMP JUMPDEST PUSH2 0x2B84 DUP7 PUSH2 0x35E8 PUSH2 0x3E8 PUSH8 0xDE0B6B3A7640000 PUSH2 0x5A7D JUMP JUMPDEST PUSH2 0x2B84 SWAP1 PUSH1 0x5 PUSH2 0x5A91 JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 PUSH2 0x4F16 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x360C PUSH2 0x4F2C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x3622 PUSH8 0xDC14847BCC53B20 DUP4 PUSH2 0x4F48 JUMP JUMPDEST SWAP1 POP PUSH2 0x1C1A PUSH8 0xDE0B6B3A7640000 PUSH2 0xC26 DUP4 PUSH1 0xE SLOAD PUSH2 0x2A73 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 PUSH2 0x365C PUSH1 0x10 SLOAD TIMESTAMP PUSH2 0x2A60 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x3C DUP2 LT PUSH2 0xB77 JUMPI TIMESTAMP PUSH1 0x10 DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0x4AC50C32A269C2CFEA9CF04E466DA1AB839008441FADF7108E4F05410C2BFD5F SWAP1 PUSH1 0x20 ADD PUSH2 0x1E59 JUMP JUMPDEST PUSH2 0x36A4 PUSH2 0x55B1 JUMP JUMPDEST PUSH2 0x36AC PUSH2 0x55FD JUMP JUMPDEST PUSH2 0x36B4 PUSH2 0x55B1 JUMP JUMPDEST DUP5 DUP3 MSTORE PUSH1 0x0 PUSH1 0x80 DUP4 ADD MSTORE PUSH2 0x36C6 PUSH2 0x1B25 JUMP JUMPDEST PUSH1 0xA0 DUP4 ADD MSTORE PUSH2 0x36D3 PUSH2 0x1C32 JUMP JUMPDEST DUP3 PUSH1 0xC0 ADD DUP2 DUP2 MSTORE POP POP DUP7 PUSH1 0x80 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x4D622831 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x371E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3742 SWAP2 SWAP1 PUSH2 0x5AE7 JUMP JUMPDEST DUP3 PUSH1 0x60 ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP PUSH1 0x0 DUP8 PUSH1 0x80 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1E223143 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x37A3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x37C7 SWAP2 SWAP1 PUSH2 0x5AE7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP6 ADD MSTORE SWAP1 POP JUMPDEST DUP5 DUP4 PUSH1 0x20 ADD MLOAD LT DUP1 ISZERO PUSH2 0x37FA JUMPI POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x3A0F JUMPI PUSH1 0x80 DUP9 ADD MLOAD PUSH1 0x60 DUP5 ADD MLOAD PUSH1 0x40 MLOAD PUSH4 0x2DC9C0EB PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x0 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0xB72703AC SWAP2 PUSH2 0x3836 SWAP2 SWAP1 PUSH1 0x4 ADD PUSH2 0x5645 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3853 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3877 SWAP2 SWAP1 PUSH2 0x5AE7 JUMP JUMPDEST SWAP1 POP PUSH2 0x3887 DUP5 PUSH1 0x60 ADD MLOAD DUP10 PUSH2 0x2643 JUMP JUMPDEST PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x80 DUP5 ADD MLOAD PUSH2 0x397F JUMPI PUSH8 0x14D1120D7B160000 DUP5 PUSH1 0x40 ADD MLOAD LT ISZERO DUP1 ISZERO PUSH2 0x38B0 JUMPI POP DUP4 MLOAD ISZERO JUMPDEST ISZERO PUSH2 0x38BB JUMPI POP PUSH2 0x3A0F JUMP JUMPDEST PUSH1 0x0 PUSH2 0x38D0 DUP6 PUSH1 0xC0 ADD MLOAD DUP7 PUSH1 0xA0 ADD MLOAD DUP12 PUSH2 0x47B7 JUMP JUMPDEST DUP11 MLOAD PUSH1 0x20 DUP13 ADD MLOAD PUSH1 0x60 DUP9 ADD MLOAD PUSH1 0x40 DUP10 ADD MLOAD DUP10 MLOAD SWAP5 SWAP6 POP PUSH2 0x38F1 SWAP5 DUP7 DUP16 PUSH2 0x49E0 JUMP JUMPDEST PUSH1 0x80 DUP2 ADD MLOAD DUP7 MLOAD SWAP2 SWAP6 POP PUSH2 0x3905 SWAP2 SWAP1 PUSH2 0x2A60 JUMP JUMPDEST DUP6 MSTORE PUSH1 0x80 DUP5 ADD MLOAD PUSH1 0xA0 DUP7 ADD MLOAD PUSH2 0x391A SWAP2 PUSH2 0x2A60 JUMP JUMPDEST DUP6 PUSH1 0xA0 ADD DUP2 DUP2 MSTORE POP POP PUSH2 0x394F DUP5 PUSH2 0x100 ADD MLOAD PUSH2 0x1049 DUP7 PUSH1 0x40 ADD MLOAD PUSH2 0x1049 DUP9 PUSH1 0xA0 ADD MLOAD DUP11 PUSH1 0xC0 ADD MLOAD PUSH2 0x2A60 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0xC0 DUP7 ADD MSTORE PUSH2 0x395E DUP7 DUP6 PUSH2 0x4CD3 JUMP JUMPDEST SWAP6 POP PUSH2 0x3973 DUP6 PUSH1 0xC0 ADD MLOAD DUP7 PUSH1 0xA0 ADD MLOAD DUP12 PUSH2 0x4DB4 JUMP JUMPDEST ISZERO PUSH1 0x80 DUP7 ADD MSTORE POP PUSH2 0x39E9 JUMP JUMPDEST DUP4 PUSH1 0x80 ADD MLOAD DUP1 ISZERO PUSH2 0x399B JUMPI POP PUSH8 0x14D1120D7B160000 DUP5 PUSH1 0x40 ADD MLOAD LT JUMPDEST ISZERO PUSH2 0x39E3 JUMPI PUSH2 0x39BC DUP10 PUSH1 0x0 ADD MLOAD DUP11 PUSH1 0x20 ADD MLOAD DUP7 PUSH1 0x60 ADD MLOAD DUP8 PUSH1 0x0 ADD MLOAD PUSH2 0x4DD5 JUMP JUMPDEST PUSH1 0x80 DUP2 ADD MLOAD DUP6 MLOAD SWAP2 SWAP5 POP PUSH2 0x39D0 SWAP2 SWAP1 PUSH2 0x2A60 JUMP JUMPDEST DUP5 MSTORE PUSH2 0x39DC DUP6 DUP5 PUSH2 0x4CD3 JUMP JUMPDEST SWAP5 POP PUSH2 0x39E9 JUMP JUMPDEST POP PUSH2 0x3A0F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x20 DUP4 ADD DUP1 MLOAD SWAP1 PUSH2 0x3A07 DUP3 PUSH2 0x5B51 JUMP JUMPDEST SWAP1 MSTORE POP PUSH2 0x37D1 JUMP JUMPDEST POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x3A22 PUSH2 0x55B1 JUMP JUMPDEST PUSH2 0x3A2A PUSH2 0x55FD JUMP JUMPDEST PUSH2 0x3A32 PUSH2 0x55B1 JUMP JUMPDEST PUSH1 0xC SLOAD DUP6 DUP4 MSTORE PUSH1 0x0 PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND JUMPDEST DUP5 DUP4 PUSH1 0x20 ADD MLOAD LT ISZERO PUSH2 0x3B3F JUMPI DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x4D622831 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3A93 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3AB7 SWAP2 SWAP1 PUSH2 0x5AE7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x60 DUP5 ADD DUP2 SWAP1 MSTORE PUSH2 0x3AD1 SWAP1 DUP9 PUSH2 0x2643 JUMP JUMPDEST PUSH1 0x40 DUP5 ADD DUP2 SWAP1 MSTORE PUSH8 0x14D1120D7B160000 GT ISZERO PUSH2 0x3B22 JUMPI PUSH2 0x3AFB DUP10 DUP10 DUP6 PUSH1 0x60 ADD MLOAD DUP7 PUSH1 0x0 ADD MLOAD PUSH2 0x4DD5 JUMP JUMPDEST PUSH1 0x80 DUP2 ADD MLOAD DUP5 MLOAD SWAP2 SWAP4 POP PUSH2 0x3B0F SWAP2 SWAP1 PUSH2 0x2A60 JUMP JUMPDEST DUP4 MSTORE PUSH2 0x3B1B DUP5 DUP4 PUSH2 0x4CD3 JUMP JUMPDEST SWAP4 POP PUSH2 0x3B27 JUMP JUMPDEST PUSH2 0x3B3F JUMP JUMPDEST PUSH1 0x20 DUP4 ADD DUP1 MLOAD SWAP1 PUSH2 0x3B37 DUP3 PUSH2 0x5B51 JUMP JUMPDEST SWAP1 MSTORE POP PUSH2 0x3A49 JUMP JUMPDEST POP POP POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1653 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xD29 JUMP JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A6C DUP3 DUP5 PUSH2 0x5B6A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x3C59 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4163636F756E742063616E6E6F74206265207A65726F20616464726573730000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xD29 JUMP JUMPDEST DUP1 EXTCODESIZE DUP1 PUSH2 0x11A0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4163636F756E7420636F64652073697A652063616E6E6F74206265207A65726F PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xD29 JUMP JUMPDEST PUSH1 0x15 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x17 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SWAP2 DUP3 SSTORE PUSH1 0x16 SLOAD PUSH1 0x1 SWAP1 SWAP3 ADD DUP3 SWAP1 SSTORE SWAP2 SLOAD SWAP2 MLOAD PUSH32 0xC437F324D85E369394148DD9D62F98F534B382E01ED3DD2EB98138FB6D3AB49A SWAP3 PUSH2 0x1E59 SWAP3 SWAP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3D17 PUSH2 0x4FEC JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x3D2D PUSH8 0xDDD4B8C6C7D70D8 DUP4 PUSH2 0x4F48 JUMP JUMPDEST SWAP1 POP PUSH2 0x1C1A PUSH8 0xDE0B6B3A7640000 PUSH2 0xC26 DUP4 PUSH1 0xD SLOAD PUSH2 0x2A73 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x8 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x18160DDD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3DA6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3DCA SWAP2 SWAP1 PUSH2 0x59DD JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x0 SUB PUSH2 0x3DFB JUMPI PUSH2 0x3DE8 PUSH2 0x3E8 PUSH8 0xDE0B6B3A7640000 PUSH2 0x5A7D JUMP JUMPDEST PUSH2 0x3DF3 SWAP1 PUSH1 0x5 PUSH2 0x5A91 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xC82 JUMP JUMPDEST PUSH2 0x1130 PUSH2 0x35F3 PUSH2 0x3E17 DUP4 PUSH2 0xC26 DUP8 PUSH8 0xDE0B6B3A7640000 PUSH2 0x2A73 JUMP JUMPDEST PUSH2 0x2B84 DUP8 PUSH2 0x35E8 PUSH2 0x3E8 PUSH8 0xDE0B6B3A7640000 PUSH2 0x5A7D JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x3E3D DUP5 PUSH2 0x1D0A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x3E4A DUP6 PUSH2 0xB7A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x11 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP2 SWAP3 POP SWAP1 PUSH2 0x3E74 SWAP1 DUP5 PUSH2 0x3BF7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x11 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP2 SWAP3 POP SWAP1 PUSH2 0x3E9B SWAP1 DUP5 PUSH2 0x3BF7 JUMP JUMPDEST SWAP2 SWAP8 SWAP2 SWAP7 POP SWAP1 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO PUSH2 0x3ECF JUMPI PUSH2 0x3EC8 DUP3 PUSH2 0xC26 DUP6 PUSH9 0x56BC75E2D63100000 PUSH2 0x2A73 JUMP JUMPDEST SWAP1 POP PUSH2 0xC82 JUMP JUMPDEST POP PUSH1 0x0 NOT PUSH2 0xC82 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3EE3 PUSH2 0x1C32 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x3EEF PUSH2 0x1B25 JUMP JUMPDEST SWAP1 POP PUSH2 0x1130 DUP3 DUP3 DUP7 PUSH2 0x47B7 JUMP JUMPDEST PUSH2 0x3F10 PUSH2 0x3E8 PUSH8 0xDE0B6B3A7640000 PUSH2 0x5A7D JUMP JUMPDEST PUSH2 0x3F1B SWAP1 PUSH1 0x5 PUSH2 0x5A91 JUMP JUMPDEST DUP2 LT ISZERO DUP1 ISZERO PUSH2 0x3F32 JUMPI POP PUSH8 0xDE0B6B3A7640000 DUP2 GT ISZERO JUMPDEST PUSH2 0xB77 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x30 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4D6178206665652070657263656E74616765206D757374206265206265747765 PUSH1 0x44 DUP3 ADD MSTORE PUSH16 0x656E20302E352520616E642031303025 PUSH1 0x80 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xD29 JUMP JUMPDEST PUSH8 0x14D1120D7B160000 PUSH2 0x3FA9 DUP3 PUSH2 0x3ED8 JUMP JUMPDEST LT ISZERO PUSH2 0xB77 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54726F76654D616E616765723A2043616E6E6F742072656465656D207768656E PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x102A21A9101E1026A1A9 PUSH1 0xB1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xD29 JUMP JUMPDEST PUSH1 0x0 DUP2 GT PUSH2 0xB77 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54726F76654D616E616765723A20416D6F756E74206D75737420626520677265 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x61746572207468616E207A65726F PUSH1 0x90 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xD29 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0x409F SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x5645 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x40BC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x40E0 SWAP2 SWAP1 PUSH2 0x59DD JUMP JUMPDEST LT ISZERO PUSH2 0x2A5B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x54 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54726F76654D616E616765723A2052657175657374656420726564656D707469 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F6E20616D6F756E74206D757374206265203C3D207573657227732042617365 PUSH1 0x64 DUP3 ADD MSTORE PUSH20 0x4665654C4D4120746F6B656E2062616C616E6365 PUSH1 0x60 SHL PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xA4 ADD PUSH2 0xD29 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO DUP1 PUSH2 0x41F3 JUMPI POP PUSH1 0x40 MLOAD PUSH4 0xBB7C8FD PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x5DBE47E8 SWAP1 PUSH2 0x41B0 SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x5645 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x41CD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x41F1 SWAP2 SWAP1 PUSH2 0x5B7D JUMP JUMPDEST ISZERO JUMPDEST DUP1 PUSH2 0x420E JUMPI POP PUSH8 0x14D1120D7B160000 PUSH2 0x420C DUP5 DUP5 PUSH2 0x2643 JUMP JUMPDEST LT JUMPDEST ISZERO PUSH2 0x421B JUMPI POP PUSH1 0x0 PUSH2 0x2A6C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x765E0159 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP1 PUSH4 0x765E0159 SWAP1 PUSH2 0x424A SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x5645 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4267 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x428B SWAP2 SWAP1 PUSH2 0x5AE7 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO DUP1 PUSH2 0x1E95 JUMPI POP PUSH8 0x14D1120D7B160000 PUSH2 0x42B1 DUP3 DUP6 PUSH2 0x2643 JUMP JUMPDEST LT SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x42E1 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x11 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x4305 SWAP1 DUP8 SWAP1 PUSH2 0x4F16 JUMP JUMPDEST DUP1 DUP3 MSTORE PUSH2 0x4312 SWAP1 DUP7 PUSH2 0x2A73 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x11 SWAP1 SWAP3 MSTORE PUSH1 0x40 DUP3 KECCAK256 SLOAD PUSH2 0x433F SWAP2 PUSH2 0x2A60 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP5 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x11 SWAP1 SWAP3 MSTORE PUSH1 0x40 DUP3 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP3 SWAP4 POP SWAP1 SWAP2 PUSH2 0x436F SWAP2 PUSH2 0x2A60 JUMP JUMPDEST SWAP1 POP PUSH2 0xC350 DUP3 SUB PUSH2 0x43D9 JUMPI PUSH2 0x4383 DUP10 PUSH2 0x4874 JUMP JUMPDEST PUSH2 0x438E DUP10 PUSH1 0x4 PUSH2 0x468A JUMP JUMPDEST PUSH2 0x439C DUP11 DUP11 PUSH2 0xC350 DUP5 PUSH2 0x5008 JUMP JUMPDEST DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5C05 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x3 PUSH1 0x40 MLOAD PUSH2 0x43CC SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x5B2F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH2 0x44F7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x43E5 DUP3 DUP5 PUSH2 0x3EA9 JUMP JUMPDEST SWAP1 POP DUP5 DUP2 EQ ISZERO DUP1 PUSH2 0x43F6 JUMPI POP PUSH1 0x1 DUP4 LT JUMPDEST ISZERO PUSH2 0x440A JUMPI POP POP PUSH1 0x1 PUSH1 0x40 DUP4 ADD MSTORE POP PUSH2 0x44FA JUMP JUMPDEST PUSH1 0x80 DUP12 ADD MLOAD PUSH1 0x40 MLOAD PUSH4 0x15F1093 PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP13 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP5 SWAP1 MSTORE DUP10 DUP2 AND PUSH1 0x44 DUP4 ADD MSTORE DUP9 DUP2 AND PUSH1 0x64 DUP4 ADD MSTORE SWAP1 SWAP2 AND SWAP1 PUSH4 0x2BE21260 SWAP1 PUSH1 0x84 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x446A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x447E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x11 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP5 DUP2 SSTORE PUSH1 0x1 ADD DUP4 SWAP1 SSTORE POP PUSH2 0x44AC DUP11 PUSH2 0x2B25 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x11 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD SWAP1 MLOAD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5C05 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 PUSH2 0x44ED SWAP2 DUP8 SWAP2 DUP8 SWAP2 PUSH1 0x3 SWAP1 PUSH2 0x5B2F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP JUMPDEST POP POP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x4510 PUSH2 0x3D0C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x459E PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA2F03983 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4568 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x458C SWAP2 SWAP1 PUSH2 0x59DD JUMP JUMPDEST PUSH2 0xC26 DUP9 PUSH8 0xDE0B6B3A7640000 PUSH2 0x2A73 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x45AC DUP4 DUP4 PUSH2 0x3BF7 JUMP JUMPDEST SWAP1 POP PUSH2 0x45C0 DUP2 PUSH8 0xDE0B6B3A7640000 PUSH2 0x4F16 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT PUSH2 0x45D2 JUMPI PUSH2 0x45D2 PUSH2 0x5ABE JUMP JUMPDEST PUSH1 0xD DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH32 0xBCD47F9685F1FFA254D0AC495B2E47D57FEDA8840E9D1F2A54D9D499650502A8 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH2 0xC2C PUSH2 0x5167 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC82 PUSH2 0x26A0 DUP4 PUSH2 0x11DB JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4638 DUP4 PUSH2 0xC26 DUP7 PUSH8 0xDE0B6B3A7640000 PUSH2 0x2A73 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x3162 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4665652065786365656465642070726F7669646564206D6178696D756D000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xD29 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x469E JUMPI PUSH2 0x469E PUSH2 0x57DD JUMP JUMPDEST EQ ISZERO DUP1 ISZERO PUSH2 0x46BE JUMPI POP PUSH1 0x1 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x46BB JUMPI PUSH2 0x46BB PUSH2 0x57DD JUMP JUMPDEST EQ ISZERO JUMPDEST PUSH2 0x46CA JUMPI PUSH2 0x46CA PUSH2 0x5ABE JUMP JUMPDEST PUSH1 0x18 SLOAD PUSH2 0x46D6 DUP2 PUSH2 0x51BE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x11 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 ADD DUP1 SLOAD DUP4 SWAP2 SWAP1 PUSH1 0xFF NOT AND PUSH1 0x1 DUP4 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x470E JUMPI PUSH2 0x470E PUSH2 0x57DD JUMP JUMPDEST MUL OR SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x11 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 DUP1 DUP3 ADD DUP6 SWAP1 SSTORE SWAP1 DUP5 SWAP1 SSTORE PUSH1 0x17 SWAP1 SWAP3 MSTORE DUP3 KECCAK256 DUP3 DUP2 SSTORE ADD SSTORE PUSH2 0x4750 DUP4 DUP3 PUSH2 0x5298 JUMP JUMPDEST PUSH1 0xC SLOAD PUSH1 0x40 MLOAD PUSH4 0x14849687 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x29092D0E SWAP1 PUSH2 0x4780 SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x5645 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x479A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x47AE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 ISZERO PUSH2 0x47E2 JUMPI PUSH1 0x0 PUSH2 0x47D9 DUP4 PUSH2 0xC26 DUP7 DUP2 DUP10 PUSH8 0xDE0B6B3A7640000 PUSH2 0x2A73 JUMP JUMPDEST SWAP2 POP PUSH2 0x2A6C SWAP1 POP JUMP JUMPDEST POP PUSH1 0x0 NOT PUSH2 0x2A6C JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x4804 PUSH8 0xDE0B6B3A7640000 PUSH2 0xC26 DUP7 DUP7 PUSH2 0x2A73 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 LT PUSH2 0x2A6C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x36 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54726F76654D616E616765723A2046656520776F756C64206561742075702061 PUSH1 0x44 DUP3 ADD MSTORE PUSH22 0x1B1B081C995D1D5C9B99590818DBDB1B185D195C985B PUSH1 0x52 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xD29 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x11 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0x12 SLOAD PUSH2 0x489D SWAP1 DUP3 PUSH2 0x2A60 JUMP JUMPDEST PUSH1 0x12 SSTORE POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x11 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x2 ADD SSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x3B4009FF PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x768013FE SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4900 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x4914 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH4 0x262B8901 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP3 POP PUSH4 0x262B8901 SWAP2 POP PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x495A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x496E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH4 0x31534DE1 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP3 POP PUSH4 0x31534DE1 SWAP2 POP PUSH1 0x24 ADD PUSH2 0x3357 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x14 SLOAD PUSH1 0x0 SUB PUSH2 0x49B3 JUMPI POP DUP2 PUSH2 0xC82 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x13 SLOAD GT PUSH2 0x49C5 JUMPI PUSH2 0x49C5 PUSH2 0x5ABE JUMP JUMPDEST PUSH2 0x2A6C PUSH1 0x14 SLOAD PUSH2 0xC26 PUSH1 0x13 SLOAD DUP7 PUSH2 0x2A73 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x49E8 PUSH2 0x55B1 JUMP JUMPDEST PUSH2 0x4A0C PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x18 SLOAD PUSH1 0x1 LT PUSH2 0x4A1C JUMPI POP PUSH2 0x44FA JUMP JUMPDEST PUSH2 0x4A25 DUP8 PUSH2 0x1EB7 JUMP JUMPDEST PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x20 DUP5 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP5 ADD DUP2 SWAP1 MSTORE SWAP1 DUP4 MSTORE PUSH2 0x4A44 SWAP1 PUSH2 0x5468 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD DUP2 SWAP1 MSTORE PUSH2 0xC350 PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x4A61 SWAP2 PUSH2 0x2A60 JUMP JUMPDEST DUP2 MSTORE PUSH8 0xDE0B6B3A7640000 DUP7 GT PUSH2 0x4B2C JUMPI PUSH2 0x4A86 DUP10 DUP10 DUP4 PUSH1 0x20 ADD MLOAD DUP5 PUSH1 0x40 ADD MLOAD PUSH2 0x48BE JUMP JUMPDEST PUSH2 0x4A8F DUP8 PUSH2 0x4874 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP4 ADD DUP2 SWAP1 MSTORE PUSH1 0xA0 DUP4 ADD MSTORE DUP2 MLOAD PUSH1 0xC0 DUP4 ADD MSTORE DUP1 MLOAD PUSH1 0xE0 DUP4 ADD MSTORE PUSH2 0x4AB6 DUP8 PUSH1 0x3 PUSH2 0x468A JUMP JUMPDEST DUP2 MLOAD PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND SWAP3 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5BE5 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP3 PUSH2 0x4AE7 SWAP3 PUSH1 0x2 SWAP1 PUSH2 0x5B9F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5C05 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x2 PUSH1 0x40 MLOAD PUSH2 0x4B1F SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x5B2F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH2 0x4CC7 JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 DUP7 GT DUP1 ISZERO PUSH2 0x4B4A JUMPI POP PUSH8 0x14D1120D7B160000 DUP7 LT JUMPDEST ISZERO PUSH2 0x4B9A JUMPI PUSH2 0x4B63 DUP10 DUP10 DUP4 PUSH1 0x20 ADD MLOAD DUP5 PUSH1 0x40 ADD MLOAD PUSH2 0x48BE JUMP JUMPDEST PUSH2 0x4B6C DUP8 PUSH2 0x4874 JUMP JUMPDEST DUP2 MLOAD DUP2 MLOAD PUSH2 0x4B7B SWAP2 SWAP1 DUP8 PUSH2 0x5475 JUMP JUMPDEST PUSH1 0xE0 DUP7 ADD MSTORE PUSH1 0xC0 DUP6 ADD MSTORE PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH2 0x4AB6 DUP8 PUSH1 0x3 PUSH2 0x468A JUMP JUMPDEST PUSH8 0x14D1120D7B160000 DUP7 LT ISZERO DUP1 ISZERO PUSH2 0x4BB1 JUMPI POP DUP4 DUP7 LT JUMPDEST DUP1 ISZERO PUSH2 0x4BBE JUMPI POP DUP2 MLOAD DUP6 LT ISZERO JUMPDEST ISZERO PUSH2 0x4CB6 JUMPI PUSH2 0x4BD7 DUP10 DUP10 DUP4 PUSH1 0x20 ADD MLOAD DUP5 PUSH1 0x40 ADD MLOAD PUSH2 0x48BE JUMP JUMPDEST DUP5 PUSH1 0x0 SUB PUSH2 0x4BE7 JUMPI PUSH2 0x4BE7 PUSH2 0x5ABE JUMP JUMPDEST PUSH2 0x4BF0 DUP8 PUSH2 0x4874 JUMP JUMPDEST PUSH2 0x4C03 DUP3 PUSH1 0x0 ADD MLOAD DUP4 PUSH1 0x20 ADD MLOAD DUP6 PUSH2 0x54CF JUMP JUMPDEST SWAP2 POP PUSH2 0x4C10 DUP8 PUSH1 0x3 PUSH2 0x468A JUMP JUMPDEST PUSH2 0x100 DUP3 ADD MLOAD ISZERO PUSH2 0x4C85 JUMPI PUSH1 0x7 SLOAD PUSH2 0x100 DUP4 ADD MLOAD PUSH1 0x40 MLOAD PUSH4 0x3F10ABAB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 PUSH4 0x3F10ABAB SWAP2 PUSH2 0x4C52 SWAP2 DUP12 SWAP2 SWAP1 PUSH1 0x4 ADD PUSH2 0x5A38 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4C6C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x4C80 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST DUP2 MLOAD PUSH1 0xA0 DUP4 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND SWAP3 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5BE5 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP3 PUSH2 0x4AE7 SWAP3 PUSH1 0x2 SWAP1 PUSH2 0x5B9F JUMP JUMPDEST PUSH2 0x4CBE PUSH2 0x55B1 JUMP JUMPDEST SWAP2 POP PUSH2 0x44FA SWAP1 POP JUMP JUMPDEST POP SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x4CDB PUSH2 0x55B1 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP4 ADD MLOAD SWAP1 DUP5 ADD MLOAD PUSH2 0x4CEE SWAP2 PUSH2 0x3BF7 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP1 DUP4 ADD MLOAD SWAP1 DUP5 ADD MLOAD PUSH2 0x4D06 SWAP2 PUSH2 0x3BF7 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE DUP2 MLOAD PUSH1 0x20 DUP5 ADD MLOAD PUSH2 0x4D1B SWAP2 PUSH2 0x3BF7 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP3 ADD MLOAD DUP4 MLOAD PUSH2 0x4D32 SWAP2 PUSH2 0x3BF7 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x80 DUP1 DUP4 ADD MLOAD SWAP1 DUP5 ADD MLOAD PUSH2 0x4D47 SWAP2 PUSH2 0x3BF7 JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 DUP1 DUP4 ADD MLOAD SWAP1 DUP5 ADD MLOAD PUSH2 0x4D5F SWAP2 PUSH2 0x3BF7 JUMP JUMPDEST PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP1 DUP4 ADD MLOAD SWAP1 DUP5 ADD MLOAD PUSH2 0x4D77 SWAP2 PUSH2 0x3BF7 JUMP JUMPDEST PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 DUP1 DUP4 ADD MLOAD SWAP1 DUP5 ADD MLOAD PUSH2 0x4D8F SWAP2 PUSH2 0x3BF7 JUMP JUMPDEST PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 DUP1 DUP4 ADD MLOAD SWAP1 DUP5 ADD MLOAD PUSH2 0x4DA8 SWAP2 PUSH2 0x3BF7 JUMP JUMPDEST PUSH2 0x100 DUP3 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x4DC2 DUP6 DUP6 DUP6 PUSH2 0x47B7 JUMP JUMPDEST PUSH8 0x14D1120D7B160000 GT SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x4DDD PUSH2 0x55B1 JUMP JUMPDEST PUSH2 0x4E01 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH2 0x4E0A DUP5 PUSH2 0x1EB7 JUMP JUMPDEST PUSH1 0x40 DUP6 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 ADD SWAP3 DUP4 MSTORE DUP7 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP2 DUP5 MSTORE SWAP1 MLOAD SWAP1 MLOAD PUSH2 0x4E34 SWAP2 DUP9 SWAP2 DUP9 SWAP2 SWAP1 PUSH2 0x48BE JUMP JUMPDEST PUSH2 0x4E3D DUP5 PUSH2 0x4874 JUMP JUMPDEST PUSH2 0x4E4A DUP3 PUSH1 0x20 ADD MLOAD PUSH2 0x5468 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD DUP2 SWAP1 MSTORE PUSH2 0xC350 PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x0 SWAP2 PUSH2 0x4E6B SWAP2 SWAP1 PUSH2 0x2A60 JUMP JUMPDEST SWAP1 POP PUSH2 0x4E7C DUP4 PUSH1 0x0 ADD MLOAD DUP3 DUP7 PUSH2 0x5475 JUMP JUMPDEST PUSH1 0xE0 DUP8 ADD MSTORE PUSH1 0xC0 DUP7 ADD MSTORE PUSH1 0xA0 DUP6 ADD MSTORE PUSH1 0x80 DUP5 ADD MSTORE PUSH2 0x4E9B DUP6 PUSH1 0x3 PUSH2 0x468A JUMP JUMPDEST DUP3 MLOAD PUSH1 0x20 DUP5 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP3 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5BE5 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP3 PUSH2 0x4ECC SWAP3 PUSH1 0x1 SWAP1 PUSH2 0x5B9F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5C05 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x1 PUSH1 0x40 MLOAD PUSH2 0x4F04 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x5B2F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x4F25 JUMPI DUP2 PUSH2 0x2A6C JUMP JUMPDEST POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x16D6 PUSH1 0x3C PUSH2 0xC26 PUSH1 0x10 SLOAD TIMESTAMP PUSH2 0x2A60 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 PUSH4 0x1F540500 DUP3 GT ISZERO PUSH2 0x4F5E JUMPI PUSH4 0x1F540500 SWAP2 POP JUMPDEST DUP2 PUSH1 0x0 SUB PUSH2 0x4F75 JUMPI POP PUSH8 0xDE0B6B3A7640000 PUSH2 0xC82 JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 DUP4 DUP4 JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x4FE2 JUMPI PUSH2 0x4F95 PUSH1 0x2 DUP3 PUSH2 0x5BBA JUMP JUMPDEST PUSH1 0x0 SUB PUSH2 0x4FBA JUMPI PUSH2 0x4FA6 DUP3 DUP4 PUSH2 0x5550 JUMP JUMPDEST SWAP2 POP PUSH2 0x4FB3 DUP2 PUSH1 0x2 PUSH2 0x2A7F JUMP JUMPDEST SWAP1 POP PUSH2 0x4F81 JUMP JUMPDEST PUSH2 0x4FC4 DUP3 DUP5 PUSH2 0x5550 JUMP JUMPDEST SWAP3 POP PUSH2 0x4FD0 DUP3 DUP4 PUSH2 0x5550 JUMP JUMPDEST SWAP2 POP PUSH2 0x4FB3 PUSH1 0x2 PUSH2 0xC26 DUP4 PUSH1 0x1 PUSH2 0x2A60 JUMP JUMPDEST PUSH2 0xC2C DUP3 DUP5 PUSH2 0x5550 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x16D6 PUSH1 0x3C PUSH2 0xC26 PUSH1 0xF SLOAD TIMESTAMP PUSH2 0x2A60 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x40 DUP1 DUP6 ADD MLOAD PUSH1 0x6 SLOAD SWAP2 MLOAD PUSH4 0x2770A7EB PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND SWAP3 PUSH4 0x9DC29FAC SWAP3 PUSH2 0x5040 SWAP3 SWAP2 AND SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x5A38 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x505A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x506E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP DUP6 MLOAD PUSH1 0x40 MLOAD PUSH4 0x3B4009FF PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP3 POP PUSH4 0x768013FE SWAP2 POP PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x50B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x50CB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP4 PUSH1 0xA0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x3F10ABAB DUP5 DUP4 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5101 SWAP3 SWAP2 SWAP1 PUSH2 0x5A38 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x511B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x512F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP DUP6 MLOAD PUSH1 0xA0 DUP8 ADD MLOAD PUSH1 0x40 MLOAD PUSH4 0xA51BA3B7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP4 POP PUSH4 0xA51BA3B7 SWAP3 POP PUSH2 0x3357 SWAP2 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x5A38 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x517E PUSH1 0xF SLOAD TIMESTAMP PUSH2 0x2A60 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x3C DUP2 LT PUSH2 0xB77 JUMPI TIMESTAMP PUSH1 0xF DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0xBAB964312BDD13595266F3E549BCA3102965A6D718C6C1F8CD7EAAC076B9C6C2 SWAP1 PUSH1 0x20 ADD PUSH2 0x1E59 JUMP JUMPDEST PUSH1 0x1 DUP2 GT DUP1 ISZERO PUSH2 0x5239 JUMPI POP PUSH1 0xC SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0xDE8FA431 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD PUSH1 0x1 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0xDE8FA431 SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5213 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5237 SWAP2 SWAP1 PUSH2 0x59DD JUMP JUMPDEST GT JUMPDEST PUSH2 0xB77 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54726F76654D616E616765723A204F6E6C79206F6E652074726F766520696E20 PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x7468652073797374656D PUSH1 0xB0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xD29 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x11 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x3 ADD SLOAD PUSH1 0xFF AND SWAP1 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x52CA JUMPI PUSH2 0x52CA PUSH2 0x57DD JUMP JUMPDEST EQ ISZERO DUP1 ISZERO PUSH2 0x52EA JUMPI POP PUSH1 0x1 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x52E7 JUMPI PUSH2 0x52E7 PUSH2 0x57DD JUMP JUMPDEST EQ ISZERO JUMPDEST PUSH2 0x52F6 JUMPI PUSH2 0x52F6 PUSH2 0x5ABE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x11 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x3 ADD SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND SWAP1 DUP4 SWAP1 PUSH2 0x532E DUP3 PUSH1 0x1 PUSH2 0x2A60 JUMP JUMPDEST SWAP1 POP DUP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND GT ISZERO PUSH2 0x5349 JUMPI PUSH2 0x5349 PUSH2 0x5ABE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x18 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x535E JUMPI PUSH2 0x535E PUSH2 0x5AA8 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x18 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP3 POP DUP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP8 AND SWAP1 DUP2 LT PUSH2 0x5396 JUMPI PUSH2 0x5396 PUSH2 0x5AA8 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP2 SWAP1 SWAP2 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND OR SWAP1 SSTORE SWAP2 DUP4 AND DUP1 DUP3 MSTORE PUSH1 0x11 DUP4 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 PUSH1 0x3 ADD DUP1 SLOAD PUSH2 0x100 PUSH1 0x1 PUSH1 0x88 SHL SUB NOT AND PUSH2 0x100 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP11 AND SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 OR SWAP1 SWAP2 SSTORE DUP3 MLOAD SWAP2 DUP3 MSTORE SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH32 0x2B04AE5F7BE9CA7C103293A2AA15F3C339D15D6EDA53B721FEF7B0E609C831A SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x18 DUP1 SLOAD DUP1 PUSH2 0x543D JUMPI PUSH2 0x543D PUSH2 0x5BCE JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 DUP2 ADD PUSH1 0x0 NOT SWAP1 DUP2 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE ADD SWAP1 SSTORE POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC82 PUSH1 0xC8 DUP4 PUSH2 0x5A7D JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 DUP1 DUP5 ISZERO PUSH2 0x54B9 JUMPI PUSH2 0x548A DUP8 DUP7 PUSH2 0x4F16 JUMP JUMPDEST SWAP4 POP PUSH2 0x549A DUP8 PUSH2 0xC26 DUP9 DUP8 PUSH2 0x2A73 JUMP JUMPDEST SWAP3 POP PUSH2 0x54A6 DUP8 DUP6 PUSH2 0x2A60 JUMP JUMPDEST SWAP2 POP PUSH2 0x54B2 DUP7 DUP5 PUSH2 0x2A60 JUMP JUMPDEST SWAP1 POP PUSH2 0x54C6 JUMP JUMPDEST POP PUSH1 0x0 SWAP3 POP DUP3 SWAP2 POP DUP6 SWAP1 POP DUP5 JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 JUMP JUMPDEST PUSH2 0x54D7 PUSH2 0x55B1 JUMP JUMPDEST DUP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x0 PUSH2 0x54F9 DUP4 PUSH2 0xC26 DUP8 PUSH8 0x14D1120D7B160000 PUSH2 0x2A73 JUMP JUMPDEST SWAP1 POP PUSH2 0x5504 DUP2 PUSH2 0x5468 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD DUP2 SWAP1 MSTORE PUSH2 0xC350 PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD DUP7 SWAP1 MSTORE PUSH2 0x5525 SWAP1 DUP3 SWAP1 PUSH2 0x2A60 JUMP JUMPDEST PUSH1 0xA0 DUP4 ADD MSTORE PUSH2 0x5534 DUP5 DUP3 PUSH2 0x2A60 JUMP JUMPDEST PUSH2 0x100 DUP4 ADD MSTORE POP PUSH1 0x0 PUSH1 0xC0 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0xE0 DUP3 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x555D DUP5 DUP5 PUSH2 0x2A73 JUMP JUMPDEST SWAP1 POP PUSH2 0x1130 PUSH8 0xDE0B6B3A7640000 PUSH2 0xC26 PUSH2 0x5579 PUSH1 0x2 DUP4 PUSH2 0x5A7D JUMP JUMPDEST DUP5 SWAP1 PUSH2 0x3BF7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x120 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xB77 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH2 0x5679 DUP2 PUSH2 0x5659 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5690 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2A6C DUP2 PUSH2 0x5659 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x56AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x56B9 DUP2 PUSH2 0x5659 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x56F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x5708 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x571C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x572E JUMPI PUSH2 0x572E PUSH2 0x56C7 JUMP JUMPDEST DUP1 PUSH1 0x5 SHL PUSH1 0x40 MLOAD PUSH1 0x1F NOT PUSH1 0x3F DUP4 ADD AND DUP2 ADD DUP2 DUP2 LT DUP6 DUP3 GT OR ISZERO PUSH2 0x5753 JUMPI PUSH2 0x5753 PUSH2 0x56C7 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 DUP3 MSTORE DUP5 DUP3 ADD SWAP3 POP DUP4 DUP2 ADD DUP6 ADD SWAP2 DUP9 DUP4 GT ISZERO PUSH2 0x5771 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 DUP6 ADD SWAP4 JUMPDEST DUP3 DUP6 LT ISZERO PUSH2 0x5796 JUMPI PUSH2 0x5787 DUP6 PUSH2 0x566E JUMP JUMPDEST DUP5 MSTORE SWAP4 DUP6 ADD SWAP4 SWAP3 DUP6 ADD SWAP3 PUSH2 0x5776 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x57B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x57D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x40 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0xA0 DUP2 ADD PUSH1 0x5 DUP5 LT PUSH2 0x5818 JUMPI PUSH2 0x5818 PUSH2 0x57DD JUMP JUMPDEST PUSH1 0x60 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB SWAP2 SWAP1 SWAP2 AND PUSH1 0x80 SWAP1 SWAP2 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x180 DUP14 DUP16 SUB SLT ISZERO PUSH2 0x585C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP13 CALLDATALOAD PUSH2 0x5867 DUP2 PUSH2 0x5659 JUMP JUMPDEST SWAP12 POP PUSH1 0x20 DUP14 ADD CALLDATALOAD PUSH2 0x5877 DUP2 PUSH2 0x5659 JUMP JUMPDEST SWAP11 POP PUSH1 0x40 DUP14 ADD CALLDATALOAD PUSH2 0x5887 DUP2 PUSH2 0x5659 JUMP JUMPDEST SWAP10 POP PUSH1 0x60 DUP14 ADD CALLDATALOAD PUSH2 0x5897 DUP2 PUSH2 0x5659 JUMP JUMPDEST SWAP9 POP PUSH1 0x80 DUP14 ADD CALLDATALOAD PUSH2 0x58A7 DUP2 PUSH2 0x5659 JUMP JUMPDEST SWAP8 POP PUSH1 0xA0 DUP14 ADD CALLDATALOAD PUSH2 0x58B7 DUP2 PUSH2 0x5659 JUMP JUMPDEST SWAP7 POP PUSH2 0x58C5 PUSH1 0xC0 DUP15 ADD PUSH2 0x566E JUMP JUMPDEST SWAP6 POP PUSH2 0x58D3 PUSH1 0xE0 DUP15 ADD PUSH2 0x566E JUMP JUMPDEST SWAP5 POP PUSH2 0x58E2 PUSH2 0x100 DUP15 ADD PUSH2 0x566E JUMP JUMPDEST SWAP4 POP PUSH2 0x58F1 PUSH2 0x120 DUP15 ADD PUSH2 0x566E JUMP JUMPDEST SWAP3 POP PUSH2 0x5900 PUSH2 0x140 DUP15 ADD PUSH2 0x566E JUMP JUMPDEST SWAP2 POP PUSH2 0x590F PUSH2 0x160 DUP15 ADD PUSH2 0x566E JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 SWAP9 SWAP12 POP SWAP3 SWAP6 SWAP9 SWAP12 POP SWAP3 SWAP6 SWAP9 SWAP12 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x594E JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x5932 JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x40 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x40 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x598A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 CALLDATALOAD SWAP7 POP PUSH1 0x20 DUP9 ADD CALLDATALOAD PUSH2 0x599C DUP2 PUSH2 0x5659 JUMP JUMPDEST SWAP6 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD PUSH2 0x59AC DUP2 PUSH2 0x5659 JUMP JUMPDEST SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD PUSH2 0x59BC DUP2 PUSH2 0x5659 JUMP JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 PUSH1 0x80 DUP2 ADD CALLDATALOAD SWAP6 PUSH1 0xA0 DUP3 ADD CALLDATALOAD SWAP6 POP PUSH1 0xC0 SWAP1 SWAP2 ADD CALLDATALOAD SWAP4 POP SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x59EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x22 SWAP1 DUP3 ADD MSTORE PUSH32 0x54726F76654D616E616765723A206E6F7468696E6720746F206C697175696461 PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x7465 PUSH1 0xF0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x5A8C JUMPI PUSH2 0x5A8C PUSH2 0x5A51 JUMP JUMPDEST POP DIV SWAP1 JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0xC82 JUMPI PUSH2 0xC82 PUSH2 0x5A67 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0xC82 JUMPI PUSH2 0xC82 PUSH2 0x5A67 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5AF9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x2A6C DUP2 PUSH2 0x5659 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x5B13 JUMPI PUSH2 0x5B13 PUSH2 0x5A67 JUMP JUMPDEST POP PUSH1 0x0 NOT ADD SWAP1 JUMP JUMPDEST PUSH1 0x4 DUP2 LT PUSH2 0x5B2B JUMPI PUSH2 0x5B2B PUSH2 0x57DD JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST DUP5 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x40 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD PUSH2 0x1E95 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x5B1B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x5B63 JUMPI PUSH2 0x5B63 PUSH2 0x5A67 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0xC82 JUMPI PUSH2 0xC82 PUSH2 0x5A67 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5B8F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x2A6C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD PUSH2 0x1130 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x5B1B JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x5BC9 JUMPI PUSH2 0x5BC9 PUSH2 0x5A51 JUMP JUMPDEST POP MOD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x31 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID 0xEA PUSH8 0x486ED7EBE3EEA8AB CALLER SWAP1 0xEF 0xD4 LOG3 0xC8 0xAA 0xE4 DUP12 0xE5 0xBE LOG2 PUSH30 0xF104A8AF786C408434C3770D654ED33AEEA6BF11AC8EF05D02A6A04ED468 PUSH14 0xD2F624D853BBEC43CC8BA2646970 PUSH7 0x735822122036E2 0x5D DUP13 0xCD 0xEB PUSH16 0xFB9A60B4AF8BD352CE9E512612ECA522 0x2D PUSH31 0xF6E20808A18E5E64736F6C6343000813003300000000000000000000000000 ",
          "sourceMapi;:::-;;;;;;;;2449:29;;2477:1;2449:29;;;;;392:25:40;;;380:2;365:18;2449:29:19;246:177:40;58463:183:19;;;;;;:::i;:::-;;:::i;:::-;;61374:634;;;;;;:::i;:::-;;:::i;87353:297::-;;;;;;:::i;:::-;;:::i;69375:195::-;;;;;;:::i;:::-;;:::i;4403:57::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;1449:25:40;;;1505:2;1490:18;;1483:34;;;;1422:18;4403:57:19;1275:248:40;63626:199:19;;;;;;:::i;:::-;;:::i;4906:50::-;;;;;;1232:37:22;;1268:1;1232:37;;32350:2993:19;;;;;;:::i;:::-;;:::i;85704:126::-;;;;;;:::i;:::-;;:::i;2058:58::-;;122:4:20;2058:58:19;;1970:74;;;:::i;87960:304::-;;;;;;:::i;:::-;;:::i;13238:227::-;;;;;;:::i;:::-;;:::i;1507:31:22:-;;;;;-1:-1:-1;;;;;1507:31:22;;;87656:298:19;;;;;;:::i;:::-;;:::i;78523:259::-;;;;;;:::i;:::-;;:::i;86082:116::-;;;;;;:::i;:::-;-1:-1:-1;;;;;86169:17:19;86146:4;86169:17;;;:6;:17;;;;;:22;;;;86082:116;1303:42:22;;1342:3;1303:42;;12832:102:19;12909:11;:18;12832:102;;71467:119;;;;;;:::i;:::-;;:::i;:::-;;;3619:14:40;;3612:22;3594:41;;3582:2;3567:18;71467:119:19;3454:187:40;1401:25:19;;;;;-1:-1:-1;;;;;1401:25:19;;;974:46:22;;1001:19;974:46;;74492:170:19;;;;;;:::i;:::-;;:::i;86273:165::-;;;;;;:::i;:::-;;:::i;79941:448::-;;;:::i;1666:47::-;;1711:2;1666:47;;78282:235;;;;;;:::i;:::-;;:::i;85836:118::-;;;;;;:::i;:::-;-1:-1:-1;;;;;85924:17:19;85901:4;85924:17;;;:6;:17;;;;;:23;;;;85836:118;23934:2980;;;;;;:::i;:::-;;:::i;3435:39::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;3435:39:19;;;;;;;;;;;;;;:::i;1824:101:2:-;;;:::i;71592:137:19:-;;;:::i;86444:297::-;;;;;;:::i;:::-;;:::i;10290:2512::-;;;;;;:::i;:::-;;:::i;1545:36:22:-;;;;;-1:-1:-1;;;;;1545:36:22;;;4761:28:19;;;;;;:::i;:::-;;:::i;2586:243:22:-;;;:::i;1815:72:19:-;;1869:18;1815:72;;1471:29:22;;;;;-1:-1:-1;;;;;1471:29:22;;;3603:31:19;;;;;;60187:172;;;;;;:::i;:::-;;:::i;2347:233:22:-;;;:::i;1201:85:2:-;1273:6;;-1:-1:-1;;;;;1273:6:2;1201:85;;1355:39:19;;;;;-1:-1:-1;;;;;1355:39:19;;;4304:28;;;;;;77024:253;;;;;;:::i;:::-;;:::i;3762:35::-;;;;;;60710:571;;;;;;:::i;:::-;;:::i;87050:297::-;;;;;;:::i;:::-;;:::i;78997:441::-;;;;;;:::i;:::-;;:::i;1106:56:22:-;;1157:5;1106:56;;74668:251:19;;;;;;:::i;:::-;;:::i;1099:44::-;;;;;;;;;;;;;;;-1:-1:-1;;;1099:44:19;;;;;;;;;;;;:::i;1594:33::-;;;;;-1:-1:-1;;;;;1594:33:19;;;1433:29;;;;;-1:-1:-1;;;;;1433:29:19;;;56474:348;;;;;;:::i;:::-;;:::i;76674:168::-;;;;;;:::i;:::-;;:::i;1198:40::-;;;;;-1:-1:-1;;;;;1198:40:19;;;71243:97;;;;;;:::i;:::-;;:::i;62617:581::-;;;;;;:::i;:::-;;:::i;:::-;;;;8142:25:40;;;8198:2;8183:18;;8176:34;;;;8226:18;;;8219:34;8284:2;8269:18;;8262:34;8129:3;8114:19;62617:581:19;7911:391:40;2719:30:19;;;;;;50185:6083;;;;;;:::i;:::-;;:::i;3481:23::-;;;;;;4279:19;;;;;;3082:26;;;;;;2189:47;;2229:7;2189:47;;2755:26;;;;;;1469:29;;;;;-1:-1:-1;;;;;1469:29:19;;;4859:41;;;;;;67450:162;;;;;;:::i;:::-;;:::i;57088:394::-;;;;;;:::i;:::-;;:::i;86747:297::-;;;;;;:::i;:::-;;:::i;75858:250::-;;;;;;:::i;:::-;;:::i;85960:116::-;;;;;;:::i;:::-;-1:-1:-1;;;;;86047:17:19;86024:4;86047:17;;;:6;:17;;;;;:22;;85960:116;57488:431;;;;;;:::i;:::-;;:::i;12940:140::-;;;;;;:::i;:::-;;:::i;71346:115::-;;;:::i;62014:502::-;;;;;;:::i;:::-;;:::i;3046:30::-;;;;;;2074:198:2;;;;;;:::i;:::-;;:::i;1893:71:19:-;;1946:18;1893:71;;63204:142;;;;;;:::i;:::-;;:::i;58463:183::-;58530:36;:34;:36::i;:::-;58604:10;;;58616:11;58583:56;;-1:-1:-1;;;;;58604:10:19;;;;58616:11;58629:9;58583:20;:56::i;:::-;58463:183;:::o;61374:634::-;-1:-1:-1;;;;;61514:26:19;;61468:4;61514:26;;;:15;:26;;;;;:41;;;61592:16;;61468:4;;61592:44;;61514:41;61592:20;:44::i;:::-;61565:71;-1:-1:-1;61664:24:19;;;:81;;-1:-1:-1;61732:13:19;-1:-1:-1;;;;;61704:17:19;;;;;;:6;:17;;;;;:24;;;;;:41;;;;;;;;:::i;:::-;;;61664:81;61647:142;;;-1:-1:-1;61777:1:19;;61374:634;-1:-1:-1;;;61374:634:19:o;61647:142::-;-1:-1:-1;;;;;61812:17:19;;61799:10;61812:17;;;:6;:17;;;;;:23;;;;61881:75;122:4:20;61881:30:19;61812:23;61891:19;61881:9;:30::i;:::-;:34;;:75::i;:::-;61846:110;61374:634;-1:-1:-1;;;;;;61374:634:19:o;87353:297::-;87459:4;87475:36;:34;:36::i;:::-;-1:-1:-1;;;;;87536:17:19;;87521:12;87536:17;;;:6;:17;;;;;:22;:41;;87563:13;87536:26;:41::i;:::-;-1:-1:-1;;;;;87587:17:19;;;;;;:6;:17;;;;;:32;;;87521:56;-1:-1:-1;;87353:297:19;;;;;:::o;69375:195::-;69456:10;69478:36;:34;:36::i;:::-;69531:32;69553:9;69531:21;:32::i;:::-;-1:-1:-1;;;;;69524:39:19;;69375:195;-1:-1:-1;;69375:195:19:o;63626:199::-;63712:4;63728:36;:34;:36::i;:::-;63781:37;63808:9;63781:26;:37::i;32350:2993::-;32448:11;:18;32470:1;32448:23;32427:124;;;;-1:-1:-1;;;32427:124:19;;9548:2:40;32427:124:19;;;9530:21:40;9587:2;9567:18;;;9560:30;9626:34;9606:18;;;9599:62;-1:-1:-1;;;9677:18:40;;;9670:52;9739:19;;32427:124:19;;;;;;;;;32562:28;32593:10;;32646:11;32704:13;;-1:-1:-1;;;;;32593:10:19;;;;32646:11;;;;32704:13;32728:51;;:::i;:::-;32789:31;;:::i;:::-;32844:9;;;;;;;;;-1:-1:-1;;;;;32844:9:19;-1:-1:-1;;;;;32844:20:19;;:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;32831:4;:10;;:35;;;;;32904:19;-1:-1:-1;;;;;32904:59:19;;:61;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;32876:25;;;:89;33021:10;;33002:30;;:18;:30::i;:::-;32975:57;;;:24;;;:57;33139:594;;33192:223;33250:16;33284:17;33319:4;:10;;;33347:4;:25;;;33390:11;33192:40;:223::i;:::-;33183:232;;33139:594;;;33500:222;33557:16;33591:17;33626:4;:10;;;33654:4;:25;;;33697:11;33500:39;:222::i;:::-;33491:231;;33139:594;33793:1;33764:6;:26;;;:30;33743:111;;;;-1:-1:-1;;;33743:111:19;;;;;;;:::i;:::-;33978:24;;;;34016:26;;;;33938:114;;-1:-1:-1;;;33938:114:19;;-1:-1:-1;;;;;33938:26:19;;;;;:114;;;;1449:25:40;;;1505:2;1490:18;;1483:34;1437:2;1422:18;;1275:248;33938:114:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;34062:183;34100:16;34130:17;34161:6;:30;;;34205:6;:30;;;34062:24;:183::i;:::-;34260:23;;;;:27;34256:251;;34303:15;;;34335:23;;;34303:56;;-1:-1:-1;;;34303:56:19;;-1:-1:-1;;;;;34303:15:19;;;;:31;;:56;;;;392:25:40;;;380:2;365:18;;246:177;34303:56:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;34425:15:19;;;34459:23;;;34373:123;;-1:-1:-1;;;34373:123:19;;-1:-1:-1;;;;;34373:26:19;;;;-1:-1:-1;34373:26:19;;-1:-1:-1;34373:123:19;;34425:15;;34459:23;34373:123;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;34256:251;34552:128;34609:16;34639:6;:31;;;34552:43;:128::i;:::-;34713:26;;;;34691:19;;;:48;34879:23;;;;34829:31;;;;34772:39;;:131;;34879:23;34772:89;;:39;:56;:89::i;:::-;:106;;:131::i;:::-;34750:19;;;;:153;;;34944:19;;;;;35010:31;;;;;35055:37;;;;34919:183;;8142:25:40;;;8198:2;8183:18;;8176:34;;;;8226:18;;;8219:34;8269:18;;;8262:34;;;;34919:183:19;;8114:19:40;34919:183:19;;;;;;;35156:180;35190:16;35220:10;35244:6;:37;;;35295:6;:31;;;35156:20;:180::i;:::-;32417:2926;;;;;32350:2993;:::o;85704:126::-;-1:-1:-1;;;;;85798:17:19;;85770:4;85798:17;;;:6;:17;;;;;:24;;;;;85793:30;;;;;;;;:::i;1970:74::-;2015:24;2035:4;122::20;2015:24:19;:::i;:::-;2014:30;;2043:1;2014:30;:::i;:::-;1970:74;:::o;87960:304::-;88072:7;88091:13;88107:128;88151:5;88170;88189:2;682:19:22;88107:30:19;:128::i;:::-;88091:144;87960:304;-1:-1:-1;;;;87960:304:19:o;13238:227::-;13295:32;13317:9;13295:21;:32::i;:::-;13367:16;;;13381:1;13367:16;;;;;;;;;13338:26;;13367:16;;;;;;;;;;;-1:-1:-1;13367:16:19;13338:45;;13408:9;13393;13403:1;13393:12;;;;;;;;:::i;:::-;;;;;;:24;-1:-1:-1;;;;;13393:24:19;;;-1:-1:-1;;;;;13393:24:19;;;;;13427:31;13448:9;13427:20;:31::i;:::-;13285:180;13238:227;:::o;87656:298::-;87766:7;87785:13;87801:124;87845:5;87864;87883:2;805:19:22;87801:30:19;:124::i;78523:259::-;78616:4;78651:124;78686:42;78712:15;78686:25;:42::i;:::-;78746:15;78651:17;:124::i;71467:119::-;71530:4;71553:26;71572:6;71553:18;:26::i;74492:170::-;74576:4;74599:56;74619:18;;74639:15;74599:19;:56::i;86273:165::-;86346:36;:34;:36::i;:::-;86426:4;86419:12;;;;;;;;:::i;:::-;-1:-1:-1;;;;;86392:17:19;;;;;;:6;:17;;;;;:24;;:39;;-1:-1:-1;;86392:39:19;;;;;;;;;;;:::i;:::-;;;;;;86273:165;;:::o;79941:448::-;79998:36;:34;:36::i;:::-;80044:20;80067:28;:26;:28::i;:::-;80044:51;;122:4:20;80112:15:19;:36;;80105:44;;;;:::i;:::-;80262:14;:32;;;80310:38;;392:25:40;;;80310:38:19;;380:2:40;365:18;80310:38:19;;;;;;;80359:23;:21;:23::i;78282:235::-;78366:4;78372;78388:13;78404:33;78421:15;78404:16;:33::i;:::-;78388:49;;78455:44;78473:8;78483:15;78455:17;:44::i;:::-;78447:63;78501:8;;-1:-1:-1;78282:235:19;-1:-1:-1;;78282:235:19:o;23934:2980::-;24026:244;;;;;;;;23987:36;24054:10;;-1:-1:-1;;;;;24054:10:19;;;24026:244;;24054:10;24078:11;;;24026:244;;;;;;;;;;;;;;;;24182:12;;;;24026:244;;;;;;;;;;;;;;24317:13;;24026:244;;24317:13;24341:51;;:::i;:::-;24403:31;;:::i;:::-;24458:9;;;;;;;;;-1:-1:-1;;;;;24458:9:19;-1:-1:-1;;;;;24458:20:19;;:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;24445:4;:10;;:35;;;;;24518:19;-1:-1:-1;;;;;24518:59:19;;:61;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;24490:25;;;:89;24635:10;;24616:30;;:18;:30::i;:::-;24589:57;;;:24;;;:57;24757:575;;24810:187;24878:14;24910:4;:10;;;24938:4;:25;;;24981:2;24810:50;:187::i;:::-;24801:196;;24757:575;;;25081:240;25147:14;:25;;;25190:14;:26;;;25234:4;:10;;;25262:4;:25;;;25305:2;25081:48;:240::i;:::-;25072:249;;24757:575;25392:1;25363:6;:26;;;:30;25342:111;;;;-1:-1:-1;;;25342:111:19;;;;;;;:::i;:::-;25577:24;;;;25615:26;;;;25537:114;;-1:-1:-1;;;25537:114:19;;-1:-1:-1;;;;;25537:26:19;;;;;:114;;;;1449:25:40;;;1505:2;1490:18;;1483:34;1437:2;1422:18;;1275:248;25537:114:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;25661:201;25699:14;:25;;;25738:14;:26;;;25778:6;:30;;;25822:6;:30;;;25661:24;:201::i;:::-;25876:23;;;;:27;25872:190;;25919:25;;25980:15;;;26014:23;;;25919:132;;-1:-1:-1;;;25919:132:19;;-1:-1:-1;;;;;25919:35:19;;;;;;:132;;25980:15;;;25919:132;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;25872:190;26107:137;26164:14;:25;;;26203:6;:31;;;26107:43;:137::i;:::-;26277:26;;;;26255:19;;;:48;26442:23;;;;26392:31;;;;26335:39;;:131;;26442:23;26335:89;;:39;:56;:89::i;:131::-;26313:19;;;;:153;;;26506:19;;;;;26572:31;;;;;26617:37;;;;26481:183;;8142:25:40;;;8198:2;8183:18;;8176:34;;;;8226:18;;;8219:34;8269:18;;;8262:34;;;;26481:183:19;;8114:19:40;26481:183:19;;;;;;;26718:189;26752:14;:25;;;26791:10;26815:6;:37;;;26866:6;:31;;;26718:20;:189::i;:::-;23977:2937;;;;23934:2980;:::o;1824:101:2:-;1094:13;:11;:13::i;:::-;1888:30:::1;1915:1;1888:18;:30::i;:::-;1824:101::o:0;71592:137:19:-;71654:4;71677:45;71696:9;;;;;;;;;-1:-1:-1;;;;;71696:9:19;-1:-1:-1;;;;;71696:23:19;;:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;71677:18;:45::i;:::-;71670:52;;71592:137;:::o;86444:297::-;86550:4;86566:36;:34;:36::i;:::-;-1:-1:-1;;;;;86627:17:19;;86612:12;86627:17;;;:6;:17;;;;;:22;;;:41;;86654:13;86627:26;:41::i;:::-;-1:-1:-1;;;;;86678:17:19;;;;;;:6;:17;;;;;:22;;:32;;;86612:56;-1:-1:-1;;86444:297:19;;;;:::o;10290:2512::-;1094:13:2;:11;:13::i;:::-;10801:41:19::1;10815:26;10801:13;:41::i;:::-;10852:33;10866:18;10852:13;:33::i;:::-;10895:34;10909:19;10895:13;:34::i;:::-;10939:36;10953:21;10939:13;:36::i;:::-;10985:30;10999:15;10985:13;:30::i;:::-;11025:38;11039:23;11025:13;:38::i;:::-;11073:32;11087:17;11073:13;:32::i;:::-;11115:38;11129:23;11115:13;:38::i;:::-;11163:35;11177:20;11163:13;:35::i;:::-;11208:31;11222:16;11208:13;:31::i;:::-;11249:33;11263:18;11249:13;:33::i;:::-;11292:42;11314:18;11292:13;:42::i;:::-;11345:25;:54:::0;;-1:-1:-1;;;;;;11345:54:19;;::::1;-1:-1:-1::0;;;;;11345:54:19;;::::1;::::0;;;::::1;::::0;;;-1:-1:-1;11409:44:19;;;::::1;::::0;;::::1;;::::0;;-1:-1:-1;11463:47:19;;;::::1;::::0;;::::1;;::::0;;11520:13:::1;:53:::0;;;::::1;::::0;;::::1;;::::0;;11583:14:::1;:32:::0;;;::::1;::::0;;::::1;;::::0;;11625:15:::1;:59:::0;;;::::1;::::0;;::::1;;::::0;;11694:9:::1;:41:::0;;;::::1;::::0;;::::1;;::::0;;11745:15:::1;:59:::0;;;::::1;::::0;;::::1;;::::0;;11814:12:::1;:50:::0;;;::::1;::::0;;::::1;;::::0;;11874:8:::1;:38:::0;;;::::1;::::0;;::::1;;::::0;;11922:10:::1;:44:::0;;;::::1;::::0;;::::1;;::::0;;11976:10:::1;:44:::0;;;;::::1;::::0;;::::1;::::0;;;::::1;::::0;;12036:60:::1;::::0;::::1;::::0;::::1;::::0;11345:54;;12036:60:::1;:::i;:::-;;;;;;;;12111:44;12136:18;12111:44;;;;;;:::i;:::-;;;;;;;;12170:46;12196:19;12170:46;;;;;;:::i;:::-;;;;;;;;12231:50;12259:21;12231:50;;;;;;:::i;:::-;;;;;;;;12296:38;12318:15;12296:38;;;;;;:::i;:::-;;;;;;;;12349:54;12379:23;12349:54;;;;;;:::i;:::-;;;;;;;;12418:42;12442:17;12418:42;;;;;;:::i;:::-;;;;;;;;12475:54;12505:23;12475:54;;;;;;:::i;:::-;;;;;;;;12544:48;12571:20;12544:48;;;;;;:::i;:::-;;;;;;;;12607:40;12630:16;12607:40;;;;;;:::i;:::-;;;;;;;;12662:44;12687:18;12662:44;;;;;;:::i;:::-;;;;;;;;12721;12746:18;12721:44;;;;;;:::i;:::-;;;;;;;;12776:19;:17;:19::i;:::-;10290:2512:::0;;;;;;;;;;;;:::o;4761:28::-;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;4761:28:19;;-1:-1:-1;4761:28:19;:::o;2586:243:22:-;2638:21;2689:10;;:30;;;-1:-1:-1;;;2689:30:22;;;;2638:21;;-1:-1:-1;;;;;2689:10:22;;:28;;:30;;;;;;;;;;;;;;:10;:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2671:48;;2729:15;2747:11;;;;;;;;;-1:-1:-1;;;;;2747:11:22;-1:-1:-1;;;;;2747:29:22;;:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2729:49;-1:-1:-1;2796:26:22;:10;2729:49;2796:14;:26::i;:::-;2789:33;;;;2586:243;:::o;60187:172:19:-;60261:36;:34;:36::i;:::-;60314:38;60342:9;60314:27;:38::i;2347:233:22:-;2399:21;2450:10;;:21;;;-1:-1:-1;;;2450:21:22;;;;2399;;-1:-1:-1;;;;;2450:10:22;;:19;;:21;;;;;;;;;;;;;;:10;:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2432:39;;2481:19;2503:11;;;;;;;;;-1:-1:-1;;;;;2503:11:22;-1:-1:-1;;;;;2503:20:22;;:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;77024:253:19;77118:4;77153:117;77189:32;:30;:32::i;:::-;77239:17;77153:18;:117::i;60710:571::-;-1:-1:-1;;;;;60832:26:19;;60795:4;60832:26;;;:15;:26;;;;;:32;60901:7;;60795:4;;60901:26;;60832:32;60901:11;:26::i;87050:297::-;87156:4;87172:36;:34;:36::i;:::-;-1:-1:-1;;;;;87233:17:19;;87218:12;87233:17;;;:6;:17;;;;;:22;:41;;87260:13;87233:26;:41::i;78997:441::-;79107:25;;-1:-1:-1;;;;;79107:25:19;79093:10;:39;79072:133;;;;-1:-1:-1;;;79072:133:19;;11668:2:40;79072:133:19;;;11650:21:40;11707:2;11687:18;;;11680:30;11746:34;11726:18;;;11719:62;-1:-1:-1;;;11797:18:40;;;11790:45;11852:19;;79072:133:19;11466:411:40;79072:133:19;1427:24:22;1447:4;122::20;1427:24:22;:::i;:::-;1426:30;;1455:1;1426:30;:::i;:::-;79219:12:19;:35;79215:166;;1427:24:22;1447:4;122::20;1427:24:22;:::i;:::-;1426:30;;1455:1;1426:30;:::i;:::-;79287:34:19;;:12;:34;:::i;:::-;79270:14;:51;79215:166;;;79369:1;79352:14;:18;79215:166;79396:35;;392:25:40;;;79396:35:19;;380:2:40;365:18;79396:35:19;;;;;;;;78997:441;:::o;74668:251::-;74761:4;74796:116;74833:32;:30;:32::i;:::-;74883:15;74796:19;:116::i;56474:348::-;56537:4;56567:17;56598:26;56637:34;56661:9;56637:23;:34::i;:::-;56553:118;;;;56682:9;56694:100;56737:12;56763:21;56694:29;:100::i;:::-;56682:112;56474:348;-1:-1:-1;;;;;56474:348:19:o;76674:168::-;76759:4;76782:53;76801:14;;76817:17;76782:18;:53::i;71243:97::-;71295:4;71318:15;71326:6;71318:7;:15::i;62617:581::-;-1:-1:-1;;;;;62885:17:19;;62738:9;62885:17;;;:6;:17;;;;;:22;;62924;;;;;62885;;62738:9;62987:41;62892:9;62987:30;:41::i;:::-;62957:71;;63059:32;63081:9;63059:21;:32::i;:::-;63038:53;-1:-1:-1;63109:37:19;:4;63118:27;63109:8;:37::i;:::-;63102:44;-1:-1:-1;63163:28:19;:4;63172:18;63163:8;:28::i;:::-;63156:35;;62617:581;;;;;:::o;50185:6083::-;50537:209;;;;;;;;;50498:36;50565:10;;-1:-1:-1;;;;;50565:10:19;;;50537:209;;50565:10;50589:11;;;50537:209;;;;;;;;50614:15;;;;50537:209;;;;50643:10;;;;50537:209;;;;;;;;50667:12;;;;50537:209;;;;;;;;50693:15;;;;50537:209;;;;;;;;50722:14;;;;;50537:209;;;;;;;;-1:-1:-1;;50565:10:19;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;50537:209:19;50797:48;50827:17;50797:29;:48::i;:::-;50912:9;;;;;;;;;-1:-1:-1;;;;;50912:9:19;-1:-1:-1;;;;;50912:20:19;;:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;50897:12;;;:37;;;50945:32;;:18;:32::i;:::-;50987:48;51017:17;50987:29;:48::i;:::-;51045:150;51100:14;:30;;;51144:10;51168:17;51045:41;:150::i;:::-;51244:21;:19;:21::i;:::-;51206:35;;;:59;;;51370:30;;;;;:52;;-1:-1:-1;;;51370:52:19;;-1:-1:-1;;;;;51370:40:19;;;;;;:52;;51411:10;;51370:52;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:107;;51350:137;;;;:::i;:::-;51498:46;;;51650:27;;;;51733:12;;;;51498:26;;51605:154;;51695:20;;51605:27;:154::i;:::-;51588:675;;;-1:-1:-1;51802:20:19;51588:675;;;51871:14;:27;;;-1:-1:-1;;;;;51871:35:19;;:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;51853:55;;51974:279;-1:-1:-1;;;;;51998:29:19;;;;;;:99;;;805:19:22;52047:44:19;52061:15;52078:6;:12;;;52047:13;:44::i;:::-;:50;51998:99;51974:279;;;52148:14;:27;;;-1:-1:-1;;;;;52148:35:19;;52205:15;52148:90;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;52130:108;;51974:279;;;52418:14;52436:1;52418:19;52414:211;;-1:-1:-1;;52583:31:19;;52414:211;-1:-1:-1;;;;;52654:29:19;;;;;;:75;;-1:-1:-1;52699:26:19;;:30;;52654:75;:109;;;;;52762:1;52745:14;:18;52654:109;52634:1646;;;52788:16;;;;:::i;:::-;;;;52928:23;52954:14;:27;;;-1:-1:-1;;;;;52954:35:19;;53007:15;52954:82;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;52928:108;;53051:154;53089:14;:25;;;53132:14;:26;;;53176:15;53051:20;:154::i;:::-;53219:62;53284:345;53332:14;53368:15;53405:6;:26;;;53453:6;:12;;;53487:27;53536;53585:26;53284;:345::i;:::-;53219:410;;53648:16;:33;;;53644:44;;;53683:5;;;;53644:44;53920:30;;53868;;;;:96;;:34;:96::i;:::-;53835:30;;;;:129;;;;54047:25;;;54003:22;;;;:83;;:26;:83::i;:::-;53978:22;;;:108;54178:30;;54130:26;;:92;;:30;:92::i;:::-;54101:121;;-1:-1:-1;54254:15:19;-1:-1:-1;52634:1646:19;;;54336:1;54311:6;:22;;;:26;54290:114;;;;-1:-1:-1;;;54290:114:19;;12614:2:40;54290:114:19;;;12596:21:40;12653:2;12633:18;;;12626:30;12692:34;12672:18;;;12665:62;-1:-1:-1;;;12743:18:40;;;12736:39;12792:19;;54290:114:19;12412:405:40;54290:114:19;54845:160;54898:6;:22;;;54934:6;:12;;;54960:6;:35;;;54845:39;:160::i;:::-;;55068:41;55086:6;:22;;;55068:17;:41::i;:::-;55050:15;;;:59;;;55185:22;;;;55120:128;;55050:59;55221:17;55120:22;:128::i;:::-;55377:10;;55406:22;;;;;55430:15;;;;55377:69;;-1:-1:-1;;;55377:69:19;;-1:-1:-1;;;;;55377:10:19;;;;:28;;:69;;55406:22;55377:69;;1449:25:40;;;1505:2;1490:18;;1483:34;1437:2;1422:18;;1275:248;55377:69:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;55528:15:19;;;;55488:22;;;;:65;;:26;:65::i;:::-;55457:28;;;:96;55624:30;;;;55668:22;;;;;55704:15;;;;55569:160;;;;;;55593:17;;55624:30;;8142:25:40;;;8198:2;8183:18;;8176:34;;;;8241:2;8226:18;;8219:34;8284:2;8269:18;;8262:34;8129:3;8114:19;;7911:391;55569:160:19;;;;;;;;55847:14;:30;;;-1:-1:-1;;;;;55847:35:19;;55896:10;55920:6;:30;;;55847:113;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;56038:25:19;;56100:30;;;;56038:102;;-1:-1:-1;;;56038:102:19;;-1:-1:-1;;;;;56038:48:19;;;;-1:-1:-1;56038:48:19;;-1:-1:-1;56038:102:19;;;;392:25:40;;;380:2;365:18;;246:177;56038:102:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;56150:25:19;;56223:28;;;;56150:111;;-1:-1:-1;;;56150:111:19;;-1:-1:-1;;;;;56150:35:19;;;;-1:-1:-1;56150:35:19;;-1:-1:-1;56150:111:19;;56199:10;;56223:28;56150:111;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;50488:5780;;;50185:6083;;;;;;;:::o;67450:162::-;67508:36;:34;:36::i;:::-;67561:44;67573:9;67584:20;67561:11;:44::i;57088:394::-;57186:4;57216:17;57247:26;57286:34;57310:9;57286:23;:34::i;:::-;57202:118;;;;57331:8;57342:113;57378:12;57404:21;57439:6;57342:22;:113::i;86747:297::-;86853:4;86869:36;:34;:36::i;:::-;-1:-1:-1;;;;;86930:17:19;;86915:12;86930:17;;;:6;:17;;;;;:22;;;:41;;86957:13;86930:26;:41::i;75858:250::-;75948:4;75983:118;76019:39;76046:11;76019:26;:39::i;:::-;76076:11;75983:18;:118::i;57488:431::-;57573:4;57589:13;57605:9;;;;;;;;;-1:-1:-1;;;;;57605:9:19;-1:-1:-1;;;;;57605:23:19;;:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;57589:41;;57654:17;57685:26;57724:34;57748:9;57724:23;:34::i;:::-;57640:118;;;;57769:8;57780:112;57816:12;57842:21;57877:5;57780:22;:112::i;12940:140::-;13028:7;13054:11;13066:6;13054:19;;;;;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;;;;;13054:19:19;;12940:140;-1:-1:-1;;12940:140:19:o;71346:115::-;71397:4;71420:34;71428:9;;;;;;;;;-1:-1:-1;;;;;71428:9:19;-1:-1:-1;;;;;71428:23:19;;:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;71420:7;:34::i;62014:502::-;62081:4;62396:13;-1:-1:-1;;;;;62368:17:19;;;;;;:6;:17;;;;;:24;;;;;:41;;;;;;;;:::i;:::-;;62364:84;;-1:-1:-1;62432:5:19;;62014:502;-1:-1:-1;62014:502:19:o;62364:84::-;-1:-1:-1;62501:7:19;;-1:-1:-1;;;;;62466:26:19;;;;;;;:15;:26;;;;;:32;:42;;62014:502::o;2074:198:2:-;1094:13;:11;:13::i;:::-;-1:-1:-1;;;;;2162:22:2;::::1;2154:73;;;::::0;-1:-1:-1;;;2154:73:2;;13024:2:40;2154:73:2::1;::::0;::::1;13006:21:40::0;13063:2;13043:18;;;13036:30;13102:34;13082:18;;;13075:62;-1:-1:-1;;;13153:18:40;;;13146:36;13199:19;;2154:73:2::1;12822:402:40::0;2154:73:2::1;2237:28;2256:8;2237:18;:28::i;63204:142:19:-:0;63263:36;:34;:36::i;:::-;63316:23;63329:9;63316:12;:23::i;83606:222::-;83711:25;;-1:-1:-1;;;;;83711:25:19;83697:10;:39;83676:145;;;;-1:-1:-1;;;83676:145:19;;13431:2:40;83676:145:19;;;13413:21:40;13470:2;13450:18;;;13443:30;13509:34;13489:18;;;13482:62;13580:29;13560:18;;;13553:57;13627:19;;83676:145:19;13229:423:40;58745:1339:19;58899:28;58917:9;58899:17;:28::i;:::-;58895:1183;;;58943:32;58965:9;58943:21;:32::i;:::-;59029:23;59055:32;59077:9;59055:21;:32::i;:::-;59029:58;;59101:32;59136:71;59184:9;59136:30;:71::i;:::-;-1:-1:-1;;;;;59301:17:19;;;;;;:6;:17;;;;;:22;;;59101:106;;-1:-1:-1;59301:76:19;;59345:18;59301:26;:76::i;:::-;-1:-1:-1;;;;;59276:17:19;;;;;;:6;:17;;;;;:22;;;:101;;;;59416:22;:85;;59460:27;59416:26;:85::i;:::-;-1:-1:-1;;;;;59391:17:19;;;;;;:6;:17;;;;;:110;59516:38;59398:9;59516:27;:38::i;:::-;59624:190;59678:11;59707:12;59737:27;59782:18;59624:36;:190::i;:::-;-1:-1:-1;;;;;59834:233:19;;59891:17;;;;:6;:17;;;;;;:22;;59931;;;;59971:23;;;;;59834:233;;-1:-1:-1;;;;;;;;;;;59834:233:19;;;59891:22;;59931;59971:23;59834:233;:::i;:::-;;;;;;;;58929:1149;;58895:1183;58745:1339;;;:::o;3122:96:12:-;3180:7;3206:5;3210:1;3206;:5;:::i;:::-;3199:12;3122:96;-1:-1:-1;;;3122:96:12:o;3465:::-;3523:7;3549:5;3553:1;3549;:5;:::i;3850:96::-;3908:7;3934:5;3938:1;3934;:5;:::i;69576:640:19:-;69988:11;:27;;;;;;;;-1:-1:-1;69988:27:19;;;;;;;;;-1:-1:-1;;;;;;69988:27:19;-1:-1:-1;;;;;69988:27:19;;;;;70114:18;;-1:-1:-1;;70114:25:19;;:18;:22;:25::i;:::-;-1:-1:-1;;;;;70150:17:19;;;;;;;;:6;:17;;;;;:28;;:36;;-1:-1:-1;;;;;;70150:36:19;;-1:-1:-1;;;;;70150:36:19;;;;;;-1:-1:-1;70150:17:19;69576:640::o;63901:395::-;-1:-1:-1;;;;;64037:17:19;;63988:4;64037:17;;;:6;:17;;;;;:22;;;63988:4;;64020:40;;:16;:40::i;:::-;-1:-1:-1;;;;;64086:17:19;;64070:13;64086:17;;;:6;:17;;;;;:23;;;;64119:34;;;;64178:11;;64004:56;;-1:-1:-1;64086:23:19;64178:39;;64004:56;;64178:25;;64086:23;64178:15;:25::i;:::-;:29;;:39::i;:::-;64164:11;:53;;;64232:31;;392:25:40;;;64232:31:19;;380:2:40;365:18;64232:31:19;;;;;;;-1:-1:-1;64281:8:19;63901:395;-1:-1:-1;;63901:395:19:o;3171:140:22:-;3235:4;3251:8;3262:15;3270:6;3262:7;:15::i;:::-;1001:19;-1:-1:-1;3295:9:22;3171:140;-1:-1:-1;;;3171:140:22:o;35576:3514:19:-;35813:31;;:::i;:::-;35856:46;;:::i;:::-;35912:42;;:::i;:::-;35965:58;;;:34;36033:21;;;:29;36096:21;:19;:21::i;:::-;36072;;;:45;36151:21;:19;:21::i;:::-;36127;;;:45;36197:1;36188:6;;;:10;36183:2901;36209:11;:18;36200:4;:6;;;:27;36183:2901;;;36265:11;36277:4;:6;;;36265:19;;;;;;;;:::i;:::-;;;;;;;;;;;;-1:-1:-1;;;;;36253:31:19;:9;;;:31;;;36340:17;;;;:6;:17;;;;;;:24;;;36368:13;;36340:24;;:41;;;;;;;;:::i;:::-;;36401:8;36336:88;36448:32;36462:4;:9;;;36473:6;36448:13;:32::i;:::-;36437:8;;;:43;36500:21;;;;36495:2532;;805:19:22;36656:4:19;:8;;;:15;;:58;;;;-1:-1:-1;36675:34:19;;:39;36656:58;36755:8;36631:151;36800:8;36811:154;36855:4;:21;;;36898:4;:21;;;36941:6;36811:22;:154::i;:::-;36800:165;;37004:277;37048:11;37081:12;37115:4;:9;;;37146:4;:8;;;37176:4;:34;;;37232:3;37257:6;37004:22;:277::i;:::-;37463:30;;;;37382:55;;36984:297;;-1:-1:-1;37382:112:19;;:55;:80;:112::i;:::-;37345:149;;37583:30;;;;37536:21;;;;:95;;:25;:95::i;:::-;37512:4;:21;;:119;;;;;37673:221;37864:17;:29;;;37673:165;37800:17;:37;;;37673:101;37741:17;:32;;;37673:4;:42;;;:67;;:101;;;;:::i;:221::-;37649:21;;;:245;37999:114;38050:6;38078:17;37999:29;:114::i;:::-;37990:123;;38157:159;38206:4;:21;;;38249:4;:21;;;38292:6;38157:27;:159::i;:::-;38156:160;38132:21;;;:184;-1:-1:-1;36495:2532:19;;;38341:4;:21;;;:39;;;;;805:19:22;38366:4:19;:8;;;:14;38341:39;38337:690;;;38420:192;38462:11;38495:12;38529:4;:9;;;38560:4;:34;;;38420:20;:192::i;:::-;38748:30;;;;38667:55;;38400:212;;-1:-1:-1;38667:112:19;;:55;:80;:112::i;:::-;38630:149;;38884:114;38935:6;38963:17;38884:29;:114::i;:::-;38875:123;;38337:690;36229:6;;;:8;;;;;;:::i;:::-;;;-1:-1:-1;36183:2901:19;;;35846:3244;;35576:3514;;;;;;;:::o;39096:1298::-;39332:31;;:::i;:::-;39375:46;;:::i;:::-;39431:42;;:::i;:::-;39484:58;;;:34;39558:6;;;:10;39553:835;39579:11;:18;39570:4;:6;;;:27;39553:835;;;39635:11;39647:4;:6;;;39635:19;;;;;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;;;;;39623:31:19;:9;;;:31;;;39679:32;;39704:6;39679:13;:32::i;:::-;39668:8;;;:43;;;805:19:22;-1:-1:-1;39726:652:19;;;39784:192;39826:11;39859:12;39893:4;:9;;;39924:4;:34;;;39784:20;:192::i;:::-;40113:30;;;;40032:55;;39764:212;;-1:-1:-1;40032:112:19;;:55;:80;:112::i;:::-;39995:149;;40249:114;40300:6;40328:17;40249:29;:114::i;:::-;40240:123;;39726:652;39599:6;;;:8;;;;;;:::i;:::-;;;-1:-1:-1;39553:835:19;;65138:2306;65305:47;;65335:7;65305:47;66203:29;;66135:19;;66157:85;;:28;:5;122:4:20;66157:9:19;:28::i;:85::-;66135:107;;66252:28;66283:94;66329:38;;66283:28;122:4:20;66283:5:19;:9;;:28;;;;:::i;:94::-;66252:125;;66429:29;66461:31;66480:11;;66461:14;:18;;:31;;;;:::i;:::-;66429:63;;66502:38;66543:62;66584:11;;66543:23;:27;;:62;;;;:::i;:::-;66502:103;;66648:83;66680:41;66709:11;;66680:24;:28;;:41;;;;:::i;:::-;66648:14;;:18;:83::i;:::-;66616:29;:115;66861:11;;66782:101;;66823:50;;:33;;:37;:50::i;:::-;66782:23;;:27;:101::i;:::-;66741:38;:142;66963:7;;:37;;66975:24;66963:11;:37::i;:::-;66953:7;:47;67029:16;;:77;;67063:33;67029:20;:77::i;:::-;67010:16;:96;;;67136:7;;67122:40;;;;;;1449:25:40;;1505:2;1490:18;;1483:34;1437:2;1422:18;;1275:248;67122:40:19;;;;;;;;67238:41;;-1:-1:-1;;;67238:41:19;;;;;392:25:40;;;-1:-1:-1;;;;;67238:34:19;;;;;365:18:40;;67238:41:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;67289:42:19;;-1:-1:-1;;;67289:42:19;;;;;392:25:40;;;-1:-1:-1;;;;;67289:35:19;;;-1:-1:-1;67289:35:19;;-1:-1:-1;365:18:40;;67289:42:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;67341:35:19;;-1:-1:-1;;;67341:35:19;;;;;392:25:40;;;-1:-1:-1;;;;;67341:28:19;;;-1:-1:-1;67341:28:19;;-1:-1:-1;365:18:40;;67341:35:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;67386:51:19;;-1:-1:-1;;;67386:51:19;;-1:-1:-1;;;;;67386:21:19;;;-1:-1:-1;67386:21:19;;-1:-1:-1;67386:51:19;;67416:12;;67431:5;;67386:51;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;65138:2306;;;;;:::o;68739:511::-;68901:11;;68879:19;:33;;;;68923:15;68941:11;-1:-1:-1;;;;;68941:20:19;;:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;68923:40;;68973:19;68995:11;;;;;;;;;-1:-1:-1;;;;;68995:11:19;-1:-1:-1;;;;;68995:20:19;;:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;68973:44;-1:-1:-1;69053:72:19;68973:44;69053:30;:10;69068:14;69053;:30::i;:72::-;69027:23;:98;;;69177:19;;69141:102;;;;;;1449:25:40;;1505:2;1490:18;;1483:34;1437:2;1422:18;;1275:248;69141:102:19;;;;;;;;68869:381;;68739:511;;:::o;42008:443::-;42176:15;;42172:180;;42207:15;;42255:14;;42207:134;;-1:-1:-1;;;42207:134:19;;-1:-1:-1;;;;;42255:14:19;;;42207:134;;;14645:34:40;14715:15;;;14695:18;;;14688:43;14747:18;;;14740:34;;;42207:15:19;;;:30;;14580:18:40;;42207:134:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;42172:180;42366:10;;42362:83;;42392:42;;-1:-1:-1;;;42392:42:19;;-1:-1:-1;;;;;42392:21:19;;;;;:42;;42414:11;;42427:6;;42392:42;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;42008:443;;;;:::o;4539:1631:24:-;4690:7;4724:1;4790:7;4690;4831:18;4790:7;4831:11;:18;:::i;:::-;4807:42;-1:-1:-1;4917:13:24;4933:18;4947:4;4933:11;:18;:::i;:::-;4917:34;;4899:1183;4974:10;4980:4;4974:3;:10;:::i;:::-;4965:5;:19;4899:1183;;5036:10;5049:31;5060:5;5067;5074;5049:10;:31::i;:::-;5036:44;;5104:4;5099:2;:9;5095:558;;;5253:13;5202:437;5306:5;5288:14;:23;;:87;;;;-1:-1:-1;5357:18:24;5371:4;5357:11;:18;:::i;:::-;5339:14;:36;;5288:87;5202:437;;;5545:4;5502:40;5513:5;5520;5527:14;5502:10;:40::i;:::-;:47;5498:123;;;5584:14;-1:-1:-1;5577:21:24;;-1:-1:-1;;;;;5577:21:24;5498:123;5435:22;5453:4;5435:22;;:::i;:::-;;;5202:437;;;;5095:558;5721:25;5728:18;5721:4;:25;:::i;:::-;5715:2;:32;5711:277;;;5774:9;5779:4;5774:2;:9;:::i;:::-;5767:16;;5711:277;;;5865:24;:4;5872:17;5865:24;:::i;:::-;5859:2;:31;5855:133;;;5917:4;5910:11;;5855:133;-1:-1:-1;6018:5:24;-1:-1:-1;6018:5:24;4998:13;5007:4;6018:5;4998:13;:::i;:::-;;;4899:1183;;;-1:-1:-1;6099:1:24;;4539:1631;-1:-1:-1;;;;;;;;4539:1631:24:o;83834:216:19:-;83957:13;-1:-1:-1;;;;;83929:17:19;;;;;;:6;:17;;;;;:24;;;;;:41;;;;;;;;:::i;:::-;;83908:135;;;;-1:-1:-1;;;83908:135:19;;15117:2:40;83908:135:19;;;15099:21:40;15156:2;15136:18;;;15129:30;15195:34;15175:18;;;15168:62;-1:-1:-1;;;15246:18:40;;;15239:45;15301:19;;83908:135:19;14915:411:40;78788:203:19;78903:4;78926:58;122:4:20;78926:35:19;:14;78945:15;78926:18;:35::i;75279:406::-;75401:4;75436:242;75470:131;75541:42;75561:10;;;;;;;;-1:-1:-1;;;;;75561:10:19;-1:-1:-1;;;;;75561:19:19;;:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;75541:15;;:19;:42::i;:::-;75470:45;75495:19;2015:24;2035:4;122::20;2015:24:19;:::i;:::-;2014:30;;2043:1;2014:30;:::i;75470:131::-;122:4:20;75436:16:19;:242::i;82350:336::-;82411:4;82427:18;82448:31;:29;:31::i;:::-;82427:52;;82489:16;82508:99;1946:18;82584:13;82508:19;:99::i;:::-;82489:118;;82625:54;122:4:20;82625:31:19;82644:11;82625:14;;:18;;:31;;;;:::i;81393:277::-;81445:15;81463:35;81483:14;;81463:15;:19;;:35;;;;:::i;:::-;81445:53;;1711:2;81513:10;:35;81509:155;;81581:15;81564:14;:32;;;81615:38;;392:25:40;;;81615:38:19;;380:2:40;365:18;81615:38:19;246:177:40;27145:3701:19;27350:31;;:::i;:::-;27393:46;;:::i;:::-;27449:42;;:::i;:::-;27502:58;;;:34;27570:21;;;:29;27633:21;:19;:21::i;:::-;27609;;;:45;27688:21;:19;:21::i;:::-;27664:4;:21;;:45;;;;;27732:15;:28;;;-1:-1:-1;;;;;27732:36:19;;:38;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;27720:4;:9;;:50;-1:-1:-1;;;;;27720:50:19;;;-1:-1:-1;;;;;27720:50:19;;;;;27780:17;27800:15;:28;;;-1:-1:-1;;;;;27800:37:19;;:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;27863:1;27854:6;;;:10;27780:59;-1:-1:-1;27849:2991:19;27875:2;27866:4;:6;;;:11;:37;;;;;27894:9;-1:-1:-1;;;;;27881:22:19;:4;:9;;;-1:-1:-1;;;;;27881:22:19;;;27866:37;27849:2991;;;28035:28;;;;28072:9;;;;28035:47;;-1:-1:-1;;;28035:47:19;;28016:16;;-1:-1:-1;;;;;28035:36:19;;;;:47;;28072:9;28035:47;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;28016:66;;28108:32;28122:4;:9;;;28133:6;28108:13;:32::i;:::-;28097:8;;;:43;28160:21;;;;28155:2586;;805:19:22;28315:4:19;:8;;;:15;;:58;;;;-1:-1:-1;28334:34:19;;:39;28315:58;28290:148;;;28414:5;;;28290:148;28456:8;28467:154;28511:4;:21;;;28554:4;:21;;;28597:6;28467:22;:154::i;:::-;28704:26;;28752:27;;;;28801:9;;;;28832:8;;;;28862:34;;28456:165;;-1:-1:-1;28660:307:19;;28456:165;28943:6;28660:22;:307::i;:::-;29149:30;;;;29068:55;;28640:327;;-1:-1:-1;29068:112:19;;:55;:80;:112::i;:::-;29031:149;;29269:30;;;;29222:21;;;;:95;;:25;:95::i;:::-;29198:4;:21;;:119;;;;;29359:221;29550:17;:29;;;29359:165;29486:17;:37;;;29359:101;29427:17;:32;;;29359:4;:42;;;:67;;:101;;;;:::i;:221::-;29335:21;;;:245;29685:114;29736:6;29764:17;29685:29;:114::i;:::-;29676:123;;29843:159;29892:4;:21;;;29935:4;:21;;;29978:6;29843:27;:159::i;:::-;29842:160;29818:21;;;:184;-1:-1:-1;28155:2586:19;;;30027:4;:21;;;:39;;;;;805:19:22;30052:4:19;:8;;;:14;30027:39;30023:718;;;30106:222;30148:15;:26;;;30196:15;:27;;;30245:4;:9;;;30276:4;:34;;;30106:20;:222::i;:::-;30465:30;;;;30384:55;;30086:242;;-1:-1:-1;30384:112:19;;:55;:80;:112::i;:::-;30347:149;;30601:114;30652:6;30680:17;30601:29;:114::i;:::-;30592:123;;30023:718;;;30736:5;;;30023:718;-1:-1:-1;;;;;30809:20:19;:9;;;:20;27905:6;;;:8;;;;;;:::i;:::-;;;-1:-1:-1;27849:2991:19;;;27383:3463;;;27145:3701;;;;;;:::o;30852:1401::-;31076:31;;:::i;:::-;31119:46;;:::i;:::-;31175:42;;:::i;:::-;31262:12;;31285:58;;;31227:32;31359:6;;;:10;-1:-1:-1;;;;;31262:12:19;31354:893;31380:2;31371:4;:6;;;:11;31354:893;;;31420:18;-1:-1:-1;;;;;31420:26:19;;:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;31408:40:19;:9;;;:40;;;31473:32;;31498:6;31473:13;:32::i;:::-;31462:8;;;:43;;;805:19:22;-1:-1:-1;31520:663:19;;;31578:192;31620:11;31653:12;31687:4;:9;;;31718:4;:34;;;31578:20;:192::i;:::-;31907:30;;;;31826:55;;31558:212;;-1:-1:-1;31826:112:19;;:55;:80;:112::i;:::-;31789:149;;32043:114;32094:6;32122:17;32043:29;:114::i;:::-;32034:123;;31520:663;;;32178:5;;31520:663;31384:6;;;:8;;;;;;:::i;:::-;;;-1:-1:-1;31354:893:19;;;31109:1144;;;30852:1401;;;;;;;:::o;1359:130:2:-;1273:6;;-1:-1:-1;;;;;1273:6:2;719:10:7;1422:23:2;1414:68;;;;-1:-1:-1;;;1414:68:2;;15533:2:40;1414:68:2;;;15515:21:40;;;15552:18;;;15545:30;15611:34;15591:18;;;15584:62;15663:18;;1414:68:2;15331:356:40;2426:187:2;2518:6;;;-1:-1:-1;;;;;2534:17:2;;;-1:-1:-1;;;;;;2534:17:2;;;;;;;2566:40;;2518:6;;;2534:17;2518:6;;2566:40;;2499:16;;2566:40;2489:124;2426:187;:::o;2755:96:12:-;2813:7;2839:5;2843:1;2839;:5;:::i;291:350:21:-;-1:-1:-1;;;;;364:22:21;;356:65;;;;-1:-1:-1;;;356:65:21;;15894:2:40;356:65:21;;;15876:21:40;15933:2;15913:18;;;15906:30;15972:32;15952:18;;;15945:60;16022:18;;356:65:21;15692:354:40;356:65:21;541:21;;589:8;581:53;;;;-1:-1:-1;;;581:53:21;;16253:2:40;581:53:21;;;16235:21:40;;;16272:18;;;16265:30;16331:34;16311:18;;;16304:62;16383:18;;581:53:21;16051:356:40;60365:257:19;60475:7;;;-1:-1:-1;;;;;60440:26:19;;;;;;:15;:26;;;;;;;:42;;;60536:16;;60492:41;;;;:60;;;60589:7;;60567:48;;;;;;60589:7;1449:25:40;;1505:2;1490:18;;1483:34;1437:2;1422:18;;1275:248;81837:350:19;81902:4;81918:18;81939:35;:33;:35::i;:::-;81918:56;;81985:16;82004:100;1869:18;82081:13;82004:19;:100::i;:::-;81985:119;;82122:58;122:4:20;82122:35:19;82145:11;82122:18;;:22;;:35;;;;:::i;77666:610::-;77785:4;77801:14;77818:15;;;;;;;;;-1:-1:-1;;;;;77818:15:19;-1:-1:-1;;;;;77818:27:19;;:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;77801:46;;77957:6;77967:1;77957:11;77953:68;;1427:24:22;1447:4;122::20;1427:24:22;:::i;:::-;1426:30;;1455:1;1426:30;:::i;:::-;77984:26:19;;;;;77953:68;78050:219;78084:136;78150:52;78195:6;78150:40;:17;122:4:20;78150:21:19;:40::i;:52::-;78084:40;78108:15;1427:24:22;1447:4;122::20;1427:24:22;:::i;57925:532:19:-;58014:4;58020;58036:23;58062:32;58084:9;58062:21;:32::i;:::-;58036:58;;58104:32;58139:63;58183:9;58139:30;:63::i;:::-;-1:-1:-1;;;;;58233:17:19;;58213;58233;;;:6;:17;;;;;:22;;;58104:98;;-1:-1:-1;58213:17:19;58233:46;;58260:18;58233:26;:46::i;:::-;-1:-1:-1;;;;;58318:17:19;;58289:26;58318:17;;;:6;:17;;;;;:22;58213:66;;-1:-1:-1;58289:26:19;58318:77;;58358:27;58318:26;:77::i;:::-;58414:12;;58289:106;;-1:-1:-1;57925:532:19;;-1:-1:-1;;;;;57925:532:19:o;3484:394:24:-;3580:4;3600:9;;3596:276;;3632:36;3662:5;3632:25;:5;981:4;3632:9;:25::i;:36::-;3625:43;;;;3596:276;-1:-1:-1;;;3842:19:24;;2835:330:22;2888:8;2908:21;2932;:19;:21::i;:::-;2908:45;;2963:21;2987;:19;:21::i;:::-;2963:45;;3025:112;3061:16;3091;3121:6;3025:22;:112::i;85357:302:19:-;2015:24;2035:4;122::20;2015:24:19;:::i;:::-;2014:30;;2043:1;2014:30;:::i;:::-;85479:17;:41;;:99;;;;;122:4:20;85540:17:19;:38;;85479:99;85458:194;;;;-1:-1:-1;;;85458:194:19;;16614:2:40;85458:194:19;;;16596:21:40;16653:2;16633:18;;;16626:30;16692:34;16672:18;;;16665:62;-1:-1:-1;;;16743:18:40;;;16736:46;16799:19;;85458:194:19;16412:412:40;84848:183:19;805:19:22;84934:15:19;84942:6;84934:7;:15::i;:::-;:22;;84913:111;;;;-1:-1:-1;;;84913:111:19;;17031:2:40;84913:111:19;;;17013:21:40;17070:2;17050:18;;;17043:30;17109:34;17089:18;;;17082:62;-1:-1:-1;;;17160:18:40;;;17153:40;17210:19;;84913:111:19;16829:406:40;84688:154:19;84783:1;84773:7;:11;84765:70;;;;-1:-1:-1;;;84765:70:19;;17442:2:40;84765:70:19;;;17424:21:40;17481:2;17461:18;;;17454:30;17520:34;17500:18;;;17493:62;-1:-1:-1;;;17571:18:40;;;17564:44;17625:19;;84765:70:19;17240:410:40;84056:359:19;84250:37;;-1:-1:-1;;;84250:37:19;;84291:7;;-1:-1:-1;;;;;84250:26:19;;;;;:37;;84277:9;;84250:37;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:48;;84229:179;;;;-1:-1:-1;;;84229:179:19;;17857:2:40;84229:179:19;;;17839:21:40;17896:2;17876:18;;;17869:30;17935:34;17915:18;;;17908:62;18006:34;17986:18;;;17979:62;-1:-1:-1;;;18057:19:40;;;18050:51;18118:19;;84229:179:19;17655:488:40;47606:577:19;47768:4;-1:-1:-1;;;;;47801:34:19;;;;:95;;-1:-1:-1;47852:44:19;;-1:-1:-1;;;47852:44:19;;-1:-1:-1;;;;;47852:22:19;;;;;:44;;47875:20;;47852:44;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;47851:45;47801:95;:160;;;;805:19:22;47912:43:19;47926:20;47948:6;47912:13;:43::i;:::-;:49;47801:160;47784:225;;;-1:-1:-1;47993:5:19;47986:12;;47784:225;48039:43;;-1:-1:-1;;;48039:43:19;;48019:17;;-1:-1:-1;;;;;48039:21:19;;;;;:43;;48061:20;;48039:43;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;48019:63;-1:-1:-1;;;;;;48111:23:19;;;;:65;;;805:19:22;48138:32:19;48152:9;48163:6;48138:13;:32::i;:::-;:38;48092:84;47606:577;-1:-1:-1;;;;;47606:577:19:o;43171:3153::-;43492:46;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;43492:46:19;-1:-1:-1;;;;;43780:17:19;;;;;;:6;:17;;;;;:22;43716:96;;43746:20;;43716:16;:96::i;:::-;43683:129;;;44048:42;;44083:6;44048:34;:42::i;:::-;44020:25;;;;:70;;;;44287:30;;-1:-1:-1;;;;;44246:17:19;;44230:12;44246:17;;;:6;:17;;;;;;:22;44245:82;;:28;:82::i;:::-;44381:25;;;;;-1:-1:-1;;;;;44353:17:19;;44337:12;44353:17;;;:6;:17;;;;;;:22;;;44230:97;;-1:-1:-1;44337:12:19;;44352:55;;:28;:55::i;:::-;44337:70;;1157:5:22;44422:7:19;:38;44418:1866;;44587:23;44600:9;44587:12;:23::i;:::-;44624:49;44636:9;44647:25;44624:11;:49::i;:::-;44687:161;44722:15;44755:9;1157:5:22;44827:7:19;44687:17;:161::i;:::-;44897:9;-1:-1:-1;;;;;44867:166:19;-1:-1:-1;;;;;;;;;;;44924:1:19;44943;44962;44981:38;44867:166;;;;;;;;;:::i;:::-;;;;;;;;44418:1866;;;45064:12;45079:47;45109:7;45118;45079:29;:47::i;:::-;45064:62;;45492:26;45481:7;:37;;:92;;;-1:-1:-1;1268:1:22;45550:7:19;45538:35;45481:92;45460:242;;;-1:-1:-1;;45642:4:19;45606:33;;;:40;-1:-1:-1;45664:23:19;;45460:242;45716:28;;;;:193;;-1:-1:-1;;;45716:193:19;;-1:-1:-1;;;;;19192:15:40;;;45716:193:19;;;19174:34:40;19224:18;;;19217:34;;;19287:15;;;19267:18;;;19260:43;19339:15;;;19319:18;;;19312:43;45716:37:19;;;;;;19108:19:40;;45716:193:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;45924:17:19;;;;;;:6;:17;;;;;:32;;;45970:22;;:32;;;-1:-1:-1;46016:37:19;45931:9;46016:26;:37::i;:::-;-1:-1:-1;;;;;;46073:200:19;;46180:17;;;;:6;:17;;;;;;;:23;;;46073:200;;-1:-1:-1;;;;;;;;;;;46073:200:19;;;46130:7;;46155;;46221:38;;46073:200;:::i;:::-;;;;;;;;45050:1234;44418:1866;46294:23;;43171:3153;;;;;;;;;;:::o;73024:1346::-;73181:4;73197:30;73230:32;:30;:32::i;:::-;73197:65;;73582:31;73616:87;73681:10;;;;;;;;-1:-1:-1;;;;;73681:10:19;-1:-1:-1;;;;;73681:19:19;;:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;73616:47;:11;122:4:20;73616:28:19;:47::i;:87::-;73582:121;-1:-1:-1;73767:16:19;73786:79;:25;73582:121;73786:29;:79::i;:::-;73767:98;;73890:48;73907:11;122:4:20;73890:16:19;:48::i;:::-;73876:62;;74104:1;74090:11;:15;74083:23;;;;:::i;:::-;74212:18;:32;;;74259:38;;392:25:40;;;74259:38:19;;380:2:40;365:18;74259:38:19;;;;;;;74308:27;:25;:27::i;75691:161::-;75759:4;75782:63;75801:30;75819:11;75801:17;:30::i;3317:323:22:-;3452:18;3473:40;3505:7;3473:27;:4;122::20;3473:8:22;:27::i;:40::-;3452:61;;3561:17;3544:13;:34;;3523:110;;;;-1:-1:-1;;;3523:110:22;;19568:2:40;3523:110:22;;;19550:21:40;19607:2;19587:18;;;19580:30;19646:31;19626:18;;;19619:59;19695:18;;3523:110:22;19366:353:40;67618:636:19;67734:18;67718:12;:34;;;;;;;;:::i;:::-;;;:67;;;;-1:-1:-1;67772:13:19;67756:12;:29;;;;;;;;:::i;:::-;;;67718:67;67698:97;;;;:::i;:::-;67836:11;:18;67864:56;67836:18;67864:32;:56::i;:::-;-1:-1:-1;;;;;67931:17:19;;;;;;:6;:17;;;;;:24;;:39;;67958:12;;67931:24;-1:-1:-1;;67931:39:19;;67958:12;67931:39;;;;;;;;:::i;:::-;;;;;-1:-1:-1;;;;;;67980:17:19;;68005:1;67980:17;;;:6;:17;;;;;;;;:22;;;;:26;;;68016;;;;68053:15;:26;;;;;:36;;;68099:41;:45;68155:52;67987:9;68184:22;68155:17;:52::i;:::-;68217:12;;:30;;-1:-1:-1;;;68217:30:19;;-1:-1:-1;;;;;68217:12:19;;;;:19;;:30;;68237:9;;68217:30;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;67688:566;67618:636;;:::o;4033:500:24:-;4143:4;4163:9;;4159:368;;4188:17;4208:81;4269:6;4208:39;4241:5;4208:39;:5;433:4;4208:9;:28::i;:81::-;4188:101;-1:-1:-1;4304:19:24;;-1:-1:-1;4304:19:24;4159:368;-1:-1:-1;;;4497:19:24;;76114:402:19;76227:4;;76264:77;122:4:20;76264:32:19;:15;76284:11;76264:19;:32::i;:77::-;76243:98;;76388:11;76372:13;:27;76351:128;;;;-1:-1:-1;;;76351:128:19;;19926:2:40;76351:128:19;;;19908:21:40;19965:2;19945:18;;;19938:30;20004:34;19984:18;;;19977:62;-1:-1:-1;;;20055:18:40;;;20048:52;20117:19;;76351:128:19;19724:418:40;63434:186:19;-1:-1:-1;;;;;63507:17:19;;63494:10;63507:17;;;:6;:17;;;;;:23;;;63554:11;;:22;;63507:23;63554:15;:22::i;:::-;63540:11;:36;-1:-1:-1;;;;;;63586:17:19;63612:1;63586:17;;;:6;:17;;;;;:23;;:27;63434:186::o;42576:350::-;42762:48;;-1:-1:-1;;;42762:48:19;;;;;392:25:40;;;-1:-1:-1;;;;;42762:35:19;;;;;365:18:40;;42762:48:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;42820:47:19;;-1:-1:-1;;;42820:47:19;;;;;392:25:40;;;-1:-1:-1;;;;;42820:34:19;;;-1:-1:-1;42820:34:19;;-1:-1:-1;365:18:40;;42820:47:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;42877:42:19;;-1:-1:-1;;;42877:42:19;;;;;392:25:40;;;-1:-1:-1;;;;;42877:34:19;;;-1:-1:-1;42877:34:19;;-1:-1:-1;365:18:40;;42877:42:19;246:177:40;64423:709:19;64484:4;64500:10;64524:23;;64551:1;64524:28;64520:584;;-1:-1:-1;64576:5:19;64520:584;;;65010:1;64988:19;;:23;64981:31;;;;:::i;:::-;65034:59;65069:23;;65034:30;65044:19;;65034:5;:9;;:30;;;;:::i;15614:5517::-;15860:42;;:::i;:::-;15914:55;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;15914:55:19;15983:11;:18;16005:1;-1:-1:-1;15979:78:19;;16022:24;;;15979:78;16278:31;16299:9;16278:20;:31::i;:::-;16243:22;;;16099:210;16160:33;16207:22;;;16099:210;;;;16160:33;;16099:210;;;;;;16360:80;;:23;:80::i;:::-;16320:37;;;:120;;;1157:5:22;16450:56:19;;;:86;16569:33;;;;:98;;:37;:98::i;:::-;16546:121;;682:19:22;16764:15:19;;16760:4330;;16795:189;16849:11;16878:12;16908:4;:22;;;16948:4;:22;;;16795:36;:189::i;:::-;16998:23;17011:9;16998:12;:23::i;:::-;17069:1;17036:30;;;:34;;;17084:32;;;:36;17173:50;;17134:36;;;:89;17276:20;;17237:36;;;:59;17311:50;17323:9;17334:26;17311:11;:50::i;:::-;17440:33;;17491;;;;17380:221;;-1:-1:-1;;;;;17380:221:19;;;-1:-1:-1;;;;;;;;;;;17380:221:19;;;17542:45;;17380:221;:::i;:::-;;;;;;;;17650:9;-1:-1:-1;;;;;17620:173:19;-1:-1:-1;;;;;;;;;;;17677:1:19;17696;17715;17734:45;17620:173;;;;;;;;;:::i;:::-;;;;;;;;16760:4330;;;682:19:22;17911:4:19;:14;17910:32;;;;;805:19:22;17931:4:19;:10;17910:32;17906:3184;;;17958:189;18012:11;18041:12;18071:4;:22;;;18111:4;:22;;;17958:36;:189::i;:::-;18161:23;18174:9;18161:12;:23::i;:::-;18471:33;;18522:20;;18422:173;;18471:33;18560:21;18422:31;:173::i;:::-;18369:36;;;18199:396;18315:36;;;18199:396;18265:32;;;18199:396;18217:30;;;18199:396;18610:50;18622:9;18633:26;18610:11;:50::i;17906:3184::-;805:19:22;19551:4:19;:11;;19550:42;;;;;19587:4;19580;:11;19550:42;:118;;;;-1:-1:-1;19609:33:19;;:58;-1:-1:-1;19609:58:19;19550:118;19533:1557;;;19693:189;19747:11;19776:12;19806:4;:22;;;19846:4;:22;;;19693:36;:189::i;:::-;19903:21;19928:1;19903:26;19896:34;;;;:::i;:::-;19945:23;19958:9;19945:12;:23::i;:::-;20002:160;20040:17;:33;;;20091:17;:33;;;20142:6;20002:20;:160::i;:::-;19982:180;;20177:50;20189:9;20200:26;20177:11;:50::i;:::-;20245:29;;;;:33;20241:202;;20298:15;;;20381:29;;;20298:130;;-1:-1:-1;;;20298:130:19;;-1:-1:-1;;;;;20298:15:19;;;;:30;;:130;;20350:9;;20381:29;20298:130;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;20241:202;20522:33;;20573:32;;;;20462:220;;-1:-1:-1;;;;;20462:220:19;;;-1:-1:-1;;;;;;;;;;;20462:220:19;;;20623:45;;20462:220;:::i;19533:1557::-;21017:33;;:::i;:::-;21071:8;-1:-1:-1;21064:15:19;;-1:-1:-1;21064:15:19;19533:1557;21100:24;15614:5517;;;;;;;;;:::o;40445:1557::-;40609:34;;:::i;:::-;40826:37;;;;;40761:47;;;;:103;;:64;:103::i;:::-;40724:34;;;:140;40988:43;;;;;40917:53;;;;:115;;:70;:115::i;:::-;40874:40;;;:158;41121:33;;41074:29;;;;:90;;:33;:90::i;:::-;41042:29;;;;:122;;;;41253:33;;;41206:29;;:90;;:33;:90::i;:::-;41174:122;;41381:30;;;;;41336:27;;;;:85;;:31;:85::i;:::-;41306:27;;;:115;41510:32;;;;;41463:29;;;;:89;;:33;:89::i;:::-;41431:29;;;:121;41662:36;;;;;41598:46;;;;:101;;:63;:101::i;:::-;41562:33;;;:137;41809:36;;;;;41745:46;;;;:101;;:63;:101::i;:::-;41709:33;;;:137;41929:29;;;;;41885:26;;;;:83;;:30;:83::i;:::-;41856:26;;;:112;40445:1557;;;;:::o;71866:326::-;72017:4;72033:8;72044:114;72080:17;72111;72142:6;72044:22;:114::i;:::-;1001:19:22;-1:-1:-1;;71866:326:19;-1:-1:-1;;;;;71866:326:19:o;13566:1996::-;13751:42;;:::i;:::-;13805:55;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;13805:55:19;14050:31;14071:9;14050:20;:31::i;:::-;14015:22;;;13871:210;;;13932:33;13979:22;;;13871:210;;;13932:33;;13871:210;;;;;;;14193:22;;14229;;14092:169;;14142:11;;14167:12;;14193:22;14092:36;:169::i;:::-;14271:23;14284:9;14271:12;:23::i;:::-;14345:80;14382:17;:33;;;14345:23;:80::i;:::-;14305:37;;;:120;;;1157:5:22;14436:56:19;;;:86;14620:33;;;;-1:-1:-1;;14620:98:19;;:33;:37;:98::i;:::-;14597:121;;14932:152;14977:17;:33;;;15024:15;15053:21;14932:31;:152::i;:::-;14883:36;;;14729:355;14833:36;;;14729:355;14787:32;;;14729:355;14743:30;;;14729:355;15095:50;15107:9;15118:26;15095:11;:50::i;:::-;15212:33;;15259;;;;15160:199;;-1:-1:-1;;;;;15160:199:19;;;-1:-1:-1;;;;;;;;;;;15160:199:19;;;15306:43;;15160:199;:::i;:::-;;;;;;;;15400:9;-1:-1:-1;;;;;15374:147:19;-1:-1:-1;;;;;;;;;;;15423:1:19;15438;15453;15468:43;15374:147;;;;;;;;;:::i;:::-;;;;;;;;15531:24;;13566:1996;;;;;;:::o;992:104:24:-;1047:4;1076:2;1071;:7;1070:19;;1087:2;1070:19;;;-1:-1:-1;1082:2:24;;992:104;-1:-1:-1;992:104:24:o;83398:158:19:-;83462:4;83485:64;1711:2;83486:35;83506:14;;83486:15;:19;;:35;;;;:::i;2586:725:24:-;2653:4;2684:9;2673:8;:20;2669:71;;;2720:9;2709:20;;2669:71;2779:8;2791:1;2779:13;2775:68;;-1:-1:-1;433:4:24;2808:24;;2775:68;433:4;2898:5;2922:8;2979:296;2990:1;2986;:5;2979:296;;;3011:5;3015:1;3011;:5;:::i;:::-;3020:1;3011:10;3007:258;;3045:12;3052:1;3055;3045:6;:12::i;:::-;3041:16;-1:-1:-1;3079:8:24;:1;3085;3079:5;:8::i;:::-;3075:12;;2979:296;;3007:258;3165:12;3172:1;3175;3165:6;:12::i;:::-;3161:16;;3199:12;3206:1;3209;3199:6;:12::i;:::-;3195:16;-1:-1:-1;3233:17:24;3248:1;3234:8;:1;3240;3234:5;:8::i;2979:296::-;3292:12;3299:1;3302;3292:6;:12::i;82942:208:19:-;83010:4;83045:98;1711:2;83046:39;83066:18;;83046:15;:19;;:39;;;;:::i;46950:650::-;47123:31;;;;;47160:14;;47123:65;;-1:-1:-1;;;47123:65:19;;-1:-1:-1;;;;;47123:36:19;;;;;;:65;;47160:14;;;47176:11;;47123:65;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;47266:26:19;;:62;;-1:-1:-1;;;47266:62:19;;;;;392:25:40;;;-1:-1:-1;;;;;47266:49:19;;;;-1:-1:-1;47266:49:19;;-1:-1:-1;365:18:40;;47266:62:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;47398:15;:31;;;-1:-1:-1;;;;;47398:46:19;;47445:9;47456:6;47398:65;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;47473:26:19;;47531:31;;;;47473:120;;-1:-1:-1;;;47473:120:19;;-1:-1:-1;;;;;47473:36:19;;;;-1:-1:-1;47473:36:19;;-1:-1:-1;47473:120:19;;47577:6;;47473:120;;;:::i;80768:293::-;80824:15;80842:39;80862:18;;80842:15;:19;;:39;;;;:::i;:::-;80824:57;;1711:2;80896:10;:35;80892:163;;80968:15;80947:18;:36;;;81002:42;;392:25:40;;;81002:42:19;;380:2:40;365:18;81002:42:19;246:177:40;84421:261:19;84576:1;84551:22;:26;:56;;;;-1:-1:-1;84581:12:19;;:22;;;-1:-1:-1;;;84581:22:19;;;;84606:1;;-1:-1:-1;;;;;84581:12:19;;:20;;:22;;;;;;;;;;;;;;:12;:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:26;84551:56;84530:145;;;;-1:-1:-1;;;84530:145:19;;20845:2:40;84530:145:19;;;20827:21:40;20884:2;20864:18;;;20857:30;20923:34;20903:18;;;20896:62;-1:-1:-1;;;20974:18:40;;;20967:40;21024:19;;84530:145:19;20643:406:40;70455:734:19;-1:-1:-1;;;;;70592:17:19;;70571:18;70592:17;;;:6;:17;;;;;:24;;;;;;70701:11;:33;;;;;;;;:::i;:::-;;;:65;;;;-1:-1:-1;70753:13:19;70738:11;:28;;;;;;;;:::i;:::-;;;70701:65;70681:95;;;;:::i;:::-;-1:-1:-1;;;;;70803:17:19;;70787:13;70803:17;;;:6;:17;;;;;:28;;;;;;-1:-1:-1;;;;;70803:28:19;;70855:22;;70902:13;70855:22;70803:28;70902:10;:13::i;:::-;70887:28;;70942:7;70933:5;-1:-1:-1;;;;;70933:16:19;;;70926:24;;;;:::i;:::-;70961:21;70985:11;70997:7;70985:20;;;;;;;;:::i;:::-;;;;;;;;;;;71016:11;:18;;-1:-1:-1;;;;;70985:20:19;;;;-1:-1:-1;70985:20:19;;-1:-1:-1;;;;;71016:18:19;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:34;;-1:-1:-1;;;;;;71016:34:19;-1:-1:-1;;;;;71016:34:19;;;;;;71060:21;;;;;;:6;:21;;;;;;;:32;;:40;;-1:-1:-1;;;;;;71060:40:19;71016:34;-1:-1:-1;;;;;71060:40:19;;;;;;;;;;;;71115:39;;21228:51:40;;;21295:18;;;21288:60;;;;71115:39:19;;21201:18:40;71115:39:19;;;;;;;71165:11;:17;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;71165:17:19;;;;;-1:-1:-1;;;;;;71165:17:19;;;;;;-1:-1:-1;;;;;;;70455:734:19:o;2194:147:22:-;2282:4;2305:29;1342:3;2305:11;:29;:::i;21299:1358:19:-;21482:17;;;;21635:25;;21631:1020;;22252:46;22269:5;22276:21;22252:16;:46::i;:::-;22237:61;-1:-1:-1;22329:34:19;22357:5;22329:23;:5;22237:61;22329:9;:23::i;:34::-;22312:51;-1:-1:-1;22398:23:19;:5;22408:12;22398:9;:23::i;:::-;22377:44;-1:-1:-1;22456:25:19;:5;22466:14;22456:9;:25::i;:::-;22435:46;;21631:1020;;;-1:-1:-1;22527:1:19;;-1:-1:-1;22527:1:19;;-1:-1:-1;22595:5:19;;-1:-1:-1;22635:5:19;21631:1020;21299:1358;;;;;;;:::o;22752:968::-;22894:42;;:::i;:::-;22948:52;;;23010:33;;;:52;;;22948:33;23097:37;23127:6;23097:25;22984:16;805:19:22;23097:20:19;:25::i;:37::-;23072:62;;23185:64;23222:17;23185:23;:64::i;:::-;23145:37;;;:104;;;1157:5:22;23259:56:19;;;:86;23356:30;;;:49;;;23450:82;;:17;;:21;:82::i;:::-;23415:32;;;:117;23574:39;:16;23595:17;23574:20;:39::i;:::-;23542:29;;;:71;-1:-1:-1;23662:1:19;23623:36;;;:40;;;23673:36;;;:40;23542:17;22752:968;-1:-1:-1;;;22752:968:19:o;1466:187:24:-;1521:12;;1560:8;:1;1566;1560:5;:8::i;:::-;1545:23;-1:-1:-1;1589:57:24;433:4;1589:34;1601:21;1621:1;433:4;1601:21;:::i;:::-;1589:7;;:11;:34::i;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;14:227:40:-;-1:-1:-1;;;;;202:32:40;;;;184:51;;172:2;157:18;;14:227::o;428:131::-;-1:-1:-1;;;;;503:31:40;;493:42;;483:70;;549:1;546;539:12;564:134;632:20;;661:31;632:20;661:31;:::i;:::-;564:134;;;:::o;703:247::-;762:6;815:2;803:9;794:7;790:23;786:32;783:52;;;831:1;828;821:12;783:52;870:9;857:23;889:31;914:5;889:31;:::i;955:315::-;1023:6;1031;1084:2;1072:9;1063:7;1059:23;1055:32;1052:52;;;1100:1;1097;1090:12;1052:52;1139:9;1126:23;1158:31;1183:5;1158:31;:::i;:::-;1208:5;1260:2;1245:18;;;;1232:32;;-1:-1:-1;;;955:315:40:o;1528:127::-;1589:10;1584:3;1580:20;1577:1;1570:31;1620:4;1617:1;1610:15;1644:4;1641:1;1634:15;1660:1121;1744:6;1775:2;1818;1806:9;1797:7;1793:23;1789:32;1786:52;;;1834:1;1831;1824:12;1786:52;1874:9;1861:23;1903:18;1944:2;1936:6;1933:14;1930:34;;;1960:1;1957;1950:12;1930:34;1998:6;1987:9;1983:22;1973:32;;2043:7;2036:4;2032:2;2028:13;2024:27;2014:55;;2065:1;2062;2055:12;2014:55;2101:2;2088:16;2123:2;2119;2116:10;2113:36;;;2129:18;;:::i;:::-;2175:2;2172:1;2168:10;2207:2;2201:9;2270:2;2266:7;2261:2;2257;2253:11;2249:25;2241:6;2237:38;2325:6;2313:10;2310:22;2305:2;2293:10;2290:18;2287:46;2284:72;;;2336:18;;:::i;:::-;2372:2;2365:22;2422:18;;;2456:15;;;;-1:-1:-1;2498:11:40;;;2494:20;;;2526:19;;;2523:39;;;2558:1;2555;2548:12;2523:39;2582:11;;;;2602:148;2618:6;2613:3;2610:15;2602:148;;;2684:23;2703:3;2684:23;:::i;:::-;2672:36;;2635:12;;;;2728;;;;2602:148;;;2769:6;1660:1121;-1:-1:-1;;;;;;;;1660:1121:40:o;2786:248::-;2854:6;2862;2915:2;2903:9;2894:7;2890:23;2886:32;2883:52;;;2931:1;2928;2921:12;2883:52;-1:-1:-1;;2954:23:40;;;3024:2;3009:18;;;2996:32;;-1:-1:-1;2786:248:40:o;3269:180::-;3328:6;3381:2;3369:9;3360:7;3356:23;3352:32;3349:52;;;3397:1;3394;3387:12;3349:52;-1:-1:-1;3420:23:40;;3269:180;-1:-1:-1;3269:180:40:o;3873:127::-;3934:10;3929:3;3925:20;3922:1;3915:31;3965:4;3962:1;3955:15;3989:4;3986:1;3979:15;4005:554;4273:25;;;4329:2;4314:18;;4307:34;;;4372:2;4357:18;;4350:34;;;4260:3;4245:19;;4414:1;4403:13;;4393:47;;4420:18;;:::i;:::-;4471:2;4456:18;;4449:34;;;;-1:-1:-1;;;;;4520:32:40;;;;4540:3;4499:19;;;4492:61;4005:554;;-1:-1:-1;;;4005:554:40:o;4564:1430::-;4743:6;4751;4759;4767;4775;4783;4791;4799;4807;4815;4823:7;4832;4886:3;4874:9;4865:7;4861:23;4857:33;4854:53;;;4903:1;4900;4893:12;4854:53;4942:9;4929:23;4961:31;4986:5;4961:31;:::i;:::-;5011:5;-1:-1:-1;5068:2:40;5053:18;;5040:32;5081:33;5040:32;5081:33;:::i;:::-;5133:7;-1:-1:-1;5192:2:40;5177:18;;5164:32;5205:33;5164:32;5205:33;:::i;:::-;5257:7;-1:-1:-1;5316:2:40;5301:18;;5288:32;5329:33;5288:32;5329:33;:::i;:::-;5381:7;-1:-1:-1;5440:3:40;5425:19;;5412:33;5454;5412;5454;:::i;:::-;5506:7;-1:-1:-1;5565:3:40;5550:19;;5537:33;5579;5537;5579;:::i;:::-;5631:7;-1:-1:-1;5657:39:40;5691:3;5676:19;;5657:39;:::i;:::-;5647:49;;5715:39;5749:3;5738:9;5734:19;5715:39;:::i;:::-;5705:49;;5773:39;5807:3;5796:9;5792:19;5773:39;:::i;:::-;5763:49;;5831:39;5865:3;5854:9;5850:19;5831:39;:::i;:::-;5821:49;;5890:39;5924:3;5913:9;5909:19;5890:39;:::i;:::-;5879:50;;5949:39;5983:3;5972:9;5968:19;5949:39;:::i;:::-;5938:50;;4564:1430;;;;;;;;;;;;;;:::o;6898:548::-;7010:4;7039:2;7068;7057:9;7050:21;7100:6;7094:13;7143:6;7138:2;7127:9;7123:18;7116:34;7168:1;7178:140;7192:6;7189:1;7186:13;7178:140;;;7287:14;;;7283:23;;7277:30;7253:17;;;7272:2;7249:26;7242:66;7207:10;;7178:140;;;7182:3;7367:1;7362:2;7353:6;7342:9;7338:22;7334:31;7327:42;7437:2;7430;7426:7;7421:2;7413:6;7409:15;7405:29;7394:9;7390:45;7386:54;7378:62;;;;6898:548;;;;:::o;8307:805::-;8420:6;8428;8436;8444;8452;8460;8468;8521:3;8509:9;8500:7;8496:23;8492:33;8489:53;;;8538:1;8535;8528:12;8489:53;8574:9;8561:23;8551:33;;8634:2;8623:9;8619:18;8606:32;8647:31;8672:5;8647:31;:::i;:::-;8697:5;-1:-1:-1;8754:2:40;8739:18;;8726:32;8767:33;8726:32;8767:33;:::i;:::-;8819:7;-1:-1:-1;8878:2:40;8863:18;;8850:32;8891:33;8850:32;8891:33;:::i;:::-;8307:805;;;;-1:-1:-1;8307:805:40;;8997:3;8982:19;;8969:33;;9049:3;9034:19;;9021:33;;-1:-1:-1;9101:3:40;9086:19;;;9073:33;;-1:-1:-1;8307:805:40;-1:-1:-1;;8307:805:40:o;9769:184::-;9839:6;9892:2;9880:9;9871:7;9867:23;9863:32;9860:52;;;9908:1;9905;9898:12;9860:52;-1:-1:-1;9931:16:40;;9769:184;-1:-1:-1;9769:184:40:o;9958:398::-;10160:2;10142:21;;;10199:2;10179:18;;;10172:30;10238:34;10233:2;10218:18;;10211:62;-1:-1:-1;;;10304:2:40;10289:18;;10282:32;10346:3;10331:19;;9958:398::o;10361:274::-;-1:-1:-1;;;;;10553:32:40;;;;10535:51;;10617:2;10602:18;;10595:34;10523:2;10508:18;;10361:274::o;10640:127::-;10701:10;10696:3;10692:20;10689:1;10682:31;10732:4;10729:1;10722:15;10756:4;10753:1;10746:15;10772:127;10833:10;10828:3;10824:20;10821:1;10814:31;10864:4;10861:1;10854:15;10888:4;10885:1;10878:15;10904:120;10944:1;10970;10960:35;;10975:18;;:::i;:::-;-1:-1:-1;11009:9:40;;10904:120::o;11029:168::-;11102:9;;;11133;;11150:15;;;11144:22;;11130:37;11120:71;;11171:18;;:::i;11202:127::-;11263:10;11258:3;11254:20;11251:1;11244:31;11294:4;11291:1;11284:15;11318:4;11315:1;11308:15;11334:127;11395:10;11390:3;11386:20;11383:1;11376:31;11426:4;11423:1;11416:15;11450:4;11447:1;11440:15;11882:128;11949:9;;;11970:11;;;11967:37;;;11984:18;;:::i;12015:251::-;12085:6;12138:2;12126:9;12117:7;12113:23;12109:32;12106:52;;;12154:1;12151;12144:12;12106:52;12186:9;12180:16;12205:31;12230:5;12205:31;:::i;12271:136::-;12310:3;12338:5;12328:39;;12347:18;;:::i;:::-;-1:-1:-1;;;12383:18:40;;12271:136::o;13657:152::-;13750:1;13743:5;13740:12;13730:46;;13756:18;;:::i;:::-;13785;;13657:152::o;13814:446::-;14069:25;;;14125:2;14110:18;;14103:34;;;14168:2;14153:18;;14146:34;;;14056:3;14041:19;;14189:65;14250:2;14235:18;;14227:6;14189:65;:::i;14265:135::-;14304:3;14325:17;;;14322:43;;14345:18;;:::i;:::-;-1:-1:-1;14392:1:40;14381:13;;14265:135::o;14785:125::-;14850:9;;;14871:10;;;14868:36;;;14884:18;;:::i;18148:277::-;18215:6;18268:2;18256:9;18247:7;18243:23;18239:32;18236:52;;;18284:1;18281;18274:12;18236:52;18316:9;18310:16;18369:5;18362:13;18355:21;18348:5;18345:32;18335:60;;18391:1;18388;18381:12;20147:374;20373:25;;;20429:2;20414:18;;20407:34;;;20361:2;20346:18;;20450:65;20511:2;20496:18;;20488:6;20450:65;:::i;20526:112::-;20558:1;20584;20574:35;;20589:18;;:::i;:::-;-1:-1:-1;20623:9:40;;20526:112::o;21359:127::-;21420:10;21415:3;21411:20;21408:1;21401:31;21451:4;21448:1;21441:15;21475:4;21472:1;21465:15"
        },
        "gasEstimates": {
          "creation": {
            "codeDepositCost": "4728400",
            "executionCost": "31395",
            "totalCost": "4759795"
          },
          "external": {
            "BETA()": "287",
            "BOOTSTRAP_PERIOD()": "262",
            "BORROWING_FEE_FLOOR()": "487",
            "BaseFeeLMA_GAS_COMPENSATION()": "263",
            "CCR()": "308",
            "DECIMAL_PRECISION()": "285",
            "L_BaseFeeLMADebt()": "2363",
            "L_WStETH()": "2429",
            "MAX_BORROWING_FEE()": "286",
            "MCR()": "306",
            "MINUTE_DECAY_BORROWING_FACTOR()": "349",
            "MINUTE_DECAY_REDEMPTION_FACTOR()": "350",
            "MIN_NET_DEBT()": "352",
            "NAME()": "infinite",
            "PERCENT_DIVISOR()": "351",
            "REDEMPTION_FEE_FLOOR()": "468",
            "SECONDS_IN_ONE_MINUTE()": "285",
            "TroveOwners(uint256)": "4727",
            "Troves(address)": "9256",
            "_100pct()": "329",
            "activePool()": "2538",
            "addTroveOwnerToArray(address)": "infinite",
            "applyPendingRewards(address)": "infinite",
            "baseFeeLMAToken()": "2518",
            "batchLiquidateTroves(address[])": "infinite",
            "borrowBaseRate()": "2384",
            "borrowerOperationsAddress()": "2494",
            "checkRecoveryMode(uint256)": "infinite",
            "checkUnreliableRecoveryMode()": "infinite",
            "closeTrove(address)": "infinite",
            "decayBaseRateFromBorrowing()": "infinite",
            "decreaseTroveColl(address,uint256)": "27143",
            "decreaseTroveDebt(address,uint256)": "infinite",
            "defaultPool()": "2429",
            "feesRouter()": "2472",
            "getBorrowingFee(uint256)": "infinite",
            "getBorrowingFeeWithDecay(uint256)": "infinite",
            "getBorrowingRate(uint256)": "infinite",
            "getBorrowingRateWithDecay(uint256)": "infinite",
            "getCurrentICR(address,uint256)": "infinite",
            "getEntireDebtAndColl(address)": "infinite",
            "getEntireSystemColl()": "infinite",
            "getEntireSystemDebt()": "infinite",
            "getNominalICR(address)": "infinite",
            "getNormalLiquidationPrice(uint256,uint256)": "infinite",
            "getPendingBaseFeeLMADebtReward(address)": "infinite",
            "getPendingWStETHReward(address)": "infinite",
            "getRecoveryLiquidationPrice(uint256,uint256)": "infinite",
            "getRedemptionFeeWithDecay(uint256)": "infinite",
            "getRedemptionRate(uint256)": "infinite",
            "getRedemptionRateWithDecay(uint256)": "infinite",
            "getTCR(uint256)": "infinite",
            "getTroveColl(address)": "2671",
            "getTroveDebt(address)": "2642",
            "getTroveFromTroveOwnersArray(uint256)": "4798",
            "getTroveOwnersCount()": "2470",
            "getTroveStake(address)": "2671",
            "getTroveStatus(address)": "2660",
            "getUnreliableTCR()": "infinite",
            "getUnreliableTroveICR(address)": "infinite",
            "hasPendingRewards(address)": "6980",
            "hogStaking()": "2428",
            "hogToken()": "2452",
            "increaseTroveColl(address,uint256)": "27188",
            "increaseTroveDebt(address,uint256)": "infinite",
            "lastBaseFeeLMADebtError_Redistribution()": "2430",
            "lastBorrowTime()": "2451",
            "lastRedemptionTime()": "2383",
            "lastWStETHError_Redistribution()": "2428",
            "liquidate(address)": "infinite",
            "liquidateTroves(uint256)": "infinite",
            "owner()": "2490",
            "priceFeed()": "2428",
            "redeemCollateral(uint256,address,address,address,uint256,uint256,uint256)": "infinite",
            "redemptionBaseRate()": "2363",
            "removeStake(address)": "infinite",
            "renounceOwnership()": "infinite",
            "rewardSnapshots(address)": "4743",
            "setAddresses(address,address,address,address,address,address,address,address,address,address,address,address)": "infinite",
            "setTroveStatus(address,uint256)": "27024",
            "sortedTroves()": "2517",
            "stabilityPool()": "2431",
            "totalCollateralSnapshot()": "2407",
            "totalStakes()": "2407",
            "totalStakesSnapshot()": "2364",
            "transferOwnership(address)": "infinite",
            "updateBaseRateFromBorrowing(uint256)": "infinite",
            "updateStakeAndTotalStakes(address)": "infinite",
            "updateTroveRewardSnapshots(address)": "infinite"
          },
          "internal": {
            "_addLiquidationValuesToTotals(struct TroveManager.LiquidationTotals memory,struct TroveManager.LiquidationValues memory)": "infinite",
            "_addTroveOwnerToArray(address)": "75106",
            "_applyPendingRewards(contract IActivePool,contract IDefaultPool,address)": "infinite",
            "_calcBorrowingFee(uint256,uint256)": "infinite",
            "_calcBorrowingRate(uint256,uint256)": "infinite",
            "_calcDecayedBorrowBaseRate()": "infinite",
            "_calcDecayedRedemptionBaseRate()": "infinite",
            "_calcRedemptionFee(uint256,uint256)": "infinite",
            "_calcRedemptionRate(uint256,uint256)": "infinite",
            "_checkPotentialRecoveryMode(uint256,uint256,uint256)": "infinite",
            "_closeTrove(address,enum TroveManager.Status)": "infinite",
            "_computeNewStake(uint256)": "infinite",
            "_getCappedOffsetVals(uint256,uint256,uint256)": "infinite",
            "_getCurrentTroveAmounts(address)": "infinite",
            "_getOffsetAndRedistributionVals(uint256,uint256,uint256)": "infinite",
            "_getRedemptionFee(uint256)": "infinite",
            "_getTotalFromBatchLiquidate_RecoveryMode(contract IActivePool,contract IDefaultPool,uint256,uint256,address[] memory)": "infinite",
            "_getTotalsFromBatchLiquidate_NormalMode(contract IActivePool,contract IDefaultPool,uint256,uint256,address[] memory)": "infinite",
            "_getTotalsFromLiquidateTrovesSequence_NormalMode(contract IActivePool,contract IDefaultPool,uint256,uint256,uint256)": "infinite",
            "_getTotalsFromLiquidateTrovesSequence_RecoveryMode(struct TroveManager.ContractsCache memory,uint256,uint256,uint256)": "infinite",
            "_isValidFirstRedemptionHint(contract ISortedTroves,address,uint256)": "infinite",
            "_liquidateNormalMode(contract IActivePool,contract IDefaultPool,address,uint256)": "infinite",
            "_liquidateRecoveryMode(contract IActivePool,contract IDefaultPool,address,uint256,uint256,uint256,uint256)": "infinite",
            "_minutesPassedSinceLastBorrow()": "infinite",
            "_minutesPassedSinceLastRedemption()": "infinite",
            "_movePendingTroveRewardsToActivePool(contract IActivePool,contract IDefaultPool,uint256,uint256)": "infinite",
            "_redeemCloseTrove(struct TroveManager.ContractsCache memory,address,uint256,uint256)": "infinite",
            "_redeemCollateralFromTrove(struct TroveManager.ContractsCache memory,address,uint256,uint256,address,address,uint256)": "infinite",
            "_redistributeDebtAndColl(contract IActivePool,contract IDefaultPool,uint256,uint256)": "infinite",
            "_removeStake(address)": "31632",
            "_removeTroveOwner(address,uint256)": "infinite",
            "_requireAfterBootstrapPeriod()": "infinite",
            "_requireAmountGreaterThanZero(uint256)": "infinite",
            "_requireBaseFeeLMABalanceCoversRedemption(contract IBaseFeeLMAToken,address,uint256)": "infinite",
            "_requireCallerIsBorrowerOperations()": "infinite",
            "_requireMoreThanOneTroveInSystem(uint256)": "infinite",
            "_requireTCRoverMCR(uint256)": "infinite",
            "_requireTroveIsActive(address)": "infinite",
            "_requireValidMaxFeePercentage(uint256)": "infinite",
            "_sendGasCompensation(contract IActivePool,address,uint256,uint256)": "infinite",
            "_updateLastBorrowTime()": "infinite",
            "_updateLastRedemptionTime()": "infinite",
            "_updateRedemptionBaseRateFromRedemption(uint256,uint256,uint256)": "infinite",
            "_updateStakeAndTotalStakes(address)": "infinite",
            "_updateSystemSnapshots_excludeCollRemainder(contract IActivePool,uint256)": "infinite",
            "_updateTroveRewardSnapshots(address)": "infinite"
          }
        },
        "methodIdentifiers": {
          "BETA()": "071a7541",
          "BOOTSTRAP_PERIOD()": "c35bc550",
          "BORROWING_FEE_FLOOR()": "f92d3433",
          "BaseFeeLMA_GAS_COMPENSATION()": "a2014152",
          "CCR()": "5733d58f",
          "DECIMAL_PRECISION()": "a20baee6",
          "L_BaseFeeLMADebt()": "900e664b",
          "L_WStETH()": "bf9ebee2",
          "MAX_BORROWING_FEE()": "24092669",
          "MCR()": "794e5724",
          "MINUTE_DECAY_BORROWING_FACTOR()": "fb0cbd4b",
          "MINUTE_DECAY_REDEMPTION_FACTOR()": "7e024ad6",
          "MIN_NET_DEBT()": "1bf43555",
          "NAME()": "a3f4df7e",
          "PERCENT_DIVISOR()": "4870dd9a",
          "REDEMPTION_FEE_FLOOR()": "28d28b5b",
          "SECONDS_IN_ONE_MINUTE()": "61ec893d",
          "TroveOwners(uint256)": "756b253e",
          "Troves(address)": "6ef64338",
          "_100pct()": "72fe25aa",
          "activePool()": "7f7dde4a",
          "addTroveOwnerToArray(address)": "15d549f1",
          "applyPendingRewards(address)": "0b076557",
          "baseFeeLMAToken()": "8f913789",
          "batchLiquidateTroves(address[])": "1e8b1c2b",
          "borrowBaseRate()": "c3eb5c67",
          "borrowerOperationsAddress()": "b7f8cf9b",
          "checkRecoveryMode(uint256)": "4e443d9e",
          "checkUnreliableRecoveryMode()": "71f256e2",
          "closeTrove(address)": "cbd138ae",
          "decayBaseRateFromBorrowing()": "5dba4c4a",
          "decreaseTroveColl(address,uint256)": "d3d6f843",
          "decreaseTroveDebt(address,uint256)": "12610e92",
          "defaultPool()": "3cc74225",
          "feesRouter()": "c42dab99",
          "getBorrowingFee(uint256)": "631203b0",
          "getBorrowingFeeWithDecay(uint256)": "477d66cf",
          "getBorrowingRate(uint256)": "b36cd07f",
          "getBorrowingRateWithDecay(uint256)": "948ba6d2",
          "getCurrentICR(address,uint256)": "d293c710",
          "getEntireDebtAndColl(address)": "b91af97c",
          "getEntireSystemColl()": "887105d3",
          "getEntireSystemDebt()": "795d26c3",
          "getNominalICR(address)": "b0d8e181",
          "getNormalLiquidationPrice(uint256,uint256)": "47142aa3",
          "getPendingBaseFeeLMADebtReward(address)": "0c08ff5f",
          "getPendingWStETHReward(address)": "981c4f48",
          "getRecoveryLiquidationPrice(uint256,uint256)": "2d81dd56",
          "getRedemptionFeeWithDecay(uint256)": "d5b35635",
          "getRedemptionRate(uint256)": "58b8a5d6",
          "getRedemptionRateWithDecay(uint256)": "a22b7d68",
          "getTCR(uint256)": "b82f263d",
          "getTroveColl(address)": "480cd578",
          "getTroveDebt(address)": "d66a2553",
          "getTroveFromTroveOwnersArray(uint256)": "d9a72444",
          "getTroveOwnersCount()": "49eefeee",
          "getTroveStake(address)": "64cee260",
          "getTroveStatus(address)": "21e37801",
          "getUnreliableTCR()": "e1f787e9",
          "getUnreliableTroveICR(address)": "d6966297",
          "hasPendingRewards(address)": "e2ac77b0",
          "hogStaking()": "aead9dcc",
          "hogToken()": "570dc45e",
          "increaseTroveColl(address,uint256)": "72423c17",
          "increaseTroveDebt(address,uint256)": "9976cf45",
          "lastBaseFeeLMADebtError_Redistribution()": "1b199a64",
          "lastBorrowTime()": "c26c8800",
          "lastRedemptionTime()": "e3246349",
          "lastWStETHError_Redistribution()": "c91a7e2f",
          "liquidate(address)": "2f865568",
          "liquidateTroves(uint256)": "653d46e7",
          "owner()": "8da5cb5b",
          "priceFeed()": "741bef1a",
          "redeemCollateral(uint256,address,address,address,uint256,uint256,uint256)": "bcd37526",
          "redemptionBaseRate()": "bb6f030c",
          "removeStake(address)": "fe2ba848",
          "renounceOwnership()": "715018a6",
          "rewardSnapshots(address)": "1673c79a",
          "setAddresses(address,address,address,address,address,address,address,address,address,address,address,address)": "734f622d",
          "setTroveStatus(address,uint256)": "5d6b480f",
          "sortedTroves()": "ae918754",
          "stabilityPool()": "048c661d",
          "totalCollateralSnapshot()": "96d711ff",
          "totalStakes()": "bf9befb1",
          "totalStakesSnapshot()": "807d138d",
          "transferOwnership(address)": "f2fde38b",
          "updateBaseRateFromBorrowing(uint256)": "9f7adb5e",
          "updateStakeAndTotalStakes(address)": "18f2817a",
          "updateTroveRewardSnapshots(address)": "82fe3eb9"
        }
      },
      "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_activePoolAddress\",\"type\":\"address\"}],\"name\":\"ActivePoolAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newBaseFeeLMATokenAddress\",\"type\":\"address\"}],\"name\":\"BaseFeeLMATokenAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_borrowBaseRate\",\"type\":\"uint256\"}],\"name\":\"BorrowBaseRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newBorrowerOperationsAddress\",\"type\":\"address\"}],\"name\":\"BorrowerOperationsAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_collSurplusPoolAddress\",\"type\":\"address\"}],\"name\":\"CollSurplusPoolAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_defaultPoolAddress\",\"type\":\"address\"}],\"name\":\"DefaultPoolAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IFeesRouter\",\"name\":\"_feesRouter\",\"type\":\"address\"}],\"name\":\"FeesRouterAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_gasPoolAddress\",\"type\":\"address\"}],\"name\":\"GasPoolAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_hogStakingAddress\",\"type\":\"address\"}],\"name\":\"HOGStakingAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_hogTokenAddress\",\"type\":\"address\"}],\"name\":\"HOGTokenAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_L_WStETH\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_L_BaseFeeLMADebt\",\"type\":\"uint256\"}],\"name\":\"LTermsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_lastBorrowTime\",\"type\":\"uint256\"}],\"name\":\"LastBorrowTimeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_lastRedemptionTime\",\"type\":\"uint256\"}],\"name\":\"LastRedemptionTimeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_liquidatedDebt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_liquidatedColl\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_collGasCompensation\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_BaseFeeLMAGasCompensation\",\"type\":\"uint256\"}],\"name\":\"Liquidation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newPriceFeedAddress\",\"type\":\"address\"}],\"name\":\"PriceFeedAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_attemptedBaseFeeLMAAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_actualBaseFeeLMAAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_WStETHSent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_WStETHFee\",\"type\":\"uint256\"}],\"name\":\"Redemption\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_redemptionBaseRate\",\"type\":\"uint256\"}],\"name\":\"RedemptionBaseRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sortedTrovesAddress\",\"type\":\"address\"}],\"name\":\"SortedTrovesAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_stabilityPoolAddress\",\"type\":\"address\"}],\"name\":\"StabilityPoolAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalStakesSnapshot\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalCollateralSnapshot\",\"type\":\"uint256\"}],\"name\":\"SystemSnapshotsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newTotalStakes\",\"type\":\"uint256\"}],\"name\":\"TotalStakesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newIndex\",\"type\":\"uint256\"}],\"name\":\"TroveIndexUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_debt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_coll\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum TroveManager.TroveManagerOperation\",\"name\":\"_operation\",\"type\":\"uint8\"}],\"name\":\"TroveLiquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_L_WStETH\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_L_BaseFeeLMADebt\",\"type\":\"uint256\"}],\"name\":\"TroveSnapshotsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_debt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_coll\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_stake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum TroveManager.TroveManagerOperation\",\"name\":\"_operation\",\"type\":\"uint8\"}],\"name\":\"TroveUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BETA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BOOTSTRAP_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BORROWING_FEE_FLOOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BaseFeeLMA_GAS_COMPENSATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CCR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DECIMAL_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"L_BaseFeeLMADebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"L_WStETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BORROWING_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MCR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINUTE_DECAY_BORROWING_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINUTE_DECAY_REDEMPTION_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_NET_DEBT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENT_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REDEMPTION_FEE_FLOOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SECONDS_IN_ONE_MINUTE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"TroveOwners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Troves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"coll\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"enum TroveManager.Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"arrayIndex\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_100pct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activePool\",\"outputs\":[{\"internalType\":\"contract IActivePool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"addTroveOwnerToArray\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"applyPendingRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseFeeLMAToken\",\"outputs\":[{\"internalType\":\"contract IBaseFeeLMAToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_troveArray\",\"type\":\"address[]\"}],\"name\":\"batchLiquidateTroves\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowBaseRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowerOperationsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"checkRecoveryMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkUnreliableRecoveryMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"closeTrove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decayBaseRateFromBorrowing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_collDecrease\",\"type\":\"uint256\"}],\"name\":\"decreaseTroveColl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_debtDecrease\",\"type\":\"uint256\"}],\"name\":\"decreaseTroveDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultPool\",\"outputs\":[{\"internalType\":\"contract IDefaultPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feesRouter\",\"outputs\":[{\"internalType\":\"contract IFeesRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_BaseFeeLMADebt\",\"type\":\"uint256\"}],\"name\":\"getBorrowingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_BaseFeeLMADebt\",\"type\":\"uint256\"}],\"name\":\"getBorrowingFeeWithDecay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_issuedBaseFeeLMA\",\"type\":\"uint256\"}],\"name\":\"getBorrowingRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_issuedBaseFeeLMA\",\"type\":\"uint256\"}],\"name\":\"getBorrowingRateWithDecay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"getCurrentICR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getEntireDebtAndColl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"coll\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingBaseFeeLMADebtReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingWStETHReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntireSystemColl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"entireSystemColl\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntireSystemDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"entireSystemDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getNominalICR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_coll\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_debt\",\"type\":\"uint256\"}],\"name\":\"getNormalLiquidationPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getPendingBaseFeeLMADebtReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getPendingWStETHReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_coll\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_debt\",\"type\":\"uint256\"}],\"name\":\"getRecoveryLiquidationPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_WStETHDrawn\",\"type\":\"uint256\"}],\"name\":\"getRedemptionFeeWithDecay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_redemptionColl\",\"type\":\"uint256\"}],\"name\":\"getRedemptionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_redemptionColl\",\"type\":\"uint256\"}],\"name\":\"getRedemptionRateWithDecay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"getTCR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getTroveColl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getTroveDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getTroveFromTroveOwnersArray\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTroveOwnersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getTroveStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getTroveStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnreliableTCR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getUnreliableTroveICR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"hasPendingRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hogStaking\",\"outputs\":[{\"internalType\":\"contract IHOGStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hogToken\",\"outputs\":[{\"internalType\":\"contract IHOGToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_collIncrease\",\"type\":\"uint256\"}],\"name\":\"increaseTroveColl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_debtIncrease\",\"type\":\"uint256\"}],\"name\":\"increaseTroveDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastBaseFeeLMADebtError_Redistribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastBorrowTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRedemptionTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastWStETHError_Redistribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_n\",\"type\":\"uint256\"}],\"name\":\"liquidateTroves\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract IPriceFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_BaseFeeLMAamount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_firstRedemptionHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_upperPartialRedemptionHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lowerPartialRedemptionHint\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_partialRedemptionHintNICR\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxIterations\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxFeePercentage\",\"type\":\"uint256\"}],\"name\":\"redeemCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redemptionBaseRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"removeStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardSnapshots\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"WStETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"BaseFeeLMADebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrowerOperationsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_activePoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_defaultPoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stabilityPoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gasPoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collSurplusPoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceFeedAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_baseFeeLMATokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sortedTrovesAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_hogTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_hogStakingAddress\",\"type\":\"address\"},{\"internalType\":\"contract IFeesRouter\",\"name\":\"_feesRouterAddress\",\"type\":\"address\"}],\"name\":\"setAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_num\",\"type\":\"uint256\"}],\"name\":\"setTroveStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sortedTroves\",\"outputs\":[{\"internalType\":\"contract ISortedTroves\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stabilityPool\",\"outputs\":[{\"internalType\":\"contract IStabilityPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCollateralSnapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakesSnapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newBaseRate\",\"type\":\"uint256\"}],\"name\":\"updateBaseRateFromBorrowing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"updateStakeAndTotalStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"updateTroveRewardSnapshots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getCurrentICR(address,uint256)\":{\"notice\":\"HEDGEHOG UPDATES: Get Price directly from the price feed instead of param passing\"}},\"notice\":\"Fork of Liquity's TroveManager. Most of the Logic remains unchanged. Changes to the contract: - Raised pragma version - Removed an import of ActivePool Interface - Logic updates with redemption & borrowing fees calculation and their distribution Even though SafeMath is no longer required, the decision was made to keep it to avoid human factor errors\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TroveManager.sol\":\"TroveManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"contracts/TroveManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./interfaces/ITroveManager.sol\\\";\\nimport \\\"./interfaces/IStabilityPool.sol\\\";\\nimport \\\"./interfaces/ICollSurplusPool.sol\\\";\\nimport \\\"./interfaces/IBaseFeeLMAToken.sol\\\";\\nimport \\\"./interfaces/ISortedTroves.sol\\\";\\nimport \\\"./interfaces/IHOGToken.sol\\\";\\nimport \\\"./interfaces/IHOGStaking.sol\\\";\\nimport \\\"./interfaces/IFeesRouter.sol\\\";\\nimport \\\"./dependencies/HedgehogBase.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./dependencies/CheckContract.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\n/**\\n * @notice Fork of Liquity's TroveManager. Most of the Logic remains unchanged.\\n * Changes to the contract:\\n * - Raised pragma version\\n * - Removed an import of ActivePool Interface\\n * - Logic updates with redemption & borrowing fees calculation and their distribution\\n * Even though SafeMath is no longer required, the decision was made to keep it to avoid human factor errors\\n */\\n\\ncontract TroveManager is HedgehogBase, Ownable, CheckContract {\\n    using SafeMath for uint256;\\n    string public constant NAME = \\\"TroveManager\\\";\\n\\n    // --- Connected contract declarations ---\\n\\n    address public borrowerOperationsAddress;\\n\\n    IStabilityPool public stabilityPool;\\n\\n    address gasPoolAddress;\\n\\n    ICollSurplusPool collSurplusPool;\\n\\n    IBaseFeeLMAToken public baseFeeLMAToken;\\n\\n    IHOGToken public hogToken;\\n\\n    IHOGStaking public hogStaking;\\n\\n    IFeesRouter public feesRouter;\\n\\n    // A doubly linked list of Troves, sorted by their sorted by their collateral ratios\\n    ISortedTroves public sortedTroves;\\n\\n    // --- Data structures ---\\n\\n    uint public constant SECONDS_IN_ONE_MINUTE = 60;\\n    /*\\n     * Half-life of 12h. 12h = 720 min\\n     * (1/2) = d^720 => d = (1/2)^(1/720)\\n     */\\n    uint public constant MINUTE_DECAY_REDEMPTION_FACTOR = 999037758833783000;\\n    uint public constant MINUTE_DECAY_BORROWING_FACTOR = 991152865945140000;\\n    uint public constant REDEMPTION_FEE_FLOOR = (DECIMAL_PRECISION / 1000) * 5; // 0.5%\\n    uint public constant MAX_BORROWING_FEE = DECIMAL_PRECISION; // 100%\\n\\n    // During bootsrap period redemptions are not allowed\\n    uint public constant BOOTSTRAP_PERIOD = 14 days;\\n\\n    /*\\n     * BETA: 18 digit decimal. Parameter by which to divide the redeemed fraction, in order to calc the new base rate from a redemption.\\n     * Corresponds to (1 / ALPHA) in the white paper.\\n     */\\n    uint public constant BETA = 2;\\n\\n    // HEDGEHOG LOGIC UPDATES: BaseRate is different for redemption and minting tokens\\n    // 1) Remove baseRate variable\\n    // 2) Create redemptionBaseRate public state variable\\n    // 3) Create borrowBaseRate public state variable\\n    uint public redemptionBaseRate;\\n    uint public borrowBaseRate;\\n\\n    // HEDGEHOG LOGIC UPDATES: lastFeeOperationTime is different for redemption and minting tokens\\n    // 1) Remove lastFeeOperationTime variable\\n    // 2) Create lastRedemptionTime public state variable\\n    // 3) Create lastBorrowTime public state variable\\n    uint public lastRedemptionTime;\\n    uint public lastBorrowTime;\\n\\n    enum Status {\\n        nonExistent,\\n        active,\\n        closedByOwner,\\n        closedByLiquidation,\\n        closedByRedemption\\n    }\\n\\n    // Store the necessary data for a trove\\n    struct Trove {\\n        uint debt;\\n        uint coll;\\n        uint stake;\\n        Status status;\\n        uint128 arrayIndex;\\n    }\\n\\n    mapping(address => Trove) public Troves;\\n\\n    uint public totalStakes;\\n\\n    // Snapshot of the value of totalStakes, taken immediately after the latest liquidation\\n    uint public totalStakesSnapshot;\\n\\n    // Snapshot of the total collateral across the ActivePool and DefaultPool, immediately after the latest liquidation.\\n    uint public totalCollateralSnapshot;\\n\\n    /*\\n     * L_WStETH and L_BaseFeeLMADebt track the sums of accumulated liquidation rewards per unit staked. During its lifetime, each stake earns:\\n     *\\n     * An WStETH gain of ( stake * [L_WStETH - L_WStETH(0)] )\\n     * A BaseFeeLMADebt increase  of ( stake * [L_BaseFeeLMADebt - L_BaseFeeLMADebt(0)] )\\n     *\\n     * Where L_WStETH(0) and L_BaseFeeLMADebt(0) are snapshots of L_WStETH and L_BaseFeeLMADebt for the active Trove taken at the instant the stake was made\\n     */\\n    uint public L_WStETH;\\n    uint public L_BaseFeeLMADebt;\\n\\n    // Map addresses with active troves to their RewardSnapshot\\n    mapping(address => RewardSnapshot) public rewardSnapshots;\\n\\n    // Object containing the WStETH and BaseFeeLMA snapshots for a given active trove\\n    struct RewardSnapshot {\\n        uint WStETH;\\n        uint BaseFeeLMADebt;\\n    }\\n\\n    // Array of all active trove addresses - used to to compute an approximate hint off-chain, for the sorted list insertion\\n    address[] public TroveOwners;\\n\\n    // Error trackers for the trove redistribution calculation\\n    uint public lastWStETHError_Redistribution;\\n    uint public lastBaseFeeLMADebtError_Redistribution;\\n\\n    /*\\n     * --- Variable container structs for liquidations ---\\n     *\\n     * These structs are used to hold, return and assign variables inside the liquidation functions,\\n     * in order to avoid the error: \\\"CompilerError: Stack too deep\\\".\\n     **/\\n\\n    struct LocalVariables_OuterLiquidationFunction {\\n        uint price;\\n        uint BaseFeeLMAInStabPool;\\n        bool recoveryModeAtStart;\\n        uint liquidatedDebt;\\n        uint liquidatedColl;\\n    }\\n\\n    struct LocalVariables_InnerSingleLiquidateFunction {\\n        uint collToLiquidate;\\n        uint pendingDebtReward;\\n        uint pendingCollReward;\\n    }\\n\\n    struct LocalVariables_LiquidationSequence {\\n        uint remainingBaseFeeLMAInStabPool;\\n        uint i;\\n        uint ICR;\\n        address user;\\n        bool backToNormalMode;\\n        uint entireSystemDebt;\\n        uint entireSystemColl;\\n    }\\n\\n    struct LiquidationValues {\\n        uint entireTroveDebt;\\n        uint entireTroveColl;\\n        uint collGasCompensation;\\n        uint BaseFeeLMAGasCompensation;\\n        uint debtToOffset;\\n        uint collToSendToSP;\\n        uint debtToRedistribute;\\n        uint collToRedistribute;\\n        uint collSurplus;\\n    }\\n\\n    struct LiquidationTotals {\\n        uint totalCollInSequence;\\n        uint totalDebtInSequence;\\n        uint totalCollGasCompensation;\\n        uint totalBaseFeeLMAGasCompensation;\\n        uint totalDebtToOffset;\\n        uint totalCollToSendToSP;\\n        uint totalDebtToRedistribute;\\n        uint totalCollToRedistribute;\\n        uint totalCollSurplus;\\n    }\\n\\n    struct ContractsCache {\\n        IActivePool activePool;\\n        IDefaultPool defaultPool;\\n        IBaseFeeLMAToken baseFeeLMAToken;\\n        IHOGStaking hogStaking;\\n        ISortedTroves sortedTroves;\\n        ICollSurplusPool collSurplusPool;\\n        address gasPoolAddress;\\n    }\\n    // --- Variable container structs for redemptions ---\\n\\n    struct RedemptionTotals {\\n        uint remainingBaseFeeLMA;\\n        uint totalBaseFeeLMAToRedeem;\\n        uint totalWStETHDrawn;\\n        uint WStETHFee;\\n        uint WStETHToSendToRedeemer;\\n        // HEDGEHOG LOGIC UPDATES: BaseRate is different for redemption and minting tokens\\n        // Rename decayedBaseRate into decayedRedemptionBaseRate\\n        uint decayedRedemptionBaseRate;\\n        uint price;\\n        uint totalBaseFeeLMASupplyAtStart;\\n    }\\n\\n    struct SingleRedemptionValues {\\n        uint BaseFeeLMALot;\\n        uint WStETHLot;\\n        bool cancelledPartial;\\n    }\\n\\n    // --- Events ---\\n\\n    event BorrowerOperationsAddressChanged(\\n        address _newBorrowerOperationsAddress\\n    );\\n    event PriceFeedAddressChanged(address _newPriceFeedAddress);\\n    event BaseFeeLMATokenAddressChanged(address _newBaseFeeLMATokenAddress);\\n    event ActivePoolAddressChanged(address _activePoolAddress);\\n    event DefaultPoolAddressChanged(address _defaultPoolAddress);\\n    event StabilityPoolAddressChanged(address _stabilityPoolAddress);\\n    event GasPoolAddressChanged(address _gasPoolAddress);\\n    event CollSurplusPoolAddressChanged(address _collSurplusPoolAddress);\\n    event SortedTrovesAddressChanged(address _sortedTrovesAddress);\\n    event HOGTokenAddressChanged(address _hogTokenAddress);\\n    event HOGStakingAddressChanged(address _hogStakingAddress);\\n    event FeesRouterAddressUpdated(IFeesRouter _feesRouter);\\n\\n    event Liquidation(\\n        uint _liquidatedDebt,\\n        uint _liquidatedColl,\\n        uint _collGasCompensation,\\n        uint _BaseFeeLMAGasCompensation\\n    );\\n    event Redemption(\\n        uint _attemptedBaseFeeLMAAmount,\\n        uint _actualBaseFeeLMAAmount,\\n        uint _WStETHSent,\\n        uint _WStETHFee\\n    );\\n    event TroveUpdated(\\n        address indexed _borrower,\\n        uint _debt,\\n        uint _coll,\\n        uint _stake,\\n        TroveManagerOperation _operation\\n    );\\n    event TroveLiquidated(\\n        address indexed _borrower,\\n        uint _debt,\\n        uint _coll,\\n        TroveManagerOperation _operation\\n    );\\n\\n    // HEDGEHOG LOGIC UPDATES: BaseRate is different for redemption and minting tokens\\n    // 1) Remove BaseRateUpdated event\\n    // 2) Create RedemptionBaseRateUpdated event that accepts _redemptionBaseRate\\n    // 3) Create BorrowBaseRateUpdated event that accepts _borrowBaseRate\\n    event RedemptionBaseRateUpdated(uint _redemptionBaseRate);\\n    event BorrowBaseRateUpdated(uint _borrowBaseRate);\\n\\n    // HEDGEHOG LOGIC UPDATES: BaseRate is different for redemption and minting tokens\\n    // 1) Remove LastFeeOpTimeUpdated event\\n    // 2) Create LastRedemptionTimeUpdated event that accepts _lastRedemptionTime\\n    // 3) Create LastBorrowTimeUpdated event that accepts _lastBorrowTime\\n    event LastRedemptionTimeUpdated(uint _lastRedemptionTime);\\n    event LastBorrowTimeUpdated(uint _lastBorrowTime);\\n    event TotalStakesUpdated(uint _newTotalStakes);\\n    event SystemSnapshotsUpdated(\\n        uint _totalStakesSnapshot,\\n        uint _totalCollateralSnapshot\\n    );\\n    event LTermsUpdated(uint _L_WStETH, uint _L_BaseFeeLMADebt);\\n    event TroveSnapshotsUpdated(uint _L_WStETH, uint _L_BaseFeeLMADebt);\\n    event TroveIndexUpdated(address _borrower, uint _newIndex);\\n\\n    enum TroveManagerOperation {\\n        applyPendingRewards,\\n        liquidateInNormalMode,\\n        liquidateInRecoveryMode,\\n        redeemCollateral\\n    }\\n\\n    // --- Dependency setter ---\\n\\n    function setAddresses(\\n        address _borrowerOperationsAddress,\\n        address _activePoolAddress,\\n        address _defaultPoolAddress,\\n        address _stabilityPoolAddress,\\n        address _gasPoolAddress,\\n        address _collSurplusPoolAddress,\\n        address _priceFeedAddress,\\n        address _baseFeeLMATokenAddress,\\n        address _sortedTrovesAddress,\\n        address _hogTokenAddress,\\n        address _hogStakingAddress,\\n        IFeesRouter _feesRouterAddress\\n    ) external onlyOwner {\\n        checkContract(_borrowerOperationsAddress);\\n        checkContract(_activePoolAddress);\\n        checkContract(_defaultPoolAddress);\\n        checkContract(_stabilityPoolAddress);\\n        checkContract(_gasPoolAddress);\\n        checkContract(_collSurplusPoolAddress);\\n        checkContract(_priceFeedAddress);\\n        checkContract(_baseFeeLMATokenAddress);\\n        checkContract(_sortedTrovesAddress);\\n        checkContract(_hogTokenAddress);\\n        checkContract(_hogStakingAddress);\\n        checkContract(address(_feesRouterAddress));\\n\\n        borrowerOperationsAddress = _borrowerOperationsAddress;\\n        activePool = IActivePool(_activePoolAddress);\\n        defaultPool = IDefaultPool(_defaultPoolAddress);\\n        stabilityPool = IStabilityPool(_stabilityPoolAddress);\\n        gasPoolAddress = _gasPoolAddress;\\n        collSurplusPool = ICollSurplusPool(_collSurplusPoolAddress);\\n        priceFeed = IPriceFeed(_priceFeedAddress);\\n        baseFeeLMAToken = IBaseFeeLMAToken(_baseFeeLMATokenAddress);\\n        sortedTroves = ISortedTroves(_sortedTrovesAddress);\\n        hogToken = IHOGToken(_hogTokenAddress);\\n        hogStaking = IHOGStaking(_hogStakingAddress);\\n        feesRouter = IFeesRouter(_feesRouterAddress);\\n\\n        emit BorrowerOperationsAddressChanged(_borrowerOperationsAddress);\\n        emit ActivePoolAddressChanged(_activePoolAddress);\\n        emit DefaultPoolAddressChanged(_defaultPoolAddress);\\n        emit StabilityPoolAddressChanged(_stabilityPoolAddress);\\n        emit GasPoolAddressChanged(_gasPoolAddress);\\n        emit CollSurplusPoolAddressChanged(_collSurplusPoolAddress);\\n        emit PriceFeedAddressChanged(_priceFeedAddress);\\n        emit BaseFeeLMATokenAddressChanged(_baseFeeLMATokenAddress);\\n        emit SortedTrovesAddressChanged(_sortedTrovesAddress);\\n        emit HOGTokenAddressChanged(_hogTokenAddress);\\n        emit HOGStakingAddressChanged(_hogStakingAddress);\\n        emit FeesRouterAddressUpdated(_feesRouterAddress);\\n\\n        renounceOwnership();\\n    }\\n\\n    // --- Getters ---\\n\\n    function getTroveOwnersCount() external view returns (uint) {\\n        return TroveOwners.length;\\n    }\\n\\n    function getTroveFromTroveOwnersArray(\\n        uint _index\\n    ) external view returns (address) {\\n        return TroveOwners[_index];\\n    }\\n\\n    // --- Trove Liquidation functions ---\\n\\n    // Single liquidation function. Closes the trove if its ICR is lower than the minimum collateral ratio.\\n    function liquidate(address _borrower) external {\\n        _requireTroveIsActive(_borrower);\\n\\n        address[] memory borrowers = new address[](1);\\n        borrowers[0] = _borrower;\\n        batchLiquidateTroves(borrowers);\\n    }\\n\\n    // --- Inner single liquidation functions ---\\n\\n    // Liquidate one trove, in Normal Mode.\\n    function _liquidateNormalMode(\\n        IActivePool _activePool,\\n        IDefaultPool _defaultPool,\\n        address _borrower,\\n        uint _BaseFeeLMAInStabPool\\n    ) internal returns (LiquidationValues memory singleLiquidation) {\\n        LocalVariables_InnerSingleLiquidateFunction memory vars;\\n\\n        (\\n            singleLiquidation.entireTroveDebt,\\n            singleLiquidation.entireTroveColl,\\n            vars.pendingDebtReward,\\n            vars.pendingCollReward\\n        ) = getEntireDebtAndColl(_borrower);\\n\\n        _movePendingTroveRewardsToActivePool(\\n            _activePool,\\n            _defaultPool,\\n            vars.pendingDebtReward,\\n            vars.pendingCollReward\\n        );\\n        _removeStake(_borrower);\\n\\n        singleLiquidation.collGasCompensation = _getCollGasCompensation(\\n            singleLiquidation.entireTroveColl\\n        );\\n\\n        singleLiquidation\\n            .BaseFeeLMAGasCompensation = BaseFeeLMA_GAS_COMPENSATION; // TODO: Why is that being done if BaseFeeLMA_GAS_COMP is static\\n        uint collToLiquidate = singleLiquidation.entireTroveColl.sub(\\n            singleLiquidation.collGasCompensation\\n        );\\n\\n        (\\n            singleLiquidation.debtToOffset,\\n            singleLiquidation.collToSendToSP,\\n            singleLiquidation.debtToRedistribute,\\n            singleLiquidation.collToRedistribute\\n        ) = _getOffsetAndRedistributionVals(\\n            singleLiquidation.entireTroveDebt,\\n            collToLiquidate,\\n            _BaseFeeLMAInStabPool\\n        );\\n\\n        _closeTrove(_borrower, Status.closedByLiquidation);\\n        emit TroveLiquidated(\\n            _borrower,\\n            singleLiquidation.entireTroveDebt,\\n            singleLiquidation.entireTroveColl,\\n            TroveManagerOperation.liquidateInNormalMode\\n        );\\n        emit TroveUpdated(\\n            _borrower,\\n            0,\\n            0,\\n            0,\\n            TroveManagerOperation.liquidateInNormalMode\\n        );\\n        return singleLiquidation;\\n    }\\n\\n    // Liquidate one trove, in Recovery Mode.\\n    function _liquidateRecoveryMode(\\n        IActivePool _activePool,\\n        IDefaultPool _defaultPool,\\n        address _borrower,\\n        uint _ICR,\\n        uint _BaseFeeLMAInStabPool,\\n        uint _TCR,\\n        uint _price\\n    ) internal returns (LiquidationValues memory singleLiquidation) {\\n        LocalVariables_InnerSingleLiquidateFunction memory vars;\\n        if (TroveOwners.length <= 1) {\\n            return singleLiquidation;\\n        } // don't liquidate if last trove\\n        (\\n            singleLiquidation.entireTroveDebt,\\n            singleLiquidation.entireTroveColl,\\n            vars.pendingDebtReward,\\n            vars.pendingCollReward\\n        ) = getEntireDebtAndColl(_borrower);\\n\\n        singleLiquidation.collGasCompensation = _getCollGasCompensation(\\n            singleLiquidation.entireTroveColl\\n        );\\n        singleLiquidation\\n            .BaseFeeLMAGasCompensation = BaseFeeLMA_GAS_COMPENSATION;\\n        vars.collToLiquidate = singleLiquidation.entireTroveColl.sub(\\n            singleLiquidation.collGasCompensation\\n        );\\n\\n        // If ICR <= 100%, purely redistribute the Trove across all active Troves\\n        if (_ICR <= _100pct) {\\n            _movePendingTroveRewardsToActivePool(\\n                _activePool,\\n                _defaultPool,\\n                vars.pendingDebtReward,\\n                vars.pendingCollReward\\n            );\\n            _removeStake(_borrower);\\n\\n            singleLiquidation.debtToOffset = 0;\\n            singleLiquidation.collToSendToSP = 0;\\n            singleLiquidation.debtToRedistribute = singleLiquidation\\n                .entireTroveDebt;\\n            singleLiquidation.collToRedistribute = vars.collToLiquidate;\\n\\n            _closeTrove(_borrower, Status.closedByLiquidation);\\n            emit TroveLiquidated(\\n                _borrower,\\n                singleLiquidation.entireTroveDebt,\\n                singleLiquidation.entireTroveColl,\\n                TroveManagerOperation.liquidateInRecoveryMode\\n            );\\n            emit TroveUpdated(\\n                _borrower,\\n                0,\\n                0,\\n                0,\\n                TroveManagerOperation.liquidateInRecoveryMode\\n            );\\n\\n            // If 100% < ICR < MCR, offset as much as possible, and redistribute the remainder\\n        } else if ((_ICR > _100pct) && (_ICR < MCR)) {\\n            _movePendingTroveRewardsToActivePool(\\n                _activePool,\\n                _defaultPool,\\n                vars.pendingDebtReward,\\n                vars.pendingCollReward\\n            );\\n            _removeStake(_borrower);\\n\\n            (\\n                singleLiquidation.debtToOffset,\\n                singleLiquidation.collToSendToSP,\\n                singleLiquidation.debtToRedistribute,\\n                singleLiquidation.collToRedistribute\\n            ) = _getOffsetAndRedistributionVals(\\n                singleLiquidation.entireTroveDebt,\\n                vars.collToLiquidate,\\n                _BaseFeeLMAInStabPool\\n            );\\n\\n            _closeTrove(_borrower, Status.closedByLiquidation);\\n            emit TroveLiquidated(\\n                _borrower,\\n                singleLiquidation.entireTroveDebt,\\n                singleLiquidation.entireTroveColl,\\n                TroveManagerOperation.liquidateInRecoveryMode\\n            );\\n            emit TroveUpdated(\\n                _borrower,\\n                0,\\n                0,\\n                0,\\n                TroveManagerOperation.liquidateInRecoveryMode\\n            );\\n            /*\\n             * If 110% <= ICR < current TCR (accounting for the preceding liquidations in the current sequence)\\n             * and there is BaseFeeLMA in the Stability Pool, only offset, with no redistribution,\\n             * but at a capped rate of 1.1 and only if the whole debt can be liquidated.\\n             * The remainder due to the capped rate will be claimable as collateral surplus.\\n             */\\n        } else if (\\n            (_ICR >= MCR) &&\\n            (_ICR < _TCR) &&\\n            (singleLiquidation.entireTroveDebt <= _BaseFeeLMAInStabPool)\\n        ) {\\n            _movePendingTroveRewardsToActivePool(\\n                _activePool,\\n                _defaultPool,\\n                vars.pendingDebtReward,\\n                vars.pendingCollReward\\n            );\\n            assert(_BaseFeeLMAInStabPool != 0);\\n\\n            _removeStake(_borrower);\\n            singleLiquidation = _getCappedOffsetVals(\\n                singleLiquidation.entireTroveDebt,\\n                singleLiquidation.entireTroveColl,\\n                _price\\n            );\\n\\n            _closeTrove(_borrower, Status.closedByLiquidation);\\n            if (singleLiquidation.collSurplus > 0) {\\n                collSurplusPool.accountSurplus(\\n                    _borrower,\\n                    singleLiquidation.collSurplus\\n                );\\n            }\\n\\n            emit TroveLiquidated(\\n                _borrower,\\n                singleLiquidation.entireTroveDebt,\\n                singleLiquidation.collToSendToSP,\\n                TroveManagerOperation.liquidateInRecoveryMode\\n            );\\n            emit TroveUpdated(\\n                _borrower,\\n                0,\\n                0,\\n                0,\\n                TroveManagerOperation.liquidateInRecoveryMode\\n            );\\n        } else {\\n            // if (_ICR >= MCR && ( _ICR >= _TCR || singleLiquidation.entireTroveDebt > _BaseFeeLMAInStabPool))\\n            LiquidationValues memory zeroVals;\\n            return zeroVals;\\n        }\\n\\n        return singleLiquidation;\\n    }\\n\\n    /* In a full liquidation, returns the values for a trove's coll and debt to be offset, and coll and debt to be\\n     * redistributed to active troves.\\n     */\\n    function _getOffsetAndRedistributionVals(\\n        uint _debt,\\n        uint _coll,\\n        uint _BaseFeeLMAInStabPool\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint debtToOffset,\\n            uint collToSendToSP,\\n            uint debtToRedistribute,\\n            uint collToRedistribute\\n        )\\n    {\\n        if (_BaseFeeLMAInStabPool > 0) {\\n            /*\\n             * Offset as much debt & collateral as possible against the Stability Pool, and redistribute the remainder\\n             * between all active troves.\\n             *\\n             *  If the trove's debt is larger than the deposited BaseFeeLMA in the Stability Pool:\\n             *\\n             *  - Offset an amount of the trove's debt equal to the BaseFeeLMA in the Stability Pool\\n             *  - Send a fraction of the trove's collateral to the Stability Pool, equal to the fraction of its offset debt\\n             *\\n             */\\n            debtToOffset = LiquityMath._min(_debt, _BaseFeeLMAInStabPool);\\n            collToSendToSP = _coll.mul(debtToOffset).div(_debt);\\n            debtToRedistribute = _debt.sub(debtToOffset);\\n            collToRedistribute = _coll.sub(collToSendToSP);\\n        } else {\\n            debtToOffset = 0;\\n            collToSendToSP = 0;\\n            debtToRedistribute = _debt;\\n            collToRedistribute = _coll;\\n        }\\n    }\\n\\n    /*\\n     *  Get its offset coll/debt and WStETH gas comp, and close the trove.\\n     */\\n    function _getCappedOffsetVals(\\n        uint _entireTroveDebt,\\n        uint _entireTroveColl,\\n        uint _price\\n    ) internal pure returns (LiquidationValues memory singleLiquidation) {\\n        singleLiquidation.entireTroveDebt = _entireTroveDebt;\\n        singleLiquidation.entireTroveColl = _entireTroveColl;\\n        uint cappedCollPortion = _entireTroveDebt.mul(MCR).div(_price);\\n\\n        singleLiquidation.collGasCompensation = _getCollGasCompensation(\\n            cappedCollPortion\\n        );\\n        singleLiquidation\\n            .BaseFeeLMAGasCompensation = BaseFeeLMA_GAS_COMPENSATION;\\n\\n        singleLiquidation.debtToOffset = _entireTroveDebt;\\n        singleLiquidation.collToSendToSP = cappedCollPortion.sub(\\n            singleLiquidation.collGasCompensation\\n        );\\n        singleLiquidation.collSurplus = _entireTroveColl.sub(cappedCollPortion);\\n        singleLiquidation.debtToRedistribute = 0;\\n        singleLiquidation.collToRedistribute = 0;\\n    }\\n\\n    /*\\n     * Liquidate a sequence of troves. Closes a maximum number of n under-collateralized Troves,\\n     * starting from the one with the lowest collateral ratio in the system, and moving upwards\\n     */\\n    function liquidateTroves(uint _n) external {\\n        ContractsCache memory contractsCache = ContractsCache(\\n            activePool,\\n            defaultPool,\\n            IBaseFeeLMAToken(address(0)),\\n            IHOGStaking(address(0)),\\n            sortedTroves,\\n            ICollSurplusPool(address(0)),\\n            address(0)\\n        );\\n        IStabilityPool stabilityPoolCached = stabilityPool;\\n\\n        LocalVariables_OuterLiquidationFunction memory vars;\\n\\n        LiquidationTotals memory totals;\\n\\n        vars.price = priceFeed.fetchPrice();\\n        vars.BaseFeeLMAInStabPool = stabilityPoolCached\\n            .getTotalBaseFeeLMADeposits();\\n        vars.recoveryModeAtStart = _checkRecoveryMode(vars.price);\\n\\n        // Perform the appropriate liquidation sequence - tally the values, and obtain their totals\\n        if (vars.recoveryModeAtStart) {\\n            totals = _getTotalsFromLiquidateTrovesSequence_RecoveryMode(\\n                contractsCache,\\n                vars.price,\\n                vars.BaseFeeLMAInStabPool,\\n                _n\\n            );\\n        } else {\\n            // if !vars.recoveryModeAtStart\\n            totals = _getTotalsFromLiquidateTrovesSequence_NormalMode(\\n                contractsCache.activePool,\\n                contractsCache.defaultPool,\\n                vars.price,\\n                vars.BaseFeeLMAInStabPool,\\n                _n\\n            );\\n        }\\n\\n        require(\\n            totals.totalDebtInSequence > 0,\\n            \\\"TroveManager: nothing to liquidate\\\"\\n        );\\n\\n        // Move liquidated WStETH and BaseFeeLMA to the appropriate pools\\n        stabilityPoolCached.offset(\\n            totals.totalDebtToOffset,\\n            totals.totalCollToSendToSP\\n        );\\n        _redistributeDebtAndColl(\\n            contractsCache.activePool,\\n            contractsCache.defaultPool,\\n            totals.totalDebtToRedistribute,\\n            totals.totalCollToRedistribute\\n        );\\n        if (totals.totalCollSurplus > 0) {\\n            contractsCache.activePool.sendWStETH(\\n                address(collSurplusPool),\\n                totals.totalCollSurplus\\n            );\\n        }\\n\\n        // Update system snapshots\\n        _updateSystemSnapshots_excludeCollRemainder(\\n            contractsCache.activePool,\\n            totals.totalCollGasCompensation\\n        );\\n\\n        vars.liquidatedDebt = totals.totalDebtInSequence;\\n        vars.liquidatedColl = totals\\n            .totalCollInSequence\\n            .sub(totals.totalCollGasCompensation)\\n            .sub(totals.totalCollSurplus);\\n        emit Liquidation(\\n            vars.liquidatedDebt,\\n            vars.liquidatedColl,\\n            totals.totalCollGasCompensation,\\n            totals.totalBaseFeeLMAGasCompensation\\n        );\\n\\n        // Send gas compensation to caller\\n        _sendGasCompensation(\\n            contractsCache.activePool,\\n            msg.sender,\\n            totals.totalBaseFeeLMAGasCompensation,\\n            totals.totalCollGasCompensation\\n        );\\n    }\\n\\n    /*\\n     * This function is used when the liquidateTroves sequence starts during Recovery Mode. However, it\\n     * handle the case where the system *leaves* Recovery Mode, part way through the liquidation sequence\\n     */\\n    function _getTotalsFromLiquidateTrovesSequence_RecoveryMode(\\n        ContractsCache memory _contractsCache,\\n        uint _price,\\n        uint _BaseFeeLMAInStabPool,\\n        uint _n\\n    ) internal returns (LiquidationTotals memory totals) {\\n        LocalVariables_LiquidationSequence memory vars;\\n        LiquidationValues memory singleLiquidation;\\n\\n        vars.remainingBaseFeeLMAInStabPool = _BaseFeeLMAInStabPool;\\n        vars.backToNormalMode = false;\\n        vars.entireSystemDebt = getEntireSystemDebt();\\n        vars.entireSystemColl = getEntireSystemColl();\\n\\n        vars.user = _contractsCache.sortedTroves.getLast();\\n        address firstUser = _contractsCache.sortedTroves.getFirst();\\n        for (vars.i = 0; vars.i < _n && vars.user != firstUser; vars.i++) {\\n            // we need to cache it, because current user is likely going to be deleted\\n            address nextUser = _contractsCache.sortedTroves.getPrev(vars.user);\\n\\n            vars.ICR = getCurrentICR(vars.user, _price);\\n\\n            if (!vars.backToNormalMode) {\\n                // Break the loop if ICR is greater than MCR and Stability Pool is empty\\n                if (\\n                    vars.ICR >= MCR && vars.remainingBaseFeeLMAInStabPool == 0\\n                ) {\\n                    break;\\n                }\\n\\n                uint TCR = LiquityMath._computeCR(\\n                    vars.entireSystemColl,\\n                    vars.entireSystemDebt,\\n                    _price\\n                );\\n\\n                singleLiquidation = _liquidateRecoveryMode(\\n                    _contractsCache.activePool,\\n                    _contractsCache.defaultPool,\\n                    vars.user,\\n                    vars.ICR,\\n                    vars.remainingBaseFeeLMAInStabPool,\\n                    TCR,\\n                    _price\\n                );\\n\\n                // Update aggregate trackers\\n                vars.remainingBaseFeeLMAInStabPool = vars\\n                    .remainingBaseFeeLMAInStabPool\\n                    .sub(singleLiquidation.debtToOffset);\\n                vars.entireSystemDebt = vars.entireSystemDebt.sub(\\n                    singleLiquidation.debtToOffset\\n                );\\n                vars.entireSystemColl = vars\\n                    .entireSystemColl\\n                    .sub(singleLiquidation.collToSendToSP)\\n                    .sub(singleLiquidation.collGasCompensation)\\n                    .sub(singleLiquidation.collSurplus);\\n\\n                // Add liquidation values to their respective running totals\\n                totals = _addLiquidationValuesToTotals(\\n                    totals,\\n                    singleLiquidation\\n                );\\n\\n                vars.backToNormalMode = !_checkPotentialRecoveryMode(\\n                    vars.entireSystemColl,\\n                    vars.entireSystemDebt,\\n                    _price\\n                );\\n            } else if (vars.backToNormalMode && vars.ICR < MCR) {\\n                singleLiquidation = _liquidateNormalMode(\\n                    _contractsCache.activePool,\\n                    _contractsCache.defaultPool,\\n                    vars.user,\\n                    vars.remainingBaseFeeLMAInStabPool\\n                );\\n\\n                vars.remainingBaseFeeLMAInStabPool = vars\\n                    .remainingBaseFeeLMAInStabPool\\n                    .sub(singleLiquidation.debtToOffset);\\n\\n                // Add liquidation values to their respective running totals\\n                totals = _addLiquidationValuesToTotals(\\n                    totals,\\n                    singleLiquidation\\n                );\\n            } else break; // break if the loop reaches a Trove with ICR >= MCR\\n\\n            vars.user = nextUser;\\n        }\\n    }\\n\\n    function _getTotalsFromLiquidateTrovesSequence_NormalMode(\\n        IActivePool _activePool,\\n        IDefaultPool _defaultPool,\\n        uint _price,\\n        uint _BaseFeeLMAInStabPool,\\n        uint _n\\n    ) internal returns (LiquidationTotals memory totals) {\\n        LocalVariables_LiquidationSequence memory vars;\\n        LiquidationValues memory singleLiquidation;\\n        ISortedTroves sortedTrovesCached = sortedTroves;\\n\\n        vars.remainingBaseFeeLMAInStabPool = _BaseFeeLMAInStabPool;\\n\\n        for (vars.i = 0; vars.i < _n; vars.i++) {\\n            vars.user = sortedTrovesCached.getLast();\\n            vars.ICR = getCurrentICR(vars.user, _price);\\n\\n            if (vars.ICR < MCR) {\\n                singleLiquidation = _liquidateNormalMode(\\n                    _activePool,\\n                    _defaultPool,\\n                    vars.user,\\n                    vars.remainingBaseFeeLMAInStabPool\\n                );\\n\\n                vars.remainingBaseFeeLMAInStabPool = vars\\n                    .remainingBaseFeeLMAInStabPool\\n                    .sub(singleLiquidation.debtToOffset);\\n\\n                // Add liquidation values to their respective running totals\\n                totals = _addLiquidationValuesToTotals(\\n                    totals,\\n                    singleLiquidation\\n                );\\n            } else break; // break if the loop reaches a Trove with ICR >= MCR\\n        }\\n    }\\n\\n    /*\\n     * Attempt to liquidate a custom list of troves provided by the caller.\\n     */\\n    function batchLiquidateTroves(address[] memory _troveArray) public {\\n        require(\\n            _troveArray.length != 0,\\n            \\\"TroveManager: Calldata address array must not be empty\\\"\\n        );\\n\\n        IActivePool activePoolCached = activePool;\\n        IDefaultPool defaultPoolCached = defaultPool;\\n        IStabilityPool stabilityPoolCached = stabilityPool;\\n\\n        LocalVariables_OuterLiquidationFunction memory vars;\\n        LiquidationTotals memory totals;\\n\\n        vars.price = priceFeed.fetchPrice();\\n        vars.BaseFeeLMAInStabPool = stabilityPoolCached\\n            .getTotalBaseFeeLMADeposits();\\n        vars.recoveryModeAtStart = _checkRecoveryMode(vars.price);\\n\\n        // Perform the appropriate liquidation sequence - tally values and obtain their totals.\\n        if (vars.recoveryModeAtStart) {\\n            totals = _getTotalFromBatchLiquidate_RecoveryMode(\\n                activePoolCached,\\n                defaultPoolCached,\\n                vars.price,\\n                vars.BaseFeeLMAInStabPool,\\n                _troveArray\\n            );\\n        } else {\\n            //  if !vars.recoveryModeAtStart\\n            totals = _getTotalsFromBatchLiquidate_NormalMode(\\n                activePoolCached,\\n                defaultPoolCached,\\n                vars.price,\\n                vars.BaseFeeLMAInStabPool,\\n                _troveArray\\n            );\\n        }\\n\\n        require(\\n            totals.totalDebtInSequence > 0,\\n            \\\"TroveManager: nothing to liquidate\\\"\\n        );\\n\\n        // Move liquidated WStETH and BaseFeeLMA to the appropriate pools\\n        stabilityPoolCached.offset(\\n            totals.totalDebtToOffset,\\n            totals.totalCollToSendToSP\\n        );\\n        _redistributeDebtAndColl(\\n            activePoolCached,\\n            defaultPoolCached,\\n            totals.totalDebtToRedistribute,\\n            totals.totalCollToRedistribute\\n        );\\n\\n        if (totals.totalCollSurplus > 0) {\\n            collSurplusPool.increaseBalance(totals.totalCollSurplus);\\n            activePoolCached.sendWStETH(\\n                address(collSurplusPool),\\n                totals.totalCollSurplus\\n            );\\n        }\\n\\n        // Update system snapshots\\n        _updateSystemSnapshots_excludeCollRemainder(\\n            activePoolCached,\\n            totals.totalCollGasCompensation\\n        );\\n\\n        vars.liquidatedDebt = totals.totalDebtInSequence;\\n\\n        vars.liquidatedColl = totals\\n            .totalCollInSequence\\n            .sub(totals.totalCollGasCompensation)\\n            .sub(totals.totalCollSurplus);\\n\\n        emit Liquidation(\\n            vars.liquidatedDebt,\\n            vars.liquidatedColl,\\n            totals.totalCollGasCompensation,\\n            totals.totalBaseFeeLMAGasCompensation\\n        );\\n\\n        // Send gas compensation to caller\\n        _sendGasCompensation(\\n            activePoolCached,\\n            msg.sender,\\n            totals.totalBaseFeeLMAGasCompensation,\\n            totals.totalCollGasCompensation\\n        );\\n    }\\n\\n    /*\\n     * This function is used when the batch liquidation sequence starts during Recovery Mode. However, it\\n     * handle the case where the system *leaves* Recovery Mode, part way through the liquidation sequence\\n     */\\n    function _getTotalFromBatchLiquidate_RecoveryMode(\\n        IActivePool _activePool,\\n        IDefaultPool _defaultPool,\\n        uint _price,\\n        uint _BaseFeeLMAInStabPool,\\n        address[] memory _troveArray\\n    ) internal returns (LiquidationTotals memory totals) {\\n        LocalVariables_LiquidationSequence memory vars;\\n        LiquidationValues memory singleLiquidation;\\n\\n        vars.remainingBaseFeeLMAInStabPool = _BaseFeeLMAInStabPool;\\n        vars.backToNormalMode = false;\\n        vars.entireSystemDebt = getEntireSystemDebt();\\n        vars.entireSystemColl = getEntireSystemColl();\\n\\n        for (vars.i = 0; vars.i < _troveArray.length; vars.i++) {\\n            vars.user = _troveArray[vars.i];\\n            // Skip non-active troves\\n            if (Troves[vars.user].status != Status.active) {\\n                continue;\\n            }\\n            vars.ICR = getCurrentICR(vars.user, _price);\\n\\n            if (!vars.backToNormalMode) {\\n                // Skip this trove if ICR is greater than MCR and Stability Pool is empty\\n                if (\\n                    vars.ICR >= MCR && vars.remainingBaseFeeLMAInStabPool == 0\\n                ) {\\n                    continue;\\n                }\\n\\n                uint TCR = LiquityMath._computeCR(\\n                    vars.entireSystemColl,\\n                    vars.entireSystemDebt,\\n                    _price\\n                );\\n\\n                singleLiquidation = _liquidateRecoveryMode(\\n                    _activePool,\\n                    _defaultPool,\\n                    vars.user,\\n                    vars.ICR,\\n                    vars.remainingBaseFeeLMAInStabPool,\\n                    TCR,\\n                    _price\\n                );\\n\\n                // Update aggregate trackers\\n                vars.remainingBaseFeeLMAInStabPool = vars\\n                    .remainingBaseFeeLMAInStabPool\\n                    .sub(singleLiquidation.debtToOffset);\\n                vars.entireSystemDebt = vars.entireSystemDebt.sub(\\n                    singleLiquidation.debtToOffset\\n                );\\n                vars.entireSystemColl = vars\\n                    .entireSystemColl\\n                    .sub(singleLiquidation.collToSendToSP)\\n                    .sub(singleLiquidation.collGasCompensation)\\n                    .sub(singleLiquidation.collSurplus);\\n\\n                // Add liquidation values to their respective running totals\\n                totals = _addLiquidationValuesToTotals(\\n                    totals,\\n                    singleLiquidation\\n                );\\n\\n                vars.backToNormalMode = !_checkPotentialRecoveryMode(\\n                    vars.entireSystemColl,\\n                    vars.entireSystemDebt,\\n                    _price\\n                );\\n            } else if (vars.backToNormalMode && vars.ICR < MCR) {\\n                singleLiquidation = _liquidateNormalMode(\\n                    _activePool,\\n                    _defaultPool,\\n                    vars.user,\\n                    vars.remainingBaseFeeLMAInStabPool\\n                );\\n                vars.remainingBaseFeeLMAInStabPool = vars\\n                    .remainingBaseFeeLMAInStabPool\\n                    .sub(singleLiquidation.debtToOffset);\\n\\n                // Add liquidation values to their respective running totals\\n                totals = _addLiquidationValuesToTotals(\\n                    totals,\\n                    singleLiquidation\\n                );\\n            } else continue; // In Normal Mode skip troves with ICR >= MCR\\n        }\\n    }\\n\\n    function _getTotalsFromBatchLiquidate_NormalMode(\\n        IActivePool _activePool,\\n        IDefaultPool _defaultPool,\\n        uint _price,\\n        uint _BaseFeeLMAInStabPool,\\n        address[] memory _troveArray\\n    ) internal returns (LiquidationTotals memory totals) {\\n        LocalVariables_LiquidationSequence memory vars;\\n        LiquidationValues memory singleLiquidation;\\n\\n        vars.remainingBaseFeeLMAInStabPool = _BaseFeeLMAInStabPool;\\n\\n        for (vars.i = 0; vars.i < _troveArray.length; vars.i++) {\\n            vars.user = _troveArray[vars.i];\\n            vars.ICR = getCurrentICR(vars.user, _price);\\n\\n            if (vars.ICR < MCR) {\\n                singleLiquidation = _liquidateNormalMode(\\n                    _activePool,\\n                    _defaultPool,\\n                    vars.user,\\n                    vars.remainingBaseFeeLMAInStabPool\\n                );\\n\\n                vars.remainingBaseFeeLMAInStabPool = vars\\n                    .remainingBaseFeeLMAInStabPool\\n                    .sub(singleLiquidation.debtToOffset);\\n\\n                // Add liquidation values to their respective running totals\\n                totals = _addLiquidationValuesToTotals(\\n                    totals,\\n                    singleLiquidation\\n                );\\n            }\\n        }\\n    }\\n\\n    // --- Liquidation helper functions ---\\n\\n    function _addLiquidationValuesToTotals(\\n        LiquidationTotals memory oldTotals,\\n        LiquidationValues memory singleLiquidation\\n    ) internal pure returns (LiquidationTotals memory newTotals) {\\n        // Tally all the values with their respective running totals\\n        newTotals.totalCollGasCompensation = oldTotals\\n            .totalCollGasCompensation\\n            .add(singleLiquidation.collGasCompensation);\\n        newTotals.totalBaseFeeLMAGasCompensation = oldTotals\\n            .totalBaseFeeLMAGasCompensation\\n            .add(singleLiquidation.BaseFeeLMAGasCompensation);\\n        newTotals.totalDebtInSequence = oldTotals.totalDebtInSequence.add(\\n            singleLiquidation.entireTroveDebt\\n        );\\n        newTotals.totalCollInSequence = oldTotals.totalCollInSequence.add(\\n            singleLiquidation.entireTroveColl\\n        );\\n        newTotals.totalDebtToOffset = oldTotals.totalDebtToOffset.add(\\n            singleLiquidation.debtToOffset\\n        );\\n        newTotals.totalCollToSendToSP = oldTotals.totalCollToSendToSP.add(\\n            singleLiquidation.collToSendToSP\\n        );\\n        newTotals.totalDebtToRedistribute = oldTotals\\n            .totalDebtToRedistribute\\n            .add(singleLiquidation.debtToRedistribute);\\n        newTotals.totalCollToRedistribute = oldTotals\\n            .totalCollToRedistribute\\n            .add(singleLiquidation.collToRedistribute);\\n        newTotals.totalCollSurplus = oldTotals.totalCollSurplus.add(\\n            singleLiquidation.collSurplus\\n        );\\n\\n        return newTotals;\\n    }\\n\\n    function _sendGasCompensation(\\n        IActivePool _activePool,\\n        address _liquidator,\\n        uint _BaseFeeLMA,\\n        uint _WStETH\\n    ) internal {\\n        if (_BaseFeeLMA > 0) {\\n            baseFeeLMAToken.returnFromPool(\\n                gasPoolAddress,\\n                _liquidator,\\n                _BaseFeeLMA\\n            );\\n        }\\n\\n        if (_WStETH > 0) {\\n            _activePool.sendWStETH(_liquidator, _WStETH);\\n        }\\n    }\\n\\n    // Move a Trove's pending debt and collateral rewards from distributions, from the Default Pool to the Active Pool\\n    function _movePendingTroveRewardsToActivePool(\\n        IActivePool _activePool,\\n        IDefaultPool _defaultPool,\\n        uint _BaseFeeLMA,\\n        uint _WStETH\\n    ) internal {\\n        _defaultPool.decreaseBaseFeeLMADebt(_BaseFeeLMA);\\n        _activePool.increaseBaseFeeLMADebt(_BaseFeeLMA);\\n        _defaultPool.sendWStETHToActivePool(_WStETH);\\n    }\\n\\n    // --- Redemption functions ---\\n\\n    // Redeem as much collateral as possible from _borrower's Trove in exchange for BaseFeeLMA up to _maxBaseFeeLMAamount\\n    // HEDGEHOG Updates: Not subtracting gas compensation from the debt anymore\\n    function _redeemCollateralFromTrove(\\n        ContractsCache memory _contractsCache,\\n        address _borrower,\\n        uint _maxBaseFeeLMAamount,\\n        uint _price,\\n        address _upperPartialRedemptionHint,\\n        address _lowerPartialRedemptionHint,\\n        uint _partialRedemptionHintNICR\\n    ) internal returns (SingleRedemptionValues memory singleRedemption) {\\n        // Determine the remaining amount (lot) to be redeemed, capped by the entire debt of the Trove minus the liquidation reserve\\n        singleRedemption.BaseFeeLMALot = LiquityMath._min(\\n            _maxBaseFeeLMAamount,\\n            Troves[_borrower].debt\\n        );\\n\\n        // Get the WStETHLot of equivalent value in USD\\n        // HEDGEHOG UPDATES: Change WStETHLOT calculations formula from [debtToBeRedeemed * price * 10e9] to [debtToBeRedeemed / price * 1e18]\\n        singleRedemption.WStETHLot = singleRedemption.BaseFeeLMALot.mul(_price);\\n\\n        // Decrease the debt and collateral of the current Trove according to the BaseFeeLMA lot and corresponding WStETH to send\\n        uint newDebt = (Troves[_borrower].debt).sub(\\n            singleRedemption.BaseFeeLMALot\\n        );\\n        uint newColl = (Troves[_borrower].coll).sub(singleRedemption.WStETHLot);\\n\\n        if (newDebt == BaseFeeLMA_GAS_COMPENSATION) {\\n            // No debt left in the Trove (except for the liquidation reserve), therefore the trove gets closed\\n            _removeStake(_borrower);\\n            _closeTrove(_borrower, Status.closedByRedemption);\\n            _redeemCloseTrove(\\n                _contractsCache,\\n                _borrower,\\n                BaseFeeLMA_GAS_COMPENSATION,\\n                newColl\\n            );\\n            emit TroveUpdated(\\n                _borrower,\\n                0,\\n                0,\\n                0,\\n                TroveManagerOperation.redeemCollateral\\n            );\\n        } else {\\n            uint newNICR = LiquityMath._computeNominalCR(newColl, newDebt);\\n\\n            /*\\n             * If the provided hint is out of date, we bail since trying to reinsert without a good hint will almost\\n             * certainly result in running out of gas.\\n             *\\n             * If the resultant net debt of the partial is less than the minimum, net debt we bail.\\n             */\\n\\n            if (\\n                newNICR != _partialRedemptionHintNICR ||\\n                _getNetDebt(newDebt) < MIN_NET_DEBT\\n            ) {\\n                singleRedemption.cancelledPartial = true;\\n                return singleRedemption;\\n            }\\n\\n            _contractsCache.sortedTroves.reInsert(\\n                _borrower,\\n                newNICR,\\n                _upperPartialRedemptionHint,\\n                _lowerPartialRedemptionHint\\n            );\\n\\n            Troves[_borrower].debt = newDebt;\\n            Troves[_borrower].coll = newColl;\\n            _updateStakeAndTotalStakes(_borrower);\\n\\n            emit TroveUpdated(\\n                _borrower,\\n                newDebt,\\n                newColl,\\n                Troves[_borrower].stake,\\n                TroveManagerOperation.redeemCollateral\\n            );\\n        }\\n\\n        return singleRedemption;\\n    }\\n\\n    /*\\n     * Called when a full redemption occurs, and closes the trove.\\n     * The redeemer swaps (debt - liquidation reserve) BaseFeeLMA for (debt - liquidation reserve) worth of WStETH, so the BaseFeeLMA liquidation reserve left corresponds to the remaining debt.\\n     * In order to close the trove, the BaseFeeLMA liquidation reserve is burned, and the corresponding debt is removed from the active pool.\\n     * The debt recorded on the trove's struct is zero'd elswhere, in _closeTrove.\\n     * Any surplus WStETH left in the trove, is sent to the Coll surplus pool, and can be later claimed by the borrower.\\n     */\\n    function _redeemCloseTrove(\\n        ContractsCache memory _contractsCache,\\n        address _borrower,\\n        uint _BaseFeeLMA,\\n        uint _WStETH\\n    ) internal {\\n        _contractsCache.baseFeeLMAToken.burn(gasPoolAddress, _BaseFeeLMA);\\n        // Update Active Pool BaseFeeLMA, and send WStETH to account\\n        _contractsCache.activePool.decreaseBaseFeeLMADebt(_BaseFeeLMA);\\n\\n        // send WStETH from Active Pool to CollSurplus Pool\\n        _contractsCache.collSurplusPool.accountSurplus(_borrower, _WStETH);\\n        _contractsCache.activePool.sendWStETH(\\n            address(_contractsCache.collSurplusPool),\\n            _WStETH\\n        );\\n    }\\n\\n    function _isValidFirstRedemptionHint(\\n        ISortedTroves _sortedTroves,\\n        address _firstRedemptionHint,\\n        uint _price\\n    ) internal view returns (bool) {\\n        if (\\n            _firstRedemptionHint == address(0) ||\\n            !_sortedTroves.contains(_firstRedemptionHint) ||\\n            getCurrentICR(_firstRedemptionHint, _price) < MCR\\n        ) {\\n            return false;\\n        }\\n\\n        address nextTrove = _sortedTroves.getNext(_firstRedemptionHint);\\n        return\\n            nextTrove == address(0) || getCurrentICR(nextTrove, _price) < MCR;\\n    }\\n\\n    /* Send _BaseFeeLMAamount BaseFeeLMA to the system and redeem the corresponding amount of collateral from as many Troves as are needed to fill the redemption\\n     * request.  Applies pending rewards to a Trove before reducing its debt and coll.\\n     *\\n     * Note that if _amount is very large, this function can run out of gas, specially if traversed troves are small. This can be easily avoided by\\n     * splitting the total _amount in appropriate chunks and calling the function multiple times.\\n     *\\n     * Param `_maxIterations` can also be provided, so the loop through Troves is capped (if it\\u2019s zero, it will be ignored).This makes it easier to\\n     * avoid OOG for the frontend, as only knowing approximately the average cost of an iteration is enough, without needing to know the \\u201ctopology\\u201d\\n     * of the trove list. It also avoids the need to set the cap in stone in the contract, nor doing gas calculations, as both gas price and opcode\\n     * costs can vary.\\n     *\\n     * All Troves that are redeemed from -- with the likely exception of the last one -- will end up with no debt left, therefore they will be closed.\\n     * If the last Trove does have some remaining debt, it has a finite ICR, and the reinsertion could be anywhere in the list, therefore it requires a hint.\\n     * A frontend should use getRedemptionHints() to calculate what the ICR of this Trove will be after redemption, and pass a hint for its position\\n     * in the sortedTroves list along with the ICR value that the hint was found for.\\n     *\\n     * If another transaction modifies the list between calling getRedemptionHints() and passing the hints to redeemCollateral(), it\\n     * is very likely that the last (partially) redeemed Trove would end up with a different ICR than what the hint is for. In this case the\\n     * redemption will stop after the last completely redeemed Trove and the sender will keep the remaining BaseFeeLMA amount, which they can attempt\\n     * to redeem later.\\n     */\\n    function redeemCollateral(\\n        uint _BaseFeeLMAamount,\\n        address _firstRedemptionHint,\\n        address _upperPartialRedemptionHint,\\n        address _lowerPartialRedemptionHint,\\n        uint _partialRedemptionHintNICR,\\n        uint _maxIterations,\\n        uint _maxFeePercentage\\n    ) external {\\n        ContractsCache memory contractsCache = ContractsCache(\\n            activePool,\\n            defaultPool,\\n            baseFeeLMAToken,\\n            hogStaking,\\n            sortedTroves,\\n            collSurplusPool,\\n            gasPoolAddress\\n        );\\n        RedemptionTotals memory totals;\\n\\n        _requireValidMaxFeePercentage(_maxFeePercentage);\\n        //_requireAfterBootstrapPeriod();\\n        totals.price = priceFeed.fetchPrice();\\n\\n        _requireTCRoverMCR(totals.price);\\n        _requireAmountGreaterThanZero(_BaseFeeLMAamount);\\n        _requireBaseFeeLMABalanceCoversRedemption(\\n            contractsCache.baseFeeLMAToken,\\n            msg.sender,\\n            _BaseFeeLMAamount\\n        );\\n\\n        totals.totalBaseFeeLMASupplyAtStart = getEntireSystemDebt();\\n        // Confirm redeemer's balance is less than total BaseFeeLMA supply\\n        assert(\\n            contractsCache.baseFeeLMAToken.balanceOf(msg.sender) <=\\n                totals.totalBaseFeeLMASupplyAtStart\\n        );\\n\\n        totals.remainingBaseFeeLMA = _BaseFeeLMAamount;\\n        address currentBorrower;\\n\\n        if (\\n            _isValidFirstRedemptionHint(\\n                contractsCache.sortedTroves,\\n                _firstRedemptionHint,\\n                totals.price\\n            )\\n        ) {\\n            currentBorrower = _firstRedemptionHint;\\n        } else {\\n            currentBorrower = contractsCache.sortedTroves.getLast();\\n            // Find the first trove with ICR >= MCR\\n            while (\\n                currentBorrower != address(0) &&\\n                getCurrentICR(currentBorrower, totals.price) < MCR\\n            ) {\\n                currentBorrower = contractsCache.sortedTroves.getPrev(\\n                    currentBorrower\\n                );\\n            }\\n        }\\n        // Loop through the Troves starting from the one with lowest collateral ratio until _amount of BaseFeeLMA is exchanged for collateral\\n        if (_maxIterations == 0) {\\n            // Previous implementation: _maxIterations = uint(-1);\\n            // Updated since 8th pragma does not allow anymore\\n            _maxIterations = type(uint).max;\\n        }\\n        while (\\n            currentBorrower != address(0) &&\\n            totals.remainingBaseFeeLMA > 0 &&\\n            _maxIterations > 0\\n        ) {\\n            _maxIterations--;\\n            // Save the address of the Trove preceding the current one, before potentially modifying the list\\n            address nextUserToCheck = contractsCache.sortedTroves.getPrev(\\n                currentBorrower\\n            );\\n\\n            _applyPendingRewards(\\n                contractsCache.activePool,\\n                contractsCache.defaultPool,\\n                currentBorrower\\n            );\\n            SingleRedemptionValues\\n                memory singleRedemption = _redeemCollateralFromTrove(\\n                    contractsCache,\\n                    currentBorrower,\\n                    totals.remainingBaseFeeLMA,\\n                    totals.price,\\n                    _upperPartialRedemptionHint,\\n                    _lowerPartialRedemptionHint,\\n                    _partialRedemptionHintNICR\\n                );\\n\\n            if (singleRedemption.cancelledPartial) break; // Partial redemption was cancelled (out-of-date hint, or new net debt < minimum), therefore we could not redeem from the last Trove\\n            totals.totalBaseFeeLMAToRedeem = totals.totalBaseFeeLMAToRedeem.add(\\n                singleRedemption.BaseFeeLMALot\\n            );\\n            totals.totalWStETHDrawn = totals.totalWStETHDrawn.add(\\n                singleRedemption.WStETHLot\\n            );\\n\\n            totals.remainingBaseFeeLMA = totals.remainingBaseFeeLMA.sub(\\n                singleRedemption.BaseFeeLMALot\\n            );\\n            currentBorrower = nextUserToCheck;\\n        }\\n\\n        require(\\n            totals.totalWStETHDrawn > 0,\\n            \\\"TroveManager: Unable to redeem any amount\\\"\\n        );\\n        // HEDGEHOG LOGIC UPDATE:\\n        // 1) rename _updateBaseRateFromRedemption into _updateRedemptionBaseRateFromRedemption\\n        // 2) update commented explanation (baseRate => redemptionBaseRate)\\n        // Decay the redemptionBaseRate due to time passed, and then increase it according to the size of this redemption.\\n        // Use the saved total BaseFeeLMA supply value, from before it was reduced by the redemption.\\n        _updateRedemptionBaseRateFromRedemption(\\n            totals.totalWStETHDrawn,\\n            totals.price,\\n            totals.totalBaseFeeLMASupplyAtStart\\n        );\\n        // Calculate the WStETH fee\\n        totals.WStETHFee = _getRedemptionFee(totals.totalWStETHDrawn);\\n\\n        _requireUserAcceptsFee(\\n            totals.WStETHFee,\\n            totals.totalWStETHDrawn,\\n            _maxFeePercentage\\n        );\\n\\n        // HEDGHEHOG UPDATES:\\n        // Fees are now distributed among different addresses based on how big they are\\n        feesRouter.distributeCollFee(totals.totalWStETHDrawn, totals.WStETHFee);\\n\\n        totals.WStETHToSendToRedeemer = totals.totalWStETHDrawn.sub(\\n            totals.WStETHFee\\n        );\\n\\n        emit Redemption(\\n            _BaseFeeLMAamount,\\n            totals.totalBaseFeeLMAToRedeem,\\n            totals.totalWStETHDrawn,\\n            totals.WStETHFee\\n        );\\n        // Burn the total BaseFeeLMA that is cancelled with debt, and send the redeemed WStETH to msg.sender\\n        contractsCache.baseFeeLMAToken.burn(\\n            msg.sender,\\n            totals.totalBaseFeeLMAToRedeem\\n        );\\n        // Update Active Pool BaseFeeLMA, and send WStETH to account\\n        contractsCache.activePool.decreaseBaseFeeLMADebt(\\n            totals.totalBaseFeeLMAToRedeem\\n        );\\n        contractsCache.activePool.sendWStETH(\\n            msg.sender,\\n            totals.WStETHToSendToRedeemer\\n        );\\n    }\\n\\n    // --- Helper functions ---\\n\\n    // Return the nominal collateral ratio (ICR) of a given Trove, without the price. Takes a trove's pending coll and debt rewards from redistributions into account.\\n    function getNominalICR(address _borrower) public view returns (uint) {\\n        (\\n            uint currentWStETH,\\n            uint currentBaseFeeLMADebt\\n        ) = _getCurrentTroveAmounts(_borrower);\\n\\n        uint NICR = LiquityMath._computeNominalCR(\\n            currentWStETH,\\n            currentBaseFeeLMADebt\\n        );\\n        return NICR;\\n    }\\n\\n    /**\\n     * HEDGEHOG UPDATES:\\n     * Get Price directly from the price feed instead of param passing\\n     */\\n    // Return the current collateral ratio (ICR) of a given Trove. Takes a trove's pending coll and debt rewards from redistributions into account.\\n    function getCurrentICR(\\n        address _borrower,\\n        uint _price\\n    ) public view returns (uint) {\\n        (\\n            uint currentWStETH,\\n            uint currentBaseFeeLMADebt\\n        ) = _getCurrentTroveAmounts(_borrower);\\n\\n        uint ICR = LiquityMath._computeCR(\\n            currentWStETH,\\n            currentBaseFeeLMADebt,\\n            _price\\n        );\\n        return ICR;\\n    }\\n\\n    function getUnreliableTroveICR(\\n        address _borrower\\n    ) public view returns (uint) {\\n        uint256 price = priceFeed.lastGoodPrice();\\n        (\\n            uint currentWStETH,\\n            uint currentBaseFeeLMADebt\\n        ) = _getCurrentTroveAmounts(_borrower);\\n\\n        uint ICR = LiquityMath._computeCR(\\n            currentWStETH,\\n            currentBaseFeeLMADebt,\\n            price\\n        );\\n        return ICR;\\n    }\\n\\n    function _getCurrentTroveAmounts(\\n        address _borrower\\n    ) internal view returns (uint, uint) {\\n        uint pendingWStETHReward = getPendingWStETHReward(_borrower);\\n        uint pendingBaseFeeLMADebtReward = getPendingBaseFeeLMADebtReward(\\n            _borrower\\n        );\\n\\n        uint currentWStETH = Troves[_borrower].coll.add(pendingWStETHReward);\\n        uint currentBaseFeeLMADebt = Troves[_borrower].debt.add(\\n            pendingBaseFeeLMADebtReward\\n        );\\n\\n        return (currentWStETH, currentBaseFeeLMADebt);\\n    }\\n\\n    function applyPendingRewards(address _borrower) external {\\n        _requireCallerIsBorrowerOperations();\\n        return _applyPendingRewards(activePool, defaultPool, _borrower);\\n    }\\n\\n    // Add the borrowers's coll and debt rewards earned from redistributions, to their Trove\\n    function _applyPendingRewards(\\n        IActivePool _activePool,\\n        IDefaultPool _defaultPool,\\n        address _borrower\\n    ) internal {\\n        if (hasPendingRewards(_borrower)) {\\n            _requireTroveIsActive(_borrower);\\n\\n            // Compute pending rewards\\n            uint pendingWStETHReward = getPendingWStETHReward(_borrower);\\n            uint pendingBaseFeeLMADebtReward = getPendingBaseFeeLMADebtReward(\\n                _borrower\\n            );\\n\\n            // Apply pending rewards to trove's state\\n            Troves[_borrower].coll = Troves[_borrower].coll.add(\\n                pendingWStETHReward\\n            );\\n            Troves[_borrower].debt = Troves[_borrower].debt.add(\\n                pendingBaseFeeLMADebtReward\\n            );\\n\\n            _updateTroveRewardSnapshots(_borrower);\\n\\n            // Transfer from DefaultPool to ActivePool\\n            _movePendingTroveRewardsToActivePool(\\n                _activePool,\\n                _defaultPool,\\n                pendingBaseFeeLMADebtReward,\\n                pendingWStETHReward\\n            );\\n\\n            emit TroveUpdated(\\n                _borrower,\\n                Troves[_borrower].debt,\\n                Troves[_borrower].coll,\\n                Troves[_borrower].stake,\\n                TroveManagerOperation.applyPendingRewards\\n            );\\n        }\\n    }\\n\\n    // Update borrower's snapshots of L_WStETH and L_BaseFeeLMADebt to reflect the current values\\n    function updateTroveRewardSnapshots(address _borrower) external {\\n        _requireCallerIsBorrowerOperations();\\n        return _updateTroveRewardSnapshots(_borrower);\\n    }\\n\\n    function _updateTroveRewardSnapshots(address _borrower) internal {\\n        rewardSnapshots[_borrower].WStETH = L_WStETH;\\n        rewardSnapshots[_borrower].BaseFeeLMADebt = L_BaseFeeLMADebt;\\n        emit TroveSnapshotsUpdated(L_WStETH, L_BaseFeeLMADebt);\\n    }\\n\\n    // Get the borrower's pending accumulated WStETH reward, earned by their stake\\n    function getPendingWStETHReward(\\n        address _borrower\\n    ) public view returns (uint) {\\n        uint snapshotWStETH = rewardSnapshots[_borrower].WStETH;\\n        uint rewardPerUnitStaked = L_WStETH.sub(snapshotWStETH);\\n\\n        if (\\n            rewardPerUnitStaked == 0 ||\\n            Troves[_borrower].status != Status.active\\n        ) {\\n            return 0;\\n        }\\n\\n        uint stake = Troves[_borrower].stake;\\n\\n        uint pendingWStETHReward = stake.mul(rewardPerUnitStaked).div(\\n            DECIMAL_PRECISION\\n        );\\n\\n        return pendingWStETHReward;\\n    }\\n\\n    // Get the borrower's pending accumulated BaseFeeLMA reward, earned by their stake\\n    function getPendingBaseFeeLMADebtReward(\\n        address _borrower\\n    ) public view returns (uint) {\\n        uint snapshotBaseFeeLMADebt = rewardSnapshots[_borrower].BaseFeeLMADebt;\\n        uint rewardPerUnitStaked = L_BaseFeeLMADebt.sub(snapshotBaseFeeLMADebt);\\n\\n        if (\\n            rewardPerUnitStaked == 0 ||\\n            Troves[_borrower].status != Status.active\\n        ) {\\n            return 0;\\n        }\\n\\n        uint stake = Troves[_borrower].stake;\\n\\n        uint pendingBaseFeeLMADebtReward = stake.mul(rewardPerUnitStaked).div(\\n            DECIMAL_PRECISION\\n        );\\n\\n        return pendingBaseFeeLMADebtReward;\\n    }\\n\\n    function hasPendingRewards(address _borrower) public view returns (bool) {\\n        /*\\n         * A Trove has pending rewards if its snapshot is less than the current rewards per-unit-staked sum:\\n         * this indicates that rewards have occured since the snapshot was made, and the user therefore has\\n         * pending rewards\\n         */\\n        if (Troves[_borrower].status != Status.active) {\\n            return false;\\n        }\\n\\n        return (rewardSnapshots[_borrower].WStETH < L_WStETH);\\n    }\\n\\n    // Return the Troves entire debt and coll, including pending rewards from redistributions.\\n    function getEntireDebtAndColl(\\n        address _borrower\\n    )\\n        public\\n        view\\n        returns (\\n            uint debt,\\n            uint coll,\\n            uint pendingBaseFeeLMADebtReward,\\n            uint pendingWStETHReward\\n        )\\n    {\\n        debt = Troves[_borrower].debt;\\n        coll = Troves[_borrower].coll;\\n\\n        pendingBaseFeeLMADebtReward = getPendingBaseFeeLMADebtReward(_borrower);\\n        pendingWStETHReward = getPendingWStETHReward(_borrower);\\n\\n        debt = debt.add(pendingBaseFeeLMADebtReward);\\n        coll = coll.add(pendingWStETHReward);\\n    }\\n\\n    function removeStake(address _borrower) external {\\n        _requireCallerIsBorrowerOperations();\\n        return _removeStake(_borrower);\\n    }\\n\\n    // Remove borrower's stake from the totalStakes sum, and set their stake to 0\\n    function _removeStake(address _borrower) internal {\\n        uint stake = Troves[_borrower].stake;\\n        totalStakes = totalStakes.sub(stake);\\n        Troves[_borrower].stake = 0;\\n    }\\n\\n    function updateStakeAndTotalStakes(\\n        address _borrower\\n    ) external returns (uint) {\\n        _requireCallerIsBorrowerOperations();\\n        return _updateStakeAndTotalStakes(_borrower);\\n    }\\n\\n    // Update borrower's stake based on their latest collateral value\\n    function _updateStakeAndTotalStakes(\\n        address _borrower\\n    ) internal returns (uint) {\\n        uint newStake = _computeNewStake(Troves[_borrower].coll);\\n        uint oldStake = Troves[_borrower].stake;\\n        Troves[_borrower].stake = newStake;\\n\\n        totalStakes = totalStakes.sub(oldStake).add(newStake);\\n        emit TotalStakesUpdated(totalStakes);\\n\\n        return newStake;\\n    }\\n\\n    // Calculate a new stake based on the snapshots of the totalStakes and totalCollateral taken at the last liquidation\\n    function _computeNewStake(uint _coll) internal view returns (uint) {\\n        uint stake;\\n        if (totalCollateralSnapshot == 0) {\\n            stake = _coll;\\n        } else {\\n            /*\\n             * The following assert() holds true because:\\n             * - The system always contains >= 1 trove\\n             * - When we close or liquidate a trove, we redistribute the pending rewards, so if all troves were closed/liquidated,\\n             * rewards would\\u2019ve been emptied and totalCollateralSnapshot would be zero too.\\n             */\\n            assert(totalStakesSnapshot > 0);\\n            stake = _coll.mul(totalStakesSnapshot).div(totalCollateralSnapshot);\\n        }\\n        return stake;\\n    }\\n\\n    function _redistributeDebtAndColl(\\n        IActivePool _activePool,\\n        IDefaultPool _defaultPool,\\n        uint _debt,\\n        uint _coll\\n    ) internal {\\n        if (_debt == 0) {\\n            return;\\n        }\\n\\n        /*\\n         * Add distributed coll and debt rewards-per-unit-staked to the running totals. Division uses a \\\"feedback\\\"\\n         * error correction, to keep the cumulative error low in the running totals L_WStETH and L_BaseFeeLMADebt:\\n         *\\n         * 1) Form numerators which compensate for the floor division errors that occurred the last time this\\n         * function was called.\\n         * 2) Calculate \\\"per-unit-staked\\\" ratios.\\n         * 3) Multiply each ratio back by its denominator, to reveal the current floor division error.\\n         * 4) Store these errors for use in the next correction when this function is called.\\n         * 5) Note: static analysis tools complain about this \\\"division before multiplication\\\", however, it is intended.\\n         */\\n        uint WStETHNumerator = _coll.mul(DECIMAL_PRECISION).add(\\n            lastWStETHError_Redistribution\\n        );\\n        uint BaseFeeLMADebtNumerator = _debt.mul(DECIMAL_PRECISION).add(\\n            lastBaseFeeLMADebtError_Redistribution\\n        );\\n\\n        // Get the per-unit-staked terms\\n        uint WStETHRewardPerUnitStaked = WStETHNumerator.div(totalStakes);\\n        uint BaseFeeLMADebtRewardPerUnitStaked = BaseFeeLMADebtNumerator.div(\\n            totalStakes\\n        );\\n\\n        lastWStETHError_Redistribution = WStETHNumerator.sub(\\n            WStETHRewardPerUnitStaked.mul(totalStakes)\\n        );\\n        lastBaseFeeLMADebtError_Redistribution = BaseFeeLMADebtNumerator.sub(\\n            BaseFeeLMADebtRewardPerUnitStaked.mul(totalStakes)\\n        );\\n\\n        // Add per-unit-staked terms to the running totals\\n        L_WStETH = L_WStETH.add(WStETHRewardPerUnitStaked);\\n        L_BaseFeeLMADebt = L_BaseFeeLMADebt.add(\\n            BaseFeeLMADebtRewardPerUnitStaked\\n        );\\n\\n        emit LTermsUpdated(L_WStETH, L_BaseFeeLMADebt);\\n\\n        // Transfer coll and debt from ActivePool to DefaultPool\\n        _activePool.decreaseBaseFeeLMADebt(_debt);\\n        _defaultPool.increaseBaseFeeLMADebt(_debt);\\n        _defaultPool.increaseBalance(_coll);\\n        _activePool.sendWStETH(address(_defaultPool), _coll);\\n    }\\n\\n    function closeTrove(address _borrower) external {\\n        _requireCallerIsBorrowerOperations();\\n        return _closeTrove(_borrower, Status.closedByOwner);\\n    }\\n\\n    function _closeTrove(address _borrower, Status closedStatus) internal {\\n        assert(\\n            closedStatus != Status.nonExistent && closedStatus != Status.active\\n        );\\n\\n        uint TroveOwnersArrayLength = TroveOwners.length;\\n        _requireMoreThanOneTroveInSystem(TroveOwnersArrayLength);\\n\\n        Troves[_borrower].status = closedStatus;\\n        Troves[_borrower].coll = 0;\\n        Troves[_borrower].debt = 0;\\n\\n        rewardSnapshots[_borrower].WStETH = 0;\\n        rewardSnapshots[_borrower].BaseFeeLMADebt = 0;\\n\\n        _removeTroveOwner(_borrower, TroveOwnersArrayLength);\\n        sortedTroves.remove(_borrower);\\n    }\\n\\n    /*\\n     * Updates snapshots of system total stakes and total collateral, excluding a given collateral remainder from the calculation.\\n     * Used in a liquidation sequence.\\n     *\\n     * The calculation excludes a portion of collateral that is in the ActivePool:\\n     *\\n     * the total WStETH gas compensation from the liquidation sequence\\n     *\\n     * The WStETH as compensation must be excluded as it is always sent out at the very end of the liquidation sequence.\\n     */\\n    function _updateSystemSnapshots_excludeCollRemainder(\\n        IActivePool _activePool,\\n        uint _collRemainder\\n    ) internal {\\n        totalStakesSnapshot = totalStakes;\\n\\n        uint activeColl = _activePool.getWStETH();\\n        uint liquidatedColl = defaultPool.getWStETH();\\n        totalCollateralSnapshot = activeColl.sub(_collRemainder).add(\\n            liquidatedColl\\n        );\\n\\n        emit SystemSnapshotsUpdated(\\n            totalStakesSnapshot,\\n            totalCollateralSnapshot\\n        );\\n    }\\n\\n    // Push the owner's address to the Trove owners list, and record the corresponding array index on the Trove struct\\n    function addTroveOwnerToArray(\\n        address _borrower\\n    ) external returns (uint index) {\\n        _requireCallerIsBorrowerOperations();\\n        return _addTroveOwnerToArray(_borrower);\\n    }\\n\\n    function _addTroveOwnerToArray(\\n        address _borrower\\n    ) internal returns (uint128 index) {\\n        /* Max array size is 2**128 - 1, i.e. ~3e30 troves. No risk of overflow, since troves have minimum BaseFeeLMA\\n        debt of liquidation reserve plus MIN_NET_DEBT. 3e30 BaseFeeLMA dwarfs the value of all wealth in the world ( which is < 1e15 USD). */\\n\\n        // Push the Troveowner to the array\\n        TroveOwners.push(_borrower);\\n\\n        // Record the index of the new Troveowner on their Trove struct\\n        index = uint128(TroveOwners.length.sub(1));\\n        Troves[_borrower].arrayIndex = index;\\n\\n        return index;\\n    }\\n\\n    /*\\n     * Remove a Trove owner from the TroveOwners array, not preserving array order. Removing owner 'B' does the following:\\n     * [A B C D E] => [A E C D], and updates E's Trove struct to point to its new array index.\\n     */\\n    function _removeTroveOwner(\\n        address _borrower,\\n        uint TroveOwnersArrayLength\\n    ) internal {\\n        Status troveStatus = Troves[_borrower].status;\\n        // It\\u2019s set in caller function `_closeTrove`\\n        assert(\\n            troveStatus != Status.nonExistent && troveStatus != Status.active\\n        );\\n\\n        uint128 index = Troves[_borrower].arrayIndex;\\n        uint length = TroveOwnersArrayLength;\\n        uint idxLast = length.sub(1);\\n\\n        assert(index <= idxLast);\\n\\n        address addressToMove = TroveOwners[idxLast];\\n\\n        TroveOwners[index] = addressToMove;\\n        Troves[addressToMove].arrayIndex = index;\\n        emit TroveIndexUpdated(addressToMove, index);\\n\\n        TroveOwners.pop();\\n    }\\n\\n    // --- Recovery Mode and TCR functions ---\\n\\n    function getTCR(uint _price) external view returns (uint) {\\n        return _getTCR(_price);\\n    }\\n\\n    function getUnreliableTCR() external view returns (uint) {\\n        return _getTCR(priceFeed.lastGoodPrice());\\n    }\\n\\n    function checkRecoveryMode(uint _price) external view returns (bool) {\\n        return _checkRecoveryMode(_price);\\n    }\\n\\n    function checkUnreliableRecoveryMode() external view returns (bool) {\\n        return _checkRecoveryMode(priceFeed.lastGoodPrice());\\n    }\\n\\n    // Check whether or not the system *would be* in Recovery Mode, given an WStETH:USD price, and the entire system coll and debt.\\n    function _checkPotentialRecoveryMode(\\n        uint _entireSystemColl,\\n        uint _entireSystemDebt,\\n        uint _price\\n    ) internal pure returns (bool) {\\n        uint TCR = LiquityMath._computeCR(\\n            _entireSystemColl,\\n            _entireSystemDebt,\\n            _price\\n        );\\n\\n        return TCR < CCR;\\n    }\\n\\n    // --- Redemption fee functions ---\\n\\n    /*\\n     * HEDGEHOG LOGIC UPDATES:\\n     * 1) Rename variable in docs (baseRate => redemptionBaseRate)\\n     * 2) decayedRemeptionBaseRate (decayedBaseRate) is now calculated by _calcDecayedRedemptionBaseRate();\\n     * 3) Updating RedemptionBaseRate state variable instead of baseRate\\n     * 4) Emiting RedemptionBaseRateUpdated instead of BaseRateUpdates();\\n     * 5) Now updates time only of redemeption operation instead of both redemption and borrow\\n     *\\n     * This function has two impacts on the redemptionBaseRate state variable:\\n     * 1) decays the redemptionBaseRate based on time passed since last redemption or BaseFeeLMA borrowing operation.\\n     * then,\\n     * 2) increases the redemptionBaseRate based on the amount redeemed, as a proportion of total supply\\n     */\\n    function _updateRedemptionBaseRateFromRedemption(\\n        uint _WStETHDrawn,\\n        uint _price,\\n        uint _totalBaseFeeLMASupply\\n    ) internal returns (uint) {\\n        uint decayedRedemptionBaseRate = _calcDecayedRedemptionBaseRate();\\n        // Hedgehog updates: Now calculating what part of total collateral is getting withdrawn from the\\n        // system\\n        /* Convert the drawn WStETH back to BaseFeeLMA at face value rate (1 BaseFeeLMA:1 USD), in order to get\\n         * the fraction of total supply that was redeemed at face value. */\\n        uint redeemedBaseFeeLMAFraction = _WStETHDrawn\\n            .mul(DECIMAL_PRECISION)\\n            .div(activePool.getWStETH());\\n\\n        // Hedgehog Updates: Remove division by BETA\\n        uint newBaseRate = decayedRedemptionBaseRate.add(\\n            redeemedBaseFeeLMAFraction\\n        );\\n\\n        newBaseRate = LiquityMath._min(newBaseRate, DECIMAL_PRECISION); // cap baseRate at a maximum of 100%\\n        //assert(newBaseRate <= DECIMAL_PRECISION); // This is already enforced in the line above\\n        assert(newBaseRate > 0); // Base rate is always non-zero after redemption\\n\\n        // Update the baseRate state variable\\n        redemptionBaseRate = newBaseRate;\\n        emit RedemptionBaseRateUpdated(newBaseRate);\\n\\n        _updateLastRedemptionTime();\\n        return newBaseRate;\\n    }\\n\\n    /*\\n     * HEDGEHOG LOGIC UPDATES:\\n     * 1) Now passing redemptionBaseRate instead of combined baseRate\\n     */\\n    function getRedemptionRate(\\n        uint _redemptionColl\\n    ) public view returns (uint) {\\n        return _calcRedemptionRate(redemptionBaseRate, _redemptionColl);\\n    }\\n\\n    function getRedemptionRateWithDecay(\\n        uint _redemptionColl\\n    ) public view returns (uint) {\\n        return\\n            _calcRedemptionRate(\\n                _calcDecayedRedemptionBaseRate(),\\n                _redemptionColl\\n            );\\n    }\\n\\n    /*\\n     * HEDGEHOG UPDATES:\\n     * Redemption Rate formula now is: RedFloor + RedBaseRate*MinuteDecayFactorMinutes + RedemptionETH/TotalColl\\n     * 1) Rename param name (_baseRate => _redemptionBaseRate)\\n     * 2) Now redeemed collateral divided by total collateral in active pool is added to the sum of redemption floor and redeem base rate\\n     */\\n    function _calcRedemptionRate(\\n        uint _redemptionBaseRate,\\n        uint _redemptionColl\\n    ) internal view returns (uint) {\\n        return\\n            LiquityMath._min(\\n                REDEMPTION_FEE_FLOOR.add(_redemptionBaseRate).add(\\n                    _redemptionColl.div(activePool.getWStETH())\\n                ),\\n                DECIMAL_PRECISION // cap at a maximum of 100%\\n            );\\n    }\\n\\n    function _getRedemptionFee(uint _WStETHDrawn) internal view returns (uint) {\\n        return _calcRedemptionFee(getRedemptionRate(_WStETHDrawn), _WStETHDrawn);\\n    }\\n\\n    function getRedemptionFeeWithDecay(\\n        uint _WStETHDrawn\\n    ) external view returns (uint) {\\n        return\\n            _calcRedemptionFee(\\n                getRedemptionRateWithDecay(_WStETHDrawn),\\n                _WStETHDrawn\\n            );\\n    }\\n\\n    function _calcRedemptionFee(\\n        uint _redemptionRate,\\n        uint _WStETHDrawn\\n    ) internal pure returns (uint) {\\n        uint redemptionFee = _redemptionRate.mul(_WStETHDrawn).div(\\n            DECIMAL_PRECISION\\n        );\\n        require(\\n            redemptionFee < _WStETHDrawn,\\n            \\\"TroveManager: Fee would eat up all returned collateral\\\"\\n        );\\n        return redemptionFee;\\n    }\\n\\n    // --- Borrowing fee functions ---\\n\\n    /*\\n     * HEDGEHOG LOGIC UPDATES:\\n     * 1) Now passing borrowBaseRate instead of combined baseRate\\n     */\\n    function getBorrowingRate(\\n        uint _issuedBaseFeeLMA\\n    ) public view returns (uint) {\\n        return _calcBorrowingRate(borrowBaseRate, _issuedBaseFeeLMA);\\n    }\\n\\n    /*\\n     * HEDGEHOG LOGIC UPDATES:\\n     * 1) Now passing _calcDecayedBorrowBaseRate instead of _calcDecayedBaseRate function to calculate the decayed borrowBaseRate\\n     */\\n    function getBorrowingRateWithDecay(\\n        uint _issuedBaseFeeLMA\\n    ) public view returns (uint) {\\n        return\\n            _calcBorrowingRate(\\n                _calcDecayedRedemptionBaseRate(),\\n                _issuedBaseFeeLMA\\n            );\\n    }\\n\\n    /*\\n     * HEDGEHOG UPDATES:\\n     * Now full dynamic fees formula is as follows: RedRate = RedFloor + RedBaseRate*MinuteDecayFactorMinutes + RedemptionETH / Total Collateral in the system\\n     * 1) Rename param name (_baseRate => _borrowBaseRate)\\n     * 2) Now adding issued asset divided by total supply of the asset to the sum of borrow flor and borrow decayed baseRate\\n     */\\n    function _calcBorrowingRate(\\n        uint _borrowBaseRate,\\n        uint _issuedBaseFeeLMA\\n    ) internal view returns (uint) {\\n        uint256 supply = baseFeeLMAToken.totalSupply();\\n        // Checking if there are tokens in supply, otherwise return 1 to avoid division by zero\\n        if (supply == 0) {\\n            return BORROWING_FEE_FLOOR;\\n        }\\n\\n        return\\n            LiquityMath._min(\\n                BORROWING_FEE_FLOOR.add(_borrowBaseRate).add(\\n                    _issuedBaseFeeLMA.mul(DECIMAL_PRECISION).div(supply)\\n                ),\\n                MAX_BORROWING_FEE\\n            );\\n    }\\n\\n    function getBorrowingFee(\\n        uint _BaseFeeLMADebt\\n    ) external view returns (uint, uint) {\\n        uint baseRate = getBorrowingRate(_BaseFeeLMADebt);\\n        return (_calcBorrowingFee(baseRate, _BaseFeeLMADebt), baseRate);\\n    }\\n\\n    function getBorrowingFeeWithDecay(\\n        uint _BaseFeeLMADebt\\n    ) external view returns (uint) {\\n        return\\n            _calcBorrowingFee(\\n                getBorrowingRateWithDecay(_BaseFeeLMADebt),\\n                _BaseFeeLMADebt\\n            );\\n    }\\n\\n    function _calcBorrowingFee(\\n        uint _borrowingRate,\\n        uint _BaseFeeLMADebt\\n    ) internal pure returns (uint) {\\n        return _borrowingRate.mul(_BaseFeeLMADebt).div(DECIMAL_PRECISION);\\n    }\\n\\n    function updateBaseRateFromBorrowing(uint _newBaseRate) external {\\n        require(\\n            msg.sender == borrowerOperationsAddress,\\n            \\\"TroveManager: Only Borrower operations may call\\\"\\n        );\\n        if (_newBaseRate >= BORROWING_FEE_FLOOR) {\\n            borrowBaseRate = _newBaseRate - BORROWING_FEE_FLOOR;\\n        } else {\\n            borrowBaseRate = 0;\\n        }\\n\\n        emit BorrowBaseRateUpdated(_newBaseRate);\\n    }\\n\\n    /*\\n     * HEDGEHOG LOGIC UPDATES:\\n     * 1) Now updates borrowBaseRate instead of baseRate used by both redemption and minting functions\\n     * 2) Emit BorrowBaseRateUpdated instead of BaseRateUpdated\\n     * 3) Now updates time only of borrow operation instead of both redemption and borrow\\n     * 4) Update doc variable name baseRate => borrowBaseRate\\n     */\\n    // Updates the borrowBaseRate state variable based on time elapsed since the last redemption or BaseFeeLMA borrowing operation.\\n    function decayBaseRateFromBorrowing() external {\\n        _requireCallerIsBorrowerOperations();\\n        uint decayedBaseRate = _calcDecayedBorrowBaseRate();\\n        assert(decayedBaseRate <= DECIMAL_PRECISION); // The baseRate can decay to 0\\n        // HEDGEHOG LOGIC CHANGES: Updating borrowing base rate instead\\n        borrowBaseRate = decayedBaseRate;\\n\\n        emit BorrowBaseRateUpdated(decayedBaseRate);\\n\\n        _updateLastBorrowTime();\\n    }\\n\\n    // --- Internal fee functions ---\\n\\n    /*\\n     * HEDGEHOG LOGIC UPDATES:\\n     * removed _updateLastFeeOpTime\\n     * New function _updateLastRedemptionTime simmilar to _updateLastFeeOpTime, that sets lastRedemptionTime and emits respective event.\\n     */\\n    // Update the last fee operation time only if time passed >= decay interval. This prevents base rate griefing.\\n    function _updateLastRedemptionTime() internal {\\n        uint timePassed = block.timestamp.sub(lastRedemptionTime);\\n\\n        if (timePassed >= SECONDS_IN_ONE_MINUTE) {\\n            lastRedemptionTime = block.timestamp;\\n            emit LastRedemptionTimeUpdated(block.timestamp);\\n        }\\n    }\\n\\n    /*\\n     * HEDGEHOG LOGIC UPDATES:\\n     * removed _updateLastFeeOpTime\\n     * New function _updateLastBorrowTime simmilar to _updateLastFeeOpTime, that sets lastBorrowTime and emits respective event.\\n     */\\n    // Update the last fee operation time only if time passed >= decay interval. This prevents base rate griefing.\\n    function _updateLastBorrowTime() internal {\\n        uint timePassed = block.timestamp.sub(lastBorrowTime);\\n\\n        if (timePassed >= SECONDS_IN_ONE_MINUTE) {\\n            lastBorrowTime = block.timestamp;\\n            emit LastBorrowTimeUpdated(block.timestamp);\\n        }\\n    }\\n\\n    /*\\n     * HEDGEHOG LOGIC UPDATES:\\n     * New function simmilar to _calcDecayedBaseRate. However used particularly for redemptionBaseRate calculation\\n     */\\n    function _calcDecayedRedemptionBaseRate() internal view returns (uint) {\\n        uint minutesPassed = _minutesPassedSinceLastRedemption();\\n\\n        uint decayFactor = LiquityMath._decPow(\\n            MINUTE_DECAY_REDEMPTION_FACTOR,\\n            minutesPassed\\n        );\\n\\n        return redemptionBaseRate.mul(decayFactor).div(DECIMAL_PRECISION);\\n    }\\n\\n    /*\\n     * HEDGEHOG LOGIC UPDATES:\\n     * New function simmilar to _calcDecayedBaseRate. However used particularly for borrowBaseRate calculation\\n     */\\n    function _calcDecayedBorrowBaseRate() internal view returns (uint) {\\n        uint minutesPassed = _minutesPassedSinceLastBorrow();\\n        uint decayFactor = LiquityMath._decPow(\\n            MINUTE_DECAY_BORROWING_FACTOR,\\n            minutesPassed\\n        );\\n\\n        return borrowBaseRate.mul(decayFactor).div(DECIMAL_PRECISION);\\n    }\\n\\n    /*\\n     * HEDGEHOG LOGIC UPDATES:\\n     * removed _minutesPassedSinceLastFeeOp\\n     * New function _minutesPassedSinceLastRedemption simmilar to _minutesPassedSinceLastFeeOp, that returns amount of minutes since last registered redemption\\n     */\\n    function _minutesPassedSinceLastRedemption() internal view returns (uint) {\\n        return\\n            (block.timestamp.sub(lastRedemptionTime)).div(\\n                SECONDS_IN_ONE_MINUTE\\n            );\\n    }\\n\\n    /*\\n     * HEDGEHOG LOGIC UPDATES:\\n     * removed _minutesPassedSinceLastFeeOp\\n     * New function _minutesPassedSinceLastBorrow simmilar to _minutesPassedSinceLastFeeOp, that returns amount of minutes since last registered borrow\\n     */\\n    function _minutesPassedSinceLastBorrow() internal view returns (uint) {\\n        return (block.timestamp.sub(lastBorrowTime)).div(SECONDS_IN_ONE_MINUTE);\\n    }\\n\\n    // --- 'require' wrapper functions ---\\n\\n    function _requireCallerIsBorrowerOperations() internal view {\\n        require(\\n            msg.sender == borrowerOperationsAddress,\\n            \\\"TroveManager: Caller is not the BorrowerOperations contract\\\"\\n        );\\n    }\\n\\n    function _requireTroveIsActive(address _borrower) internal view {\\n        require(\\n            Troves[_borrower].status == Status.active,\\n            \\\"TroveManager: Trove does not exist or is closed\\\"\\n        );\\n    }\\n\\n    function _requireBaseFeeLMABalanceCoversRedemption(\\n        IBaseFeeLMAToken _baseFeeLMAToken,\\n        address _redeemer,\\n        uint _amount\\n    ) internal view {\\n        require(\\n            _baseFeeLMAToken.balanceOf(_redeemer) >= _amount,\\n            \\\"TroveManager: Requested redemption amount must be <= user's BaseFeeLMA token balance\\\"\\n        );\\n    }\\n\\n    function _requireMoreThanOneTroveInSystem(\\n        uint TroveOwnersArrayLength\\n    ) internal view {\\n        require(\\n            TroveOwnersArrayLength > 1 && sortedTroves.getSize() > 1,\\n            \\\"TroveManager: Only one trove in the system\\\"\\n        );\\n    }\\n\\n    function _requireAmountGreaterThanZero(uint _amount) internal pure {\\n        require(_amount > 0, \\\"TroveManager: Amount must be greater than zero\\\");\\n    }\\n\\n    function _requireTCRoverMCR(uint _price) internal view {\\n        require(\\n            _getTCR(_price) >= MCR,\\n            \\\"TroveManager: Cannot redeem when TCR < MCR\\\"\\n        );\\n    }\\n\\n    function _requireAfterBootstrapPeriod() internal view {\\n        uint systemDeploymentTime = hogToken.getDeploymentStartTime();\\n        require(\\n            block.timestamp >= systemDeploymentTime.add(BOOTSTRAP_PERIOD),\\n            \\\"TroveManager: Redemptions are not allowed during bootstrap phase\\\"\\n        );\\n    }\\n\\n    function _requireValidMaxFeePercentage(\\n        uint _maxFeePercentage\\n    ) internal pure {\\n        require(\\n            _maxFeePercentage >= REDEMPTION_FEE_FLOOR &&\\n                _maxFeePercentage <= DECIMAL_PRECISION,\\n            \\\"Max fee percentage must be between 0.5% and 100%\\\"\\n        );\\n    }\\n\\n    // --- Trove property getters ---\\n\\n    function getTroveStatus(address _borrower) external view returns (uint) {\\n        return uint(Troves[_borrower].status);\\n    }\\n\\n    function getTroveStake(address _borrower) external view returns (uint) {\\n        return Troves[_borrower].stake;\\n    }\\n\\n    function getTroveDebt(address _borrower) external view returns (uint) {\\n        return Troves[_borrower].debt;\\n    }\\n\\n    function getTroveColl(address _borrower) external view returns (uint) {\\n        return Troves[_borrower].coll;\\n    }\\n\\n    // --- Trove property setters, called by BorrowerOperations ---\\n\\n    function setTroveStatus(address _borrower, uint _num) external {\\n        _requireCallerIsBorrowerOperations();\\n        Troves[_borrower].status = Status(_num);\\n    }\\n\\n    function increaseTroveColl(\\n        address _borrower,\\n        uint _collIncrease\\n    ) external returns (uint) {\\n        _requireCallerIsBorrowerOperations();\\n        uint newColl = Troves[_borrower].coll.add(_collIncrease);\\n        Troves[_borrower].coll = newColl;\\n        return newColl;\\n    }\\n\\n    function decreaseTroveColl(\\n        address _borrower,\\n        uint _collDecrease\\n    ) external returns (uint) {\\n        _requireCallerIsBorrowerOperations();\\n        uint newColl = Troves[_borrower].coll.sub(_collDecrease);\\n        Troves[_borrower].coll = newColl;\\n        return newColl;\\n    }\\n\\n    function increaseTroveDebt(\\n        address _borrower,\\n        uint _debtIncrease\\n    ) external returns (uint) {\\n        _requireCallerIsBorrowerOperations();\\n        uint newDebt = Troves[_borrower].debt.add(_debtIncrease);\\n        Troves[_borrower].debt = newDebt;\\n        return newDebt;\\n    }\\n\\n    function decreaseTroveDebt(\\n        address _borrower,\\n        uint _debtDecrease\\n    ) external returns (uint) {\\n        _requireCallerIsBorrowerOperations();\\n        uint newDebt = Troves[_borrower].debt.sub(_debtDecrease);\\n        Troves[_borrower].debt = newDebt;\\n        return newDebt;\\n    }\\n\\n    function getNormalLiquidationPrice(\\n        uint256 _coll,\\n        uint256 _debt\\n    ) external pure returns (uint256) {\\n        uint256 price = LiquityMath._findPriceBelowMCR(\\n            _coll,\\n            _debt,\\n            20,\\n            HedgehogBase.MCR\\n        );\\n        return price;\\n    }\\n\\n    function getRecoveryLiquidationPrice(\\n        uint256 _coll,\\n        uint256 _debt\\n    ) external pure returns (uint256) {\\n        uint256 price = LiquityMath._findPriceBelowMCR(\\n            _coll,\\n            _debt,\\n            20,\\n            HedgehogBase._100pct\\n        );\\n        return price;\\n    }\\n}\\n\",\"keccak256\":\"0x85ecdd0c9e14e8d203bbfb4fae5941982f0eee53d72b8d3e579f135e3d059431\",\"license\":\"MIT\"},\"contracts/dependencies/BaseMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\ncontract BaseMath {\\n    uint public constant DECIMAL_PRECISION = 1e18;\\n}\\n\",\"keccak256\":\"0x5338502be04e32035bbf0310600c8724281edc81b312f5d89c683b23d0bb3fa7\",\"license\":\"MIT\"},\"contracts/dependencies/CheckContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\ncontract CheckContract {\\n    /**\\n     * Check that the account is an already deployed non-destroyed contract.\\n     * See: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol#L12\\n     */\\n    function checkContract(address _account) internal view {\\n        require(_account != address(0), \\\"Account cannot be zero address\\\");\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(_account)\\n        }\\n        require(size > 0, \\\"Account code size cannot be zero\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x4860bce12806bb81c1e91ec617f2f95dd1774148b15645eaca94a67220096f2f\",\"license\":\"MIT\"},\"contracts/dependencies/HedgehogBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./BaseMath.sol\\\";\\nimport \\\"./LiquityMath.sol\\\";\\nimport \\\"../interfaces/IActivePool.sol\\\";\\nimport \\\"../interfaces/IDefaultPool.sol\\\";\\nimport \\\"../interfaces/IPriceFeed.sol\\\";\\nimport \\\"../interfaces/IHedgehogBase.sol\\\";\\n\\n/**\\n * @notice Fork of LiquityMath with an upgraded pragma and:\\n * Base contract for TroveManager, BorrowerOperations and StabilityPool. Contains global system constants and\\n * common functions.\\n *\\n * Hedgehog updates:\\n * Rename variables,\\n * Increase MCR and CCR,\\n * Update Min Net Debt\\n */\\ncontract HedgehogBase is BaseMath, IHedgehogBase {\\n    using SafeMath for uint;\\n\\n    uint public constant _100pct = 1000000000000000000; // 1e18 == 100%\\n\\n    // Minimum collateral ratio for individual troves\\n    uint public constant MCR = 1500000000000000000; // 150%\\n\\n    // Critical system collateral ratio. If the system's total collateral ratio (TCR) falls below the CCR, Recovery Mode is triggered.\\n    uint public constant CCR = 1500000000000000000; // 150%\\n\\n    // Amount of BaseFeeLMA to be locked in gas pool on opening troves\\n    uint public constant BaseFeeLMA_GAS_COMPENSATION = 50000;\\n\\n    // Minimum amount of net BaseFeeLMA debt a trove must have\\n    uint public constant MIN_NET_DEBT = 1; // TODO: Update that value\\n\\n    uint public constant PERCENT_DIVISOR = 200; // dividing by 200 yields 0.5%\\n\\n    uint public constant BORROWING_FEE_FLOOR = (DECIMAL_PRECISION / 1000) * 5; // 0.5%\\n\\n    IActivePool public activePool;\\n\\n    IDefaultPool public defaultPool;\\n\\n    IPriceFeed public override priceFeed;\\n\\n    // --- Gas compensation functions ---\\n\\n    // Returns the composite debt (drawn debt + gas compensation) of a trove, for the purpose of ICR calculation\\n    // HEDGEHOG UPDATES:\\n    // No longer deduct gas comp from a net debt\\n    function _getCompositeDebt(uint _debt) internal pure returns (uint) {\\n        return _debt;\\n    }\\n\\n    // HEDGEHOG UPDATES:\\n    // No longer deduct gas comp from a net debt\\n    function _getNetDebt(uint _debt) internal pure returns (uint) {\\n        return _debt;\\n    }\\n\\n    // Return the amount of WStETH to be drawn from a trove's collateral and sent as gas compensation.\\n    function _getCollGasCompensation(\\n        uint _entireColl\\n    ) internal pure returns (uint) {\\n        return _entireColl / PERCENT_DIVISOR;\\n    }\\n\\n    function getEntireSystemColl() public view returns (uint entireSystemColl) {\\n        uint activeColl = activePool.getWStETH();\\n        uint liquidatedColl = defaultPool.getWStETH();\\n\\n        return activeColl.add(liquidatedColl);\\n    }\\n\\n    function getEntireSystemDebt() public view returns (uint entireSystemDebt) {\\n        uint activeDebt = activePool.getBaseFeeLMADebt();\\n        uint closedDebt = defaultPool.getBaseFeeLMADebt();\\n\\n        return activeDebt.add(closedDebt);\\n    }\\n\\n    function _getTCR(uint _price) internal view returns (uint TCR) {\\n        uint entireSystemColl = getEntireSystemColl();\\n        uint entireSystemDebt = getEntireSystemDebt();\\n\\n        TCR = LiquityMath._computeCR(\\n            entireSystemColl,\\n            entireSystemDebt,\\n            _price\\n        );\\n\\n        return TCR;\\n    }\\n\\n    function _checkRecoveryMode(uint _price) internal view returns (bool) {\\n        uint TCR = _getTCR(_price);\\n\\n        return TCR < CCR;\\n    }\\n\\n    function _requireUserAcceptsFee(\\n        uint _fee,\\n        uint _amount,\\n        uint _maxFeePercentage\\n    ) internal pure {\\n        uint feePercentage = _fee.mul(DECIMAL_PRECISION).div(_amount);\\n        require(\\n            feePercentage <= _maxFeePercentage,\\n            \\\"Fee exceeded provided maximum\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x64bb74ff61cba442961eeb9c481aabbbbd175a314647cc0cc4f4f668fbaac6a6\",\"license\":\"MIT\"},\"contracts/dependencies/IERC2612.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @dev Interface of the ERC2612 standard as defined in the EIP.\\n *\\n * Adds the {permit} method, which can be used to change one's\\n * {IERC20-allowance} without having to send a transaction, by signing a\\n * message. This allows users to spend tokens without having to hold WStETH.\\n *\\n * See https://eips.wStETHeum.org/EIPS/eip-2612.\\n *\\n * Code adapted from https://github.com/OpenZeppelin/openzeppelin-contracts/pull/2237/\\n */\\ninterface IERC2612 {\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over `owner`'s tokens,\\n     * given `owner`'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.wStETHeum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current ERC2612 nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases `owner`'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     *\\n     * `owner` can limit the time a Permit is valid for by setting `deadline` to\\n     * a value in the near future. The deadline argument can be set to uint(-1) to\\n     * create Permits that effectively never expire.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function version() external view returns (string memory);\\n\\n    function permitTypeHash() external view returns (bytes32);\\n\\n    function domainSeparator() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xd862d70e8c9d8f912e73151567a70f47f3a7e52c9ec766ccc4e02f87bd0d32b9\",\"license\":\"MIT\"},\"contracts/dependencies/LiquityMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\n/**\\n * @notice A fork of Liquity Math library with an upgraded pragma\\n *\\n * Even though SafeMath is no longer required, the decision was made to keep it to avoid human factor errors\\n */\\n\\nlibrary LiquityMath {\\n    using SafeMath for uint;\\n\\n    uint internal constant DECIMAL_PRECISION = 1e18;\\n\\n    /* Precision for Nominal ICR (independent of price). Rationale for the value:\\n     *\\n     * - Making it \\u201ctoo high\\u201d could lead to overflows.\\n     * - Making it \\u201ctoo low\\u201d could lead to an ICR equal to zero, due to truncation from Solidity floor division.\\n     *\\n     * This value of 1e20 is chosen for safety: the NICR will only overflow for numerator > ~1e39 WStETH,\\n     * and will only truncate to 0 if the denominator is at least 1e20 times greater than the numerator.\\n     *\\n     */\\n    uint internal constant NICR_PRECISION = 1e20;\\n\\n    function _min(uint _a, uint _b) internal pure returns (uint) {\\n        return (_a < _b) ? _a : _b;\\n    }\\n\\n    function _max(uint _a, uint _b) internal pure returns (uint) {\\n        return (_a >= _b) ? _a : _b;\\n    }\\n\\n    /*\\n     * Multiply two decimal numbers and use normal rounding rules:\\n     * -round product up if 19'th mantissa digit >= 5\\n     * -round product down if 19'th mantissa digit < 5\\n     *\\n     * Used only inside the exponentiation, _decPow().\\n     */\\n    function decMul(uint x, uint y) internal pure returns (uint decProd) {\\n        uint prod_xy = x.mul(y);\\n\\n        decProd = prod_xy.add(DECIMAL_PRECISION / 2).div(DECIMAL_PRECISION);\\n    }\\n\\n    /*\\n     * _decPow: Exponentiation function for 18-digit decimal base, and integer exponent n.\\n     *\\n     * Uses the efficient \\\"exponentiation by squaring\\\" algorithm. O(log(n)) complexity.\\n     *\\n     * Called by two functions that represent time in units of minutes:\\n     * 1) TroveManager._calcDecayedBaseRate\\n     * 2) CommunityIssuance._getCumulativeIssuanceFraction\\n     *\\n     * The exponent is capped to avoid reverting due to overflow. The cap 525600000 equals\\n     * \\\"minutes in 1000 years\\\": 60 * 24 * 365 * 1000\\n     *\\n     * If a period of > 1000 years is ever used as an exponent in either of the above functions, the result will be\\n     * negligibly different from just passing the cap, since:\\n     *\\n     * In function 1), the decayed base rate will be 0 for 1000 years or > 1000 years\\n     * In function 2), the difference in tokens issued at 1000 years and any time > 1000 years, will be negligible\\n     */\\n    function _decPow(uint _base, uint _minutes) internal pure returns (uint) {\\n        if (_minutes > 525600000) {\\n            _minutes = 525600000;\\n        } // cap to avoid overflow\\n\\n        if (_minutes == 0) {\\n            return DECIMAL_PRECISION;\\n        }\\n\\n        uint y = DECIMAL_PRECISION;\\n        uint x = _base;\\n        uint n = _minutes;\\n\\n        // Exponentiation-by-squaring\\n        while (n > 1) {\\n            if (n % 2 == 0) {\\n                x = decMul(x, x);\\n                n = n.div(2);\\n            } else {\\n                // if (n % 2 != 0)\\n                y = decMul(x, y);\\n                x = decMul(x, x);\\n                n = (n.sub(1)).div(2);\\n            }\\n        }\\n\\n        return decMul(x, y);\\n    }\\n\\n    function _getAbsoluteDifference(\\n        uint _a,\\n        uint _b\\n    ) internal pure returns (uint) {\\n        return (_a >= _b) ? _a.sub(_b) : _b.sub(_a);\\n    }\\n\\n    function _computeNominalCR(\\n        uint _coll,\\n        uint _debt\\n    ) internal pure returns (uint) {\\n        if (_debt > 0) {\\n            return _coll.mul(NICR_PRECISION).div(_debt);\\n        }\\n        // Return the maximal value for uint256 if the Trove has a debt of 0. Represents \\\"infinite\\\" CR.\\n        else {\\n            // if (_debt == 0)\\n            return 2 ** 256 - 1;\\n        }\\n    }\\n\\n    /**\\n     * HEDGEHOG UPDATES:\\n     * Change coll ration calculation from [coll] * [price] / [debt] to\\n     * [coll] / [debt] / [gasPrice]\\n     */\\n    function _computeCR(\\n        uint _coll,\\n        uint _debt,\\n        uint _price\\n    ) internal pure returns (uint) {\\n        if (_debt > 0) {\\n            uint newCollRatio = _coll.mul(DECIMAL_PRECISION).div(_debt).div(\\n                _price\\n            );\\n\\n            return newCollRatio;\\n        }\\n        // Return the maximal value for uint256 if the Trove has a debt of 0. Represents \\\"infinite\\\" CR.\\n        else {\\n            // if (_debt == 0)\\n            return 2 ** 256 - 1;\\n        }\\n    }\\n\\n    function _findPriceBelowMCR(\\n        uint256 _coll,\\n        uint256 _debt,\\n        uint256 _startPrice,\\n        uint _mcr\\n    ) internal pure returns (uint256) {\\n        uint256 step = 1; // Starting with the smallest step size\\n        uint256 GWEI = 10 ** 9;\\n        uint256 previousPrice = _startPrice * GWEI; // To track previous iteration's price\\n\\n        for (\\n            uint256 price = _startPrice * GWEI;\\n            price <= 750 * GWEI;\\n            price += step\\n        ) {\\n            uint256 cr = _computeCR(_coll, _debt, price);\\n\\n            if (cr < _mcr) {\\n                // Start decreasing the price to find the exact threshold\\n                for (\\n                    uint256 decreasedPrice = previousPrice;\\n                    decreasedPrice <= price &&\\n                        decreasedPrice >= _startPrice * GWEI; // Added protection against underflow\\n                    decreasedPrice -= GWEI\\n                ) {\\n                    if (_computeCR(_coll, _debt, decreasedPrice) < _mcr) {\\n                        return decreasedPrice;\\n                    }\\n                }\\n            }\\n\\n            // Dynamically adjust step size\\n            if (cr < (_mcr - 200000000000000000)) {\\n                step = 20 * GWEI; // Increase step size if CR is much lower than MCR\\n            } else if (cr > (_mcr + 50000000000000000)) {\\n                step = GWEI; // Decrease step size if CR is much higher than MCR\\n            }\\n\\n            previousPrice = price; // Update previous price for the next iteration\\n        }\\n\\n        return 0; // return 0 if no price was found that brings the CR below MCR\\n    }\\n}\\n\",\"keccak256\":\"0xf35f0a7593e6f83df2321a267adfc6c9056ee596aa234247fdb6f47a535e1190\",\"license\":\"MIT\"},\"contracts/interfaces/IActivePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./IPool.sol\\\";\\n\\ninterface IActivePool is IPool {\\n    // --- Events ---\\n    event BorrowerOperationsAddressChanged(\\n        address _newBorrowerOperationsAddress\\n    );\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event ActivePoolBaseFeeLMADebtUpdated(uint _BaseFeeLMADebt);\\n    event ActivePoolWStETHBalanceUpdated(uint _WStETH);\\n\\n    // --- Functions ---\\n    function sendWStETH(address _account, uint _amount) external;\\n\\n    function getWStETH() external view returns (uint256);\\n\\n    function increaseBalance(uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x2750510caa258ed427582dcbc994400b837c5ddd0974c7a122c8265a37672d5a\",\"license\":\"MIT\"},\"contracts/interfaces/IBaseFeeLMAToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../dependencies/IERC2612.sol\\\";\\n\\ninterface IBaseFeeLMAToken is IERC20, IERC2612 {\\n    // --- Events ---\\n\\n    event TroveManagerAddressChanged(address _troveManagerAddress);\\n    event StabilityPoolAddressChanged(address _newStabilityPoolAddress);\\n    event BorrowerOperationsAddressChanged(\\n        address _newBorrowerOperationsAddress\\n    );\\n\\n    event BaseFeeLMATokenBalanceUpdated(address _user, uint _amount);\\n\\n    // --- Functions ---\\n\\n    function mint(address _account, uint256 _amount) external;\\n\\n    function burn(address _account, uint256 _amount) external;\\n\\n    function sendToPool(\\n        address _sender,\\n        address poolAddress,\\n        uint256 _amount\\n    ) external;\\n\\n    function returnFromPool(\\n        address poolAddress,\\n        address user,\\n        uint256 _amount\\n    ) external;\\n\\n    function totalSupply() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x4f46da70de4bab049b8e24afec10e5308ab86fbbfb77f2314c1607ff8e77a4d2\",\"license\":\"MIT\"},\"contracts/interfaces/ICollSurplusPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\ninterface ICollSurplusPool {\\n    // --- Events ---\\n\\n    event BorrowerOperationsAddressChanged(\\n        address _newBorrowerOperationsAddress\\n    );\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event ActivePoolAddressChanged(address _newActivePoolAddress);\\n\\n    event CollBalanceUpdated(address indexed _account, uint _newBalance);\\n    event WStETHSent(address _to, uint _amount);\\n\\n    // --- Contract setters ---\\n\\n    function setAddresses(\\n        address _borrowerOperationsAddress,\\n        address _troveManagerAddress,\\n        address _activePoolAddress\\n    ) external;\\n\\n    function getWStETH() external view returns (uint);\\n\\n    function getCollateral(address _account) external view returns (uint);\\n\\n    function accountSurplus(address _account, uint _amount) external;\\n\\n    function claimColl(address _account) external;\\n\\n    function increaseBalance(uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x396f0697f0891bb85cb79c7809fc7746c87b534a482cf6de722062f882f68867\",\"license\":\"MIT\"},\"contracts/interfaces/IDefaultPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./IPool.sol\\\";\\n\\ninterface IDefaultPool is IPool {\\n    // --- Events ---\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event DefaultPoolBaseFeeLMADebtUpdated(uint _BaseFeeLMADebt);\\n    event DefaultPoolWStETHBalanceUpdated(uint _WStETH);\\n\\n    // --- Functions ---\\n    function sendWStETHToActivePool(uint _amount) external;\\n\\n    function increaseBalance(uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0xcc2020d3bce2a96d948da8081ab99b5b80c89a975adbe888142084cb3a9b2eaa\",\"license\":\"MIT\"},\"contracts/interfaces/IFeesRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\ninterface IFeesRouter {\\n    function distributeDebtFee(uint256 _debt, uint256 _fee) external;\\n\\n    function distributeCollFee(uint256 _debt, uint256 _fee) external;\\n}\\n\",\"keccak256\":\"0xc4cf93bfebb76dff2c177677687cf7639144774c37b5cf86926347f027c1bab8\",\"license\":\"MIT\"},\"contracts/interfaces/IHOGStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\ninterface IHOGStaking {\\n    // --- Events --\\n\\n    event HOGTokenAddressSet(address _hogTokenAddress);\\n    event BaseFeeLMATokenAddressSet(address _baseFeeLMATokenAddress);\\n    event TroveManagerAddressSet(address _troveManager);\\n    event BorrowerOperationsAddressSet(address _borrowerOperationsAddress);\\n    event ActivePoolAddressSet(address _activePoolAddress);\\n\\n    event StakeChanged(address indexed staker, uint newStake);\\n    event StakingGainsWithdrawn(\\n        address indexed staker,\\n        uint BaseFeeLMAGain,\\n        uint WStETHGain\\n    );\\n    event F_WStETHUpdated(uint _F_WStETH);\\n    event F_BaseFeeLMAUpdated(uint _F_BaseFeeLMA);\\n    event TotalHOGStakedUpdated(uint _totalHOGStaked);\\n    event WStETHSent(address _account, uint _amount);\\n    event StakerSnapshotsUpdated(\\n        address _staker,\\n        uint _F_WStETH,\\n        uint _F_BaseFeeLMA\\n    );\\n\\n    // --- Functions ---\\n\\n    function setAddresses(\\n        address _hogTokenAddress,\\n        address _baseFeeLMATokenAddress,\\n        address _troveManagerAddress,\\n        address _borrowerOperationsAddress,\\n        address _activePoolAddress\\n    ) external;\\n\\n    function stake(uint _HOGamount) external;\\n\\n    function unstake(uint _HOGamount) external;\\n\\n    function increaseF_WStETH(uint _WStETHFee) external;\\n\\n    function increaseF_BaseFeeLMA(uint _HOGFee) external;\\n\\n    function getPendingWStETHGain(address _user) external view returns (uint);\\n\\n    function getPendingBaseFeeLMAGain(\\n        address _user\\n    ) external view returns (uint);\\n}\\n\",\"keccak256\":\"0x13e4a173500e5e3f5645d39df65bad38ba953e7438a9cd3fd170b928d0264926\",\"license\":\"MIT\"},\"contracts/interfaces/IHOGToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../dependencies/IERC2612.sol\\\";\\n\\ninterface IHOGToken is IERC20, IERC2612 {\\n    // --- Events ---\\n\\n    event CommunityIssuanceAddressSet(address _communityIssuanceAddress);\\n    event HOGStakingAddressSet(address _hogStakingAddress);\\n    event LockupContractFactoryAddressSet(\\n        address _lockupContractFactoryAddress\\n    );\\n\\n    // --- Functions ---\\n\\n    function sendToHOGStaking(address _sender, uint256 _amount) external;\\n\\n    function getDeploymentStartTime() external view returns (uint256);\\n\\n    function getLpRewardsEntitlement() external view returns (uint256);\\n\\n    function increaseAllowance(\\n        address _spender,\\n        uint256 _addedValues\\n    ) external returns (bool);\\n\\n    function decreaseAllowance(\\n        address _spender,\\n        uint256 _decreasedValue\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x2c56d03787067551d0947fc59ba84d41d4163856163557d5e59c023552d99f04\",\"license\":\"MIT\"},\"contracts/interfaces/IHedgehogBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./IPriceFeed.sol\\\";\\n\\ninterface IHedgehogBase {\\n    function priceFeed() external view returns (IPriceFeed);\\n}\\n\",\"keccak256\":\"0x9832f1daa908607df4b572f561b27463d7fc4eb27847a26b1c399c2ee6ee6110\",\"license\":\"MIT\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\n// Common interface for the Pools.\\ninterface IPool {\\n    // --- Events ---\\n\\n    event WStETHBalanceUpdated(uint _newBalance);\\n    event BaseFeeLMABalanceUpdated(uint _newBalance);\\n    event ActivePoolAddressChanged(address _newActivePoolAddress);\\n    event DefaultPoolAddressChanged(address _newDefaultPoolAddress);\\n    event StabilityPoolAddressChanged(address _newStabilityPoolAddress);\\n    event WStETHSent(address _to, uint _amount);\\n\\n    // --- Functions ---\\n\\n    function getWStETH() external view returns (uint);\\n\\n    function getBaseFeeLMADebt() external view returns (uint);\\n\\n    function increaseBaseFeeLMADebt(uint _amount) external;\\n\\n    function decreaseBaseFeeLMADebt(uint _amount) external;\\n\\n    // function increaseCollCountInPool(uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0xf2a64f0723f44525f25e56cc6b421542b5a9da52b33e4e490e4e41f7f98cd52b\",\"license\":\"MIT\"},\"contracts/interfaces/IPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\ninterface IPriceFeed {\\n    // --- Events ---\\n    event LastGoodPriceUpdated(uint _lastGoodPrice);\\n\\n    // --- Function ---\\n    function fetchPrice() external returns (uint);\\n\\n    function lastGoodPrice() external view returns (uint);\\n}\\n\",\"keccak256\":\"0xdee620e51756443b2cdd8ac54df2e6d7b38f700a9d1a3cc4d1a2f31ce09bbd1e\",\"license\":\"MIT\"},\"contracts/interfaces/ISortedTroves.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\n// Common interface for the SortedTroves Doubly Linked List.\\ninterface ISortedTroves {\\n    // --- Events ---\\n\\n    event SortedTrovesAddressChanged(address _sortedDoublyLLAddress);\\n    event BorrowerOperationsAddressChanged(address _borrowerOperationsAddress);\\n    event NodeAdded(address _id, uint _NICR);\\n    event NodeRemoved(address _id);\\n\\n    // --- Functions ---\\n\\n    function setParams(\\n        uint256 _size,\\n        address _TroveManagerAddress,\\n        address _borrowerOperationsAddress\\n    ) external;\\n\\n    function insert(\\n        address _id,\\n        uint256 _ICR,\\n        address _prevId,\\n        address _nextId\\n    ) external;\\n\\n    function remove(address _id) external;\\n\\n    function reInsert(\\n        address _id,\\n        uint256 _newICR,\\n        address _prevId,\\n        address _nextId\\n    ) external;\\n\\n    function contains(address _id) external view returns (bool);\\n\\n    function isFull() external view returns (bool);\\n\\n    function isEmpty() external view returns (bool);\\n\\n    function getSize() external view returns (uint256);\\n\\n    function getMaxSize() external view returns (uint256);\\n\\n    function getFirst() external view returns (address);\\n\\n    function getLast() external view returns (address);\\n\\n    function getNext(address _id) external view returns (address);\\n\\n    function getPrev(address _id) external view returns (address);\\n\\n    function validInsertPosition(\\n        uint256 _ICR,\\n        address _prevId,\\n        address _nextId\\n    ) external view returns (bool);\\n\\n    function findInsertPosition(\\n        uint256 _ICR,\\n        address _prevId,\\n        address _nextId\\n    ) external view returns (address, address);\\n}\\n\",\"keccak256\":\"0xee69ee66b0db6c873a5a1177e5e9178aa8be6c57aa988d1d7e7526f484862ecd\",\"license\":\"MIT\"},\"contracts/interfaces/IStabilityPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\n/*\\n * The Stability Pool holds BaseFeeLMA tokens deposited by Stability Pool depositors.\\n *\\n * When a trove is liquidated, then depending on system conditions, some of its BaseFeeLMA debt gets offset with\\n * BaseFeeLMA in the Stability Pool:  that is, the offset debt evaporates, and an equal amount of BaseFeeLMA tokens in the Stability Pool is burned.\\n *\\n * Thus, a liquidation causes each depositor to receive a BaseFeeLMA loss, in proportion to their deposit as a share of total deposits.\\n * They also receive an WStETH gain, as the WStETH collateral of the liquidated trove is distributed among Stability depositors,\\n * in the same proportion.\\n *\\n * When a liquidation occurs, it depletes every deposit by the same fraction: for example, a liquidation that depletes 40%\\n * of the total BaseFeeLMA in the Stability Pool, depletes 40% of each deposit.\\n *\\n * A deposit that has experienced a series of liquidations is termed a \\\"compounded deposit\\\": each liquidation depletes the deposit,\\n * multiplying it by some factor in range ]0,1[\\n *\\n * Please see the implementation spec in the proof document, which closely follows on from the compounded deposit / WStETH gain derivations:\\n * https://github.com/liquity/liquity/blob/master/papers/Scalable_Reward_Distribution_with_Compounding_Stakes.pdf\\n *\\n * --- HOG ISSUANCE TO STABILITY POOL DEPOSITORS ---\\n *\\n * A HOG issuance event occurs at every deposit operation, and every liquidation.\\n *\\n * Each deposit is tagged with the address of the front end through which it was made.\\n *\\n * All deposits earn a share of the issued HOG in proportion to the deposit as a share of total deposits. The HOG earned\\n * by a given deposit, is split between the depositor and the front end through which the deposit was made, based on the front end's kickbackRate.\\n *\\n * Please see the system Readme for an overview:\\n * https://github.com/liquity/dev/blob/main/README.md#hog-issuance-to-stability-providers\\n */\\ninterface IStabilityPool {\\n    // --- Events ---\\n\\n    event StabilityPoolWStETHBalanceUpdated(uint _newBalance);\\n    event StabilityPoolBaseFeeLMABalanceUpdated(uint _newBalance);\\n\\n    event BorrowerOperationsAddressChanged(\\n        address _newBorrowerOperationsAddress\\n    );\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event ActivePoolAddressChanged(address _newActivePoolAddress);\\n    event DefaultPoolAddressChanged(address _newDefaultPoolAddress);\\n    event BaseFeeLMATokenAddressChanged(address _newBaseFeeLMATokenAddress);\\n    event SortedTrovesAddressChanged(address _newSortedTrovesAddress);\\n    event PriceFeedAddressChanged(address _newPriceFeedAddress);\\n    event CommunityIssuanceAddressChanged(address _newCommunityIssuanceAddress);\\n\\n    event P_Updated(uint _P);\\n    event S_Updated(uint _S, uint128 _epoch, uint128 _scale);\\n    event G_Updated(uint _G, uint128 _epoch, uint128 _scale);\\n    event EpochUpdated(uint128 _currentEpoch);\\n    event ScaleUpdated(uint128 _currentScale);\\n\\n    event DepositSnapshotUpdated(\\n        address indexed _depositor,\\n        uint _P,\\n        uint _S,\\n        uint _G\\n    );\\n\\n    event WStETHGainWithdrawn(\\n        address indexed _depositor,\\n        uint _WStETH,\\n        uint _BaseFeeLMALoss\\n    );\\n    event HOGPaidToDepositor(address indexed _depositor, uint _HOG);\\n    event WStETHSent(address _to, uint _amount);\\n\\n    // --- Functions ---\\n\\n    /*\\n     * Called only once on init, to set addresses of other Hedgehog contracts\\n     * Callable only by owner, renounces ownership at the end\\n     */\\n    function setAddresses(\\n        address _borrowerOperationsAddress,\\n        address _troveManagerAddress,\\n        address _activePoolAddress,\\n        address _baseFeeLMATokenAddress,\\n        address _sortedTrovesAddress,\\n        address _priceFeedAddress,\\n        address _communityIssuanceAddress\\n    ) external;\\n\\n    /*\\n     * Initial checks:\\n     * - _amount is not zero\\n     * ---\\n     * - Triggers a HOG issuance, based on time passed since the last issuance. The HOG issuance is shared between *all* depositors and front ends\\n     * - Tags the deposit with the provided front end tag param, if it's a new deposit\\n     * - Sends depositor's accumulated gains (HOG, WStETH) to depositor\\n     * - Sends the tagged front end's accumulated HOG gains to the tagged front end\\n     * - Increases deposit and tagged front end's stake, and takes new snapshots for each.\\n     */\\n    function provideToSP(uint _amount) external;\\n\\n    /*\\n     * Initial checks:\\n     * - _amount is zero or there are no under collateralized troves left in the system\\n     * - User has a non zero deposit\\n     * ---\\n     * - Triggers a HOG issuance, based on time passed since the last issuance. The HOG issuance is shared between *all* depositors and front ends\\n     * - Removes the deposit's front end tag if it is a full withdrawal\\n     * - Sends all depositor's accumulated gains (HOG, WStETH) to depositor\\n     * - Sends the tagged front end's accumulated HOG gains to the tagged front end\\n     * - Decreases deposit and tagged front end's stake, and takes new snapshots for each.\\n     *\\n     * If _amount > userDeposit, the user withdraws all of their compounded deposit.\\n     */\\n    function withdrawFromSP(uint _amount) external;\\n\\n    /*\\n     * Initial checks:\\n     * - User has a non zero deposit\\n     * - User has an open trove\\n     * - User has some WStETH gain\\n     * ---\\n     * - Triggers a HOG issuance, based on time passed since the last issuance. The HOG issuance is shared between *all* depositors and front ends\\n     * - Sends all depositor's HOG gain to  depositor\\n     * - Sends all tagged front end's HOG gain to the tagged front end\\n     * - Transfers the depositor's entire WStETH gain from the Stability Pool to the caller's trove\\n     * - Leaves their compounded deposit in the Stability Pool\\n     * - Updates snapshots for deposit and tagged front end stake\\n     */\\n    function withdrawWStETHGainToTrove(\\n        address _upperHint,\\n        address _lowerHint\\n    ) external;\\n\\n    /*\\n     * Initial checks:\\n     * - Caller is TroveManager\\n     * ---\\n     * Cancels out the specified debt against the BaseFeeLMA contained in the Stability Pool (as far as possible)\\n     * and transfers the Trove's WStETH collateral from ActivePool to StabilityPool.\\n     * Only called by liquidation functions in the TroveManager.\\n     */\\n    function offset(uint _debt, uint _coll) external;\\n\\n    /*\\n     * Returns the total amount of WStETH held by the pool, accounted in an internal variable instead of `balance`,\\n     * to exclude edge cases like WStETH received from a self-destruct.\\n     */\\n    function getWStETH() external view returns (uint);\\n\\n    /*\\n     * Returns BaseFeeLMA held in the pool. Changes when users deposit/withdraw, and when Trove debt is offset.\\n     */\\n    function getTotalBaseFeeLMADeposits() external view returns (uint);\\n\\n    /*\\n     * Calculates the WStETH gain earned by the deposit since its last snapshots were taken.\\n     */\\n    function getDepositorWStETHGain(\\n        address _depositor\\n    ) external view returns (uint);\\n\\n    /*\\n     * Calculate the HOG gain earned by a deposit since its last snapshots were taken.\\n     * If not tagged with a front end, the depositor gets a 100% cut of what their deposit earned.\\n     * Otherwise, their cut of the deposit's earnings is equal to the kickbackRate, set by the front end through\\n     * which they made their deposit.\\n     */\\n    function getDepositorHOGGain(\\n        address _depositor\\n    ) external view returns (uint);\\n\\n    /*\\n     * Return the user's compounded deposit.\\n     */\\n    function getCompoundedBaseFeeLMADeposit(\\n        address _depositor\\n    ) external view returns (uint);\\n}\\n\",\"keccak256\":\"0xabf6fb0fd220a7b67010f1ddab008cc9a15b3485b24caf25f9e44220d5c55d6a\",\"license\":\"MIT\"},\"contracts/interfaces/ITroveManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./IHedgehogBase.sol\\\";\\nimport \\\"./IStabilityPool.sol\\\";\\nimport \\\"./IBaseFeeLMAToken.sol\\\";\\nimport \\\"./IHOGToken.sol\\\";\\nimport \\\"./IHOGStaking.sol\\\";\\n\\n// Common interface for the Trove Manager.\\ninterface ITroveManager is IHedgehogBase {\\n    // --- Events ---\\n\\n    event BorrowerOperationsAddressChanged(\\n        address _newBorrowerOperationsAddress\\n    );\\n    event PriceFeedAddressChanged(address _newPriceFeedAddress);\\n    event BaseFeeLMATokenAddressChanged(address _newBaseFeeLMATokenAddress);\\n    event ActivePoolAddressChanged(address _activePoolAddress);\\n    event DefaultPoolAddressChanged(address _defaultPoolAddress);\\n    event StabilityPoolAddressChanged(address _stabilityPoolAddress);\\n    event GasPoolAddressChanged(address _gasPoolAddress);\\n    event CollSurplusPoolAddressChanged(address _collSurplusPoolAddress);\\n    event SortedTrovesAddressChanged(address _sortedTrovesAddress);\\n    event HOGTokenAddressChanged(address _hogTokenAddress);\\n    event HOGStakingAddressChanged(address _hogStakingAddress);\\n\\n    event Liquidation(\\n        uint _liquidatedDebt,\\n        uint _liquidatedColl,\\n        uint _collGasCompensation,\\n        uint _BaseFeeLMAGasCompensation\\n    );\\n    event Redemption(\\n        uint _attemptedBaseFeeLMAAmount,\\n        uint _actualBaseFeeLMAAmount,\\n        uint _WStETHSent,\\n        uint _WStETHFee\\n    );\\n    event TroveUpdated(\\n        address indexed _borrower,\\n        uint _debt,\\n        uint _coll,\\n        uint stake,\\n        uint8 operation\\n    );\\n    event TroveLiquidated(\\n        address indexed _borrower,\\n        uint _debt,\\n        uint _coll,\\n        uint8 operation\\n    );\\n    event BaseRateUpdated(uint _baseRate);\\n    event LastFeeOpTimeUpdated(uint _lastFeeOpTime);\\n    event TotalStakesUpdated(uint _newTotalStakes);\\n    event SystemSnapshotsUpdated(\\n        uint _totalStakesSnapshot,\\n        uint _totalCollateralSnapshot\\n    );\\n    event LTermsUpdated(uint _L_WStETH, uint _L_BaseFeeLMADebt);\\n    event TroveSnapshotsUpdated(uint _L_WStETH, uint _L_BaseFeeLMADebt);\\n    event TroveIndexUpdated(address _borrower, uint _newIndex);\\n\\n    // --- Functions ---\\n\\n    function setAddresses(\\n        address _borrowerOperationsAddress,\\n        address _activePoolAddress,\\n        address _defaultPoolAddress,\\n        address _stabilityPoolAddress,\\n        address _gasPoolAddress,\\n        address _collSurplusPoolAddress,\\n        address _priceFeedAddress,\\n        address _baseFeeLMATokenAddress,\\n        address _sortedTrovesAddress,\\n        address _hogTokenAddress,\\n        address _hogStakingAddress\\n    ) external;\\n\\n    function stabilityPool() external view returns (IStabilityPool);\\n\\n    function baseFeeLMAToken() external view returns (IBaseFeeLMAToken);\\n\\n    function hogToken() external view returns (IHOGToken);\\n\\n    function hogStaking() external view returns (IHOGStaking);\\n\\n    function getTroveOwnersCount() external view returns (uint);\\n\\n    function getTroveFromTroveOwnersArray(\\n        uint _index\\n    ) external view returns (address);\\n\\n    function getNominalICR(address _borrower) external view returns (uint);\\n\\n    function getCurrentICR(\\n        address _borrower,\\n        uint _price\\n    ) external view returns (uint);\\n\\n    function liquidate(address _borrower) external;\\n\\n    function liquidateTroves(uint _n) external;\\n\\n    function batchLiquidateTroves(address[] calldata _troveArray) external;\\n\\n    function redeemCollateral(\\n        uint _BaseFeeLMAAmount,\\n        address _firstRedemptionHint,\\n        address _upperPartialRedemptionHint,\\n        address _lowerPartialRedemptionHint,\\n        uint _partialRedemptionHintNICR,\\n        uint _maxIterations,\\n        uint _maxFee\\n    ) external;\\n\\n    function updateStakeAndTotalStakes(\\n        address _borrower\\n    ) external returns (uint);\\n\\n    function updateTroveRewardSnapshots(address _borrower) external;\\n\\n    function addTroveOwnerToArray(\\n        address _borrower\\n    ) external returns (uint index);\\n\\n    function applyPendingRewards(address _borrower) external;\\n\\n    function getPendingWStETHReward(\\n        address _borrower\\n    ) external view returns (uint);\\n\\n    function getPendingBaseFeeLMADebtReward(\\n        address _borrower\\n    ) external view returns (uint);\\n\\n    function hasPendingRewards(address _borrower) external view returns (bool);\\n\\n    function getEntireDebtAndColl(\\n        address _borrower\\n    )\\n        external\\n        view\\n        returns (\\n            uint debt,\\n            uint coll,\\n            uint pendingBaseFeeLMADebtReward,\\n            uint pendingWStETHReward\\n        );\\n\\n    function closeTrove(address _borrower) external;\\n\\n    function removeStake(address _borrower) external;\\n\\n    function getRedemptionRate(\\n        uint _redemptionColl\\n    ) external view returns (uint);\\n\\n    function getRedemptionRateWithDecay(\\n        uint _redemptionColl\\n    ) external view returns (uint);\\n\\n    function getRedemptionFeeWithDecay(\\n        uint _WStETHDrawn\\n    ) external view returns (uint);\\n\\n    function getBorrowingRate(\\n        uint _issuedBaseFeeLMA\\n    ) external view returns (uint);\\n\\n    function getBorrowingRateWithDecay(\\n        uint _issuedBaseFeeLMA\\n    ) external view returns (uint);\\n\\n    function getBorrowingFee(\\n        uint BaseFeeLMADebt\\n    ) external view returns (uint, uint);\\n\\n    function getBorrowingFeeWithDecay(\\n        uint _BaseFeeLMADebt\\n    ) external view returns (uint);\\n\\n    function updateBaseRateFromBorrowing(uint _baseRate) external;\\n\\n    function decayBaseRateFromBorrowing() external;\\n\\n    function getTroveStatus(address _borrower) external view returns (uint);\\n\\n    function getTroveStake(address _borrower) external view returns (uint);\\n\\n    function getTroveDebt(address _borrower) external view returns (uint);\\n\\n    function getTroveColl(address _borrower) external view returns (uint);\\n\\n    function setTroveStatus(address _borrower, uint num) external;\\n\\n    function increaseTroveColl(\\n        address _borrower,\\n        uint _collIncrease\\n    ) external returns (uint);\\n\\n    function decreaseTroveColl(\\n        address _borrower,\\n        uint _collDecrease\\n    ) external returns (uint);\\n\\n    function increaseTroveDebt(\\n        address _borrower,\\n        uint _debtIncrease\\n    ) external returns (uint);\\n\\n    function decreaseTroveDebt(\\n        address _borrower,\\n        uint _collDecrease\\n    ) external returns (uint);\\n\\n    function getTCR(uint _price) external view returns (uint);\\n\\n    function checkRecoveryMode(uint _price) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x33b2744d95fae4541cfb11a799aa434885d1b30ac376faf25f487ddc4f7113a5\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x7434453e6d3b7d0e5d0eb7846ffdbc27f0ccf3b163591263739b628074dc103a\",\"license\":\"MIT\"}},\"version\":1}",
      "storageLayout": {
        "storage": [
          {
            "astId": 13017,
            "contract": "contracts/TroveManager.sol:TroveManager",
            "label": "activePool",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IActivePool)13652"
          },
          {
            "astId": 13020,
            "contract": "contracts/TroveManager.sol:TroveManager",
            "label": "defaultPool",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IDefaultPool)13991"
          },
          {
            "astId": 13024,
            "contract": "contracts/TroveManager.sol:TroveManager",
            "label": "priceFeed",
            "offset": 0,
            "slot": "2",
            "type": "t_contract(IPriceFeed)14250"
          },
          {
            "astId": 396,
            "contract": "contracts/TroveManager.sol:TroveManager",
            "label": "_owner",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 7870,
            "contract": "contracts/TroveManager.sol:TroveManager",
            "label": "borrowerOperationsAddress",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 7873,
            "contract": "contracts/TroveManager.sol:TroveManager",
            "label": "stabilityPool",
            "offset": 0,
            "slot": "5",
            "type": "t_contract(IStabilityPool)14555"
          },
          {
            "astId": 7875,
            "contract": "contracts/TroveManager.sol:TroveManager",
            "label": "gasPoolAddress",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 7878,
            "contract": "contracts/TroveManager.sol:TroveManager",
            "label": "collSurplusPool",
            "offset": 0,
            "slot": "7",
            "type": "t_contract(ICollSurplusPool)13963"
          },
          {
            "astId": 7881,
            "contract": "contracts/TroveManager.sol:TroveManager",
            "label": "baseFeeLMAToken",
            "offset": 0,
            "slot": "8",
            "type": "t_contract(IBaseFeeLMAToken)13716"
          },
          {
            "astId": 7884,
            "contract": "contracts/TroveManager.sol:TroveManager",
            "label": "hogToken",
            "offset": 0,
            "slot": "9",
            "type": "t_contract(IHOGToken)14174"
          },
          {
            "astId": 7887,
            "contract": "contracts/TroveManager.sol:TroveManager",
            "label": "hogStaking",
            "offset": 0,
            "slot": "10",
            "type": "t_contract(IHOGStaking)14118"
          },
          {
            "astId": 7890,
            "contract": "contracts/TroveManager.sol:TroveManager",
            "label": "feesRouter",
            "offset": 0,
            "slot": "11",
            "type": "t_contract(IFeesRouter)14008"
          },
          {
            "astId": 7893,
            "contract": "contracts/TroveManager.sol:TroveManager",
            "label": "sortedTroves",
            "offset": 0,
            "slot": "12",
            "type": "t_contract(ISortedTroves)14382"
          },
          {
            "astId": 7921,
            "contract": "contracts/TroveManager.sol:TroveManager",
            "label": "redemptionBaseRate",
            "offset": 0,
            "slot": "13",
            "type": "t_uint256"
          },
          {
            "astId": 7923,
            "contract": "contracts/TroveManager.sol:TroveManager",
            "label": "borrowBaseRate",
            "offset": 0,
            "slot": "14",
            "type": "t_uint256"
          },
          {
            "astId": 7925,
            "contract": "contracts/TroveManager.sol:TroveManager",
            "label": "lastRedemptionTime",
            "offset": 0,
            "slot": "15",
            "type": "t_uint256"
          },
          {
            "astId": 7927,
            "contract": "contracts/TroveManager.sol:TroveManager",
            "label": "lastBorrowTime",
            "offset": 0,
            "slot": "16",
            "type": "t_uint256"
          },
          {
            "astId": 7950,
            "contract": "contracts/TroveManager.sol:TroveManager",
            "label": "Troves",
            "offset": 0,
            "slot": "17",
            "type": "t_mapping(t_address,t_struct(Trove)7945_storage)"
          },
          {
            "astId": 7952,
            "contract": "contracts/TroveManager.sol:TroveManager",
            "label": "totalStakes",
            "offset": 0,
            "slot": "18",
            "type": "t_uint256"
          },
          {
            "astId": 7954,
            "contract": "contracts/TroveManager.sol:TroveManager",
            "label": "totalStakesSnapshot",
            "offset": 0,
            "slot": "19",
            "type": "t_uint256"
          },
          {
            "astId": 7956,
            "contract": "contracts/TroveManager.sol:TroveManager",
            "label": "totalCollateralSnapshot",
            "offset": 0,
            "slot": "20",
            "type": "t_uint256"
          },
          {
            "astId": 7958,
            "contract": "contracts/TroveManager.sol:TroveManager",
            "label": "L_WStETH",
            "offset": 0,
            "slot": "21",
            "type": "t_uint256"
          },
          {
            "astId": 7960,
            "contract": "contracts/TroveManager.sol:TroveManager",
            "label": "L_BaseFeeLMADebt",
            "offset": 0,
            "slot": "22",
            "type": "t_uint256"
          },
          {
            "astId": 7965,
            "contract": "contracts/TroveManager.sol:TroveManager",
            "label": "rewardSnapshots",
            "offset": 0,
            "slot": "23",
            "type": "t_mapping(t_address,t_struct(RewardSnapshot)7970_storage)"
          },
          {
            "astId": 7973,
            "contract": "contracts/TroveManager.sol:TroveManager",
            "label": "TroveOwners",
            "offset": 0,
            "slot": "24",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 7975,
            "contract": "contracts/TroveManager.sol:TroveManager",
            "label": "lastWStETHError_Redistribution",
            "offset": 0,
            "slot": "25",
            "type": "t_uint256"
          },
          {
            "astId": 7977,
            "contract": "contracts/TroveManager.sol:TroveManager",
            "label": "lastBaseFeeLMADebtError_Redistribution",
            "offset": 0,
            "slot": "26",
            "type": "t_uint256"
          }
        ],
        "types": {
          "t_address": {
            "encoding": "inplace",
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_address)dyn_storage": {
            "base": "t_address",
            "encoding": "dynamic_array",
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_contract(IActivePool)13652": {
            "encoding": "inplace",
            "label": "contract IActivePool",
            "numberOfBytes": "20"
          },
          "t_contract(IBaseFeeLMAToken)13716": {
            "encoding": "inplace",
            "label": "contract IBaseFeeLMAToken",
            "numberOfBytes": "20"
          },
          "t_contract(ICollSurplusPool)13963": {
            "encoding": "inplace",
            "label": "contract ICollSurplusPool",
            "numberOfBytes": "20"
          },
          "t_contract(IDefaultPool)13991": {
            "encoding": "inplace",
            "label": "contract IDefaultPool",
            "numberOfBytes": "20"
          },
          "t_contract(IFeesRouter)14008": {
            "encoding": "inplace",
            "label": "contract IFeesRouter",
            "numberOfBytes": "20"
          },
          "t_contract(IHOGStaking)14118": {
            "encoding": "inplace",
            "label": "contract IHOGStaking",
            "numberOfBytes": "20"
          },
          "t_contract(IHOGToken)14174": {
            "encoding": "inplace",
            "label": "contract IHOGToken",
            "numberOfBytes": "20"
          },
          "t_contract(IPriceFeed)14250": {
            "encoding": "inplace",
            "label": "contract IPriceFeed",
            "numberOfBytes": "20"
          },
          "t_contract(ISortedTroves)14382": {
            "encoding": "inplace",
            "label": "contract ISortedTroves",
            "numberOfBytes": "20"
          },
          "t_contract(IStabilityPool)14555": {
            "encoding": "inplace",
            "label": "contract IStabilityPool",
            "numberOfBytes": "20"
          },
          "t_enum(Status)7933": {
            "encoding": "inplace",
            "label": "enum TroveManager.Status",
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_struct(RewardSnapshot)7970_storage)": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => struct TroveManager.RewardSnapshot)",
            "numberOfBytes": "32",
            "value": "t_struct(RewardSnapshot)7970_storage"
          },
          "t_mapping(t_address,t_struct(Trove)7945_storage)": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => struct TroveManager.Trove)",
            "numberOfBytes": "32",
            "value": "t_struct(Trove)7945_storage"
          },
          "t_struct(RewardSnapshot)7970_storage": {
            "encoding": "inplace",
            "label": "struct TroveManager.RewardSnapshot",
            "members": [
              {
                "astId": 7967,
                "contract": "contracts/TroveManager.sol:TroveManager",
                "label": "WStETH",
                "offset": 0,
                "slot": "0",
                "type": "t_uint256"
              },
              {
                "astId": 7969,
                "contract": "contracts/TroveManager.sol:TroveManager",
                "label": "BaseFeeLMADebt",
                "offset": 0,
                "slot": "1",
                "type": "t_uint256"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Trove)7945_storage": {
            "encoding": "inplace",
            "label": "struct TroveManager.Trove",
            "members": [
              {
                "astId": 7935,
                "contract": "contracts/TroveManager.sol:TroveManager",
                "label": "debt",
                "offset": 0,
                "slot": "0",
                "type": "t_uint256"
              },
              {
                "astId": 7937,
                "contract": "contracts/TroveManager.sol:TroveManager",
                "label": "coll",
                "offset": 0,
                "slot": "1",
                "type": "t_uint256"
              },
              {
                "astId": 7939,
                "contract": "contracts/TroveManager.sol:TroveManager",
                "label": "stake",
                "offset": 0,
                "slot": "2",
                "type": "t_uint256"
              },
              {
                "astId": 7942,
                "contract": "contracts/TroveManager.sol:TroveManager",
                "label": "status",
                "offset": 0,
                "slot": "3",
                "type": "t_enum(Status)7933"
              },
              {
                "astId": 7944,
                "contract": "contracts/TroveManager.sol:TroveManager",
                "label": "arrayIndex",
                "offset": 1,
                "slot": "3",
                "type": "t_uint128"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_uint128": {
            "encoding": "inplace",
            "label": "uint128",
            "numberOfBytes": "16"
          },
          "t_uint256": {
            "encoding": "inplace",
            "label": "uint256",
            "numberOfBytes": "32"
          }
        }
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "getCurrentICR(address,uint256)": {
            "notice": "HEDGEHOG UPDATES: Get Price directly from the price feed instead of param passing"
          }
        },
        "notice": "Fork of Liquity's TroveManager. Most of the Logic remains unchanged. Changes to the contract: - Raised pragma version - Removed an import of ActivePool Interface - Logic updates with redemption & borrowing fees calculation and their distribution Even though SafeMath is no longer required, the decision was made to keep it to avoid human factor errors",
        "version": 1
      },
      "solcInput": "{\n  \"language\": \"Solidity\",\n  \"sources\": {\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Address.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Context.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/math/SignedMath.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\n    },\n    \"contracts/ActivePool.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./dependencies/CheckContract.sol\\\";\\n\\nimport \\\"./interfaces/IPool.sol\\\";\\n\\n/**\\n * @notice Fork of Liquity's Active Pool. Most of the logic remains unchanged.\\n * Changes to the contract:\\n * - Raised pragma version\\n * - Removed an import of ActivePool Interface\\n * - Updated variable names and docs to refer to BaseFeeLMA token and wwstETH as a collateral\\n * - Collateral is now an ERC20 token instead of a native one\\n * Even though SafeMath is no longer required, the decision was made to keep it to avoid human factor errors\\n *\\n * The Active Pool holds the stWStETH collateral and BaseFeeLMA debt (but not BaseFeeLMA tokens) for all active troves.\\n *\\n * When a trove is liquidated, it's stWStETH and BaseFeeLMA debt are transferred from the Active Pool, to either the\\n * Stability Pool, the Default Pool, or both, depending on the liquidation conditions.\\n *\\n */\\ncontract ActivePool is Ownable, CheckContract, IPool {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    string public constant NAME = \\\"ActivePool\\\";\\n\\n    address public borrowerOperationsAddress;\\n    address public troveManagerAddress;\\n    address public stabilityPoolAddress;\\n    address public defaultPoolAddress;\\n    address public feesRouter;\\n    IERC20 public WStETHToken;\\n    uint256 internal WStETH; // deposited wwstETH tracker\\n    uint256 internal BaseFeeLMADebt;\\n\\n    // --- Events ---\\n\\n    event BorrowerOperationsAddressChanged(\\n        address _newBorrowerOperationsAddress\\n    );\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event ActivePoolBaseFeeLMADebtUpdated(uint _BaseFeeLMADebt);\\n    event ActivePoolWStETHBalanceUpdated(uint _stWStETH);\\n    event WStETHTokenAddressUpdated(IERC20 _WStEthAddress);\\n    event FeesRouterAddressUpdated(address _feesRouter);\\n\\n    // --- Contract setters ---\\n\\n    /**\\n     * HEDGEHOG LOGIC UPDATES:\\n     * ERC20 is used as a collateral instead of native token.\\n     * Setting erc20 address in the initialisation\\n     */\\n    function setAddresses(\\n        address _borrowerOperationsAddress,\\n        address _troveManagerAddress,\\n        address _stabilityPoolAddress,\\n        address _defaultPoolAddress,\\n        IERC20 _wStETHTokenAddress,\\n        address _feesRouter\\n    ) external onlyOwner {\\n        checkContract(_borrowerOperationsAddress);\\n        checkContract(_troveManagerAddress);\\n        checkContract(_stabilityPoolAddress);\\n        checkContract(_defaultPoolAddress);\\n        checkContract(address(_wStETHTokenAddress));\\n        checkContract(_feesRouter);\\n\\n        borrowerOperationsAddress = _borrowerOperationsAddress;\\n        troveManagerAddress = _troveManagerAddress;\\n        stabilityPoolAddress = _stabilityPoolAddress;\\n        defaultPoolAddress = _defaultPoolAddress;\\n        WStETHToken = _wStETHTokenAddress;\\n        feesRouter = _feesRouter;\\n\\n        emit BorrowerOperationsAddressChanged(_borrowerOperationsAddress);\\n        emit TroveManagerAddressChanged(_troveManagerAddress);\\n        emit StabilityPoolAddressChanged(_stabilityPoolAddress);\\n        emit DefaultPoolAddressChanged(_defaultPoolAddress);\\n        emit WStETHTokenAddressUpdated(_wStETHTokenAddress);\\n        emit FeesRouterAddressUpdated(_feesRouter);\\n\\n        renounceOwnership();\\n    }\\n\\n    // --- Getters for public variables. Required by IPool interface ---\\n\\n    /*\\n     * Hedgehog Updates:\\n     * In case WStETH is 0 return 1 to avoid division by zero in base rate calculations\\n     * Returns the stWStETH state variable.\\n     *\\n     *Not necessarily equal to the the contract's raw WStETH balance - wStETH can be forcibly sent to contracts.\\n     */\\n    function getWStETH() external view override returns (uint) {\\n        return WStETH > 0 ? WStETH : 1;\\n    }\\n\\n    function getBaseFeeLMADebt() external view override returns (uint) {\\n        return BaseFeeLMADebt;\\n    }\\n\\n    // --- Pool functionality ---\\n\\n    /**\\n     * HEDGEHOG UPDATES: use SafeERC20 safe transfer instead of native token transfer\\n     *      Now also fees router may call sendWStETH function\\n     */\\n    function sendWStETH(address _account, uint _amount) external {\\n        _requireCallerIsBOorTroveMorSPorFRoute();\\n        WStETH = WStETH.sub(_amount);\\n        emit ActivePoolWStETHBalanceUpdated(WStETH);\\n        emit WStETHSent(_account, _amount);\\n        WStETHToken.safeTransfer(_account, _amount);\\n    }\\n\\n    function increaseBaseFeeLMADebt(uint _amount) external override {\\n        _requireCallerIsBOorTroveM();\\n        BaseFeeLMADebt = BaseFeeLMADebt.add(_amount);\\n        emit ActivePoolBaseFeeLMADebtUpdated(BaseFeeLMADebt);\\n    }\\n\\n    function decreaseBaseFeeLMADebt(uint _amount) external override {\\n        _requireCallerIsBOorTroveMorSP();\\n        BaseFeeLMADebt = BaseFeeLMADebt.sub(_amount);\\n        emit ActivePoolBaseFeeLMADebtUpdated(BaseFeeLMADebt);\\n    }\\n\\n    // --- 'require' functions ---\\n\\n    function _requireCallerIsBorrowerOperationsOrDefaultPool() internal view {\\n        require(\\n            msg.sender == borrowerOperationsAddress ||\\n                msg.sender == defaultPoolAddress,\\n            \\\"ActivePool: Caller is neither BO nor Default Pool\\\"\\n        );\\n    }\\n\\n    function _requireCallerIsBOorTroveMorSP() internal view {\\n        require(\\n            msg.sender == borrowerOperationsAddress ||\\n                msg.sender == troveManagerAddress ||\\n                msg.sender == stabilityPoolAddress,\\n            \\\"ActivePool: Caller is neither BorrowerOperations nor TroveManager nor StabilityPool\\\"\\n        );\\n    }\\n\\n    function _requireCallerIsBOorTroveMorSPorFRoute() internal view {\\n        require(\\n            msg.sender == borrowerOperationsAddress ||\\n                msg.sender == troveManagerAddress ||\\n                msg.sender == stabilityPoolAddress ||\\n                msg.sender == feesRouter,\\n            \\\"ActivePool: Caller is neither BorrowerOperations nor TroveManager nor StabilityPool\\\"\\n        );\\n    }\\n\\n    function _requireCallerIsBOorTroveM() internal view {\\n        require(\\n            msg.sender == borrowerOperationsAddress ||\\n                msg.sender == troveManagerAddress,\\n            \\\"ActivePool: Caller is neither BorrowerOperations nor TroveManager\\\"\\n        );\\n    }\\n\\n    /**\\n     * Hedgehog Updates:\\n     * Using increaseBalance function to increase activePool balance instead of fallback function\\n     */\\n    function increaseBalance(uint256 _amount) external {\\n        _requireCallerIsBorrowerOperationsOrDefaultPool();\\n        WStETH = WStETH.add(_amount);\\n        emit ActivePoolWStETHBalanceUpdated(WStETH);\\n    }\\n\\n    // --- Fallback function ---\\n\\n    /**\\n     * Hedgehog Updates:\\n     * Remove native token fallback function\\n     */\\n}\\n\"\n    },\n    \"contracts/BorrowerOperations.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./interfaces/ITroveManager.sol\\\";\\nimport \\\"./interfaces/IBaseFeeLMAToken.sol\\\";\\nimport \\\"./interfaces/ICollSurplusPool.sol\\\";\\nimport \\\"./interfaces/ISortedTroves.sol\\\";\\nimport \\\"./interfaces/IHOGStaking.sol\\\";\\nimport \\\"./interfaces/IFeesRouter.sol\\\";\\nimport \\\"./dependencies/HedgehogBase.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./dependencies/CheckContract.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @notice Fork of Liquity's BorrowerOperations. . Most of the Logic remains unchanged..\\n * Changes to the contract:\\n * - Raised pragma version\\n * - Removed an import of IBorrowerOperations Interface\\n * - Collateral is now an ERC20 token instead of a native one\\n * - Updated variable names and docs to refer to BaseFeeLMA token and wwstETH as a collateral\\n * - Logic updates with borrowing fees calculation and their distribution\\n * Even though SafeMath is no longer required, the decision was made to keep it to avoid human factor errors\\n */\\n\\ncontract BorrowerOperations is HedgehogBase, Ownable, CheckContract {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    string public constant NAME = \\\"BorrowerOperations\\\";\\n\\n    // --- Connected contract declarations ---\\n\\n    ITroveManager public troveManager;\\n\\n    address stabilityPoolAddress;\\n\\n    address gasPoolAddress;\\n\\n    IERC20 WStETHToken;\\n\\n    ICollSurplusPool collSurplusPool;\\n\\n    IHOGStaking public hogStaking;\\n    address public hogStakingAddress;\\n    IFeesRouter public feesRouter;\\n\\n    IBaseFeeLMAToken baseFeeLMAToken;\\n\\n    // A doubly linked list of Troves, sorted by their collateral ratios\\n    ISortedTroves public sortedTroves;\\n\\n    /* --- Variable container structs  ---\\n\\n    Used to hold, return and assign variables inside a function, in order to avoid the error:\\n    \\\"CompilerError: Stack too deep\\\". */\\n\\n    struct LocalVariables_adjustTrove {\\n        uint price;\\n        uint collChange;\\n        uint netDebtChange;\\n        bool isCollIncrease;\\n        uint debt;\\n        uint coll;\\n        uint oldICR;\\n        uint newICR;\\n        uint newTCR;\\n        uint BaseFeeLMAFee;\\n        uint newDebt;\\n        uint newColl;\\n        uint stake;\\n    }\\n\\n    struct LocalVariables_openTrove {\\n        uint price;\\n        uint BaseFeeLMAFee;\\n        uint netDebt;\\n        uint compositeDebt;\\n        uint ICR;\\n        uint NICR;\\n        uint stake;\\n        uint arrayIndex;\\n    }\\n\\n    struct ContractsCache {\\n        ITroveManager troveManager;\\n        IActivePool activePool;\\n        IBaseFeeLMAToken baseFeeLMAToken;\\n    }\\n\\n    enum BorrowerOperation {\\n        openTrove,\\n        closeTrove,\\n        adjustTrove\\n    }\\n\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event ActivePoolAddressChanged(address _activePoolAddress);\\n    event DefaultPoolAddressChanged(address _defaultPoolAddress);\\n    event StabilityPoolAddressChanged(address _stabilityPoolAddress);\\n    event GasPoolAddressChanged(address _gasPoolAddress);\\n    event CollSurplusPoolAddressChanged(address _collSurplusPoolAddress);\\n    event PriceFeedAddressChanged(address _newPriceFeedAddress);\\n    event SortedTrovesAddressChanged(address _sortedTrovesAddress);\\n    event BaseFeeLMATokenAddressChanged(address _BaseFeeLMATokenAddress);\\n    event HOGStakingAddressChanged(address _hogStakingAddress);\\n    event WStETHTokenAddressUpdated(IERC20 _WStEthAddress);\\n    event FeesRouterAddressUpdated(IFeesRouter _feesRouter);\\n\\n    event TroveCreated(address indexed _borrower, uint arrayIndex);\\n    event TroveUpdated(\\n        address indexed _borrower,\\n        uint _debt,\\n        uint _coll,\\n        uint stake,\\n        BorrowerOperation operation\\n    );\\n    event BaseFeeLMABorrowingFeePaid(\\n        address indexed _borrower,\\n        uint _BaseFeeLMAFee\\n    );\\n\\n    // --- Dependency setters ---\\n\\n    /**\\n     * HEDGEHOG LOGIC UPDATES:\\n     * ERC20 is used as a collateral instead of native token.\\n     * Setting erc20 address in the initialisation\\n     */\\n    function setAddresses(\\n        address _troveManagerAddress,\\n        address _activePoolAddress,\\n        address _defaultPoolAddress,\\n        address _stabilityPoolAddress,\\n        address _gasPoolAddress,\\n        address _collSurplusPoolAddress,\\n        address _priceFeedAddress,\\n        address _sortedTrovesAddress,\\n        address _baseFeeLMATokenAddress,\\n        address _hogStakingAddress,\\n        IERC20 _wStETHTokenAddress,\\n        IFeesRouter _feesRouter\\n    ) external onlyOwner {\\n        // This makes impossible to open a trove with zero withdrawn BaseFeeLMA\\n        assert(MIN_NET_DEBT > 0);\\n\\n        checkContract(_troveManagerAddress);\\n        checkContract(_activePoolAddress);\\n        checkContract(_defaultPoolAddress);\\n        checkContract(_stabilityPoolAddress);\\n        checkContract(_gasPoolAddress);\\n        checkContract(_collSurplusPoolAddress);\\n        checkContract(_priceFeedAddress);\\n        checkContract(_sortedTrovesAddress);\\n        checkContract(_baseFeeLMATokenAddress);\\n        checkContract(_hogStakingAddress);\\n        checkContract(address(_wStETHTokenAddress));\\n        checkContract(address(_feesRouter));\\n\\n        troveManager = ITroveManager(_troveManagerAddress);\\n        activePool = IActivePool(_activePoolAddress);\\n        defaultPool = IDefaultPool(_defaultPoolAddress);\\n        stabilityPoolAddress = _stabilityPoolAddress;\\n        gasPoolAddress = _gasPoolAddress;\\n        collSurplusPool = ICollSurplusPool(_collSurplusPoolAddress);\\n        priceFeed = IPriceFeed(_priceFeedAddress);\\n        sortedTroves = ISortedTroves(_sortedTrovesAddress);\\n        baseFeeLMAToken = IBaseFeeLMAToken(_baseFeeLMATokenAddress);\\n        hogStakingAddress = _hogStakingAddress;\\n        hogStaking = IHOGStaking(_hogStakingAddress);\\n        WStETHToken = _wStETHTokenAddress;\\n        feesRouter = _feesRouter;\\n\\n        emit TroveManagerAddressChanged(_troveManagerAddress);\\n        emit ActivePoolAddressChanged(_activePoolAddress);\\n        emit DefaultPoolAddressChanged(_defaultPoolAddress);\\n        emit StabilityPoolAddressChanged(_stabilityPoolAddress);\\n        emit GasPoolAddressChanged(_gasPoolAddress);\\n        emit CollSurplusPoolAddressChanged(_collSurplusPoolAddress);\\n        emit PriceFeedAddressChanged(_priceFeedAddress);\\n        emit SortedTrovesAddressChanged(_sortedTrovesAddress);\\n        emit BaseFeeLMATokenAddressChanged(_baseFeeLMATokenAddress);\\n        emit HOGStakingAddressChanged(_hogStakingAddress);\\n        emit WStETHTokenAddressUpdated(_wStETHTokenAddress);\\n        emit FeesRouterAddressUpdated(_feesRouter);\\n\\n        renounceOwnership();\\n    }\\n\\n    // --- Borrower Trove Operations ---\\n\\n    /**\\n     * HEDGEHOG UPDATES:\\n     * ERC20 is used as a collateral, therefore function may not rely on msg.value anymore\\n     * now passing a new param _collAmount\\n     * checking if _amount is greater then 0\\n     * Function is no longer payable\\n     */\\n    function openTrove(\\n        uint _maxFeePercentage,\\n        uint _BaseFeeLMAAmount,\\n        uint _collAmount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external {\\n        ContractsCache memory contractsCache = ContractsCache(\\n            troveManager,\\n            activePool,\\n            baseFeeLMAToken\\n        );\\n        LocalVariables_openTrove memory vars;\\n\\n        vars.price = priceFeed.fetchPrice();\\n        bool isRecoveryMode = _checkRecoveryMode(vars.price);\\n\\n        _requireValidMaxFeePercentage(_maxFeePercentage, isRecoveryMode);\\n        _requireTroveisNotActive(contractsCache.troveManager, msg.sender);\\n\\n        vars.BaseFeeLMAFee;\\n        vars.netDebt = _BaseFeeLMAAmount;\\n\\n        if (!isRecoveryMode) {\\n            vars.BaseFeeLMAFee = _triggerBorrowingFee(\\n                contractsCache.troveManager,\\n                _BaseFeeLMAAmount,\\n                _maxFeePercentage\\n            );\\n            // HEDGEHOG UPDATES: Do no subtract the fee from the debt\\n            // vars.netDebt = vars.netDebt.sub(vars.BaseFeeLMAFee);\\n        }\\n        _requireAtLeastMinNetDebt(vars.netDebt);\\n\\n        // HEDGEHOG UPDATES: composite debt now is just BaseFeeLMA amount. Without borrowing fee and without gas comp\\n        vars.compositeDebt = vars.netDebt;\\n        assert(vars.compositeDebt > 0);\\n\\n        vars.ICR = LiquityMath._computeCR(\\n            _collAmount,\\n            vars.compositeDebt,\\n            vars.price\\n        );\\n        vars.NICR = LiquityMath._computeNominalCR(\\n            _collAmount,\\n            vars.compositeDebt\\n        );\\n\\n        if (isRecoveryMode) {\\n            _requireICRisAboveCCR(vars.ICR);\\n        } else {\\n            _requireICRisAboveMCR(vars.ICR);\\n            uint newTCR = _getNewTCRFromTroveChange(\\n                _collAmount,\\n                true,\\n                vars.compositeDebt,\\n                true,\\n                vars.price\\n            ); // bools: coll increase, debt increase\\n            _requireNewTCRisAboveCCR(newTCR);\\n        }\\n\\n        // Set the trove struct's properties\\n        contractsCache.troveManager.setTroveStatus(msg.sender, 1);\\n        contractsCache.troveManager.increaseTroveColl(msg.sender, _collAmount);\\n        contractsCache.troveManager.increaseTroveDebt(\\n            msg.sender,\\n            vars.compositeDebt\\n        );\\n\\n        contractsCache.troveManager.updateTroveRewardSnapshots(msg.sender);\\n        vars.stake = contractsCache.troveManager.updateStakeAndTotalStakes(\\n            msg.sender\\n        );\\n\\n        sortedTroves.insert(msg.sender, vars.NICR, _upperHint, _lowerHint);\\n        vars.arrayIndex = contractsCache.troveManager.addTroveOwnerToArray(\\n            msg.sender\\n        );\\n        emit TroveCreated(msg.sender, vars.arrayIndex);\\n\\n        // Move the wStETH to the Active Pool, and mint the BaseFeeLMAAmount to the borrower\\n        _activePoolAddColl(contractsCache.activePool, _collAmount);\\n\\n        // Hedgehog Updates: Now amount transferred to the user is decrease by Fee and Gas Compensation reserve\\n        _withdrawBaseFeeLMA(\\n            contractsCache.activePool,\\n            contractsCache.baseFeeLMAToken,\\n            msg.sender,\\n            _BaseFeeLMAAmount -\\n                vars.BaseFeeLMAFee -\\n                BaseFeeLMA_GAS_COMPENSATION,\\n            vars.netDebt\\n        );\\n\\n        // HEDGEHOG UPDATES: Not increasing net debt anymore. only transferring the gas comp tokens\\n        // Move the BaseFeeLMA gas compensation to the Gas Pool\\n        _withdrawBaseFeeLMA(\\n            contractsCache.activePool,\\n            contractsCache.baseFeeLMAToken,\\n            gasPoolAddress,\\n            BaseFeeLMA_GAS_COMPENSATION,\\n            0\\n        );\\n\\n        emit TroveUpdated(\\n            msg.sender,\\n            vars.compositeDebt,\\n            _collAmount,\\n            vars.stake,\\n            BorrowerOperation.openTrove\\n        );\\n        emit BaseFeeLMABorrowingFeePaid(msg.sender, vars.BaseFeeLMAFee);\\n    }\\n\\n    /**\\n     * HEDGEHOG UPDATES:\\n     * ERC20 is used as a collateral, therefore function may not rely on msg.value anymore\\n     * now passing a new param _collIncrease in _adjustTrove function - in this particular case it is a passed param _amount\\n     * checking if _amount is greater then 0\\n     * Function is no longer payable\\n     */\\n    // Send WStETH as collateral to a trove\\n    function addColl(\\n        address _upperHint,\\n        address _lowerHint,\\n        uint _amount\\n    ) external {\\n        require(_amount > 0, \\\"Borrower Operations: Invalid amount\\\");\\n\\n        _adjustTrove(\\n            msg.sender,\\n            0,\\n            _amount,\\n            0,\\n            false,\\n            _upperHint,\\n            _lowerHint,\\n            0\\n        );\\n    }\\n\\n    /**\\n     * HEDGEHOG UPDATES:\\n     * ERC20 is used as a collateral, therefore function may not rely on msg.value anymore\\n     * now passing a new param _collIncrease in _adjustTrove function - in this particular case it is a passed param _amount\\n     * checking if _amount is greater then 0\\n     * Function is no longer payable\\n     */\\n    // Send WStETH as collateral to a trove. Called by only the Stability Pool.\\n    function moveWStETHGainToTrove(\\n        address _borrower,\\n        address _upperHint,\\n        address _lowerHint,\\n        uint _amount\\n    ) external {\\n        require(_amount > 0, \\\"Borrower Operations: Invalid amount\\\");\\n        _requireCallerIsStabilityPool();\\n        _adjustTrove(\\n            _borrower,\\n            0,\\n            _amount,\\n            0,\\n            false,\\n            _upperHint,\\n            _lowerHint,\\n            0\\n        );\\n    }\\n\\n    /**\\n     * HEDGEHOG UPDATES:\\n     * ERC20 is used as a collateral, therefore function may not rely on msg.value anymore\\n     * now passing a new param _collIncrease - in this particular case it is 0\\n     */\\n    // Withdraw WStETH collateral from a trove\\n    function withdrawColl(\\n        uint _collWithdrawal,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external {\\n        _adjustTrove(\\n            msg.sender,\\n            _collWithdrawal,\\n            0,\\n            0,\\n            false,\\n            _upperHint,\\n            _lowerHint,\\n            0\\n        );\\n    }\\n\\n    /**\\n     * HEDGEHOG UPDATES:\\n     * ERC20 is used as a collateral, therefore function may not rely on msg.value anymore\\n     * now passing a new param _collIncrease - in this particular case it is 0\\n     */\\n    // Withdraw BaseFeeLMA tokens from a trove: mint new BaseFeeLMA tokens to the owner, and increase the trove's debt accordingly\\n    function withdrawBaseFeeLMA(\\n        uint _maxFeePercentage,\\n        uint _BaseFeeLMAAmount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external {\\n        _adjustTrove(\\n            msg.sender,\\n            0,\\n            0,\\n            _BaseFeeLMAAmount,\\n            true,\\n            _upperHint,\\n            _lowerHint,\\n            _maxFeePercentage\\n        );\\n    }\\n\\n    /**\\n     * HEDGEHOG UPDATES:\\n     * ERC20 is used as a collateral, therefore function may not rely on msg.value anymore\\n     * now passing a new param _collIncrease - in this particular case it is 0\\n     */\\n    // Repay BaseFeeLMA tokens to a Trove: Burn the repaid BaseFeeLMA tokens, and reduce the trove's debt accordingly\\n    function repayBaseFeeLMA(\\n        uint _BaseFeeLMAAmount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external {\\n        _adjustTrove(\\n            msg.sender,\\n            0,\\n            0,\\n            _BaseFeeLMAAmount,\\n            false,\\n            _upperHint,\\n            _lowerHint,\\n            0\\n        );\\n    }\\n\\n    /**\\n     * HEDGEHOG UPDATES:\\n     * ERC20 is used as a collateral, therefore function may not rely on msg.value anymore\\n     * now passing a new param _collIncrease\\n     *\\n     * Function is no longer payable\\n     */\\n    function adjustTrove(\\n        uint _maxFeePercentage,\\n        uint _collWithdrawal,\\n        uint _collIncrease,\\n        uint _BaseFeeLMAChange,\\n        bool _isDebtIncrease,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external {\\n        _adjustTrove(\\n            msg.sender,\\n            _collWithdrawal,\\n            _collIncrease,\\n            _BaseFeeLMAChange,\\n            _isDebtIncrease,\\n            _upperHint,\\n            _lowerHint,\\n            _maxFeePercentage\\n        );\\n    }\\n\\n    /*\\n     * _adjustTrove(): Alongside a debt change, this function can perform either a collateral top-up or a collateral withdrawal.\\n     *\\n     * It therefore expects either a positive _collIncrease, or a positive _collWithdrawal argument.\\n     *\\n     * If both are positive, it will revert.\\n     */\\n    function _adjustTrove(\\n        address _borrower,\\n        uint _collWithdrawal,\\n        uint _collIncrease,\\n        uint _BaseFeeLMAChange,\\n        bool _isDebtIncrease,\\n        address _upperHint,\\n        address _lowerHint,\\n        uint _maxFeePercentage\\n    ) internal {\\n        ContractsCache memory contractsCache = ContractsCache(\\n            troveManager,\\n            activePool,\\n            baseFeeLMAToken\\n        );\\n        LocalVariables_adjustTrove memory vars;\\n\\n        vars.price = priceFeed.fetchPrice();\\n        bool isRecoveryMode = _checkRecoveryMode(vars.price);\\n\\n        if (_isDebtIncrease) {\\n            _requireValidMaxFeePercentage(_maxFeePercentage, isRecoveryMode);\\n            _requireNonZeroDebtChange(_BaseFeeLMAChange);\\n        }\\n        _requireSingularCollChange(_collWithdrawal, _collIncrease);\\n        _requireNonZeroAdjustment(\\n            _collWithdrawal,\\n            _collIncrease,\\n            _BaseFeeLMAChange\\n        );\\n        _requireTroveisActive(contractsCache.troveManager, _borrower);\\n\\n        // Confirm the operation is either a borrower adjusting their own trove, or a pure WStETH transfer from the Stability Pool to a trove\\n        assert(\\n            msg.sender == _borrower ||\\n                (msg.sender == stabilityPoolAddress &&\\n                    _collIncrease > 0 &&\\n                    _BaseFeeLMAChange == 0)\\n        );\\n\\n        contractsCache.troveManager.applyPendingRewards(_borrower);\\n\\n        // Get the collChange based on whether or not WStETH was sent in the transaction\\n        (vars.collChange, vars.isCollIncrease) = _getCollChange(\\n            _collIncrease,\\n            _collWithdrawal\\n        );\\n\\n        vars.netDebtChange = _BaseFeeLMAChange;\\n\\n        // If the adjustment incorporates a debt increase and system is in Normal Mode, then trigger a borrowing fee\\n        if (_isDebtIncrease && !isRecoveryMode) {\\n            vars.BaseFeeLMAFee = _triggerBorrowingFee(\\n                contractsCache.troveManager,\\n                _BaseFeeLMAChange,\\n                _maxFeePercentage\\n            );\\n            vars.netDebtChange = vars.netDebtChange.add(vars.BaseFeeLMAFee); // The raw debt change includes the fee\\n        }\\n\\n        vars.debt = contractsCache.troveManager.getTroveDebt(_borrower);\\n        vars.coll = contractsCache.troveManager.getTroveColl(_borrower);\\n\\n        // Get the trove's old ICR before the adjustment, and what its new ICR will be after the adjustment\\n        vars.oldICR = LiquityMath._computeCR(vars.coll, vars.debt, vars.price);\\n        vars.newICR = _getNewICRFromTroveChange(\\n            vars.coll,\\n            vars.debt,\\n            vars.collChange,\\n            vars.isCollIncrease,\\n            vars.netDebtChange,\\n            _isDebtIncrease,\\n            vars.price\\n        );\\n        assert(_collWithdrawal <= vars.coll);\\n\\n        // Check the adjustment satisfies all conditions for the current system mode\\n        _requireValidAdjustmentInCurrentMode(\\n            isRecoveryMode,\\n            _collWithdrawal,\\n            _isDebtIncrease,\\n            vars\\n        );\\n\\n        // When the adjustment is a debt repayment, check it's a valid amount and that the caller has enough BaseFeeLMA\\n        if (!_isDebtIncrease && _BaseFeeLMAChange > 0) {\\n            _requireAtLeastMinNetDebt(\\n                _getNetDebt(vars.debt).sub(vars.netDebtChange)\\n            );\\n            _requireValidBaseFeeLMARepayment(vars.debt, vars.netDebtChange);\\n            _requireSufficientBaseFeeLMABalance(\\n                contractsCache.baseFeeLMAToken,\\n                _borrower,\\n                vars.netDebtChange\\n            );\\n        }\\n\\n        (vars.newColl, vars.newDebt) = _updateTroveFromAdjustment(\\n            contractsCache.troveManager,\\n            _borrower,\\n            vars.collChange,\\n            vars.isCollIncrease,\\n            vars.netDebtChange,\\n            _isDebtIncrease\\n        );\\n        vars.stake = contractsCache.troveManager.updateStakeAndTotalStakes(\\n            _borrower\\n        );\\n\\n        // Re-insert trove in to the sorted list\\n        uint newNICR = _getNewNominalICRFromTroveChange(\\n            vars.coll,\\n            vars.debt,\\n            vars.collChange,\\n            vars.isCollIncrease,\\n            vars.netDebtChange,\\n            _isDebtIncrease\\n        );\\n        sortedTroves.reInsert(_borrower, newNICR, _upperHint, _lowerHint);\\n\\n        emit TroveUpdated(\\n            _borrower,\\n            vars.newDebt,\\n            vars.newColl,\\n            vars.stake,\\n            BorrowerOperation.adjustTrove\\n        );\\n        emit BaseFeeLMABorrowingFeePaid(msg.sender, vars.BaseFeeLMAFee);\\n\\n        // Use the unmodified _BaseFeeLMAChange here, as we don't send the fee to the user\\n        _moveTokensAndWStETHfromAdjustment(\\n            contractsCache.activePool,\\n            contractsCache.baseFeeLMAToken,\\n            msg.sender,\\n            vars.collChange,\\n            vars.isCollIncrease,\\n            _BaseFeeLMAChange,\\n            _isDebtIncrease,\\n            vars.netDebtChange\\n        );\\n    }\\n\\n    // Hedgehog Updates: Do not deduct gas fee compensation from trove Debt as user just received less tokens during position opening\\n    function closeTrove() external {\\n        ITroveManager troveManagerCached = troveManager;\\n        IActivePool activePoolCached = activePool;\\n        IBaseFeeLMAToken baseFeeLMATokenCached = baseFeeLMAToken;\\n\\n        _requireTroveisActive(troveManagerCached, msg.sender);\\n        uint price = priceFeed.fetchPrice();\\n        _requireNotInRecoveryMode(price);\\n\\n        troveManagerCached.applyPendingRewards(msg.sender);\\n\\n        uint coll = troveManagerCached.getTroveColl(msg.sender);\\n        uint debt = troveManagerCached.getTroveDebt(msg.sender);\\n\\n        _requireSufficientBaseFeeLMABalance(\\n            baseFeeLMATokenCached,\\n            msg.sender,\\n            debt // Hedgehog Updates: do not deduct gas comp anymore\\n        );\\n\\n        uint newTCR = _getNewTCRFromTroveChange(\\n            coll,\\n            false,\\n            debt,\\n            false,\\n            price\\n        );\\n        _requireNewTCRisAboveCCR(newTCR);\\n\\n        troveManagerCached.removeStake(msg.sender);\\n        troveManagerCached.closeTrove(msg.sender);\\n\\n        emit TroveUpdated(msg.sender, 0, 0, 0, BorrowerOperation.closeTrove);\\n\\n        // Hedgehog Updates: No longer deduction\\n        // Burn the repaid BaseFeeLMA from the user's balance and the gas compensation from the Gas Pool\\n        _repayBaseFeeLMA(\\n            activePoolCached,\\n            baseFeeLMATokenCached,\\n            msg.sender,\\n            debt\\n        );\\n        _repayBaseFeeLMA(\\n            activePoolCached,\\n            baseFeeLMATokenCached,\\n            gasPoolAddress,\\n            BaseFeeLMA_GAS_COMPENSATION\\n        );\\n\\n        // Send the collateral back to the user\\n        activePoolCached.sendWStETH(msg.sender, coll);\\n    }\\n\\n    /**\\n     * Claim remaining collateral from a redemption or from a liquidation with ICR > MCR in Recovery Mode\\n     */\\n    function claimCollateral() external {\\n        // send WStETH from CollSurplus Pool to owner\\n        collSurplusPool.claimColl(msg.sender);\\n    }\\n\\n    // --- Helper functions ---\\n\\n    // HEDGHEHOG UPDATES:\\n    // No longer passing token address param as it's not needed anymore\\n    function _triggerBorrowingFee(\\n        ITroveManager _troveManager,\\n        uint _BaseFeeLMAAmount,\\n        uint _maxFeePercentage\\n    ) internal returns (uint) {\\n        _troveManager.decayBaseRateFromBorrowing(); // decay the baseRate state variable\\n        (uint BaseFeeLMAFee, uint baseRate) = _troveManager.getBorrowingFee(\\n            _BaseFeeLMAAmount\\n        );\\n\\n        troveManager.updateBaseRateFromBorrowing(baseRate);\\n\\n        _requireUserAcceptsFee(\\n            BaseFeeLMAFee,\\n            _BaseFeeLMAAmount,\\n            _maxFeePercentage\\n        );\\n\\n        // HEDGHEHOG UPDATES:\\n        // Fees are now distributed among different addresses based on how big they are\\n        feesRouter.distributeDebtFee(_BaseFeeLMAAmount, BaseFeeLMAFee);\\n\\n        return BaseFeeLMAFee;\\n    }\\n\\n    function _getUSDValue(\\n        uint _coll,\\n        uint _price\\n    ) internal pure returns (uint) {\\n        uint usdValue = _price.mul(_coll).div(DECIMAL_PRECISION);\\n\\n        return usdValue;\\n    }\\n\\n    function _getCollChange(\\n        uint _collReceived,\\n        uint _requestedCollWithdrawal\\n    ) internal pure returns (uint collChange, bool isCollIncrease) {\\n        if (_collReceived != 0) {\\n            collChange = _collReceived;\\n            isCollIncrease = true;\\n        } else {\\n            collChange = _requestedCollWithdrawal;\\n        }\\n    }\\n\\n    // Update trove's coll and debt based on whether they increase or decrease\\n    function _updateTroveFromAdjustment(\\n        ITroveManager _troveManager,\\n        address _borrower,\\n        uint _collChange,\\n        bool _isCollIncrease,\\n        uint _debtChange,\\n        bool _isDebtIncrease\\n    ) internal returns (uint, uint) {\\n        uint newColl = (_isCollIncrease)\\n            ? _troveManager.increaseTroveColl(_borrower, _collChange)\\n            : _troveManager.decreaseTroveColl(_borrower, _collChange);\\n        uint newDebt = (_isDebtIncrease)\\n            ? _troveManager.increaseTroveDebt(_borrower, _debtChange)\\n            : _troveManager.decreaseTroveDebt(_borrower, _debtChange);\\n\\n        return (newColl, newDebt);\\n    }\\n\\n    function _moveTokensAndWStETHfromAdjustment(\\n        IActivePool _activePool,\\n        IBaseFeeLMAToken _baseFeeLMAToken,\\n        address _borrower,\\n        uint _collChange,\\n        bool _isCollIncrease,\\n        uint _BaseFeeLMAChange,\\n        bool _isDebtIncrease,\\n        uint _netDebtChange\\n    ) internal {\\n        if (_isDebtIncrease) {\\n            _withdrawBaseFeeLMA(\\n                _activePool,\\n                _baseFeeLMAToken,\\n                _borrower,\\n                _BaseFeeLMAChange,\\n                _netDebtChange\\n            );\\n        } else {\\n            _repayBaseFeeLMA(\\n                _activePool,\\n                _baseFeeLMAToken,\\n                _borrower,\\n                _BaseFeeLMAChange\\n            );\\n        }\\n\\n        if (_isCollIncrease) {\\n            _activePoolAddColl(_activePool, _collChange);\\n        } else {\\n            _activePool.sendWStETH(_borrower, _collChange);\\n        }\\n    }\\n\\n    /**\\n     * HEDGEHOG UPDATES: use SafeERC20 safe transfer instead of native token transfer\\n     * Send funds from User's accound instead of relaying native token through address(this)\\n     */\\n    // Send WStETH to Active Pool and increase its recorded WStETH balance\\n    function _activePoolAddColl(\\n        IActivePool _activePool,\\n        uint _amount\\n    ) internal {\\n        WStETHToken.safeTransferFrom(msg.sender, address(_activePool), _amount);\\n        activePool.increaseBalance(_amount);\\n    }\\n\\n    // Issue the specified amount of BaseFeeLMA to _account and increases the total active debt (_netDebtIncrease potentially includes a BaseFeeLMAFee)\\n    function _withdrawBaseFeeLMA(\\n        IActivePool _activePool,\\n        IBaseFeeLMAToken _baseFeeLMAToken,\\n        address _account,\\n        uint _BaseFeeLMAAmount,\\n        uint _netDebtIncrease\\n    ) internal {\\n        _activePool.increaseBaseFeeLMADebt(_netDebtIncrease);\\n\\n        _baseFeeLMAToken.mint(_account, _BaseFeeLMAAmount);\\n    }\\n\\n    // Burn the specified amount of BaseFeeLMA from _account and decreases the total active debt\\n    function _repayBaseFeeLMA(\\n        IActivePool _activePool,\\n        IBaseFeeLMAToken _baseFeeLMAToken,\\n        address _account,\\n        uint BaseFeeLMA\\n    ) internal {\\n        _activePool.decreaseBaseFeeLMADebt(BaseFeeLMA);\\n        _baseFeeLMAToken.burn(_account, BaseFeeLMA);\\n    }\\n\\n    // --- 'Require' wrapper functions ---\\n\\n    /**\\n     * HEDGEHOG UPDATES: checking passed param instead of msg.value\\n     */\\n    function _requireSingularCollChange(\\n        uint _collWithdrawal,\\n        uint _collIncrease\\n    ) internal pure {\\n        require(\\n            _collIncrease == 0 || _collWithdrawal == 0,\\n            \\\"BorrowerOperations: Cannot withdraw and add coll\\\"\\n        );\\n    }\\n\\n    function _requireCallerIsBorrower(address _borrower) internal view {\\n        require(\\n            msg.sender == _borrower,\\n            \\\"BorrowerOps: Caller must be the borrower for a withdrawal\\\"\\n        );\\n    }\\n\\n    /**\\n     * HEDGEHOG UPDATES: checking passed param instead of msg.value\\n     */\\n    function _requireNonZeroAdjustment(\\n        uint _collWithdrawal,\\n        uint _collIncrease,\\n        uint _BaseFeeLMAChange\\n    ) internal pure {\\n        require(\\n            _collIncrease != 0 ||\\n                _collWithdrawal != 0 ||\\n                _BaseFeeLMAChange != 0,\\n            \\\"BorrowerOps: There must be either a collateral change or a debt change\\\"\\n        );\\n    }\\n\\n    function _requireTroveisActive(\\n        ITroveManager _troveManager,\\n        address _borrower\\n    ) internal view {\\n        uint status = _troveManager.getTroveStatus(_borrower);\\n        require(status == 1, \\\"BorrowerOps: Trove does not exist or is closed\\\");\\n    }\\n\\n    function _requireTroveisNotActive(\\n        ITroveManager _troveManager,\\n        address _borrower\\n    ) internal view {\\n        uint status = _troveManager.getTroveStatus(_borrower);\\n        require(status != 1, \\\"BorrowerOps: Trove is active\\\");\\n    }\\n\\n    function _requireNonZeroDebtChange(uint _BaseFeeLMAChange) internal pure {\\n        require(\\n            _BaseFeeLMAChange > 0,\\n            \\\"BorrowerOps: Debt increase requires non-zero debtChange\\\"\\n        );\\n    }\\n\\n    function _requireNotInRecoveryMode(uint _price) internal view {\\n        require(\\n            !_checkRecoveryMode(_price),\\n            \\\"BorrowerOps: Operation not permitted during Recovery Mode\\\"\\n        );\\n    }\\n\\n    function _requireNoCollWithdrawal(uint _collWithdrawal) internal pure {\\n        require(\\n            _collWithdrawal == 0,\\n            \\\"BorrowerOps: Collateral withdrawal not permitted Recovery Mode\\\"\\n        );\\n    }\\n\\n    function _requireValidAdjustmentInCurrentMode(\\n        bool _isRecoveryMode,\\n        uint _collWithdrawal,\\n        bool _isDebtIncrease,\\n        LocalVariables_adjustTrove memory _vars\\n    ) internal view {\\n        /*\\n         *In Recovery Mode, only allow:\\n         *\\n         * - Pure collateral top-up\\n         * - Pure debt repayment\\n         * - Collateral top-up with debt repayment\\n         * - A debt increase combined with a collateral top-up which makes the ICR >= 150% and improves the ICR (and by extension improves the TCR).\\n         *\\n         * In Normal Mode, ensure:\\n         *\\n         * - The new ICR is above MCR\\n         * - The adjustment won't pull the TCR below CCR\\n         */\\n        if (_isRecoveryMode) {\\n            _requireNoCollWithdrawal(_collWithdrawal);\\n            if (_isDebtIncrease) {\\n                _requireICRisAboveCCR(_vars.newICR);\\n                _requireNewICRisAboveOldICR(_vars.newICR, _vars.oldICR);\\n            }\\n        } else {\\n            // if Normal Mode\\n            _requireICRisAboveMCR(_vars.newICR);\\n            _vars.newTCR = _getNewTCRFromTroveChange(\\n                _vars.collChange,\\n                _vars.isCollIncrease,\\n                _vars.netDebtChange,\\n                _isDebtIncrease,\\n                _vars.price\\n            );\\n            _requireNewTCRisAboveCCR(_vars.newTCR);\\n        }\\n    }\\n\\n    function _requireICRisAboveMCR(uint _newICR) internal pure {\\n        require(\\n            _newICR >= MCR,\\n            \\\"BorrowerOps: An operation that would result in ICR < MCR is not permitted\\\"\\n        );\\n    }\\n\\n    function _requireICRisAboveCCR(uint _newICR) internal pure {\\n        require(\\n            _newICR >= CCR,\\n            \\\"BorrowerOps: Operation must leave trove with ICR >= CCR\\\"\\n        );\\n    }\\n\\n    function _requireNewICRisAboveOldICR(\\n        uint _newICR,\\n        uint _oldICR\\n    ) internal pure {\\n        require(\\n            _newICR >= _oldICR,\\n            \\\"BorrowerOps: Cannot decrease your Trove's ICR in Recovery Mode\\\"\\n        );\\n    }\\n\\n    function _requireNewTCRisAboveCCR(uint _newTCR) internal pure {\\n        require(\\n            _newTCR >= CCR,\\n            \\\"BorrowerOps: An operation that would result in TCR < CCR is not permitted\\\"\\n        );\\n    }\\n\\n    function _requireAtLeastMinNetDebt(uint _netDebt) internal pure {\\n        require(\\n            _netDebt >= MIN_NET_DEBT,\\n            \\\"BorrowerOps: Trove's net debt must be greater than minimum\\\"\\n        );\\n    }\\n\\n    // Hedgehog updates: not subtracting gas compensation from the debt\\n    function _requireValidBaseFeeLMARepayment(\\n        uint _currentDebt,\\n        uint _debtRepayment\\n    ) internal pure {\\n        require(\\n            _debtRepayment <= _currentDebt,\\n            \\\"BorrowerOps: Amount repaid must not be larger than the Trove's debt\\\"\\n        );\\n    }\\n\\n    function _requireCallerIsStabilityPool() internal view {\\n        require(\\n            msg.sender == stabilityPoolAddress,\\n            \\\"BorrowerOps: Caller is not Stability Pool\\\"\\n        );\\n    }\\n\\n    function _requireSufficientBaseFeeLMABalance(\\n        IBaseFeeLMAToken _baseFeeLMAToken,\\n        address _borrower,\\n        uint _debtRepayment\\n    ) internal view {\\n        require(\\n            _baseFeeLMAToken.balanceOf(_borrower) >= _debtRepayment,\\n            \\\"BorrowerOps: Caller doesnt have enough BaseFeeLMA to make repayment\\\"\\n        );\\n    }\\n\\n    function _requireValidMaxFeePercentage(\\n        uint _maxFeePercentage,\\n        bool _isRecoveryMode\\n    ) internal pure {\\n        if (_isRecoveryMode) {\\n            require(\\n                _maxFeePercentage <= DECIMAL_PRECISION,\\n                \\\"Max fee percentage must less than or equal to 100%\\\"\\n            );\\n        } else {\\n            require(\\n                _maxFeePercentage >= BORROWING_FEE_FLOOR &&\\n                    _maxFeePercentage <= DECIMAL_PRECISION,\\n                \\\"Max fee percentage must be between 0.5% and 100%\\\"\\n            );\\n        }\\n    }\\n\\n    // --- ICR and TCR getters ---\\n\\n    // Compute the new collateral ratio, considering the change in coll and debt. Assumes 0 pending rewards.\\n    function _getNewNominalICRFromTroveChange(\\n        uint _coll,\\n        uint _debt,\\n        uint _collChange,\\n        bool _isCollIncrease,\\n        uint _debtChange,\\n        bool _isDebtIncrease\\n    ) internal pure returns (uint) {\\n        (uint newColl, uint newDebt) = _getNewTroveAmounts(\\n            _coll,\\n            _debt,\\n            _collChange,\\n            _isCollIncrease,\\n            _debtChange,\\n            _isDebtIncrease\\n        );\\n\\n        uint newNICR = LiquityMath._computeNominalCR(newColl, newDebt);\\n        return newNICR;\\n    }\\n\\n    // Compute the new collateral ratio, considering the change in coll and debt. Assumes 0 pending rewards.\\n    function _getNewICRFromTroveChange(\\n        uint _coll,\\n        uint _debt,\\n        uint _collChange,\\n        bool _isCollIncrease,\\n        uint _debtChange,\\n        bool _isDebtIncrease,\\n        uint _price\\n    ) internal pure returns (uint) {\\n        (uint newColl, uint newDebt) = _getNewTroveAmounts(\\n            _coll,\\n            _debt,\\n            _collChange,\\n            _isCollIncrease,\\n            _debtChange,\\n            _isDebtIncrease\\n        );\\n\\n        uint newICR = LiquityMath._computeCR(newColl, newDebt, _price);\\n        return newICR;\\n    }\\n\\n    function _getNewTroveAmounts(\\n        uint _coll,\\n        uint _debt,\\n        uint _collChange,\\n        bool _isCollIncrease,\\n        uint _debtChange,\\n        bool _isDebtIncrease\\n    ) internal pure returns (uint, uint) {\\n        uint newColl = _coll;\\n        uint newDebt = _debt;\\n\\n        newColl = _isCollIncrease\\n            ? _coll.add(_collChange)\\n            : _coll.sub(_collChange);\\n        newDebt = _isDebtIncrease\\n            ? _debt.add(_debtChange)\\n            : _debt.sub(_debtChange);\\n\\n        return (newColl, newDebt);\\n    }\\n\\n    function _getNewTCRFromTroveChange(\\n        uint _collChange,\\n        bool _isCollIncrease,\\n        uint _debtChange,\\n        bool _isDebtIncrease,\\n        uint _price\\n    ) internal view returns (uint) {\\n        uint totalColl = getEntireSystemColl();\\n        uint totalDebt = getEntireSystemDebt();\\n\\n        totalColl = _isCollIncrease\\n            ? totalColl.add(_collChange)\\n            : totalColl.sub(_collChange);\\n        totalDebt = _isDebtIncrease\\n            ? totalDebt.add(_debtChange)\\n            : totalDebt.sub(_debtChange);\\n\\n        uint newTCR = LiquityMath._computeCR(totalColl, totalDebt, _price);\\n        return newTCR;\\n    }\\n\\n    function getCompositeDebt(uint _debt) external pure returns (uint) {\\n        return _getCompositeDebt(_debt);\\n    }\\n\\n    function computeUnreliableCR(\\n        uint _coll,\\n        uint _debt\\n    ) external view returns (uint) {\\n        uint price = priceFeed.lastGoodPrice();\\n\\n        return LiquityMath._computeCR(_coll, _debt, price);\\n    }\\n}\\n\"\n    },\n    \"contracts/dependencies/BaseMath.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\ncontract BaseMath {\\n    uint public constant DECIMAL_PRECISION = 1e18;\\n}\\n\"\n    },\n    \"contracts/dependencies/CheckContract.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\ncontract CheckContract {\\n    /**\\n     * Check that the account is an already deployed non-destroyed contract.\\n     * See: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol#L12\\n     */\\n    function checkContract(address _account) internal view {\\n        require(_account != address(0), \\\"Account cannot be zero address\\\");\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(_account)\\n        }\\n        require(size > 0, \\\"Account code size cannot be zero\\\");\\n    }\\n}\\n\"\n    },\n    \"contracts/dependencies/HedgehogBase.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./BaseMath.sol\\\";\\nimport \\\"./LiquityMath.sol\\\";\\nimport \\\"../interfaces/IActivePool.sol\\\";\\nimport \\\"../interfaces/IDefaultPool.sol\\\";\\nimport \\\"../interfaces/IPriceFeed.sol\\\";\\nimport \\\"../interfaces/IHedgehogBase.sol\\\";\\n\\n/**\\n * @notice Fork of LiquityMath with an upgraded pragma and:\\n * Base contract for TroveManager, BorrowerOperations and StabilityPool. Contains global system constants and\\n * common functions.\\n *\\n * Hedgehog updates:\\n * Rename variables,\\n * Increase MCR and CCR,\\n * Update Min Net Debt\\n */\\ncontract HedgehogBase is BaseMath, IHedgehogBase {\\n    using SafeMath for uint;\\n\\n    uint public constant _100pct = 1000000000000000000; // 1e18 == 100%\\n\\n    // Minimum collateral ratio for individual troves\\n    uint public constant MCR = 1500000000000000000; // 150%\\n\\n    // Critical system collateral ratio. If the system's total collateral ratio (TCR) falls below the CCR, Recovery Mode is triggered.\\n    uint public constant CCR = 1500000000000000000; // 150%\\n\\n    // Amount of BaseFeeLMA to be locked in gas pool on opening troves\\n    uint public constant BaseFeeLMA_GAS_COMPENSATION = 50000;\\n\\n    // Minimum amount of net BaseFeeLMA debt a trove must have\\n    uint public constant MIN_NET_DEBT = 1; // TODO: Update that value\\n\\n    uint public constant PERCENT_DIVISOR = 200; // dividing by 200 yields 0.5%\\n\\n    uint public constant BORROWING_FEE_FLOOR = (DECIMAL_PRECISION / 1000) * 5; // 0.5%\\n\\n    IActivePool public activePool;\\n\\n    IDefaultPool public defaultPool;\\n\\n    IPriceFeed public override priceFeed;\\n\\n    // --- Gas compensation functions ---\\n\\n    // Returns the composite debt (drawn debt + gas compensation) of a trove, for the purpose of ICR calculation\\n    // HEDGEHOG UPDATES:\\n    // No longer deduct gas comp from a net debt\\n    function _getCompositeDebt(uint _debt) internal pure returns (uint) {\\n        return _debt;\\n    }\\n\\n    // HEDGEHOG UPDATES:\\n    // No longer deduct gas comp from a net debt\\n    function _getNetDebt(uint _debt) internal pure returns (uint) {\\n        return _debt;\\n    }\\n\\n    // Return the amount of WStETH to be drawn from a trove's collateral and sent as gas compensation.\\n    function _getCollGasCompensation(\\n        uint _entireColl\\n    ) internal pure returns (uint) {\\n        return _entireColl / PERCENT_DIVISOR;\\n    }\\n\\n    function getEntireSystemColl() public view returns (uint entireSystemColl) {\\n        uint activeColl = activePool.getWStETH();\\n        uint liquidatedColl = defaultPool.getWStETH();\\n\\n        return activeColl.add(liquidatedColl);\\n    }\\n\\n    function getEntireSystemDebt() public view returns (uint entireSystemDebt) {\\n        uint activeDebt = activePool.getBaseFeeLMADebt();\\n        uint closedDebt = defaultPool.getBaseFeeLMADebt();\\n\\n        return activeDebt.add(closedDebt);\\n    }\\n\\n    function _getTCR(uint _price) internal view returns (uint TCR) {\\n        uint entireSystemColl = getEntireSystemColl();\\n        uint entireSystemDebt = getEntireSystemDebt();\\n\\n        TCR = LiquityMath._computeCR(\\n            entireSystemColl,\\n            entireSystemDebt,\\n            _price\\n        );\\n\\n        return TCR;\\n    }\\n\\n    function _checkRecoveryMode(uint _price) internal view returns (bool) {\\n        uint TCR = _getTCR(_price);\\n\\n        return TCR < CCR;\\n    }\\n\\n    function _requireUserAcceptsFee(\\n        uint _fee,\\n        uint _amount,\\n        uint _maxFeePercentage\\n    ) internal pure {\\n        uint feePercentage = _fee.mul(DECIMAL_PRECISION).div(_amount);\\n        require(\\n            feePercentage <= _maxFeePercentage,\\n            \\\"Fee exceeded provided maximum\\\"\\n        );\\n    }\\n}\\n\"\n    },\n    \"contracts/dependencies/IERC2612.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @dev Interface of the ERC2612 standard as defined in the EIP.\\n *\\n * Adds the {permit} method, which can be used to change one's\\n * {IERC20-allowance} without having to send a transaction, by signing a\\n * message. This allows users to spend tokens without having to hold WStETH.\\n *\\n * See https://eips.wStETHeum.org/EIPS/eip-2612.\\n *\\n * Code adapted from https://github.com/OpenZeppelin/openzeppelin-contracts/pull/2237/\\n */\\ninterface IERC2612 {\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over `owner`'s tokens,\\n     * given `owner`'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.wStETHeum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current ERC2612 nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases `owner`'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     *\\n     * `owner` can limit the time a Permit is valid for by setting `deadline` to\\n     * a value in the near future. The deadline argument can be set to uint(-1) to\\n     * create Permits that effectively never expire.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function version() external view returns (string memory);\\n\\n    function permitTypeHash() external view returns (bytes32);\\n\\n    function domainSeparator() external view returns (bytes32);\\n}\\n\"\n    },\n    \"contracts/dependencies/LiquityMath.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\n/**\\n * @notice A fork of Liquity Math library with an upgraded pragma\\n *\\n * Even though SafeMath is no longer required, the decision was made to keep it to avoid human factor errors\\n */\\n\\nlibrary LiquityMath {\\n    using SafeMath for uint;\\n\\n    uint internal constant DECIMAL_PRECISION = 1e18;\\n\\n    /* Precision for Nominal ICR (independent of price). Rationale for the value:\\n     *\\n     * - Making it “too high” could lead to overflows.\\n     * - Making it “too low” could lead to an ICR equal to zero, due to truncation from Solidity floor division.\\n     *\\n     * This value of 1e20 is chosen for safety: the NICR will only overflow for numerator > ~1e39 WStETH,\\n     * and will only truncate to 0 if the denominator is at least 1e20 times greater than the numerator.\\n     *\\n     */\\n    uint internal constant NICR_PRECISION = 1e20;\\n\\n    function _min(uint _a, uint _b) internal pure returns (uint) {\\n        return (_a < _b) ? _a : _b;\\n    }\\n\\n    function _max(uint _a, uint _b) internal pure returns (uint) {\\n        return (_a >= _b) ? _a : _b;\\n    }\\n\\n    /*\\n     * Multiply two decimal numbers and use normal rounding rules:\\n     * -round product up if 19'th mantissa digit >= 5\\n     * -round product down if 19'th mantissa digit < 5\\n     *\\n     * Used only inside the exponentiation, _decPow().\\n     */\\n    function decMul(uint x, uint y) internal pure returns (uint decProd) {\\n        uint prod_xy = x.mul(y);\\n\\n        decProd = prod_xy.add(DECIMAL_PRECISION / 2).div(DECIMAL_PRECISION);\\n    }\\n\\n    /*\\n     * _decPow: Exponentiation function for 18-digit decimal base, and integer exponent n.\\n     *\\n     * Uses the efficient \\\"exponentiation by squaring\\\" algorithm. O(log(n)) complexity.\\n     *\\n     * Called by two functions that represent time in units of minutes:\\n     * 1) TroveManager._calcDecayedBaseRate\\n     * 2) CommunityIssuance._getCumulativeIssuanceFraction\\n     *\\n     * The exponent is capped to avoid reverting due to overflow. The cap 525600000 equals\\n     * \\\"minutes in 1000 years\\\": 60 * 24 * 365 * 1000\\n     *\\n     * If a period of > 1000 years is ever used as an exponent in either of the above functions, the result will be\\n     * negligibly different from just passing the cap, since:\\n     *\\n     * In function 1), the decayed base rate will be 0 for 1000 years or > 1000 years\\n     * In function 2), the difference in tokens issued at 1000 years and any time > 1000 years, will be negligible\\n     */\\n    function _decPow(uint _base, uint _minutes) internal pure returns (uint) {\\n        if (_minutes > 525600000) {\\n            _minutes = 525600000;\\n        } // cap to avoid overflow\\n\\n        if (_minutes == 0) {\\n            return DECIMAL_PRECISION;\\n        }\\n\\n        uint y = DECIMAL_PRECISION;\\n        uint x = _base;\\n        uint n = _minutes;\\n\\n        // Exponentiation-by-squaring\\n        while (n > 1) {\\n            if (n % 2 == 0) {\\n                x = decMul(x, x);\\n                n = n.div(2);\\n            } else {\\n                // if (n % 2 != 0)\\n                y = decMul(x, y);\\n                x = decMul(x, x);\\n                n = (n.sub(1)).div(2);\\n            }\\n        }\\n\\n        return decMul(x, y);\\n    }\\n\\n    function _getAbsoluteDifference(\\n        uint _a,\\n        uint _b\\n    ) internal pure returns (uint) {\\n        return (_a >= _b) ? _a.sub(_b) : _b.sub(_a);\\n    }\\n\\n    function _computeNominalCR(\\n        uint _coll,\\n        uint _debt\\n    ) internal pure returns (uint) {\\n        if (_debt > 0) {\\n            return _coll.mul(NICR_PRECISION).div(_debt);\\n        }\\n        // Return the maximal value for uint256 if the Trove has a debt of 0. Represents \\\"infinite\\\" CR.\\n        else {\\n            // if (_debt == 0)\\n            return 2 ** 256 - 1;\\n        }\\n    }\\n\\n    /**\\n     * HEDGEHOG UPDATES:\\n     * Change coll ration calculation from [coll] * [price] / [debt] to\\n     * [coll] / [debt] / [gasPrice]\\n     */\\n    function _computeCR(\\n        uint _coll,\\n        uint _debt,\\n        uint _price\\n    ) internal pure returns (uint) {\\n        if (_debt > 0) {\\n            uint newCollRatio = _coll.mul(DECIMAL_PRECISION).div(_debt).div(\\n                _price\\n            );\\n\\n            return newCollRatio;\\n        }\\n        // Return the maximal value for uint256 if the Trove has a debt of 0. Represents \\\"infinite\\\" CR.\\n        else {\\n            // if (_debt == 0)\\n            return 2 ** 256 - 1;\\n        }\\n    }\\n\\n    function _findPriceBelowMCR(\\n        uint256 _coll,\\n        uint256 _debt,\\n        uint256 _startPrice,\\n        uint _mcr\\n    ) internal pure returns (uint256) {\\n        uint256 step = 1; // Starting with the smallest step size\\n        uint256 GWEI = 10 ** 9;\\n        uint256 previousPrice = _startPrice * GWEI; // To track previous iteration's price\\n\\n        for (\\n            uint256 price = _startPrice * GWEI;\\n            price <= 750 * GWEI;\\n            price += step\\n        ) {\\n            uint256 cr = _computeCR(_coll, _debt, price);\\n\\n            if (cr < _mcr) {\\n                // Start decreasing the price to find the exact threshold\\n                for (\\n                    uint256 decreasedPrice = previousPrice;\\n                    decreasedPrice <= price &&\\n                        decreasedPrice >= _startPrice * GWEI; // Added protection against underflow\\n                    decreasedPrice -= GWEI\\n                ) {\\n                    if (_computeCR(_coll, _debt, decreasedPrice) < _mcr) {\\n                        return decreasedPrice;\\n                    }\\n                }\\n            }\\n\\n            // Dynamically adjust step size\\n            if (cr < (_mcr - 200000000000000000)) {\\n                step = 20 * GWEI; // Increase step size if CR is much lower than MCR\\n            } else if (cr > (_mcr + 50000000000000000)) {\\n                step = GWEI; // Decrease step size if CR is much higher than MCR\\n            }\\n\\n            previousPrice = price; // Update previous price for the next iteration\\n        }\\n\\n        return 0; // return 0 if no price was found that brings the CR below MCR\\n    }\\n}\\n\"\n    },\n    \"contracts/FeesRouter.sol\": {\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./interfaces/IBaseFeeLMAToken.sol\\\";\\nimport \\\"./interfaces/IActivePool.sol\\\";\\nimport \\\"./interfaces/IHOGStaking.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\nerror InvalidIndex();\\nerror InvalidAddress();\\nerror InvalidLength();\\nerror TooManyConfigValues();\\n\\ncontract FeesRouter is AccessControl {\\n    bytes32 internal constant SETTER = keccak256(\\\"SETTER\\\");\\n    bytes32 internal constant ULTIMATE_ADMIN = keccak256(\\\"ULTIMATE_ADMIN\\\");\\n    bytes32 internal constant DEPLOYER = keccak256(\\\"DEPLOYER\\\");\\n\\n    struct FeeConfig {\\n        uint256 amountA;\\n        uint256 amountB;\\n        uint256 amountC;\\n        address addressA;\\n        address addressB;\\n        address addressC;\\n    }\\n\\n    mapping(uint256 => FeeConfig) public debtFeeConfigs;\\n    mapping(uint256 => FeeConfig) public collFeeConfigs;\\n\\n    uint256 public feeCount;\\n    IBaseFeeLMAToken baseFeeLMAToken;\\n    IActivePool activePool;\\n    IHOGStaking hogStaking;\\n\\n    event DebtFeeConfigUpdated(\\n        address indexed setter,\\n        uint256 indexed percentage,\\n        uint256 amountA,\\n        uint256 amountB,\\n        uint256 amountC,\\n        address addressA,\\n        address addressB,\\n        address addressC\\n    );\\n\\n    event CollFeeConfigUpdated(\\n        address indexed setter,\\n        uint256 indexed percentage,\\n        uint256 amountA,\\n        uint256 amountB,\\n        uint256 amountC,\\n        address addressA,\\n        address addressB,\\n        address addressC\\n    );\\n\\n    constructor(address _defaultAdmin, address _ultimateAdmin) {\\n        if (address(_defaultAdmin) == address(0)) revert InvalidAddress();\\n        if (address(_ultimateAdmin) == address(0)) revert InvalidAddress();\\n\\n        _grantRole(ULTIMATE_ADMIN, _ultimateAdmin);\\n        _setRoleAdmin(SETTER, ULTIMATE_ADMIN);\\n        _grantRole(SETTER, _defaultAdmin);\\n        _grantRole(DEPLOYER, msg.sender);\\n    }\\n\\n    function setAddresses(\\n        IActivePool _activePool,\\n        IBaseFeeLMAToken _baseFeeLMAToken,\\n        IHOGStaking _hogStaking\\n    ) external onlyRole(DEPLOYER) {\\n        if (address(_activePool) == address(0)) revert InvalidAddress();\\n        if (address(_baseFeeLMAToken) == address(0)) revert InvalidAddress();\\n        if (address(_hogStaking) == address(0)) revert InvalidAddress();\\n\\n        activePool = _activePool;\\n        baseFeeLMAToken = _baseFeeLMAToken;\\n        hogStaking = _hogStaking;\\n\\n        _revokeRole(DEPLOYER, msg.sender);\\n    }\\n\\n    function setFeeConfigs(\\n        uint256 _percentage,\\n        uint256 _amountA,\\n        uint256 _amountB,\\n        uint256 _amountC,\\n        address _addressA,\\n        address _addressB,\\n        address _addressC\\n    ) external onlyRole(SETTER) {\\n        if (_percentage % 5 != 0) revert InvalidIndex();\\n\\n        debtFeeConfigs[_percentage] = FeeConfig(\\n            _amountA,\\n            _amountB,\\n            _amountC,\\n            _addressA,\\n            _addressB,\\n            _addressC\\n        );\\n\\n        collFeeConfigs[_percentage] = FeeConfig(\\n            _amountA,\\n            _amountB,\\n            _amountC,\\n            _addressA,\\n            _addressB,\\n            _addressC\\n        );\\n\\n        emit DebtFeeConfigUpdated(\\n            msg.sender,\\n            _percentage,\\n            _amountA,\\n            _amountB,\\n            _amountC,\\n            _addressA,\\n            _addressB,\\n            _addressC\\n        );\\n\\n        emit CollFeeConfigUpdated(\\n            msg.sender,\\n            _percentage,\\n            _amountA,\\n            _amountB,\\n            _amountC,\\n            _addressA,\\n            _addressB,\\n            _addressC\\n        );\\n    }\\n\\n    function setDebtFeeConfig(\\n        uint256 _percentage,\\n        uint256 _amountA,\\n        uint256 _amountB,\\n        uint256 _amountC,\\n        address _addressA,\\n        address _addressB,\\n        address _addressC\\n    ) external onlyRole(SETTER) {\\n        if (_percentage % 5 != 0) revert InvalidIndex();\\n\\n        debtFeeConfigs[_percentage] = FeeConfig(\\n            _amountA,\\n            _amountB,\\n            _amountC,\\n            _addressA,\\n            _addressB,\\n            _addressC\\n        );\\n\\n        emit DebtFeeConfigUpdated(\\n            msg.sender,\\n            _percentage,\\n            _amountA,\\n            _amountB,\\n            _amountC,\\n            _addressA,\\n            _addressB,\\n            _addressC\\n        );\\n    }\\n\\n    function setCollFeeConfig(\\n        uint256 _percentage,\\n        uint256 _amountA,\\n        uint256 _amountB,\\n        uint256 _amountC,\\n        address _addressA,\\n        address _addressB,\\n        address _addressC\\n    ) external onlyRole(SETTER) {\\n        if (_percentage % 5 != 0) revert InvalidIndex();\\n\\n        collFeeConfigs[_percentage] = FeeConfig(\\n            _amountA,\\n            _amountB,\\n            _amountC,\\n            _addressA,\\n            _addressB,\\n            _addressC\\n        );\\n\\n        emit CollFeeConfigUpdated(\\n            msg.sender,\\n            _percentage,\\n            _amountA,\\n            _amountB,\\n            _amountC,\\n            _addressA,\\n            _addressB,\\n            _addressC\\n        );\\n    }\\n\\n    function distributeDebtFee(uint256 _debt, uint256 _fee) external {\\n        FeeConfig memory config = debtFeeConfigs[\\n            (((_fee * 100) / _debt) % 5) * 5\\n        ];\\n        uint256 amountA = _calculateAmount(_fee, config.amountA);\\n        uint256 amountB = _calculateAmount(_fee, config.amountB);\\n        uint256 amountC = _calculateAmount(_fee, config.amountC);\\n\\n        uint256 totalAmounts = amountA + amountB + amountC;\\n        if (totalAmounts > _fee) {\\n            // Usually, that means that DAO treasure gets the extra dust\\n            amountA = amountA + totalAmounts - _fee;\\n        }\\n\\n        IBaseFeeLMAToken _baseFeeLMAToken = baseFeeLMAToken;\\n        IHOGStaking _hogStaking = hogStaking;\\n        if (amountA > 0 && config.addressA != address(0)) {\\n            _baseFeeLMAToken.mint(config.addressA, amountA);\\n\\n            _possiblyIncreaseHogStakingDebtBalance(\\n                config.addressA,\\n                amountA,\\n                _hogStaking\\n            );\\n        }\\n        if (amountB > 0 && config.addressB != address(0)) {\\n            _baseFeeLMAToken.mint(config.addressB, amountB);\\n\\n            _possiblyIncreaseHogStakingDebtBalance(\\n                config.addressB,\\n                amountB,\\n                _hogStaking\\n            );\\n        }\\n        if (amountC > 0 && config.addressC != address(0)) {\\n            _baseFeeLMAToken.mint(config.addressB, amountC);\\n\\n            _possiblyIncreaseHogStakingDebtBalance(\\n                config.addressC,\\n                amountC,\\n                _hogStaking\\n            );\\n        }\\n    }\\n\\n    function distributeCollFee(uint256 _debt, uint256 _fee) external {\\n        FeeConfig memory config = collFeeConfigs[\\n            (((_fee * 100) / _debt) % 5) * 5\\n        ];\\n        uint256 amountA = _calculateAmount(_fee, config.amountA);\\n        uint256 amountB = _calculateAmount(_fee, config.amountB);\\n        uint256 amountC = _calculateAmount(_fee, config.amountC);\\n\\n        uint256 totalAmounts = amountA + amountB + amountC;\\n        if (totalAmounts > _fee) {\\n            // Usually, that means that DAO treasure gets the extra dust\\n            amountA = amountA + totalAmounts - _fee;\\n        }\\n\\n        IActivePool _activePool = activePool;\\n        IHOGStaking _hogStaking = hogStaking;\\n\\n        if (amountA > 0 && config.addressA != address(0)) {\\n            _activePool.sendWStETH(config.addressA, amountA);\\n\\n            _possiblyIncreaseHogStakingCollBalance(\\n                config.addressA,\\n                amountA,\\n                _hogStaking\\n            );\\n        }\\n        if (amountB > 0 && config.addressB != address(0)) {\\n            _activePool.sendWStETH(config.addressB, amountB);\\n\\n            _possiblyIncreaseHogStakingCollBalance(\\n                config.addressA,\\n                amountA,\\n                _hogStaking\\n            );\\n        }\\n        if (amountC > 0 && config.addressC != address(0)) {\\n            _activePool.sendWStETH(config.addressC, amountC);\\n\\n            _possiblyIncreaseHogStakingCollBalance(\\n                config.addressA,\\n                amountA,\\n                _hogStaking\\n            );\\n        }\\n    }\\n\\n    function _calculateAmount(\\n        uint256 _fee,\\n        uint256 _percentage\\n    ) internal pure returns (uint256) {\\n        return ((_fee * _percentage) / 100);\\n    }\\n\\n    function _possiblyIncreaseHogStakingCollBalance(\\n        address _receiver,\\n        uint256 _amount,\\n        IHOGStaking _hogStaking\\n    ) internal {\\n        if (_receiver == address(_hogStaking)) {\\n            _hogStaking.increaseF_WStETH(_amount);\\n        }\\n    }\\n\\n    function _possiblyIncreaseHogStakingDebtBalance(\\n        address _receiver,\\n        uint256 _amount,\\n        IHOGStaking _hogStaking\\n    ) internal {\\n        if (_receiver == address(_hogStaking)) {\\n            hogStaking.increaseF_BaseFeeLMA(_amount);\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/interfaces/IActivePool.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./IPool.sol\\\";\\n\\ninterface IActivePool is IPool {\\n    // --- Events ---\\n    event BorrowerOperationsAddressChanged(\\n        address _newBorrowerOperationsAddress\\n    );\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event ActivePoolBaseFeeLMADebtUpdated(uint _BaseFeeLMADebt);\\n    event ActivePoolWStETHBalanceUpdated(uint _WStETH);\\n\\n    // --- Functions ---\\n    function sendWStETH(address _account, uint _amount) external;\\n\\n    function getWStETH() external view returns (uint256);\\n\\n    function increaseBalance(uint256 _amount) external;\\n}\\n\"\n    },\n    \"contracts/interfaces/IBaseFeeLMAToken.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../dependencies/IERC2612.sol\\\";\\n\\ninterface IBaseFeeLMAToken is IERC20, IERC2612 {\\n    // --- Events ---\\n\\n    event TroveManagerAddressChanged(address _troveManagerAddress);\\n    event StabilityPoolAddressChanged(address _newStabilityPoolAddress);\\n    event BorrowerOperationsAddressChanged(\\n        address _newBorrowerOperationsAddress\\n    );\\n\\n    event BaseFeeLMATokenBalanceUpdated(address _user, uint _amount);\\n\\n    // --- Functions ---\\n\\n    function mint(address _account, uint256 _amount) external;\\n\\n    function burn(address _account, uint256 _amount) external;\\n\\n    function sendToPool(\\n        address _sender,\\n        address poolAddress,\\n        uint256 _amount\\n    ) external;\\n\\n    function returnFromPool(\\n        address poolAddress,\\n        address user,\\n        uint256 _amount\\n    ) external;\\n\\n    function totalSupply() external view returns (uint256);\\n}\\n\"\n    },\n    \"contracts/interfaces/IBorrowerOperations.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\n// Common interface for the Trove Manager.\\ninterface IBorrowerOperations {\\n    // --- Events ---\\n\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event ActivePoolAddressChanged(address _activePoolAddress);\\n    event DefaultPoolAddressChanged(address _defaultPoolAddress);\\n    event StabilityPoolAddressChanged(address _stabilityPoolAddress);\\n    event GasPoolAddressChanged(address _gasPoolAddress);\\n    event CollSurplusPoolAddressChanged(address _collSurplusPoolAddress);\\n    event PriceFeedAddressChanged(address _newPriceFeedAddress);\\n    event SortedTrovesAddressChanged(address _sortedTrovesAddress);\\n    event BaseFeeLMATokenAddressChanged(address _baseFeeLMATokenAddress);\\n    event HOGStakingAddressChanged(address _hogStakingAddress);\\n\\n    event TroveCreated(address indexed _borrower, uint arrayIndex);\\n    event TroveUpdated(\\n        address indexed _borrower,\\n        uint _debt,\\n        uint _coll,\\n        uint stake,\\n        uint8 operation\\n    );\\n    event BaseFeeLMABorrowingFeePaid(\\n        address indexed _borrower,\\n        uint _BaseFeeLMAFee\\n    );\\n\\n    // --- Functions ---\\n\\n    function setAddresses(\\n        address _troveManagerAddress,\\n        address _activePoolAddress,\\n        address _defaultPoolAddress,\\n        address _stabilityPoolAddress,\\n        address _gasPoolAddress,\\n        address _collSurplusPoolAddress,\\n        address _priceFeedAddress,\\n        address _sortedTrovesAddress,\\n        address _baseFeeLMATokenAddress,\\n        address _hogStakingAddress\\n    ) external;\\n\\n    function openTrove(\\n        uint _maxFee,\\n        uint _BaseFeeLMAAmount,\\n        uint _collAmount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external;\\n\\n    function addColl(\\n        address _upperHint,\\n        address _lowerHint,\\n        uint _amount\\n    ) external;\\n\\n    function moveWStETHGainToTrove(\\n        address _user,\\n        address _upperHint,\\n        address _lowerHint,\\n        uint _amount\\n    ) external;\\n\\n    function withdrawColl(\\n        uint _amount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external;\\n\\n    function withdrawBaseFeeLMA(\\n        uint _maxFee,\\n        uint _amount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external;\\n\\n    function repayBaseFeeLMA(\\n        uint _amount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external;\\n\\n    function closeTrove() external;\\n\\n    function adjustTrove(\\n        uint _maxFee,\\n        uint _collWithdrawal,\\n        uint _collIncrease,\\n        uint _debtChange,\\n        bool isDebtIncrease,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external;\\n\\n    function claimCollateral() external;\\n\\n    function getCompositeDebt(uint _debt) external pure returns (uint);\\n}\\n\"\n    },\n    \"contracts/interfaces/ICollSurplusPool.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\ninterface ICollSurplusPool {\\n    // --- Events ---\\n\\n    event BorrowerOperationsAddressChanged(\\n        address _newBorrowerOperationsAddress\\n    );\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event ActivePoolAddressChanged(address _newActivePoolAddress);\\n\\n    event CollBalanceUpdated(address indexed _account, uint _newBalance);\\n    event WStETHSent(address _to, uint _amount);\\n\\n    // --- Contract setters ---\\n\\n    function setAddresses(\\n        address _borrowerOperationsAddress,\\n        address _troveManagerAddress,\\n        address _activePoolAddress\\n    ) external;\\n\\n    function getWStETH() external view returns (uint);\\n\\n    function getCollateral(address _account) external view returns (uint);\\n\\n    function accountSurplus(address _account, uint _amount) external;\\n\\n    function claimColl(address _account) external;\\n\\n    function increaseBalance(uint256 _amount) external;\\n}\\n\"\n    },\n    \"contracts/interfaces/IDefaultPool.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./IPool.sol\\\";\\n\\ninterface IDefaultPool is IPool {\\n    // --- Events ---\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event DefaultPoolBaseFeeLMADebtUpdated(uint _BaseFeeLMADebt);\\n    event DefaultPoolWStETHBalanceUpdated(uint _WStETH);\\n\\n    // --- Functions ---\\n    function sendWStETHToActivePool(uint _amount) external;\\n\\n    function increaseBalance(uint256 _amount) external;\\n}\\n\"\n    },\n    \"contracts/interfaces/IFeesRouter.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\ninterface IFeesRouter {\\n    function distributeDebtFee(uint256 _debt, uint256 _fee) external;\\n\\n    function distributeCollFee(uint256 _debt, uint256 _fee) external;\\n}\\n\"\n    },\n    \"contracts/interfaces/IHedgehogBase.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./IPriceFeed.sol\\\";\\n\\ninterface IHedgehogBase {\\n    function priceFeed() external view returns (IPriceFeed);\\n}\\n\"\n    },\n    \"contracts/interfaces/IHOGStaking.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\ninterface IHOGStaking {\\n    // --- Events --\\n\\n    event HOGTokenAddressSet(address _hogTokenAddress);\\n    event BaseFeeLMATokenAddressSet(address _baseFeeLMATokenAddress);\\n    event TroveManagerAddressSet(address _troveManager);\\n    event BorrowerOperationsAddressSet(address _borrowerOperationsAddress);\\n    event ActivePoolAddressSet(address _activePoolAddress);\\n\\n    event StakeChanged(address indexed staker, uint newStake);\\n    event StakingGainsWithdrawn(\\n        address indexed staker,\\n        uint BaseFeeLMAGain,\\n        uint WStETHGain\\n    );\\n    event F_WStETHUpdated(uint _F_WStETH);\\n    event F_BaseFeeLMAUpdated(uint _F_BaseFeeLMA);\\n    event TotalHOGStakedUpdated(uint _totalHOGStaked);\\n    event WStETHSent(address _account, uint _amount);\\n    event StakerSnapshotsUpdated(\\n        address _staker,\\n        uint _F_WStETH,\\n        uint _F_BaseFeeLMA\\n    );\\n\\n    // --- Functions ---\\n\\n    function setAddresses(\\n        address _hogTokenAddress,\\n        address _baseFeeLMATokenAddress,\\n        address _troveManagerAddress,\\n        address _borrowerOperationsAddress,\\n        address _activePoolAddress\\n    ) external;\\n\\n    function stake(uint _HOGamount) external;\\n\\n    function unstake(uint _HOGamount) external;\\n\\n    function increaseF_WStETH(uint _WStETHFee) external;\\n\\n    function increaseF_BaseFeeLMA(uint _HOGFee) external;\\n\\n    function getPendingWStETHGain(address _user) external view returns (uint);\\n\\n    function getPendingBaseFeeLMAGain(\\n        address _user\\n    ) external view returns (uint);\\n}\\n\"\n    },\n    \"contracts/interfaces/IHOGToken.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../dependencies/IERC2612.sol\\\";\\n\\ninterface IHOGToken is IERC20, IERC2612 {\\n    // --- Events ---\\n\\n    event CommunityIssuanceAddressSet(address _communityIssuanceAddress);\\n    event HOGStakingAddressSet(address _hogStakingAddress);\\n    event LockupContractFactoryAddressSet(\\n        address _lockupContractFactoryAddress\\n    );\\n\\n    // --- Functions ---\\n\\n    function sendToHOGStaking(address _sender, uint256 _amount) external;\\n\\n    function getDeploymentStartTime() external view returns (uint256);\\n\\n    function getLpRewardsEntitlement() external view returns (uint256);\\n\\n    function increaseAllowance(\\n        address _spender,\\n        uint256 _addedValues\\n    ) external returns (bool);\\n\\n    function decreaseAllowance(\\n        address _spender,\\n        uint256 _decreasedValue\\n    ) external returns (bool);\\n}\\n\"\n    },\n    \"contracts/interfaces/IPool.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\n// Common interface for the Pools.\\ninterface IPool {\\n    // --- Events ---\\n\\n    event WStETHBalanceUpdated(uint _newBalance);\\n    event BaseFeeLMABalanceUpdated(uint _newBalance);\\n    event ActivePoolAddressChanged(address _newActivePoolAddress);\\n    event DefaultPoolAddressChanged(address _newDefaultPoolAddress);\\n    event StabilityPoolAddressChanged(address _newStabilityPoolAddress);\\n    event WStETHSent(address _to, uint _amount);\\n\\n    // --- Functions ---\\n\\n    function getWStETH() external view returns (uint);\\n\\n    function getBaseFeeLMADebt() external view returns (uint);\\n\\n    function increaseBaseFeeLMADebt(uint _amount) external;\\n\\n    function decreaseBaseFeeLMADebt(uint _amount) external;\\n\\n    // function increaseCollCountInPool(uint256 _amount) external;\\n}\\n\"\n    },\n    \"contracts/interfaces/IPriceFeed.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\ninterface IPriceFeed {\\n    // --- Events ---\\n    event LastGoodPriceUpdated(uint _lastGoodPrice);\\n\\n    // --- Function ---\\n    function fetchPrice() external returns (uint);\\n\\n    function lastGoodPrice() external view returns (uint);\\n}\\n\"\n    },\n    \"contracts/interfaces/ISortedTroves.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\n// Common interface for the SortedTroves Doubly Linked List.\\ninterface ISortedTroves {\\n    // --- Events ---\\n\\n    event SortedTrovesAddressChanged(address _sortedDoublyLLAddress);\\n    event BorrowerOperationsAddressChanged(address _borrowerOperationsAddress);\\n    event NodeAdded(address _id, uint _NICR);\\n    event NodeRemoved(address _id);\\n\\n    // --- Functions ---\\n\\n    function setParams(\\n        uint256 _size,\\n        address _TroveManagerAddress,\\n        address _borrowerOperationsAddress\\n    ) external;\\n\\n    function insert(\\n        address _id,\\n        uint256 _ICR,\\n        address _prevId,\\n        address _nextId\\n    ) external;\\n\\n    function remove(address _id) external;\\n\\n    function reInsert(\\n        address _id,\\n        uint256 _newICR,\\n        address _prevId,\\n        address _nextId\\n    ) external;\\n\\n    function contains(address _id) external view returns (bool);\\n\\n    function isFull() external view returns (bool);\\n\\n    function isEmpty() external view returns (bool);\\n\\n    function getSize() external view returns (uint256);\\n\\n    function getMaxSize() external view returns (uint256);\\n\\n    function getFirst() external view returns (address);\\n\\n    function getLast() external view returns (address);\\n\\n    function getNext(address _id) external view returns (address);\\n\\n    function getPrev(address _id) external view returns (address);\\n\\n    function validInsertPosition(\\n        uint256 _ICR,\\n        address _prevId,\\n        address _nextId\\n    ) external view returns (bool);\\n\\n    function findInsertPosition(\\n        uint256 _ICR,\\n        address _prevId,\\n        address _nextId\\n    ) external view returns (address, address);\\n}\\n\"\n    },\n    \"contracts/interfaces/IStabilityPool.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\n/*\\n * The Stability Pool holds BaseFeeLMA tokens deposited by Stability Pool depositors.\\n *\\n * When a trove is liquidated, then depending on system conditions, some of its BaseFeeLMA debt gets offset with\\n * BaseFeeLMA in the Stability Pool:  that is, the offset debt evaporates, and an equal amount of BaseFeeLMA tokens in the Stability Pool is burned.\\n *\\n * Thus, a liquidation causes each depositor to receive a BaseFeeLMA loss, in proportion to their deposit as a share of total deposits.\\n * They also receive an WStETH gain, as the WStETH collateral of the liquidated trove is distributed among Stability depositors,\\n * in the same proportion.\\n *\\n * When a liquidation occurs, it depletes every deposit by the same fraction: for example, a liquidation that depletes 40%\\n * of the total BaseFeeLMA in the Stability Pool, depletes 40% of each deposit.\\n *\\n * A deposit that has experienced a series of liquidations is termed a \\\"compounded deposit\\\": each liquidation depletes the deposit,\\n * multiplying it by some factor in range ]0,1[\\n *\\n * Please see the implementation spec in the proof document, which closely follows on from the compounded deposit / WStETH gain derivations:\\n * https://github.com/liquity/liquity/blob/master/papers/Scalable_Reward_Distribution_with_Compounding_Stakes.pdf\\n *\\n * --- HOG ISSUANCE TO STABILITY POOL DEPOSITORS ---\\n *\\n * A HOG issuance event occurs at every deposit operation, and every liquidation.\\n *\\n * Each deposit is tagged with the address of the front end through which it was made.\\n *\\n * All deposits earn a share of the issued HOG in proportion to the deposit as a share of total deposits. The HOG earned\\n * by a given deposit, is split between the depositor and the front end through which the deposit was made, based on the front end's kickbackRate.\\n *\\n * Please see the system Readme for an overview:\\n * https://github.com/liquity/dev/blob/main/README.md#hog-issuance-to-stability-providers\\n */\\ninterface IStabilityPool {\\n    // --- Events ---\\n\\n    event StabilityPoolWStETHBalanceUpdated(uint _newBalance);\\n    event StabilityPoolBaseFeeLMABalanceUpdated(uint _newBalance);\\n\\n    event BorrowerOperationsAddressChanged(\\n        address _newBorrowerOperationsAddress\\n    );\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event ActivePoolAddressChanged(address _newActivePoolAddress);\\n    event DefaultPoolAddressChanged(address _newDefaultPoolAddress);\\n    event BaseFeeLMATokenAddressChanged(address _newBaseFeeLMATokenAddress);\\n    event SortedTrovesAddressChanged(address _newSortedTrovesAddress);\\n    event PriceFeedAddressChanged(address _newPriceFeedAddress);\\n    event CommunityIssuanceAddressChanged(address _newCommunityIssuanceAddress);\\n\\n    event P_Updated(uint _P);\\n    event S_Updated(uint _S, uint128 _epoch, uint128 _scale);\\n    event G_Updated(uint _G, uint128 _epoch, uint128 _scale);\\n    event EpochUpdated(uint128 _currentEpoch);\\n    event ScaleUpdated(uint128 _currentScale);\\n\\n    event DepositSnapshotUpdated(\\n        address indexed _depositor,\\n        uint _P,\\n        uint _S,\\n        uint _G\\n    );\\n\\n    event WStETHGainWithdrawn(\\n        address indexed _depositor,\\n        uint _WStETH,\\n        uint _BaseFeeLMALoss\\n    );\\n    event HOGPaidToDepositor(address indexed _depositor, uint _HOG);\\n    event WStETHSent(address _to, uint _amount);\\n\\n    // --- Functions ---\\n\\n    /*\\n     * Called only once on init, to set addresses of other Hedgehog contracts\\n     * Callable only by owner, renounces ownership at the end\\n     */\\n    function setAddresses(\\n        address _borrowerOperationsAddress,\\n        address _troveManagerAddress,\\n        address _activePoolAddress,\\n        address _baseFeeLMATokenAddress,\\n        address _sortedTrovesAddress,\\n        address _priceFeedAddress,\\n        address _communityIssuanceAddress\\n    ) external;\\n\\n    /*\\n     * Initial checks:\\n     * - _amount is not zero\\n     * ---\\n     * - Triggers a HOG issuance, based on time passed since the last issuance. The HOG issuance is shared between *all* depositors and front ends\\n     * - Tags the deposit with the provided front end tag param, if it's a new deposit\\n     * - Sends depositor's accumulated gains (HOG, WStETH) to depositor\\n     * - Sends the tagged front end's accumulated HOG gains to the tagged front end\\n     * - Increases deposit and tagged front end's stake, and takes new snapshots for each.\\n     */\\n    function provideToSP(uint _amount) external;\\n\\n    /*\\n     * Initial checks:\\n     * - _amount is zero or there are no under collateralized troves left in the system\\n     * - User has a non zero deposit\\n     * ---\\n     * - Triggers a HOG issuance, based on time passed since the last issuance. The HOG issuance is shared between *all* depositors and front ends\\n     * - Removes the deposit's front end tag if it is a full withdrawal\\n     * - Sends all depositor's accumulated gains (HOG, WStETH) to depositor\\n     * - Sends the tagged front end's accumulated HOG gains to the tagged front end\\n     * - Decreases deposit and tagged front end's stake, and takes new snapshots for each.\\n     *\\n     * If _amount > userDeposit, the user withdraws all of their compounded deposit.\\n     */\\n    function withdrawFromSP(uint _amount) external;\\n\\n    /*\\n     * Initial checks:\\n     * - User has a non zero deposit\\n     * - User has an open trove\\n     * - User has some WStETH gain\\n     * ---\\n     * - Triggers a HOG issuance, based on time passed since the last issuance. The HOG issuance is shared between *all* depositors and front ends\\n     * - Sends all depositor's HOG gain to  depositor\\n     * - Sends all tagged front end's HOG gain to the tagged front end\\n     * - Transfers the depositor's entire WStETH gain from the Stability Pool to the caller's trove\\n     * - Leaves their compounded deposit in the Stability Pool\\n     * - Updates snapshots for deposit and tagged front end stake\\n     */\\n    function withdrawWStETHGainToTrove(\\n        address _upperHint,\\n        address _lowerHint\\n    ) external;\\n\\n    /*\\n     * Initial checks:\\n     * - Caller is TroveManager\\n     * ---\\n     * Cancels out the specified debt against the BaseFeeLMA contained in the Stability Pool (as far as possible)\\n     * and transfers the Trove's WStETH collateral from ActivePool to StabilityPool.\\n     * Only called by liquidation functions in the TroveManager.\\n     */\\n    function offset(uint _debt, uint _coll) external;\\n\\n    /*\\n     * Returns the total amount of WStETH held by the pool, accounted in an internal variable instead of `balance`,\\n     * to exclude edge cases like WStETH received from a self-destruct.\\n     */\\n    function getWStETH() external view returns (uint);\\n\\n    /*\\n     * Returns BaseFeeLMA held in the pool. Changes when users deposit/withdraw, and when Trove debt is offset.\\n     */\\n    function getTotalBaseFeeLMADeposits() external view returns (uint);\\n\\n    /*\\n     * Calculates the WStETH gain earned by the deposit since its last snapshots were taken.\\n     */\\n    function getDepositorWStETHGain(\\n        address _depositor\\n    ) external view returns (uint);\\n\\n    /*\\n     * Calculate the HOG gain earned by a deposit since its last snapshots were taken.\\n     * If not tagged with a front end, the depositor gets a 100% cut of what their deposit earned.\\n     * Otherwise, their cut of the deposit's earnings is equal to the kickbackRate, set by the front end through\\n     * which they made their deposit.\\n     */\\n    function getDepositorHOGGain(\\n        address _depositor\\n    ) external view returns (uint);\\n\\n    /*\\n     * Return the user's compounded deposit.\\n     */\\n    function getCompoundedBaseFeeLMADeposit(\\n        address _depositor\\n    ) external view returns (uint);\\n}\\n\"\n    },\n    \"contracts/interfaces/ITroveManager.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./IHedgehogBase.sol\\\";\\nimport \\\"./IStabilityPool.sol\\\";\\nimport \\\"./IBaseFeeLMAToken.sol\\\";\\nimport \\\"./IHOGToken.sol\\\";\\nimport \\\"./IHOGStaking.sol\\\";\\n\\n// Common interface for the Trove Manager.\\ninterface ITroveManager is IHedgehogBase {\\n    // --- Events ---\\n\\n    event BorrowerOperationsAddressChanged(\\n        address _newBorrowerOperationsAddress\\n    );\\n    event PriceFeedAddressChanged(address _newPriceFeedAddress);\\n    event BaseFeeLMATokenAddressChanged(address _newBaseFeeLMATokenAddress);\\n    event ActivePoolAddressChanged(address _activePoolAddress);\\n    event DefaultPoolAddressChanged(address _defaultPoolAddress);\\n    event StabilityPoolAddressChanged(address _stabilityPoolAddress);\\n    event GasPoolAddressChanged(address _gasPoolAddress);\\n    event CollSurplusPoolAddressChanged(address _collSurplusPoolAddress);\\n    event SortedTrovesAddressChanged(address _sortedTrovesAddress);\\n    event HOGTokenAddressChanged(address _hogTokenAddress);\\n    event HOGStakingAddressChanged(address _hogStakingAddress);\\n\\n    event Liquidation(\\n        uint _liquidatedDebt,\\n        uint _liquidatedColl,\\n        uint _collGasCompensation,\\n        uint _BaseFeeLMAGasCompensation\\n    );\\n    event Redemption(\\n        uint _attemptedBaseFeeLMAAmount,\\n        uint _actualBaseFeeLMAAmount,\\n        uint _WStETHSent,\\n        uint _WStETHFee\\n    );\\n    event TroveUpdated(\\n        address indexed _borrower,\\n        uint _debt,\\n        uint _coll,\\n        uint stake,\\n        uint8 operation\\n    );\\n    event TroveLiquidated(\\n        address indexed _borrower,\\n        uint _debt,\\n        uint _coll,\\n        uint8 operation\\n    );\\n    event BaseRateUpdated(uint _baseRate);\\n    event LastFeeOpTimeUpdated(uint _lastFeeOpTime);\\n    event TotalStakesUpdated(uint _newTotalStakes);\\n    event SystemSnapshotsUpdated(\\n        uint _totalStakesSnapshot,\\n        uint _totalCollateralSnapshot\\n    );\\n    event LTermsUpdated(uint _L_WStETH, uint _L_BaseFeeLMADebt);\\n    event TroveSnapshotsUpdated(uint _L_WStETH, uint _L_BaseFeeLMADebt);\\n    event TroveIndexUpdated(address _borrower, uint _newIndex);\\n\\n    // --- Functions ---\\n\\n    function setAddresses(\\n        address _borrowerOperationsAddress,\\n        address _activePoolAddress,\\n        address _defaultPoolAddress,\\n        address _stabilityPoolAddress,\\n        address _gasPoolAddress,\\n        address _collSurplusPoolAddress,\\n        address _priceFeedAddress,\\n        address _baseFeeLMATokenAddress,\\n        address _sortedTrovesAddress,\\n        address _hogTokenAddress,\\n        address _hogStakingAddress\\n    ) external;\\n\\n    function stabilityPool() external view returns (IStabilityPool);\\n\\n    function baseFeeLMAToken() external view returns (IBaseFeeLMAToken);\\n\\n    function hogToken() external view returns (IHOGToken);\\n\\n    function hogStaking() external view returns (IHOGStaking);\\n\\n    function getTroveOwnersCount() external view returns (uint);\\n\\n    function getTroveFromTroveOwnersArray(\\n        uint _index\\n    ) external view returns (address);\\n\\n    function getNominalICR(address _borrower) external view returns (uint);\\n\\n    function getCurrentICR(\\n        address _borrower,\\n        uint _price\\n    ) external view returns (uint);\\n\\n    function liquidate(address _borrower) external;\\n\\n    function liquidateTroves(uint _n) external;\\n\\n    function batchLiquidateTroves(address[] calldata _troveArray) external;\\n\\n    function redeemCollateral(\\n        uint _BaseFeeLMAAmount,\\n        address _firstRedemptionHint,\\n        address _upperPartialRedemptionHint,\\n        address _lowerPartialRedemptionHint,\\n        uint _partialRedemptionHintNICR,\\n        uint _maxIterations,\\n        uint _maxFee\\n    ) external;\\n\\n    function updateStakeAndTotalStakes(\\n        address _borrower\\n    ) external returns (uint);\\n\\n    function updateTroveRewardSnapshots(address _borrower) external;\\n\\n    function addTroveOwnerToArray(\\n        address _borrower\\n    ) external returns (uint index);\\n\\n    function applyPendingRewards(address _borrower) external;\\n\\n    function getPendingWStETHReward(\\n        address _borrower\\n    ) external view returns (uint);\\n\\n    function getPendingBaseFeeLMADebtReward(\\n        address _borrower\\n    ) external view returns (uint);\\n\\n    function hasPendingRewards(address _borrower) external view returns (bool);\\n\\n    function getEntireDebtAndColl(\\n        address _borrower\\n    )\\n        external\\n        view\\n        returns (\\n            uint debt,\\n            uint coll,\\n            uint pendingBaseFeeLMADebtReward,\\n            uint pendingWStETHReward\\n        );\\n\\n    function closeTrove(address _borrower) external;\\n\\n    function removeStake(address _borrower) external;\\n\\n    function getRedemptionRate(\\n        uint _redemptionColl\\n    ) external view returns (uint);\\n\\n    function getRedemptionRateWithDecay(\\n        uint _redemptionColl\\n    ) external view returns (uint);\\n\\n    function getRedemptionFeeWithDecay(\\n        uint _WStETHDrawn\\n    ) external view returns (uint);\\n\\n    function getBorrowingRate(\\n        uint _issuedBaseFeeLMA\\n    ) external view returns (uint);\\n\\n    function getBorrowingRateWithDecay(\\n        uint _issuedBaseFeeLMA\\n    ) external view returns (uint);\\n\\n    function getBorrowingFee(\\n        uint BaseFeeLMADebt\\n    ) external view returns (uint, uint);\\n\\n    function getBorrowingFeeWithDecay(\\n        uint _BaseFeeLMADebt\\n    ) external view returns (uint);\\n\\n    function updateBaseRateFromBorrowing(uint _baseRate) external;\\n\\n    function decayBaseRateFromBorrowing() external;\\n\\n    function getTroveStatus(address _borrower) external view returns (uint);\\n\\n    function getTroveStake(address _borrower) external view returns (uint);\\n\\n    function getTroveDebt(address _borrower) external view returns (uint);\\n\\n    function getTroveColl(address _borrower) external view returns (uint);\\n\\n    function setTroveStatus(address _borrower, uint num) external;\\n\\n    function increaseTroveColl(\\n        address _borrower,\\n        uint _collIncrease\\n    ) external returns (uint);\\n\\n    function decreaseTroveColl(\\n        address _borrower,\\n        uint _collDecrease\\n    ) external returns (uint);\\n\\n    function increaseTroveDebt(\\n        address _borrower,\\n        uint _debtIncrease\\n    ) external returns (uint);\\n\\n    function decreaseTroveDebt(\\n        address _borrower,\\n        uint _collDecrease\\n    ) external returns (uint);\\n\\n    function getTCR(uint _price) external view returns (uint);\\n\\n    function checkRecoveryMode(uint _price) external view returns (bool);\\n}\\n\"\n    },\n    \"contracts/MultiTroveGetter.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./TroveManager.sol\\\";\\nimport \\\"./SortedTroves.sol\\\";\\n\\n/*  Helper contract for grabbing Trove data for the front end. Not part of the core Liquity system. */\\ncontract MultiTroveGetter {\\n    struct CombinedTroveData {\\n        address owner;\\n        uint debt;\\n        uint coll;\\n        uint stake;\\n        uint snapshotETH;\\n        uint snapshotBaseFeeLMADebt;\\n    }\\n\\n    TroveManager public troveManager; // XXX Troves missing from ITroveManager?\\n    ISortedTroves public sortedTroves;\\n\\n    constructor(TroveManager _troveManager, ISortedTroves _sortedTroves) {\\n        troveManager = _troveManager;\\n        sortedTroves = _sortedTroves;\\n    }\\n\\n    function getMultipleSortedTroves(\\n        int _startIdx,\\n        uint _count\\n    ) external view returns (CombinedTroveData[] memory _troves) {\\n        uint startIdx;\\n        bool descend;\\n\\n        if (_startIdx >= 0) {\\n            startIdx = uint(_startIdx);\\n            descend = true;\\n        } else {\\n            startIdx = uint(-(_startIdx + 1));\\n            descend = false;\\n        }\\n\\n        uint sortedTrovesSize = sortedTroves.getSize();\\n\\n        if (startIdx >= sortedTrovesSize) {\\n            _troves = new CombinedTroveData[](0);\\n        } else {\\n            uint maxCount = sortedTrovesSize - startIdx;\\n\\n            if (_count > maxCount) {\\n                _count = maxCount;\\n            }\\n\\n            if (descend) {\\n                _troves = _getMultipleSortedTrovesFromHead(startIdx, _count);\\n            } else {\\n                _troves = _getMultipleSortedTrovesFromTail(startIdx, _count);\\n            }\\n        }\\n    }\\n\\n    function _getMultipleSortedTrovesFromHead(\\n        uint _startIdx,\\n        uint _count\\n    ) internal view returns (CombinedTroveData[] memory _troves) {\\n        address currentTroveowner = sortedTroves.getFirst();\\n\\n        for (uint idx = 0; idx < _startIdx; ++idx) {\\n            currentTroveowner = sortedTroves.getNext(currentTroveowner);\\n        }\\n\\n        _troves = new CombinedTroveData[](_count);\\n\\n        for (uint idx = 0; idx < _count; ++idx) {\\n            _troves[idx].owner = currentTroveowner;\\n            (\\n                _troves[idx].debt,\\n                _troves[idx].coll,\\n                _troves[idx].stake,\\n                /* status */\\n                /* arrayIndex */\\n                ,\\n\\n            ) = troveManager.Troves(currentTroveowner);\\n            (\\n                _troves[idx].snapshotETH,\\n                _troves[idx].snapshotBaseFeeLMADebt\\n            ) = troveManager.rewardSnapshots(currentTroveowner);\\n\\n            currentTroveowner = sortedTroves.getNext(currentTroveowner);\\n        }\\n    }\\n\\n    function _getMultipleSortedTrovesFromTail(\\n        uint _startIdx,\\n        uint _count\\n    ) internal view returns (CombinedTroveData[] memory _troves) {\\n        address currentTroveowner = sortedTroves.getLast();\\n\\n        for (uint idx = 0; idx < _startIdx; ++idx) {\\n            currentTroveowner = sortedTroves.getPrev(currentTroveowner);\\n        }\\n\\n        _troves = new CombinedTroveData[](_count);\\n\\n        for (uint idx = 0; idx < _count; ++idx) {\\n            _troves[idx].owner = currentTroveowner;\\n            (\\n                _troves[idx].debt,\\n                _troves[idx].coll,\\n                _troves[idx].stake,\\n                /* status */\\n                /* arrayIndex */\\n                ,\\n\\n            ) = troveManager.Troves(currentTroveowner);\\n            (\\n                _troves[idx].snapshotETH,\\n                _troves[idx].snapshotBaseFeeLMADebt\\n            ) = troveManager.rewardSnapshots(currentTroveowner);\\n\\n            currentTroveowner = sortedTroves.getPrev(currentTroveowner);\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/SortedTroves.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./interfaces/ISortedTroves.sol\\\";\\nimport \\\"./interfaces/ITroveManager.sol\\\";\\nimport \\\"./interfaces/IBorrowerOperations.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./dependencies/CheckContract.sol\\\";\\n\\n/*\\n * A sorted doubly linked list with nodes sorted in descending order.\\n *\\n * Nodes map to active Troves in the system - the ID property is the address of a Trove owner.\\n * Nodes are ordered according to their current nominal individual collateral ratio (NICR),\\n * which is like the ICR but without the price, i.e., just collateral / debt.\\n *\\n * The list optionally accepts insert position hints.\\n *\\n * NICRs are computed dynamically at runtime, and not stored on the Node. This is because NICRs of active Troves\\n * change dynamically as liquidation events occur.\\n *\\n * The list relies on the fact that liquidation events preserve ordering: a liquidation decreases the NICRs of all active Troves,\\n * but maintains their order. A node inserted based on current NICR will maintain the correct position,\\n * relative to it's peers, as rewards accumulate, as long as it's raw collateral and debt have not changed.\\n * Thus, Nodes remain sorted by current NICR.\\n *\\n * Nodes need only be re-inserted upon a Trove operation - when the owner adds or removes collateral or debt\\n * to their position.\\n *\\n * The list is a modification of the following audited SortedDoublyLinkedList:\\n * https://github.com/livepeer/protocol/blob/master/contracts/libraries/SortedDoublyLL.sol\\n *\\n *\\n * Changes made in the Liquity implementation:\\n *\\n * - Keys have been removed from nodes\\n *\\n * - Ordering checks for insertion are performed by comparing an NICR argument to the current NICR, calculated at runtime.\\n *   The list relies on the property that ordering by ICR is maintained as the WStETH:USD price varies.\\n *\\n * - Public functions with parameters have been made internal to save gas, and given an external wrapper function for external access\\n */\\ncontract SortedTroves is Ownable, CheckContract {\\n    using SafeMath for uint256;\\n\\n    string public constant NAME = \\\"SortedTroves\\\";\\n\\n    event TroveManagerAddressChanged(address _troveManagerAddress);\\n    event BorrowerOperationsAddressChanged(address _borrowerOperationsAddress);\\n    event NodeAdded(address _id, uint _NICR);\\n    event NodeRemoved(address _id);\\n\\n    address public borrowerOperationsAddress;\\n\\n    ITroveManager public troveManager;\\n\\n    // Information for a node in the list\\n    struct Node {\\n        bool exists;\\n        address nextId; // Id of next node (smaller NICR) in the list\\n        address prevId; // Id of previous node (larger NICR) in the list\\n    }\\n\\n    // Information for the list\\n    struct Data {\\n        address head; // Head of the list. Also the node in the list with the largest NICR\\n        address tail; // Tail of the list. Also the node in the list with the smallest NICR\\n        uint256 maxSize; // Maximum size of the list\\n        uint256 size; // Current size of the list\\n        mapping(address => Node) nodes; // Track the corresponding ids for each node in the list\\n    }\\n\\n    Data public data;\\n\\n    // --- Dependency setters ---\\n\\n    function setParams(\\n        uint256 _size,\\n        address _troveManagerAddress,\\n        address _borrowerOperationsAddress\\n    ) external onlyOwner {\\n        require(_size > 0, \\\"SortedTroves: Size cant be zero\\\");\\n        checkContract(_troveManagerAddress);\\n        checkContract(_borrowerOperationsAddress);\\n\\n        data.maxSize = _size;\\n\\n        troveManager = ITroveManager(_troveManagerAddress);\\n        borrowerOperationsAddress = _borrowerOperationsAddress;\\n\\n        emit TroveManagerAddressChanged(_troveManagerAddress);\\n        emit BorrowerOperationsAddressChanged(_borrowerOperationsAddress);\\n\\n        renounceOwnership();\\n    }\\n\\n    /*\\n     * @dev Add a node to the list\\n     * @param _id Node's id\\n     * @param _NICR Node's NICR\\n     * @param _prevId Id of previous node for the insert position\\n     * @param _nextId Id of next node for the insert position\\n     */\\n\\n    function insert(\\n        address _id,\\n        uint256 _NICR,\\n        address _prevId,\\n        address _nextId\\n    ) external {\\n        ITroveManager troveManagerCached = troveManager;\\n\\n        _requireCallerIsBOorTroveM(troveManagerCached);\\n        _insert(troveManagerCached, _id, _NICR, _prevId, _nextId);\\n    }\\n\\n    function _insert(\\n        ITroveManager _troveManager,\\n        address _id,\\n        uint256 _NICR,\\n        address _prevId,\\n        address _nextId\\n    ) internal {\\n        // List must not be full\\n        require(!isFull(), \\\"SortedTroves: List is full\\\");\\n        // List must not already contain node\\n        require(!contains(_id), \\\"SortedTroves: List already contains the node\\\");\\n        // Node id must not be null\\n        require(_id != address(0), \\\"SortedTroves: Id cannot be zero\\\");\\n        // NICR must be non-zero\\n        require(_NICR > 0, \\\"SortedTroves: NICR must be positive\\\");\\n\\n        address prevId = _prevId;\\n        address nextId = _nextId;\\n\\n        if (!_validInsertPosition(_troveManager, _NICR, prevId, nextId)) {\\n            // Sender's hint was not a valid insert position\\n            // Use sender's hint to find a valid insert position\\n            (prevId, nextId) = _findInsertPosition(\\n                _troveManager,\\n                _NICR,\\n                prevId,\\n                nextId\\n            );\\n        }\\n\\n        data.nodes[_id].exists = true;\\n\\n        if (prevId == address(0) && nextId == address(0)) {\\n            // Insert as head and tail\\n            data.head = _id;\\n            data.tail = _id;\\n        } else if (prevId == address(0)) {\\n            // Insert before `prevId` as the head\\n            data.nodes[_id].nextId = data.head;\\n            data.nodes[data.head].prevId = _id;\\n            data.head = _id;\\n        } else if (nextId == address(0)) {\\n            // Insert after `nextId` as the tail\\n            data.nodes[_id].prevId = data.tail;\\n            data.nodes[data.tail].nextId = _id;\\n            data.tail = _id;\\n        } else {\\n            // Insert at insert position between `prevId` and `nextId`\\n            data.nodes[_id].nextId = nextId;\\n            data.nodes[_id].prevId = prevId;\\n            data.nodes[prevId].nextId = _id;\\n            data.nodes[nextId].prevId = _id;\\n        }\\n\\n        data.size = data.size.add(1);\\n        emit NodeAdded(_id, _NICR);\\n    }\\n\\n    function remove(address _id) external {\\n        _requireCallerIsTroveManager();\\n        _remove(_id);\\n    }\\n\\n    /*\\n     * @dev Remove a node from the list\\n     * @param _id Node's id\\n     */\\n    function _remove(address _id) internal {\\n        // List must contain the node\\n        require(contains(_id), \\\"SortedTroves: List does not contain the id\\\");\\n\\n        if (data.size > 1) {\\n            // List contains more than a single node\\n            if (_id == data.head) {\\n                // The removed node is the head\\n                // Set head to next node\\n                data.head = data.nodes[_id].nextId;\\n                // Set prev pointer of new head to null\\n                data.nodes[data.head].prevId = address(0);\\n            } else if (_id == data.tail) {\\n                // The removed node is the tail\\n                // Set tail to previous node\\n                data.tail = data.nodes[_id].prevId;\\n                // Set next pointer of new tail to null\\n                data.nodes[data.tail].nextId = address(0);\\n            } else {\\n                // The removed node is neither the head nor the tail\\n                // Set next pointer of previous node to the next node\\n                data.nodes[data.nodes[_id].prevId].nextId = data\\n                    .nodes[_id]\\n                    .nextId;\\n                // Set prev pointer of next node to the previous node\\n                data.nodes[data.nodes[_id].nextId].prevId = data\\n                    .nodes[_id]\\n                    .prevId;\\n            }\\n        } else {\\n            // List contains a single node\\n            // Set the head and tail to null\\n            data.head = address(0);\\n            data.tail = address(0);\\n        }\\n\\n        delete data.nodes[_id];\\n        data.size = data.size.sub(1);\\n        emit NodeRemoved(_id);\\n    }\\n\\n    /*\\n     * @dev Re-insert the node at a new position, based on its new NICR\\n     * @param _id Node's id\\n     * @param _newNICR Node's new NICR\\n     * @param _prevId Id of previous node for the new insert position\\n     * @param _nextId Id of next node for the new insert position\\n     */\\n    function reInsert(\\n        address _id,\\n        uint256 _newNICR,\\n        address _prevId,\\n        address _nextId\\n    ) external {\\n        ITroveManager troveManagerCached = troveManager;\\n\\n        _requireCallerIsBOorTroveM(troveManagerCached);\\n        // List must contain the node\\n        require(contains(_id), \\\"SortedTroves: List does not contain the id\\\");\\n        // NICR must be non-zero\\n        require(_newNICR > 0, \\\"SortedTroves: NICR must be positive\\\");\\n\\n        // Remove node from the list\\n        _remove(_id);\\n\\n        _insert(troveManagerCached, _id, _newNICR, _prevId, _nextId);\\n    }\\n\\n    /*\\n     * @dev Checks if the list contains a node\\n     */\\n    function contains(address _id) public view returns (bool) {\\n        return data.nodes[_id].exists;\\n    }\\n\\n    /*\\n     * @dev Checks if the list is full\\n     */\\n    function isFull() public view returns (bool) {\\n        return data.size == data.maxSize;\\n    }\\n\\n    /*\\n     * @dev Checks if the list is empty\\n     */\\n    function isEmpty() public view returns (bool) {\\n        return data.size == 0;\\n    }\\n\\n    /*\\n     * @dev Returns the current size of the list\\n     */\\n    function getSize() external view returns (uint256) {\\n        return data.size;\\n    }\\n\\n    /*\\n     * @dev Returns the maximum size of the list\\n     */\\n    function getMaxSize() external view returns (uint256) {\\n        return data.maxSize;\\n    }\\n\\n    /*\\n     * @dev Returns the first node in the list (node with the largest NICR)\\n     */\\n    function getFirst() external view returns (address) {\\n        return data.head;\\n    }\\n\\n    /*\\n     * @dev Returns the last node in the list (node with the smallest NICR)\\n     */\\n    function getLast() external view returns (address) {\\n        return data.tail;\\n    }\\n\\n    /*\\n     * @dev Returns the next node (with a smaller NICR) in the list for a given node\\n     * @param _id Node's id\\n     */\\n    function getNext(address _id) external view returns (address) {\\n        return data.nodes[_id].nextId;\\n    }\\n\\n    /*\\n     * @dev Returns the previous node (with a larger NICR) in the list for a given node\\n     * @param _id Node's id\\n     */\\n    function getPrev(address _id) external view returns (address) {\\n        return data.nodes[_id].prevId;\\n    }\\n\\n    /*\\n     * @dev Check if a pair of nodes is a valid insertion point for a new node with the given NICR\\n     * @param _NICR Node's NICR\\n     * @param _prevId Id of previous node for the insert position\\n     * @param _nextId Id of next node for the insert position\\n     */\\n    function validInsertPosition(\\n        uint256 _NICR,\\n        address _prevId,\\n        address _nextId\\n    ) external view returns (bool) {\\n        return _validInsertPosition(troveManager, _NICR, _prevId, _nextId);\\n    }\\n\\n    function _validInsertPosition(\\n        ITroveManager _troveManager,\\n        uint256 _NICR,\\n        address _prevId,\\n        address _nextId\\n    ) internal view returns (bool) {\\n        if (_prevId == address(0) && _nextId == address(0)) {\\n            // `(null, null)` is a valid insert position if the list is empty\\n            return isEmpty();\\n        } else if (_prevId == address(0)) {\\n            // `(null, _nextId)` is a valid insert position if `_nextId` is the head of the list\\n            return\\n                data.head == _nextId &&\\n                _NICR >= _troveManager.getNominalICR(_nextId);\\n        } else if (_nextId == address(0)) {\\n            // `(_prevId, null)` is a valid insert position if `_prevId` is the tail of the list\\n            return\\n                data.tail == _prevId &&\\n                _NICR <= _troveManager.getNominalICR(_prevId);\\n        } else {\\n            // `(_prevId, _nextId)` is a valid insert position if they are adjacent nodes and `_NICR` falls between the two nodes' NICRs\\n            return\\n                data.nodes[_prevId].nextId == _nextId &&\\n                _troveManager.getNominalICR(_prevId) >= _NICR &&\\n                _NICR >= _troveManager.getNominalICR(_nextId);\\n        }\\n    }\\n\\n    /*\\n     * @dev Descend the list (larger NICRs to smaller NICRs) to find a valid insert position\\n     * @param _troveManager TroveManager contract, passed in as param to save SLOAD’s\\n     * @param _NICR Node's NICR\\n     * @param _startId Id of node to start descending the list from\\n     */\\n    function _descendList(\\n        ITroveManager _troveManager,\\n        uint256 _NICR,\\n        address _startId\\n    ) internal view returns (address, address) {\\n        // If `_startId` is the head, check if the insert position is before the head\\n        if (\\n            data.head == _startId &&\\n            _NICR >= _troveManager.getNominalICR(_startId)\\n        ) {\\n            return (address(0), _startId);\\n        }\\n\\n        address prevId = _startId;\\n        address nextId = data.nodes[prevId].nextId;\\n\\n        // Descend the list until we reach the end or until we find a valid insert position\\n        while (\\n            prevId != address(0) &&\\n            !_validInsertPosition(_troveManager, _NICR, prevId, nextId)\\n        ) {\\n            prevId = data.nodes[prevId].nextId;\\n            nextId = data.nodes[prevId].nextId;\\n        }\\n\\n        return (prevId, nextId);\\n    }\\n\\n    /*\\n     * @dev Ascend the list (smaller NICRs to larger NICRs) to find a valid insert position\\n     * @param _troveManager TroveManager contract, passed in as param to save SLOAD’s\\n     * @param _NICR Node's NICR\\n     * @param _startId Id of node to start ascending the list from\\n     */\\n    function _ascendList(\\n        ITroveManager _troveManager,\\n        uint256 _NICR,\\n        address _startId\\n    ) internal view returns (address, address) {\\n        // If `_startId` is the tail, check if the insert position is after the tail\\n        if (\\n            data.tail == _startId &&\\n            _NICR <= _troveManager.getNominalICR(_startId)\\n        ) {\\n            return (_startId, address(0));\\n        }\\n\\n        address nextId = _startId;\\n        address prevId = data.nodes[nextId].prevId;\\n\\n        // Ascend the list until we reach the end or until we find a valid insertion point\\n        while (\\n            nextId != address(0) &&\\n            !_validInsertPosition(_troveManager, _NICR, prevId, nextId)\\n        ) {\\n            nextId = data.nodes[nextId].prevId;\\n            prevId = data.nodes[nextId].prevId;\\n        }\\n\\n        return (prevId, nextId);\\n    }\\n\\n    /*\\n     * @dev Find the insert position for a new node with the given NICR\\n     * @param _NICR Node's NICR\\n     * @param _prevId Id of previous node for the insert position\\n     * @param _nextId Id of next node for the insert position\\n     */\\n    function findInsertPosition(\\n        uint256 _NICR,\\n        address _prevId,\\n        address _nextId\\n    ) external view returns (address, address) {\\n        return _findInsertPosition(troveManager, _NICR, _prevId, _nextId);\\n    }\\n\\n    function _findInsertPosition(\\n        ITroveManager _troveManager,\\n        uint256 _NICR,\\n        address _prevId,\\n        address _nextId\\n    ) internal view returns (address, address) {\\n        address prevId = _prevId;\\n        address nextId = _nextId;\\n\\n        if (prevId != address(0)) {\\n            if (\\n                !contains(prevId) || _NICR > _troveManager.getNominalICR(prevId)\\n            ) {\\n                // `prevId` does not exist anymore or now has a smaller NICR than the given NICR\\n                prevId = address(0);\\n            }\\n        }\\n\\n        if (nextId != address(0)) {\\n            if (\\n                !contains(nextId) || _NICR < _troveManager.getNominalICR(nextId)\\n            ) {\\n                // `nextId` does not exist anymore or now has a larger NICR than the given NICR\\n                nextId = address(0);\\n            }\\n        }\\n\\n        if (prevId == address(0) && nextId == address(0)) {\\n            // No hint - descend list starting from head\\n            return _descendList(_troveManager, _NICR, data.head);\\n        } else if (prevId == address(0)) {\\n            // No `prevId` for hint - ascend list starting from `nextId`\\n            return _ascendList(_troveManager, _NICR, nextId);\\n        } else if (nextId == address(0)) {\\n            // No `nextId` for hint - descend list starting from `prevId`\\n            return _descendList(_troveManager, _NICR, prevId);\\n        } else {\\n            // Descend list starting from `prevId`\\n            return _descendList(_troveManager, _NICR, prevId);\\n        }\\n    }\\n\\n    // --- 'require' functions ---\\n\\n    function _requireCallerIsTroveManager() internal view {\\n        require(\\n            msg.sender == address(troveManager),\\n            \\\"SortedTroves: Caller is not the TroveManager\\\"\\n        );\\n    }\\n\\n    function _requireCallerIsBOorTroveM(\\n        ITroveManager _troveManager\\n    ) internal view {\\n        require(\\n            msg.sender == borrowerOperationsAddress ||\\n                msg.sender == address(_troveManager),\\n            \\\"SortedTroves: Caller is neither BO nor TroveM\\\"\\n        );\\n    }\\n}\\n\"\n    },\n    \"contracts/TroveManager.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./interfaces/ITroveManager.sol\\\";\\nimport \\\"./interfaces/IStabilityPool.sol\\\";\\nimport \\\"./interfaces/ICollSurplusPool.sol\\\";\\nimport \\\"./interfaces/IBaseFeeLMAToken.sol\\\";\\nimport \\\"./interfaces/ISortedTroves.sol\\\";\\nimport \\\"./interfaces/IHOGToken.sol\\\";\\nimport \\\"./interfaces/IHOGStaking.sol\\\";\\nimport \\\"./interfaces/IFeesRouter.sol\\\";\\nimport \\\"./dependencies/HedgehogBase.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./dependencies/CheckContract.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\n/**\\n * @notice Fork of Liquity's TroveManager. Most of the Logic remains unchanged.\\n * Changes to the contract:\\n * - Raised pragma version\\n * - Removed an import of ActivePool Interface\\n * - Logic updates with redemption & borrowing fees calculation and their distribution\\n * Even though SafeMath is no longer required, the decision was made to keep it to avoid human factor errors\\n */\\n\\ncontract TroveManager is HedgehogBase, Ownable, CheckContract {\\n    using SafeMath for uint256;\\n    string public constant NAME = \\\"TroveManager\\\";\\n\\n    // --- Connected contract declarations ---\\n\\n    address public borrowerOperationsAddress;\\n\\n    IStabilityPool public stabilityPool;\\n\\n    address gasPoolAddress;\\n\\n    ICollSurplusPool collSurplusPool;\\n\\n    IBaseFeeLMAToken public baseFeeLMAToken;\\n\\n    IHOGToken public hogToken;\\n\\n    IHOGStaking public hogStaking;\\n\\n    IFeesRouter public feesRouter;\\n\\n    // A doubly linked list of Troves, sorted by their sorted by their collateral ratios\\n    ISortedTroves public sortedTroves;\\n\\n    // --- Data structures ---\\n\\n    uint public constant SECONDS_IN_ONE_MINUTE = 60;\\n    /*\\n     * Half-life of 12h. 12h = 720 min\\n     * (1/2) = d^720 => d = (1/2)^(1/720)\\n     */\\n    uint public constant MINUTE_DECAY_REDEMPTION_FACTOR = 999037758833783000;\\n    uint public constant MINUTE_DECAY_BORROWING_FACTOR = 991152865945140000;\\n    uint public constant REDEMPTION_FEE_FLOOR = (DECIMAL_PRECISION / 1000) * 5; // 0.5%\\n    uint public constant MAX_BORROWING_FEE = DECIMAL_PRECISION; // 100%\\n\\n    // During bootsrap period redemptions are not allowed\\n    uint public constant BOOTSTRAP_PERIOD = 14 days;\\n\\n    /*\\n     * BETA: 18 digit decimal. Parameter by which to divide the redeemed fraction, in order to calc the new base rate from a redemption.\\n     * Corresponds to (1 / ALPHA) in the white paper.\\n     */\\n    uint public constant BETA = 2;\\n\\n    // HEDGEHOG LOGIC UPDATES: BaseRate is different for redemption and minting tokens\\n    // 1) Remove baseRate variable\\n    // 2) Create redemptionBaseRate public state variable\\n    // 3) Create borrowBaseRate public state variable\\n    uint public redemptionBaseRate;\\n    uint public borrowBaseRate;\\n\\n    // HEDGEHOG LOGIC UPDATES: lastFeeOperationTime is different for redemption and minting tokens\\n    // 1) Remove lastFeeOperationTime variable\\n    // 2) Create lastRedemptionTime public state variable\\n    // 3) Create lastBorrowTime public state variable\\n    uint public lastRedemptionTime;\\n    uint public lastBorrowTime;\\n\\n    enum Status {\\n        nonExistent,\\n        active,\\n        closedByOwner,\\n        closedByLiquidation,\\n        closedByRedemption\\n    }\\n\\n    // Store the necessary data for a trove\\n    struct Trove {\\n        uint debt;\\n        uint coll;\\n        uint stake;\\n        Status status;\\n        uint128 arrayIndex;\\n    }\\n\\n    mapping(address => Trove) public Troves;\\n\\n    uint public totalStakes;\\n\\n    // Snapshot of the value of totalStakes, taken immediately after the latest liquidation\\n    uint public totalStakesSnapshot;\\n\\n    // Snapshot of the total collateral across the ActivePool and DefaultPool, immediately after the latest liquidation.\\n    uint public totalCollateralSnapshot;\\n\\n    /*\\n     * L_WStETH and L_BaseFeeLMADebt track the sums of accumulated liquidation rewards per unit staked. During its lifetime, each stake earns:\\n     *\\n     * An WStETH gain of ( stake * [L_WStETH - L_WStETH(0)] )\\n     * A BaseFeeLMADebt increase  of ( stake * [L_BaseFeeLMADebt - L_BaseFeeLMADebt(0)] )\\n     *\\n     * Where L_WStETH(0) and L_BaseFeeLMADebt(0) are snapshots of L_WStETH and L_BaseFeeLMADebt for the active Trove taken at the instant the stake was made\\n     */\\n    uint public L_WStETH;\\n    uint public L_BaseFeeLMADebt;\\n\\n    // Map addresses with active troves to their RewardSnapshot\\n    mapping(address => RewardSnapshot) public rewardSnapshots;\\n\\n    // Object containing the WStETH and BaseFeeLMA snapshots for a given active trove\\n    struct RewardSnapshot {\\n        uint WStETH;\\n        uint BaseFeeLMADebt;\\n    }\\n\\n    // Array of all active trove addresses - used to to compute an approximate hint off-chain, for the sorted list insertion\\n    address[] public TroveOwners;\\n\\n    // Error trackers for the trove redistribution calculation\\n    uint public lastWStETHError_Redistribution;\\n    uint public lastBaseFeeLMADebtError_Redistribution;\\n\\n    /*\\n     * --- Variable container structs for liquidations ---\\n     *\\n     * These structs are used to hold, return and assign variables inside the liquidation functions,\\n     * in order to avoid the error: \\\"CompilerError: Stack too deep\\\".\\n     **/\\n\\n    struct LocalVariables_OuterLiquidationFunction {\\n        uint price;\\n        uint BaseFeeLMAInStabPool;\\n        bool recoveryModeAtStart;\\n        uint liquidatedDebt;\\n        uint liquidatedColl;\\n    }\\n\\n    struct LocalVariables_InnerSingleLiquidateFunction {\\n        uint collToLiquidate;\\n        uint pendingDebtReward;\\n        uint pendingCollReward;\\n    }\\n\\n    struct LocalVariables_LiquidationSequence {\\n        uint remainingBaseFeeLMAInStabPool;\\n        uint i;\\n        uint ICR;\\n        address user;\\n        bool backToNormalMode;\\n        uint entireSystemDebt;\\n        uint entireSystemColl;\\n    }\\n\\n    struct LiquidationValues {\\n        uint entireTroveDebt;\\n        uint entireTroveColl;\\n        uint collGasCompensation;\\n        uint BaseFeeLMAGasCompensation;\\n        uint debtToOffset;\\n        uint collToSendToSP;\\n        uint debtToRedistribute;\\n        uint collToRedistribute;\\n        uint collSurplus;\\n    }\\n\\n    struct LiquidationTotals {\\n        uint totalCollInSequence;\\n        uint totalDebtInSequence;\\n        uint totalCollGasCompensation;\\n        uint totalBaseFeeLMAGasCompensation;\\n        uint totalDebtToOffset;\\n        uint totalCollToSendToSP;\\n        uint totalDebtToRedistribute;\\n        uint totalCollToRedistribute;\\n        uint totalCollSurplus;\\n    }\\n\\n    struct ContractsCache {\\n        IActivePool activePool;\\n        IDefaultPool defaultPool;\\n        IBaseFeeLMAToken baseFeeLMAToken;\\n        IHOGStaking hogStaking;\\n        ISortedTroves sortedTroves;\\n        ICollSurplusPool collSurplusPool;\\n        address gasPoolAddress;\\n    }\\n    // --- Variable container structs for redemptions ---\\n\\n    struct RedemptionTotals {\\n        uint remainingBaseFeeLMA;\\n        uint totalBaseFeeLMAToRedeem;\\n        uint totalWStETHDrawn;\\n        uint WStETHFee;\\n        uint WStETHToSendToRedeemer;\\n        // HEDGEHOG LOGIC UPDATES: BaseRate is different for redemption and minting tokens\\n        // Rename decayedBaseRate into decayedRedemptionBaseRate\\n        uint decayedRedemptionBaseRate;\\n        uint price;\\n        uint totalBaseFeeLMASupplyAtStart;\\n    }\\n\\n    struct SingleRedemptionValues {\\n        uint BaseFeeLMALot;\\n        uint WStETHLot;\\n        bool cancelledPartial;\\n    }\\n\\n    // --- Events ---\\n\\n    event BorrowerOperationsAddressChanged(\\n        address _newBorrowerOperationsAddress\\n    );\\n    event PriceFeedAddressChanged(address _newPriceFeedAddress);\\n    event BaseFeeLMATokenAddressChanged(address _newBaseFeeLMATokenAddress);\\n    event ActivePoolAddressChanged(address _activePoolAddress);\\n    event DefaultPoolAddressChanged(address _defaultPoolAddress);\\n    event StabilityPoolAddressChanged(address _stabilityPoolAddress);\\n    event GasPoolAddressChanged(address _gasPoolAddress);\\n    event CollSurplusPoolAddressChanged(address _collSurplusPoolAddress);\\n    event SortedTrovesAddressChanged(address _sortedTrovesAddress);\\n    event HOGTokenAddressChanged(address _hogTokenAddress);\\n    event HOGStakingAddressChanged(address _hogStakingAddress);\\n    event FeesRouterAddressUpdated(IFeesRouter _feesRouter);\\n\\n    event Liquidation(\\n        uint _liquidatedDebt,\\n        uint _liquidatedColl,\\n        uint _collGasCompensation,\\n        uint _BaseFeeLMAGasCompensation\\n    );\\n    event Redemption(\\n        uint _attemptedBaseFeeLMAAmount,\\n        uint _actualBaseFeeLMAAmount,\\n        uint _WStETHSent,\\n        uint _WStETHFee\\n    );\\n    event TroveUpdated(\\n        address indexed _borrower,\\n        uint _debt,\\n        uint _coll,\\n        uint _stake,\\n        TroveManagerOperation _operation\\n    );\\n    event TroveLiquidated(\\n        address indexed _borrower,\\n        uint _debt,\\n        uint _coll,\\n        TroveManagerOperation _operation\\n    );\\n\\n    // HEDGEHOG LOGIC UPDATES: BaseRate is different for redemption and minting tokens\\n    // 1) Remove BaseRateUpdated event\\n    // 2) Create RedemptionBaseRateUpdated event that accepts _redemptionBaseRate\\n    // 3) Create BorrowBaseRateUpdated event that accepts _borrowBaseRate\\n    event RedemptionBaseRateUpdated(uint _redemptionBaseRate);\\n    event BorrowBaseRateUpdated(uint _borrowBaseRate);\\n\\n    // HEDGEHOG LOGIC UPDATES: BaseRate is different for redemption and minting tokens\\n    // 1) Remove LastFeeOpTimeUpdated event\\n    // 2) Create LastRedemptionTimeUpdated event that accepts _lastRedemptionTime\\n    // 3) Create LastBorrowTimeUpdated event that accepts _lastBorrowTime\\n    event LastRedemptionTimeUpdated(uint _lastRedemptionTime);\\n    event LastBorrowTimeUpdated(uint _lastBorrowTime);\\n    event TotalStakesUpdated(uint _newTotalStakes);\\n    event SystemSnapshotsUpdated(\\n        uint _totalStakesSnapshot,\\n        uint _totalCollateralSnapshot\\n    );\\n    event LTermsUpdated(uint _L_WStETH, uint _L_BaseFeeLMADebt);\\n    event TroveSnapshotsUpdated(uint _L_WStETH, uint _L_BaseFeeLMADebt);\\n    event TroveIndexUpdated(address _borrower, uint _newIndex);\\n\\n    enum TroveManagerOperation {\\n        applyPendingRewards,\\n        liquidateInNormalMode,\\n        liquidateInRecoveryMode,\\n        redeemCollateral\\n    }\\n\\n    // --- Dependency setter ---\\n\\n    function setAddresses(\\n        address _borrowerOperationsAddress,\\n        address _activePoolAddress,\\n        address _defaultPoolAddress,\\n        address _stabilityPoolAddress,\\n        address _gasPoolAddress,\\n        address _collSurplusPoolAddress,\\n        address _priceFeedAddress,\\n        address _baseFeeLMATokenAddress,\\n        address _sortedTrovesAddress,\\n        address _hogTokenAddress,\\n        address _hogStakingAddress,\\n        IFeesRouter _feesRouterAddress\\n    ) external onlyOwner {\\n        checkContract(_borrowerOperationsAddress);\\n        checkContract(_activePoolAddress);\\n        checkContract(_defaultPoolAddress);\\n        checkContract(_stabilityPoolAddress);\\n        checkContract(_gasPoolAddress);\\n        checkContract(_collSurplusPoolAddress);\\n        checkContract(_priceFeedAddress);\\n        checkContract(_baseFeeLMATokenAddress);\\n        checkContract(_sortedTrovesAddress);\\n        checkContract(_hogTokenAddress);\\n        checkContract(_hogStakingAddress);\\n        checkContract(address(_feesRouterAddress));\\n\\n        borrowerOperationsAddress = _borrowerOperationsAddress;\\n        activePool = IActivePool(_activePoolAddress);\\n        defaultPool = IDefaultPool(_defaultPoolAddress);\\n        stabilityPool = IStabilityPool(_stabilityPoolAddress);\\n        gasPoolAddress = _gasPoolAddress;\\n        collSurplusPool = ICollSurplusPool(_collSurplusPoolAddress);\\n        priceFeed = IPriceFeed(_priceFeedAddress);\\n        baseFeeLMAToken = IBaseFeeLMAToken(_baseFeeLMATokenAddress);\\n        sortedTroves = ISortedTroves(_sortedTrovesAddress);\\n        hogToken = IHOGToken(_hogTokenAddress);\\n        hogStaking = IHOGStaking(_hogStakingAddress);\\n        feesRouter = IFeesRouter(_feesRouterAddress);\\n\\n        emit BorrowerOperationsAddressChanged(_borrowerOperationsAddress);\\n        emit ActivePoolAddressChanged(_activePoolAddress);\\n        emit DefaultPoolAddressChanged(_defaultPoolAddress);\\n        emit StabilityPoolAddressChanged(_stabilityPoolAddress);\\n        emit GasPoolAddressChanged(_gasPoolAddress);\\n        emit CollSurplusPoolAddressChanged(_collSurplusPoolAddress);\\n        emit PriceFeedAddressChanged(_priceFeedAddress);\\n        emit BaseFeeLMATokenAddressChanged(_baseFeeLMATokenAddress);\\n        emit SortedTrovesAddressChanged(_sortedTrovesAddress);\\n        emit HOGTokenAddressChanged(_hogTokenAddress);\\n        emit HOGStakingAddressChanged(_hogStakingAddress);\\n        emit FeesRouterAddressUpdated(_feesRouterAddress);\\n\\n        renounceOwnership();\\n    }\\n\\n    // --- Getters ---\\n\\n    function getTroveOwnersCount() external view returns (uint) {\\n        return TroveOwners.length;\\n    }\\n\\n    function getTroveFromTroveOwnersArray(\\n        uint _index\\n    ) external view returns (address) {\\n        return TroveOwners[_index];\\n    }\\n\\n    // --- Trove Liquidation functions ---\\n\\n    // Single liquidation function. Closes the trove if its ICR is lower than the minimum collateral ratio.\\n    function liquidate(address _borrower) external {\\n        _requireTroveIsActive(_borrower);\\n\\n        address[] memory borrowers = new address[](1);\\n        borrowers[0] = _borrower;\\n        batchLiquidateTroves(borrowers);\\n    }\\n\\n    // --- Inner single liquidation functions ---\\n\\n    // Liquidate one trove, in Normal Mode.\\n    function _liquidateNormalMode(\\n        IActivePool _activePool,\\n        IDefaultPool _defaultPool,\\n        address _borrower,\\n        uint _BaseFeeLMAInStabPool\\n    ) internal returns (LiquidationValues memory singleLiquidation) {\\n        LocalVariables_InnerSingleLiquidateFunction memory vars;\\n\\n        (\\n            singleLiquidation.entireTroveDebt,\\n            singleLiquidation.entireTroveColl,\\n            vars.pendingDebtReward,\\n            vars.pendingCollReward\\n        ) = getEntireDebtAndColl(_borrower);\\n\\n        _movePendingTroveRewardsToActivePool(\\n            _activePool,\\n            _defaultPool,\\n            vars.pendingDebtReward,\\n            vars.pendingCollReward\\n        );\\n        _removeStake(_borrower);\\n\\n        singleLiquidation.collGasCompensation = _getCollGasCompensation(\\n            singleLiquidation.entireTroveColl\\n        );\\n\\n        singleLiquidation\\n            .BaseFeeLMAGasCompensation = BaseFeeLMA_GAS_COMPENSATION; // TODO: Why is that being done if BaseFeeLMA_GAS_COMP is static\\n        uint collToLiquidate = singleLiquidation.entireTroveColl.sub(\\n            singleLiquidation.collGasCompensation\\n        );\\n\\n        (\\n            singleLiquidation.debtToOffset,\\n            singleLiquidation.collToSendToSP,\\n            singleLiquidation.debtToRedistribute,\\n            singleLiquidation.collToRedistribute\\n        ) = _getOffsetAndRedistributionVals(\\n            singleLiquidation.entireTroveDebt,\\n            collToLiquidate,\\n            _BaseFeeLMAInStabPool\\n        );\\n\\n        _closeTrove(_borrower, Status.closedByLiquidation);\\n        emit TroveLiquidated(\\n            _borrower,\\n            singleLiquidation.entireTroveDebt,\\n            singleLiquidation.entireTroveColl,\\n            TroveManagerOperation.liquidateInNormalMode\\n        );\\n        emit TroveUpdated(\\n            _borrower,\\n            0,\\n            0,\\n            0,\\n            TroveManagerOperation.liquidateInNormalMode\\n        );\\n        return singleLiquidation;\\n    }\\n\\n    // Liquidate one trove, in Recovery Mode.\\n    function _liquidateRecoveryMode(\\n        IActivePool _activePool,\\n        IDefaultPool _defaultPool,\\n        address _borrower,\\n        uint _ICR,\\n        uint _BaseFeeLMAInStabPool,\\n        uint _TCR,\\n        uint _price\\n    ) internal returns (LiquidationValues memory singleLiquidation) {\\n        LocalVariables_InnerSingleLiquidateFunction memory vars;\\n        if (TroveOwners.length <= 1) {\\n            return singleLiquidation;\\n        } // don't liquidate if last trove\\n        (\\n            singleLiquidation.entireTroveDebt,\\n            singleLiquidation.entireTroveColl,\\n            vars.pendingDebtReward,\\n            vars.pendingCollReward\\n        ) = getEntireDebtAndColl(_borrower);\\n\\n        singleLiquidation.collGasCompensation = _getCollGasCompensation(\\n            singleLiquidation.entireTroveColl\\n        );\\n        singleLiquidation\\n            .BaseFeeLMAGasCompensation = BaseFeeLMA_GAS_COMPENSATION;\\n        vars.collToLiquidate = singleLiquidation.entireTroveColl.sub(\\n            singleLiquidation.collGasCompensation\\n        );\\n\\n        // If ICR <= 100%, purely redistribute the Trove across all active Troves\\n        if (_ICR <= _100pct) {\\n            _movePendingTroveRewardsToActivePool(\\n                _activePool,\\n                _defaultPool,\\n                vars.pendingDebtReward,\\n                vars.pendingCollReward\\n            );\\n            _removeStake(_borrower);\\n\\n            singleLiquidation.debtToOffset = 0;\\n            singleLiquidation.collToSendToSP = 0;\\n            singleLiquidation.debtToRedistribute = singleLiquidation\\n                .entireTroveDebt;\\n            singleLiquidation.collToRedistribute = vars.collToLiquidate;\\n\\n            _closeTrove(_borrower, Status.closedByLiquidation);\\n            emit TroveLiquidated(\\n                _borrower,\\n                singleLiquidation.entireTroveDebt,\\n                singleLiquidation.entireTroveColl,\\n                TroveManagerOperation.liquidateInRecoveryMode\\n            );\\n            emit TroveUpdated(\\n                _borrower,\\n                0,\\n                0,\\n                0,\\n                TroveManagerOperation.liquidateInRecoveryMode\\n            );\\n\\n            // If 100% < ICR < MCR, offset as much as possible, and redistribute the remainder\\n        } else if ((_ICR > _100pct) && (_ICR < MCR)) {\\n            _movePendingTroveRewardsToActivePool(\\n                _activePool,\\n                _defaultPool,\\n                vars.pendingDebtReward,\\n                vars.pendingCollReward\\n            );\\n            _removeStake(_borrower);\\n\\n            (\\n                singleLiquidation.debtToOffset,\\n                singleLiquidation.collToSendToSP,\\n                singleLiquidation.debtToRedistribute,\\n                singleLiquidation.collToRedistribute\\n            ) = _getOffsetAndRedistributionVals(\\n                singleLiquidation.entireTroveDebt,\\n                vars.collToLiquidate,\\n                _BaseFeeLMAInStabPool\\n            );\\n\\n            _closeTrove(_borrower, Status.closedByLiquidation);\\n            emit TroveLiquidated(\\n                _borrower,\\n                singleLiquidation.entireTroveDebt,\\n                singleLiquidation.entireTroveColl,\\n                TroveManagerOperation.liquidateInRecoveryMode\\n            );\\n            emit TroveUpdated(\\n                _borrower,\\n                0,\\n                0,\\n                0,\\n                TroveManagerOperation.liquidateInRecoveryMode\\n            );\\n            /*\\n             * If 110% <= ICR < current TCR (accounting for the preceding liquidations in the current sequence)\\n             * and there is BaseFeeLMA in the Stability Pool, only offset, with no redistribution,\\n             * but at a capped rate of 1.1 and only if the whole debt can be liquidated.\\n             * The remainder due to the capped rate will be claimable as collateral surplus.\\n             */\\n        } else if (\\n            (_ICR >= MCR) &&\\n            (_ICR < _TCR) &&\\n            (singleLiquidation.entireTroveDebt <= _BaseFeeLMAInStabPool)\\n        ) {\\n            _movePendingTroveRewardsToActivePool(\\n                _activePool,\\n                _defaultPool,\\n                vars.pendingDebtReward,\\n                vars.pendingCollReward\\n            );\\n            assert(_BaseFeeLMAInStabPool != 0);\\n\\n            _removeStake(_borrower);\\n            singleLiquidation = _getCappedOffsetVals(\\n                singleLiquidation.entireTroveDebt,\\n                singleLiquidation.entireTroveColl,\\n                _price\\n            );\\n\\n            _closeTrove(_borrower, Status.closedByLiquidation);\\n            if (singleLiquidation.collSurplus > 0) {\\n                collSurplusPool.accountSurplus(\\n                    _borrower,\\n                    singleLiquidation.collSurplus\\n                );\\n            }\\n\\n            emit TroveLiquidated(\\n                _borrower,\\n                singleLiquidation.entireTroveDebt,\\n                singleLiquidation.collToSendToSP,\\n                TroveManagerOperation.liquidateInRecoveryMode\\n            );\\n            emit TroveUpdated(\\n                _borrower,\\n                0,\\n                0,\\n                0,\\n                TroveManagerOperation.liquidateInRecoveryMode\\n            );\\n        } else {\\n            // if (_ICR >= MCR && ( _ICR >= _TCR || singleLiquidation.entireTroveDebt > _BaseFeeLMAInStabPool))\\n            LiquidationValues memory zeroVals;\\n            return zeroVals;\\n        }\\n\\n        return singleLiquidation;\\n    }\\n\\n    /* In a full liquidation, returns the values for a trove's coll and debt to be offset, and coll and debt to be\\n     * redistributed to active troves.\\n     */\\n    function _getOffsetAndRedistributionVals(\\n        uint _debt,\\n        uint _coll,\\n        uint _BaseFeeLMAInStabPool\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint debtToOffset,\\n            uint collToSendToSP,\\n            uint debtToRedistribute,\\n            uint collToRedistribute\\n        )\\n    {\\n        if (_BaseFeeLMAInStabPool > 0) {\\n            /*\\n             * Offset as much debt & collateral as possible against the Stability Pool, and redistribute the remainder\\n             * between all active troves.\\n             *\\n             *  If the trove's debt is larger than the deposited BaseFeeLMA in the Stability Pool:\\n             *\\n             *  - Offset an amount of the trove's debt equal to the BaseFeeLMA in the Stability Pool\\n             *  - Send a fraction of the trove's collateral to the Stability Pool, equal to the fraction of its offset debt\\n             *\\n             */\\n            debtToOffset = LiquityMath._min(_debt, _BaseFeeLMAInStabPool);\\n            collToSendToSP = _coll.mul(debtToOffset).div(_debt);\\n            debtToRedistribute = _debt.sub(debtToOffset);\\n            collToRedistribute = _coll.sub(collToSendToSP);\\n        } else {\\n            debtToOffset = 0;\\n            collToSendToSP = 0;\\n            debtToRedistribute = _debt;\\n            collToRedistribute = _coll;\\n        }\\n    }\\n\\n    /*\\n     *  Get its offset coll/debt and WStETH gas comp, and close the trove.\\n     */\\n    function _getCappedOffsetVals(\\n        uint _entireTroveDebt,\\n        uint _entireTroveColl,\\n        uint _price\\n    ) internal pure returns (LiquidationValues memory singleLiquidation) {\\n        singleLiquidation.entireTroveDebt = _entireTroveDebt;\\n        singleLiquidation.entireTroveColl = _entireTroveColl;\\n        uint cappedCollPortion = _entireTroveDebt.mul(MCR).div(_price);\\n\\n        singleLiquidation.collGasCompensation = _getCollGasCompensation(\\n            cappedCollPortion\\n        );\\n        singleLiquidation\\n            .BaseFeeLMAGasCompensation = BaseFeeLMA_GAS_COMPENSATION;\\n\\n        singleLiquidation.debtToOffset = _entireTroveDebt;\\n        singleLiquidation.collToSendToSP = cappedCollPortion.sub(\\n            singleLiquidation.collGasCompensation\\n        );\\n        singleLiquidation.collSurplus = _entireTroveColl.sub(cappedCollPortion);\\n        singleLiquidation.debtToRedistribute = 0;\\n        singleLiquidation.collToRedistribute = 0;\\n    }\\n\\n    /*\\n     * Liquidate a sequence of troves. Closes a maximum number of n under-collateralized Troves,\\n     * starting from the one with the lowest collateral ratio in the system, and moving upwards\\n     */\\n    function liquidateTroves(uint _n) external {\\n        ContractsCache memory contractsCache = ContractsCache(\\n            activePool,\\n            defaultPool,\\n            IBaseFeeLMAToken(address(0)),\\n            IHOGStaking(address(0)),\\n            sortedTroves,\\n            ICollSurplusPool(address(0)),\\n            address(0)\\n        );\\n        IStabilityPool stabilityPoolCached = stabilityPool;\\n\\n        LocalVariables_OuterLiquidationFunction memory vars;\\n\\n        LiquidationTotals memory totals;\\n\\n        vars.price = priceFeed.fetchPrice();\\n        vars.BaseFeeLMAInStabPool = stabilityPoolCached\\n            .getTotalBaseFeeLMADeposits();\\n        vars.recoveryModeAtStart = _checkRecoveryMode(vars.price);\\n\\n        // Perform the appropriate liquidation sequence - tally the values, and obtain their totals\\n        if (vars.recoveryModeAtStart) {\\n            totals = _getTotalsFromLiquidateTrovesSequence_RecoveryMode(\\n                contractsCache,\\n                vars.price,\\n                vars.BaseFeeLMAInStabPool,\\n                _n\\n            );\\n        } else {\\n            // if !vars.recoveryModeAtStart\\n            totals = _getTotalsFromLiquidateTrovesSequence_NormalMode(\\n                contractsCache.activePool,\\n                contractsCache.defaultPool,\\n                vars.price,\\n                vars.BaseFeeLMAInStabPool,\\n                _n\\n            );\\n        }\\n\\n        require(\\n            totals.totalDebtInSequence > 0,\\n            \\\"TroveManager: nothing to liquidate\\\"\\n        );\\n\\n        // Move liquidated WStETH and BaseFeeLMA to the appropriate pools\\n        stabilityPoolCached.offset(\\n            totals.totalDebtToOffset,\\n            totals.totalCollToSendToSP\\n        );\\n        _redistributeDebtAndColl(\\n            contractsCache.activePool,\\n            contractsCache.defaultPool,\\n            totals.totalDebtToRedistribute,\\n            totals.totalCollToRedistribute\\n        );\\n        if (totals.totalCollSurplus > 0) {\\n            contractsCache.activePool.sendWStETH(\\n                address(collSurplusPool),\\n                totals.totalCollSurplus\\n            );\\n        }\\n\\n        // Update system snapshots\\n        _updateSystemSnapshots_excludeCollRemainder(\\n            contractsCache.activePool,\\n            totals.totalCollGasCompensation\\n        );\\n\\n        vars.liquidatedDebt = totals.totalDebtInSequence;\\n        vars.liquidatedColl = totals\\n            .totalCollInSequence\\n            .sub(totals.totalCollGasCompensation)\\n            .sub(totals.totalCollSurplus);\\n        emit Liquidation(\\n            vars.liquidatedDebt,\\n            vars.liquidatedColl,\\n            totals.totalCollGasCompensation,\\n            totals.totalBaseFeeLMAGasCompensation\\n        );\\n\\n        // Send gas compensation to caller\\n        _sendGasCompensation(\\n            contractsCache.activePool,\\n            msg.sender,\\n            totals.totalBaseFeeLMAGasCompensation,\\n            totals.totalCollGasCompensation\\n        );\\n    }\\n\\n    /*\\n     * This function is used when the liquidateTroves sequence starts during Recovery Mode. However, it\\n     * handle the case where the system *leaves* Recovery Mode, part way through the liquidation sequence\\n     */\\n    function _getTotalsFromLiquidateTrovesSequence_RecoveryMode(\\n        ContractsCache memory _contractsCache,\\n        uint _price,\\n        uint _BaseFeeLMAInStabPool,\\n        uint _n\\n    ) internal returns (LiquidationTotals memory totals) {\\n        LocalVariables_LiquidationSequence memory vars;\\n        LiquidationValues memory singleLiquidation;\\n\\n        vars.remainingBaseFeeLMAInStabPool = _BaseFeeLMAInStabPool;\\n        vars.backToNormalMode = false;\\n        vars.entireSystemDebt = getEntireSystemDebt();\\n        vars.entireSystemColl = getEntireSystemColl();\\n\\n        vars.user = _contractsCache.sortedTroves.getLast();\\n        address firstUser = _contractsCache.sortedTroves.getFirst();\\n        for (vars.i = 0; vars.i < _n && vars.user != firstUser; vars.i++) {\\n            // we need to cache it, because current user is likely going to be deleted\\n            address nextUser = _contractsCache.sortedTroves.getPrev(vars.user);\\n\\n            vars.ICR = getCurrentICR(vars.user, _price);\\n\\n            if (!vars.backToNormalMode) {\\n                // Break the loop if ICR is greater than MCR and Stability Pool is empty\\n                if (\\n                    vars.ICR >= MCR && vars.remainingBaseFeeLMAInStabPool == 0\\n                ) {\\n                    break;\\n                }\\n\\n                uint TCR = LiquityMath._computeCR(\\n                    vars.entireSystemColl,\\n                    vars.entireSystemDebt,\\n                    _price\\n                );\\n\\n                singleLiquidation = _liquidateRecoveryMode(\\n                    _contractsCache.activePool,\\n                    _contractsCache.defaultPool,\\n                    vars.user,\\n                    vars.ICR,\\n                    vars.remainingBaseFeeLMAInStabPool,\\n                    TCR,\\n                    _price\\n                );\\n\\n                // Update aggregate trackers\\n                vars.remainingBaseFeeLMAInStabPool = vars\\n                    .remainingBaseFeeLMAInStabPool\\n                    .sub(singleLiquidation.debtToOffset);\\n                vars.entireSystemDebt = vars.entireSystemDebt.sub(\\n                    singleLiquidation.debtToOffset\\n                );\\n                vars.entireSystemColl = vars\\n                    .entireSystemColl\\n                    .sub(singleLiquidation.collToSendToSP)\\n                    .sub(singleLiquidation.collGasCompensation)\\n                    .sub(singleLiquidation.collSurplus);\\n\\n                // Add liquidation values to their respective running totals\\n                totals = _addLiquidationValuesToTotals(\\n                    totals,\\n                    singleLiquidation\\n                );\\n\\n                vars.backToNormalMode = !_checkPotentialRecoveryMode(\\n                    vars.entireSystemColl,\\n                    vars.entireSystemDebt,\\n                    _price\\n                );\\n            } else if (vars.backToNormalMode && vars.ICR < MCR) {\\n                singleLiquidation = _liquidateNormalMode(\\n                    _contractsCache.activePool,\\n                    _contractsCache.defaultPool,\\n                    vars.user,\\n                    vars.remainingBaseFeeLMAInStabPool\\n                );\\n\\n                vars.remainingBaseFeeLMAInStabPool = vars\\n                    .remainingBaseFeeLMAInStabPool\\n                    .sub(singleLiquidation.debtToOffset);\\n\\n                // Add liquidation values to their respective running totals\\n                totals = _addLiquidationValuesToTotals(\\n                    totals,\\n                    singleLiquidation\\n                );\\n            } else break; // break if the loop reaches a Trove with ICR >= MCR\\n\\n            vars.user = nextUser;\\n        }\\n    }\\n\\n    function _getTotalsFromLiquidateTrovesSequence_NormalMode(\\n        IActivePool _activePool,\\n        IDefaultPool _defaultPool,\\n        uint _price,\\n        uint _BaseFeeLMAInStabPool,\\n        uint _n\\n    ) internal returns (LiquidationTotals memory totals) {\\n        LocalVariables_LiquidationSequence memory vars;\\n        LiquidationValues memory singleLiquidation;\\n        ISortedTroves sortedTrovesCached = sortedTroves;\\n\\n        vars.remainingBaseFeeLMAInStabPool = _BaseFeeLMAInStabPool;\\n\\n        for (vars.i = 0; vars.i < _n; vars.i++) {\\n            vars.user = sortedTrovesCached.getLast();\\n            vars.ICR = getCurrentICR(vars.user, _price);\\n\\n            if (vars.ICR < MCR) {\\n                singleLiquidation = _liquidateNormalMode(\\n                    _activePool,\\n                    _defaultPool,\\n                    vars.user,\\n                    vars.remainingBaseFeeLMAInStabPool\\n                );\\n\\n                vars.remainingBaseFeeLMAInStabPool = vars\\n                    .remainingBaseFeeLMAInStabPool\\n                    .sub(singleLiquidation.debtToOffset);\\n\\n                // Add liquidation values to their respective running totals\\n                totals = _addLiquidationValuesToTotals(\\n                    totals,\\n                    singleLiquidation\\n                );\\n            } else break; // break if the loop reaches a Trove with ICR >= MCR\\n        }\\n    }\\n\\n    /*\\n     * Attempt to liquidate a custom list of troves provided by the caller.\\n     */\\n    function batchLiquidateTroves(address[] memory _troveArray) public {\\n        require(\\n            _troveArray.length != 0,\\n            \\\"TroveManager: Calldata address array must not be empty\\\"\\n        );\\n\\n        IActivePool activePoolCached = activePool;\\n        IDefaultPool defaultPoolCached = defaultPool;\\n        IStabilityPool stabilityPoolCached = stabilityPool;\\n\\n        LocalVariables_OuterLiquidationFunction memory vars;\\n        LiquidationTotals memory totals;\\n\\n        vars.price = priceFeed.fetchPrice();\\n        vars.BaseFeeLMAInStabPool = stabilityPoolCached\\n            .getTotalBaseFeeLMADeposits();\\n        vars.recoveryModeAtStart = _checkRecoveryMode(vars.price);\\n\\n        // Perform the appropriate liquidation sequence - tally values and obtain their totals.\\n        if (vars.recoveryModeAtStart) {\\n            totals = _getTotalFromBatchLiquidate_RecoveryMode(\\n                activePoolCached,\\n                defaultPoolCached,\\n                vars.price,\\n                vars.BaseFeeLMAInStabPool,\\n                _troveArray\\n            );\\n        } else {\\n            //  if !vars.recoveryModeAtStart\\n            totals = _getTotalsFromBatchLiquidate_NormalMode(\\n                activePoolCached,\\n                defaultPoolCached,\\n                vars.price,\\n                vars.BaseFeeLMAInStabPool,\\n                _troveArray\\n            );\\n        }\\n\\n        require(\\n            totals.totalDebtInSequence > 0,\\n            \\\"TroveManager: nothing to liquidate\\\"\\n        );\\n\\n        // Move liquidated WStETH and BaseFeeLMA to the appropriate pools\\n        stabilityPoolCached.offset(\\n            totals.totalDebtToOffset,\\n            totals.totalCollToSendToSP\\n        );\\n        _redistributeDebtAndColl(\\n            activePoolCached,\\n            defaultPoolCached,\\n            totals.totalDebtToRedistribute,\\n            totals.totalCollToRedistribute\\n        );\\n\\n        if (totals.totalCollSurplus > 0) {\\n            collSurplusPool.increaseBalance(totals.totalCollSurplus);\\n            activePoolCached.sendWStETH(\\n                address(collSurplusPool),\\n                totals.totalCollSurplus\\n            );\\n        }\\n\\n        // Update system snapshots\\n        _updateSystemSnapshots_excludeCollRemainder(\\n            activePoolCached,\\n            totals.totalCollGasCompensation\\n        );\\n\\n        vars.liquidatedDebt = totals.totalDebtInSequence;\\n\\n        vars.liquidatedColl = totals\\n            .totalCollInSequence\\n            .sub(totals.totalCollGasCompensation)\\n            .sub(totals.totalCollSurplus);\\n\\n        emit Liquidation(\\n            vars.liquidatedDebt,\\n            vars.liquidatedColl,\\n            totals.totalCollGasCompensation,\\n            totals.totalBaseFeeLMAGasCompensation\\n        );\\n\\n        // Send gas compensation to caller\\n        _sendGasCompensation(\\n            activePoolCached,\\n            msg.sender,\\n            totals.totalBaseFeeLMAGasCompensation,\\n            totals.totalCollGasCompensation\\n        );\\n    }\\n\\n    /*\\n     * This function is used when the batch liquidation sequence starts during Recovery Mode. However, it\\n     * handle the case where the system *leaves* Recovery Mode, part way through the liquidation sequence\\n     */\\n    function _getTotalFromBatchLiquidate_RecoveryMode(\\n        IActivePool _activePool,\\n        IDefaultPool _defaultPool,\\n        uint _price,\\n        uint _BaseFeeLMAInStabPool,\\n        address[] memory _troveArray\\n    ) internal returns (LiquidationTotals memory totals) {\\n        LocalVariables_LiquidationSequence memory vars;\\n        LiquidationValues memory singleLiquidation;\\n\\n        vars.remainingBaseFeeLMAInStabPool = _BaseFeeLMAInStabPool;\\n        vars.backToNormalMode = false;\\n        vars.entireSystemDebt = getEntireSystemDebt();\\n        vars.entireSystemColl = getEntireSystemColl();\\n\\n        for (vars.i = 0; vars.i < _troveArray.length; vars.i++) {\\n            vars.user = _troveArray[vars.i];\\n            // Skip non-active troves\\n            if (Troves[vars.user].status != Status.active) {\\n                continue;\\n            }\\n            vars.ICR = getCurrentICR(vars.user, _price);\\n\\n            if (!vars.backToNormalMode) {\\n                // Skip this trove if ICR is greater than MCR and Stability Pool is empty\\n                if (\\n                    vars.ICR >= MCR && vars.remainingBaseFeeLMAInStabPool == 0\\n                ) {\\n                    continue;\\n                }\\n\\n                uint TCR = LiquityMath._computeCR(\\n                    vars.entireSystemColl,\\n                    vars.entireSystemDebt,\\n                    _price\\n                );\\n\\n                singleLiquidation = _liquidateRecoveryMode(\\n                    _activePool,\\n                    _defaultPool,\\n                    vars.user,\\n                    vars.ICR,\\n                    vars.remainingBaseFeeLMAInStabPool,\\n                    TCR,\\n                    _price\\n                );\\n\\n                // Update aggregate trackers\\n                vars.remainingBaseFeeLMAInStabPool = vars\\n                    .remainingBaseFeeLMAInStabPool\\n                    .sub(singleLiquidation.debtToOffset);\\n                vars.entireSystemDebt = vars.entireSystemDebt.sub(\\n                    singleLiquidation.debtToOffset\\n                );\\n                vars.entireSystemColl = vars\\n                    .entireSystemColl\\n                    .sub(singleLiquidation.collToSendToSP)\\n                    .sub(singleLiquidation.collGasCompensation)\\n                    .sub(singleLiquidation.collSurplus);\\n\\n                // Add liquidation values to their respective running totals\\n                totals = _addLiquidationValuesToTotals(\\n                    totals,\\n                    singleLiquidation\\n                );\\n\\n                vars.backToNormalMode = !_checkPotentialRecoveryMode(\\n                    vars.entireSystemColl,\\n                    vars.entireSystemDebt,\\n                    _price\\n                );\\n            } else if (vars.backToNormalMode && vars.ICR < MCR) {\\n                singleLiquidation = _liquidateNormalMode(\\n                    _activePool,\\n                    _defaultPool,\\n                    vars.user,\\n                    vars.remainingBaseFeeLMAInStabPool\\n                );\\n                vars.remainingBaseFeeLMAInStabPool = vars\\n                    .remainingBaseFeeLMAInStabPool\\n                    .sub(singleLiquidation.debtToOffset);\\n\\n                // Add liquidation values to their respective running totals\\n                totals = _addLiquidationValuesToTotals(\\n                    totals,\\n                    singleLiquidation\\n                );\\n            } else continue; // In Normal Mode skip troves with ICR >= MCR\\n        }\\n    }\\n\\n    function _getTotalsFromBatchLiquidate_NormalMode(\\n        IActivePool _activePool,\\n        IDefaultPool _defaultPool,\\n        uint _price,\\n        uint _BaseFeeLMAInStabPool,\\n        address[] memory _troveArray\\n    ) internal returns (LiquidationTotals memory totals) {\\n        LocalVariables_LiquidationSequence memory vars;\\n        LiquidationValues memory singleLiquidation;\\n\\n        vars.remainingBaseFeeLMAInStabPool = _BaseFeeLMAInStabPool;\\n\\n        for (vars.i = 0; vars.i < _troveArray.length; vars.i++) {\\n            vars.user = _troveArray[vars.i];\\n            vars.ICR = getCurrentICR(vars.user, _price);\\n\\n            if (vars.ICR < MCR) {\\n                singleLiquidation = _liquidateNormalMode(\\n                    _activePool,\\n                    _defaultPool,\\n                    vars.user,\\n                    vars.remainingBaseFeeLMAInStabPool\\n                );\\n\\n                vars.remainingBaseFeeLMAInStabPool = vars\\n                    .remainingBaseFeeLMAInStabPool\\n                    .sub(singleLiquidation.debtToOffset);\\n\\n                // Add liquidation values to their respective running totals\\n                totals = _addLiquidationValuesToTotals(\\n                    totals,\\n                    singleLiquidation\\n                );\\n            }\\n        }\\n    }\\n\\n    // --- Liquidation helper functions ---\\n\\n    function _addLiquidationValuesToTotals(\\n        LiquidationTotals memory oldTotals,\\n        LiquidationValues memory singleLiquidation\\n    ) internal pure returns (LiquidationTotals memory newTotals) {\\n        // Tally all the values with their respective running totals\\n        newTotals.totalCollGasCompensation = oldTotals\\n            .totalCollGasCompensation\\n            .add(singleLiquidation.collGasCompensation);\\n        newTotals.totalBaseFeeLMAGasCompensation = oldTotals\\n            .totalBaseFeeLMAGasCompensation\\n            .add(singleLiquidation.BaseFeeLMAGasCompensation);\\n        newTotals.totalDebtInSequence = oldTotals.totalDebtInSequence.add(\\n            singleLiquidation.entireTroveDebt\\n        );\\n        newTotals.totalCollInSequence = oldTotals.totalCollInSequence.add(\\n            singleLiquidation.entireTroveColl\\n        );\\n        newTotals.totalDebtToOffset = oldTotals.totalDebtToOffset.add(\\n            singleLiquidation.debtToOffset\\n        );\\n        newTotals.totalCollToSendToSP = oldTotals.totalCollToSendToSP.add(\\n            singleLiquidation.collToSendToSP\\n        );\\n        newTotals.totalDebtToRedistribute = oldTotals\\n            .totalDebtToRedistribute\\n            .add(singleLiquidation.debtToRedistribute);\\n        newTotals.totalCollToRedistribute = oldTotals\\n            .totalCollToRedistribute\\n            .add(singleLiquidation.collToRedistribute);\\n        newTotals.totalCollSurplus = oldTotals.totalCollSurplus.add(\\n            singleLiquidation.collSurplus\\n        );\\n\\n        return newTotals;\\n    }\\n\\n    function _sendGasCompensation(\\n        IActivePool _activePool,\\n        address _liquidator,\\n        uint _BaseFeeLMA,\\n        uint _WStETH\\n    ) internal {\\n        if (_BaseFeeLMA > 0) {\\n            baseFeeLMAToken.returnFromPool(\\n                gasPoolAddress,\\n                _liquidator,\\n                _BaseFeeLMA\\n            );\\n        }\\n\\n        if (_WStETH > 0) {\\n            _activePool.sendWStETH(_liquidator, _WStETH);\\n        }\\n    }\\n\\n    // Move a Trove's pending debt and collateral rewards from distributions, from the Default Pool to the Active Pool\\n    function _movePendingTroveRewardsToActivePool(\\n        IActivePool _activePool,\\n        IDefaultPool _defaultPool,\\n        uint _BaseFeeLMA,\\n        uint _WStETH\\n    ) internal {\\n        _defaultPool.decreaseBaseFeeLMADebt(_BaseFeeLMA);\\n        _activePool.increaseBaseFeeLMADebt(_BaseFeeLMA);\\n        _defaultPool.sendWStETHToActivePool(_WStETH);\\n    }\\n\\n    // --- Redemption functions ---\\n\\n    // Redeem as much collateral as possible from _borrower's Trove in exchange for BaseFeeLMA up to _maxBaseFeeLMAamount\\n    // HEDGEHOG Updates: Not subtracting gas compensation from the debt anymore\\n    function _redeemCollateralFromTrove(\\n        ContractsCache memory _contractsCache,\\n        address _borrower,\\n        uint _maxBaseFeeLMAamount,\\n        uint _price,\\n        address _upperPartialRedemptionHint,\\n        address _lowerPartialRedemptionHint,\\n        uint _partialRedemptionHintNICR\\n    ) internal returns (SingleRedemptionValues memory singleRedemption) {\\n        // Determine the remaining amount (lot) to be redeemed, capped by the entire debt of the Trove minus the liquidation reserve\\n        singleRedemption.BaseFeeLMALot = LiquityMath._min(\\n            _maxBaseFeeLMAamount,\\n            Troves[_borrower].debt\\n        );\\n\\n        // Get the WStETHLot of equivalent value in USD\\n        // HEDGEHOG UPDATES: Change WStETHLOT calculations formula from [debtToBeRedeemed * price * 10e9] to [debtToBeRedeemed / price * 1e18]\\n        singleRedemption.WStETHLot = singleRedemption.BaseFeeLMALot.mul(_price);\\n\\n        // Decrease the debt and collateral of the current Trove according to the BaseFeeLMA lot and corresponding WStETH to send\\n        uint newDebt = (Troves[_borrower].debt).sub(\\n            singleRedemption.BaseFeeLMALot\\n        );\\n        uint newColl = (Troves[_borrower].coll).sub(singleRedemption.WStETHLot);\\n\\n        if (newDebt == BaseFeeLMA_GAS_COMPENSATION) {\\n            // No debt left in the Trove (except for the liquidation reserve), therefore the trove gets closed\\n            _removeStake(_borrower);\\n            _closeTrove(_borrower, Status.closedByRedemption);\\n            _redeemCloseTrove(\\n                _contractsCache,\\n                _borrower,\\n                BaseFeeLMA_GAS_COMPENSATION,\\n                newColl\\n            );\\n            emit TroveUpdated(\\n                _borrower,\\n                0,\\n                0,\\n                0,\\n                TroveManagerOperation.redeemCollateral\\n            );\\n        } else {\\n            uint newNICR = LiquityMath._computeNominalCR(newColl, newDebt);\\n\\n            /*\\n             * If the provided hint is out of date, we bail since trying to reinsert without a good hint will almost\\n             * certainly result in running out of gas.\\n             *\\n             * If the resultant net debt of the partial is less than the minimum, net debt we bail.\\n             */\\n\\n            if (\\n                newNICR != _partialRedemptionHintNICR ||\\n                _getNetDebt(newDebt) < MIN_NET_DEBT\\n            ) {\\n                singleRedemption.cancelledPartial = true;\\n                return singleRedemption;\\n            }\\n\\n            _contractsCache.sortedTroves.reInsert(\\n                _borrower,\\n                newNICR,\\n                _upperPartialRedemptionHint,\\n                _lowerPartialRedemptionHint\\n            );\\n\\n            Troves[_borrower].debt = newDebt;\\n            Troves[_borrower].coll = newColl;\\n            _updateStakeAndTotalStakes(_borrower);\\n\\n            emit TroveUpdated(\\n                _borrower,\\n                newDebt,\\n                newColl,\\n                Troves[_borrower].stake,\\n                TroveManagerOperation.redeemCollateral\\n            );\\n        }\\n\\n        return singleRedemption;\\n    }\\n\\n    /*\\n     * Called when a full redemption occurs, and closes the trove.\\n     * The redeemer swaps (debt - liquidation reserve) BaseFeeLMA for (debt - liquidation reserve) worth of WStETH, so the BaseFeeLMA liquidation reserve left corresponds to the remaining debt.\\n     * In order to close the trove, the BaseFeeLMA liquidation reserve is burned, and the corresponding debt is removed from the active pool.\\n     * The debt recorded on the trove's struct is zero'd elswhere, in _closeTrove.\\n     * Any surplus WStETH left in the trove, is sent to the Coll surplus pool, and can be later claimed by the borrower.\\n     */\\n    function _redeemCloseTrove(\\n        ContractsCache memory _contractsCache,\\n        address _borrower,\\n        uint _BaseFeeLMA,\\n        uint _WStETH\\n    ) internal {\\n        _contractsCache.baseFeeLMAToken.burn(gasPoolAddress, _BaseFeeLMA);\\n        // Update Active Pool BaseFeeLMA, and send WStETH to account\\n        _contractsCache.activePool.decreaseBaseFeeLMADebt(_BaseFeeLMA);\\n\\n        // send WStETH from Active Pool to CollSurplus Pool\\n        _contractsCache.collSurplusPool.accountSurplus(_borrower, _WStETH);\\n        _contractsCache.activePool.sendWStETH(\\n            address(_contractsCache.collSurplusPool),\\n            _WStETH\\n        );\\n    }\\n\\n    function _isValidFirstRedemptionHint(\\n        ISortedTroves _sortedTroves,\\n        address _firstRedemptionHint,\\n        uint _price\\n    ) internal view returns (bool) {\\n        if (\\n            _firstRedemptionHint == address(0) ||\\n            !_sortedTroves.contains(_firstRedemptionHint) ||\\n            getCurrentICR(_firstRedemptionHint, _price) < MCR\\n        ) {\\n            return false;\\n        }\\n\\n        address nextTrove = _sortedTroves.getNext(_firstRedemptionHint);\\n        return\\n            nextTrove == address(0) || getCurrentICR(nextTrove, _price) < MCR;\\n    }\\n\\n    /* Send _BaseFeeLMAamount BaseFeeLMA to the system and redeem the corresponding amount of collateral from as many Troves as are needed to fill the redemption\\n     * request.  Applies pending rewards to a Trove before reducing its debt and coll.\\n     *\\n     * Note that if _amount is very large, this function can run out of gas, specially if traversed troves are small. This can be easily avoided by\\n     * splitting the total _amount in appropriate chunks and calling the function multiple times.\\n     *\\n     * Param `_maxIterations` can also be provided, so the loop through Troves is capped (if it’s zero, it will be ignored).This makes it easier to\\n     * avoid OOG for the frontend, as only knowing approximately the average cost of an iteration is enough, without needing to know the “topology”\\n     * of the trove list. It also avoids the need to set the cap in stone in the contract, nor doing gas calculations, as both gas price and opcode\\n     * costs can vary.\\n     *\\n     * All Troves that are redeemed from -- with the likely exception of the last one -- will end up with no debt left, therefore they will be closed.\\n     * If the last Trove does have some remaining debt, it has a finite ICR, and the reinsertion could be anywhere in the list, therefore it requires a hint.\\n     * A frontend should use getRedemptionHints() to calculate what the ICR of this Trove will be after redemption, and pass a hint for its position\\n     * in the sortedTroves list along with the ICR value that the hint was found for.\\n     *\\n     * If another transaction modifies the list between calling getRedemptionHints() and passing the hints to redeemCollateral(), it\\n     * is very likely that the last (partially) redeemed Trove would end up with a different ICR than what the hint is for. In this case the\\n     * redemption will stop after the last completely redeemed Trove and the sender will keep the remaining BaseFeeLMA amount, which they can attempt\\n     * to redeem later.\\n     */\\n    function redeemCollateral(\\n        uint _BaseFeeLMAamount,\\n        address _firstRedemptionHint,\\n        address _upperPartialRedemptionHint,\\n        address _lowerPartialRedemptionHint,\\n        uint _partialRedemptionHintNICR,\\n        uint _maxIterations,\\n        uint _maxFeePercentage\\n    ) external {\\n        ContractsCache memory contractsCache = ContractsCache(\\n            activePool,\\n            defaultPool,\\n            baseFeeLMAToken,\\n            hogStaking,\\n            sortedTroves,\\n            collSurplusPool,\\n            gasPoolAddress\\n        );\\n        RedemptionTotals memory totals;\\n\\n        _requireValidMaxFeePercentage(_maxFeePercentage);\\n        //_requireAfterBootstrapPeriod();\\n        totals.price = priceFeed.fetchPrice();\\n\\n        _requireTCRoverMCR(totals.price);\\n        _requireAmountGreaterThanZero(_BaseFeeLMAamount);\\n        _requireBaseFeeLMABalanceCoversRedemption(\\n            contractsCache.baseFeeLMAToken,\\n            msg.sender,\\n            _BaseFeeLMAamount\\n        );\\n\\n        totals.totalBaseFeeLMASupplyAtStart = getEntireSystemDebt();\\n        // Confirm redeemer's balance is less than total BaseFeeLMA supply\\n        assert(\\n            contractsCache.baseFeeLMAToken.balanceOf(msg.sender) <=\\n                totals.totalBaseFeeLMASupplyAtStart\\n        );\\n\\n        totals.remainingBaseFeeLMA = _BaseFeeLMAamount;\\n        address currentBorrower;\\n\\n        if (\\n            _isValidFirstRedemptionHint(\\n                contractsCache.sortedTroves,\\n                _firstRedemptionHint,\\n                totals.price\\n            )\\n        ) {\\n            currentBorrower = _firstRedemptionHint;\\n        } else {\\n            currentBorrower = contractsCache.sortedTroves.getLast();\\n            // Find the first trove with ICR >= MCR\\n            while (\\n                currentBorrower != address(0) &&\\n                getCurrentICR(currentBorrower, totals.price) < MCR\\n            ) {\\n                currentBorrower = contractsCache.sortedTroves.getPrev(\\n                    currentBorrower\\n                );\\n            }\\n        }\\n        // Loop through the Troves starting from the one with lowest collateral ratio until _amount of BaseFeeLMA is exchanged for collateral\\n        if (_maxIterations == 0) {\\n            // Previous implementation: _maxIterations = uint(-1);\\n            // Updated since 8th pragma does not allow anymore\\n            _maxIterations = type(uint).max;\\n        }\\n        while (\\n            currentBorrower != address(0) &&\\n            totals.remainingBaseFeeLMA > 0 &&\\n            _maxIterations > 0\\n        ) {\\n            _maxIterations--;\\n            // Save the address of the Trove preceding the current one, before potentially modifying the list\\n            address nextUserToCheck = contractsCache.sortedTroves.getPrev(\\n                currentBorrower\\n            );\\n\\n            _applyPendingRewards(\\n                contractsCache.activePool,\\n                contractsCache.defaultPool,\\n                currentBorrower\\n            );\\n            SingleRedemptionValues\\n                memory singleRedemption = _redeemCollateralFromTrove(\\n                    contractsCache,\\n                    currentBorrower,\\n                    totals.remainingBaseFeeLMA,\\n                    totals.price,\\n                    _upperPartialRedemptionHint,\\n                    _lowerPartialRedemptionHint,\\n                    _partialRedemptionHintNICR\\n                );\\n\\n            if (singleRedemption.cancelledPartial) break; // Partial redemption was cancelled (out-of-date hint, or new net debt < minimum), therefore we could not redeem from the last Trove\\n            totals.totalBaseFeeLMAToRedeem = totals.totalBaseFeeLMAToRedeem.add(\\n                singleRedemption.BaseFeeLMALot\\n            );\\n            totals.totalWStETHDrawn = totals.totalWStETHDrawn.add(\\n                singleRedemption.WStETHLot\\n            );\\n\\n            totals.remainingBaseFeeLMA = totals.remainingBaseFeeLMA.sub(\\n                singleRedemption.BaseFeeLMALot\\n            );\\n            currentBorrower = nextUserToCheck;\\n        }\\n\\n        require(\\n            totals.totalWStETHDrawn > 0,\\n            \\\"TroveManager: Unable to redeem any amount\\\"\\n        );\\n        // HEDGEHOG LOGIC UPDATE:\\n        // 1) rename _updateBaseRateFromRedemption into _updateRedemptionBaseRateFromRedemption\\n        // 2) update commented explanation (baseRate => redemptionBaseRate)\\n        // Decay the redemptionBaseRate due to time passed, and then increase it according to the size of this redemption.\\n        // Use the saved total BaseFeeLMA supply value, from before it was reduced by the redemption.\\n        _updateRedemptionBaseRateFromRedemption(\\n            totals.totalWStETHDrawn,\\n            totals.price,\\n            totals.totalBaseFeeLMASupplyAtStart\\n        );\\n        // Calculate the WStETH fee\\n        totals.WStETHFee = _getRedemptionFee(totals.totalWStETHDrawn);\\n\\n        _requireUserAcceptsFee(\\n            totals.WStETHFee,\\n            totals.totalWStETHDrawn,\\n            _maxFeePercentage\\n        );\\n\\n        // HEDGHEHOG UPDATES:\\n        // Fees are now distributed among different addresses based on how big they are\\n        feesRouter.distributeCollFee(totals.totalWStETHDrawn, totals.WStETHFee);\\n\\n        totals.WStETHToSendToRedeemer = totals.totalWStETHDrawn.sub(\\n            totals.WStETHFee\\n        );\\n\\n        emit Redemption(\\n            _BaseFeeLMAamount,\\n            totals.totalBaseFeeLMAToRedeem,\\n            totals.totalWStETHDrawn,\\n            totals.WStETHFee\\n        );\\n        // Burn the total BaseFeeLMA that is cancelled with debt, and send the redeemed WStETH to msg.sender\\n        contractsCache.baseFeeLMAToken.burn(\\n            msg.sender,\\n            totals.totalBaseFeeLMAToRedeem\\n        );\\n        // Update Active Pool BaseFeeLMA, and send WStETH to account\\n        contractsCache.activePool.decreaseBaseFeeLMADebt(\\n            totals.totalBaseFeeLMAToRedeem\\n        );\\n        contractsCache.activePool.sendWStETH(\\n            msg.sender,\\n            totals.WStETHToSendToRedeemer\\n        );\\n    }\\n\\n    // --- Helper functions ---\\n\\n    // Return the nominal collateral ratio (ICR) of a given Trove, without the price. Takes a trove's pending coll and debt rewards from redistributions into account.\\n    function getNominalICR(address _borrower) public view returns (uint) {\\n        (\\n            uint currentWStETH,\\n            uint currentBaseFeeLMADebt\\n        ) = _getCurrentTroveAmounts(_borrower);\\n\\n        uint NICR = LiquityMath._computeNominalCR(\\n            currentWStETH,\\n            currentBaseFeeLMADebt\\n        );\\n        return NICR;\\n    }\\n\\n    /**\\n     * HEDGEHOG UPDATES:\\n     * Get Price directly from the price feed instead of param passing\\n     */\\n    // Return the current collateral ratio (ICR) of a given Trove. Takes a trove's pending coll and debt rewards from redistributions into account.\\n    function getCurrentICR(\\n        address _borrower,\\n        uint _price\\n    ) public view returns (uint) {\\n        (\\n            uint currentWStETH,\\n            uint currentBaseFeeLMADebt\\n        ) = _getCurrentTroveAmounts(_borrower);\\n\\n        uint ICR = LiquityMath._computeCR(\\n            currentWStETH,\\n            currentBaseFeeLMADebt,\\n            _price\\n        );\\n        return ICR;\\n    }\\n\\n    function getUnreliableTroveICR(\\n        address _borrower\\n    ) public view returns (uint) {\\n        uint256 price = priceFeed.lastGoodPrice();\\n        (\\n            uint currentWStETH,\\n            uint currentBaseFeeLMADebt\\n        ) = _getCurrentTroveAmounts(_borrower);\\n\\n        uint ICR = LiquityMath._computeCR(\\n            currentWStETH,\\n            currentBaseFeeLMADebt,\\n            price\\n        );\\n        return ICR;\\n    }\\n\\n    function _getCurrentTroveAmounts(\\n        address _borrower\\n    ) internal view returns (uint, uint) {\\n        uint pendingWStETHReward = getPendingWStETHReward(_borrower);\\n        uint pendingBaseFeeLMADebtReward = getPendingBaseFeeLMADebtReward(\\n            _borrower\\n        );\\n\\n        uint currentWStETH = Troves[_borrower].coll.add(pendingWStETHReward);\\n        uint currentBaseFeeLMADebt = Troves[_borrower].debt.add(\\n            pendingBaseFeeLMADebtReward\\n        );\\n\\n        return (currentWStETH, currentBaseFeeLMADebt);\\n    }\\n\\n    function applyPendingRewards(address _borrower) external {\\n        _requireCallerIsBorrowerOperations();\\n        return _applyPendingRewards(activePool, defaultPool, _borrower);\\n    }\\n\\n    // Add the borrowers's coll and debt rewards earned from redistributions, to their Trove\\n    function _applyPendingRewards(\\n        IActivePool _activePool,\\n        IDefaultPool _defaultPool,\\n        address _borrower\\n    ) internal {\\n        if (hasPendingRewards(_borrower)) {\\n            _requireTroveIsActive(_borrower);\\n\\n            // Compute pending rewards\\n            uint pendingWStETHReward = getPendingWStETHReward(_borrower);\\n            uint pendingBaseFeeLMADebtReward = getPendingBaseFeeLMADebtReward(\\n                _borrower\\n            );\\n\\n            // Apply pending rewards to trove's state\\n            Troves[_borrower].coll = Troves[_borrower].coll.add(\\n                pendingWStETHReward\\n            );\\n            Troves[_borrower].debt = Troves[_borrower].debt.add(\\n                pendingBaseFeeLMADebtReward\\n            );\\n\\n            _updateTroveRewardSnapshots(_borrower);\\n\\n            // Transfer from DefaultPool to ActivePool\\n            _movePendingTroveRewardsToActivePool(\\n                _activePool,\\n                _defaultPool,\\n                pendingBaseFeeLMADebtReward,\\n                pendingWStETHReward\\n            );\\n\\n            emit TroveUpdated(\\n                _borrower,\\n                Troves[_borrower].debt,\\n                Troves[_borrower].coll,\\n                Troves[_borrower].stake,\\n                TroveManagerOperation.applyPendingRewards\\n            );\\n        }\\n    }\\n\\n    // Update borrower's snapshots of L_WStETH and L_BaseFeeLMADebt to reflect the current values\\n    function updateTroveRewardSnapshots(address _borrower) external {\\n        _requireCallerIsBorrowerOperations();\\n        return _updateTroveRewardSnapshots(_borrower);\\n    }\\n\\n    function _updateTroveRewardSnapshots(address _borrower) internal {\\n        rewardSnapshots[_borrower].WStETH = L_WStETH;\\n        rewardSnapshots[_borrower].BaseFeeLMADebt = L_BaseFeeLMADebt;\\n        emit TroveSnapshotsUpdated(L_WStETH, L_BaseFeeLMADebt);\\n    }\\n\\n    // Get the borrower's pending accumulated WStETH reward, earned by their stake\\n    function getPendingWStETHReward(\\n        address _borrower\\n    ) public view returns (uint) {\\n        uint snapshotWStETH = rewardSnapshots[_borrower].WStETH;\\n        uint rewardPerUnitStaked = L_WStETH.sub(snapshotWStETH);\\n\\n        if (\\n            rewardPerUnitStaked == 0 ||\\n            Troves[_borrower].status != Status.active\\n        ) {\\n            return 0;\\n        }\\n\\n        uint stake = Troves[_borrower].stake;\\n\\n        uint pendingWStETHReward = stake.mul(rewardPerUnitStaked).div(\\n            DECIMAL_PRECISION\\n        );\\n\\n        return pendingWStETHReward;\\n    }\\n\\n    // Get the borrower's pending accumulated BaseFeeLMA reward, earned by their stake\\n    function getPendingBaseFeeLMADebtReward(\\n        address _borrower\\n    ) public view returns (uint) {\\n        uint snapshotBaseFeeLMADebt = rewardSnapshots[_borrower].BaseFeeLMADebt;\\n        uint rewardPerUnitStaked = L_BaseFeeLMADebt.sub(snapshotBaseFeeLMADebt);\\n\\n        if (\\n            rewardPerUnitStaked == 0 ||\\n            Troves[_borrower].status != Status.active\\n        ) {\\n            return 0;\\n        }\\n\\n        uint stake = Troves[_borrower].stake;\\n\\n        uint pendingBaseFeeLMADebtReward = stake.mul(rewardPerUnitStaked).div(\\n            DECIMAL_PRECISION\\n        );\\n\\n        return pendingBaseFeeLMADebtReward;\\n    }\\n\\n    function hasPendingRewards(address _borrower) public view returns (bool) {\\n        /*\\n         * A Trove has pending rewards if its snapshot is less than the current rewards per-unit-staked sum:\\n         * this indicates that rewards have occured since the snapshot was made, and the user therefore has\\n         * pending rewards\\n         */\\n        if (Troves[_borrower].status != Status.active) {\\n            return false;\\n        }\\n\\n        return (rewardSnapshots[_borrower].WStETH < L_WStETH);\\n    }\\n\\n    // Return the Troves entire debt and coll, including pending rewards from redistributions.\\n    function getEntireDebtAndColl(\\n        address _borrower\\n    )\\n        public\\n        view\\n        returns (\\n            uint debt,\\n            uint coll,\\n            uint pendingBaseFeeLMADebtReward,\\n            uint pendingWStETHReward\\n        )\\n    {\\n        debt = Troves[_borrower].debt;\\n        coll = Troves[_borrower].coll;\\n\\n        pendingBaseFeeLMADebtReward = getPendingBaseFeeLMADebtReward(_borrower);\\n        pendingWStETHReward = getPendingWStETHReward(_borrower);\\n\\n        debt = debt.add(pendingBaseFeeLMADebtReward);\\n        coll = coll.add(pendingWStETHReward);\\n    }\\n\\n    function removeStake(address _borrower) external {\\n        _requireCallerIsBorrowerOperations();\\n        return _removeStake(_borrower);\\n    }\\n\\n    // Remove borrower's stake from the totalStakes sum, and set their stake to 0\\n    function _removeStake(address _borrower) internal {\\n        uint stake = Troves[_borrower].stake;\\n        totalStakes = totalStakes.sub(stake);\\n        Troves[_borrower].stake = 0;\\n    }\\n\\n    function updateStakeAndTotalStakes(\\n        address _borrower\\n    ) external returns (uint) {\\n        _requireCallerIsBorrowerOperations();\\n        return _updateStakeAndTotalStakes(_borrower);\\n    }\\n\\n    // Update borrower's stake based on their latest collateral value\\n    function _updateStakeAndTotalStakes(\\n        address _borrower\\n    ) internal returns (uint) {\\n        uint newStake = _computeNewStake(Troves[_borrower].coll);\\n        uint oldStake = Troves[_borrower].stake;\\n        Troves[_borrower].stake = newStake;\\n\\n        totalStakes = totalStakes.sub(oldStake).add(newStake);\\n        emit TotalStakesUpdated(totalStakes);\\n\\n        return newStake;\\n    }\\n\\n    // Calculate a new stake based on the snapshots of the totalStakes and totalCollateral taken at the last liquidation\\n    function _computeNewStake(uint _coll) internal view returns (uint) {\\n        uint stake;\\n        if (totalCollateralSnapshot == 0) {\\n            stake = _coll;\\n        } else {\\n            /*\\n             * The following assert() holds true because:\\n             * - The system always contains >= 1 trove\\n             * - When we close or liquidate a trove, we redistribute the pending rewards, so if all troves were closed/liquidated,\\n             * rewards would’ve been emptied and totalCollateralSnapshot would be zero too.\\n             */\\n            assert(totalStakesSnapshot > 0);\\n            stake = _coll.mul(totalStakesSnapshot).div(totalCollateralSnapshot);\\n        }\\n        return stake;\\n    }\\n\\n    function _redistributeDebtAndColl(\\n        IActivePool _activePool,\\n        IDefaultPool _defaultPool,\\n        uint _debt,\\n        uint _coll\\n    ) internal {\\n        if (_debt == 0) {\\n            return;\\n        }\\n\\n        /*\\n         * Add distributed coll and debt rewards-per-unit-staked to the running totals. Division uses a \\\"feedback\\\"\\n         * error correction, to keep the cumulative error low in the running totals L_WStETH and L_BaseFeeLMADebt:\\n         *\\n         * 1) Form numerators which compensate for the floor division errors that occurred the last time this\\n         * function was called.\\n         * 2) Calculate \\\"per-unit-staked\\\" ratios.\\n         * 3) Multiply each ratio back by its denominator, to reveal the current floor division error.\\n         * 4) Store these errors for use in the next correction when this function is called.\\n         * 5) Note: static analysis tools complain about this \\\"division before multiplication\\\", however, it is intended.\\n         */\\n        uint WStETHNumerator = _coll.mul(DECIMAL_PRECISION).add(\\n            lastWStETHError_Redistribution\\n        );\\n        uint BaseFeeLMADebtNumerator = _debt.mul(DECIMAL_PRECISION).add(\\n            lastBaseFeeLMADebtError_Redistribution\\n        );\\n\\n        // Get the per-unit-staked terms\\n        uint WStETHRewardPerUnitStaked = WStETHNumerator.div(totalStakes);\\n        uint BaseFeeLMADebtRewardPerUnitStaked = BaseFeeLMADebtNumerator.div(\\n            totalStakes\\n        );\\n\\n        lastWStETHError_Redistribution = WStETHNumerator.sub(\\n            WStETHRewardPerUnitStaked.mul(totalStakes)\\n        );\\n        lastBaseFeeLMADebtError_Redistribution = BaseFeeLMADebtNumerator.sub(\\n            BaseFeeLMADebtRewardPerUnitStaked.mul(totalStakes)\\n        );\\n\\n        // Add per-unit-staked terms to the running totals\\n        L_WStETH = L_WStETH.add(WStETHRewardPerUnitStaked);\\n        L_BaseFeeLMADebt = L_BaseFeeLMADebt.add(\\n            BaseFeeLMADebtRewardPerUnitStaked\\n        );\\n\\n        emit LTermsUpdated(L_WStETH, L_BaseFeeLMADebt);\\n\\n        // Transfer coll and debt from ActivePool to DefaultPool\\n        _activePool.decreaseBaseFeeLMADebt(_debt);\\n        _defaultPool.increaseBaseFeeLMADebt(_debt);\\n        _defaultPool.increaseBalance(_coll);\\n        _activePool.sendWStETH(address(_defaultPool), _coll);\\n    }\\n\\n    function closeTrove(address _borrower) external {\\n        _requireCallerIsBorrowerOperations();\\n        return _closeTrove(_borrower, Status.closedByOwner);\\n    }\\n\\n    function _closeTrove(address _borrower, Status closedStatus) internal {\\n        assert(\\n            closedStatus != Status.nonExistent && closedStatus != Status.active\\n        );\\n\\n        uint TroveOwnersArrayLength = TroveOwners.length;\\n        _requireMoreThanOneTroveInSystem(TroveOwnersArrayLength);\\n\\n        Troves[_borrower].status = closedStatus;\\n        Troves[_borrower].coll = 0;\\n        Troves[_borrower].debt = 0;\\n\\n        rewardSnapshots[_borrower].WStETH = 0;\\n        rewardSnapshots[_borrower].BaseFeeLMADebt = 0;\\n\\n        _removeTroveOwner(_borrower, TroveOwnersArrayLength);\\n        sortedTroves.remove(_borrower);\\n    }\\n\\n    /*\\n     * Updates snapshots of system total stakes and total collateral, excluding a given collateral remainder from the calculation.\\n     * Used in a liquidation sequence.\\n     *\\n     * The calculation excludes a portion of collateral that is in the ActivePool:\\n     *\\n     * the total WStETH gas compensation from the liquidation sequence\\n     *\\n     * The WStETH as compensation must be excluded as it is always sent out at the very end of the liquidation sequence.\\n     */\\n    function _updateSystemSnapshots_excludeCollRemainder(\\n        IActivePool _activePool,\\n        uint _collRemainder\\n    ) internal {\\n        totalStakesSnapshot = totalStakes;\\n\\n        uint activeColl = _activePool.getWStETH();\\n        uint liquidatedColl = defaultPool.getWStETH();\\n        totalCollateralSnapshot = activeColl.sub(_collRemainder).add(\\n            liquidatedColl\\n        );\\n\\n        emit SystemSnapshotsUpdated(\\n            totalStakesSnapshot,\\n            totalCollateralSnapshot\\n        );\\n    }\\n\\n    // Push the owner's address to the Trove owners list, and record the corresponding array index on the Trove struct\\n    function addTroveOwnerToArray(\\n        address _borrower\\n    ) external returns (uint index) {\\n        _requireCallerIsBorrowerOperations();\\n        return _addTroveOwnerToArray(_borrower);\\n    }\\n\\n    function _addTroveOwnerToArray(\\n        address _borrower\\n    ) internal returns (uint128 index) {\\n        /* Max array size is 2**128 - 1, i.e. ~3e30 troves. No risk of overflow, since troves have minimum BaseFeeLMA\\n        debt of liquidation reserve plus MIN_NET_DEBT. 3e30 BaseFeeLMA dwarfs the value of all wealth in the world ( which is < 1e15 USD). */\\n\\n        // Push the Troveowner to the array\\n        TroveOwners.push(_borrower);\\n\\n        // Record the index of the new Troveowner on their Trove struct\\n        index = uint128(TroveOwners.length.sub(1));\\n        Troves[_borrower].arrayIndex = index;\\n\\n        return index;\\n    }\\n\\n    /*\\n     * Remove a Trove owner from the TroveOwners array, not preserving array order. Removing owner 'B' does the following:\\n     * [A B C D E] => [A E C D], and updates E's Trove struct to point to its new array index.\\n     */\\n    function _removeTroveOwner(\\n        address _borrower,\\n        uint TroveOwnersArrayLength\\n    ) internal {\\n        Status troveStatus = Troves[_borrower].status;\\n        // It’s set in caller function `_closeTrove`\\n        assert(\\n            troveStatus != Status.nonExistent && troveStatus != Status.active\\n        );\\n\\n        uint128 index = Troves[_borrower].arrayIndex;\\n        uint length = TroveOwnersArrayLength;\\n        uint idxLast = length.sub(1);\\n\\n        assert(index <= idxLast);\\n\\n        address addressToMove = TroveOwners[idxLast];\\n\\n        TroveOwners[index] = addressToMove;\\n        Troves[addressToMove].arrayIndex = index;\\n        emit TroveIndexUpdated(addressToMove, index);\\n\\n        TroveOwners.pop();\\n    }\\n\\n    // --- Recovery Mode and TCR functions ---\\n\\n    function getTCR(uint _price) external view returns (uint) {\\n        return _getTCR(_price);\\n    }\\n\\n    function getUnreliableTCR() external view returns (uint) {\\n        return _getTCR(priceFeed.lastGoodPrice());\\n    }\\n\\n    function checkRecoveryMode(uint _price) external view returns (bool) {\\n        return _checkRecoveryMode(_price);\\n    }\\n\\n    function checkUnreliableRecoveryMode() external view returns (bool) {\\n        return _checkRecoveryMode(priceFeed.lastGoodPrice());\\n    }\\n\\n    // Check whether or not the system *would be* in Recovery Mode, given an WStETH:USD price, and the entire system coll and debt.\\n    function _checkPotentialRecoveryMode(\\n        uint _entireSystemColl,\\n        uint _entireSystemDebt,\\n        uint _price\\n    ) internal pure returns (bool) {\\n        uint TCR = LiquityMath._computeCR(\\n            _entireSystemColl,\\n            _entireSystemDebt,\\n            _price\\n        );\\n\\n        return TCR < CCR;\\n    }\\n\\n    // --- Redemption fee functions ---\\n\\n    /*\\n     * HEDGEHOG LOGIC UPDATES:\\n     * 1) Rename variable in docs (baseRate => redemptionBaseRate)\\n     * 2) decayedRemeptionBaseRate (decayedBaseRate) is now calculated by _calcDecayedRedemptionBaseRate();\\n     * 3) Updating RedemptionBaseRate state variable instead of baseRate\\n     * 4) Emiting RedemptionBaseRateUpdated instead of BaseRateUpdates();\\n     * 5) Now updates time only of redemeption operation instead of both redemption and borrow\\n     *\\n     * This function has two impacts on the redemptionBaseRate state variable:\\n     * 1) decays the redemptionBaseRate based on time passed since last redemption or BaseFeeLMA borrowing operation.\\n     * then,\\n     * 2) increases the redemptionBaseRate based on the amount redeemed, as a proportion of total supply\\n     */\\n    function _updateRedemptionBaseRateFromRedemption(\\n        uint _WStETHDrawn,\\n        uint _price,\\n        uint _totalBaseFeeLMASupply\\n    ) internal returns (uint) {\\n        uint decayedRedemptionBaseRate = _calcDecayedRedemptionBaseRate();\\n        // Hedgehog updates: Now calculating what part of total collateral is getting withdrawn from the\\n        // system\\n        /* Convert the drawn WStETH back to BaseFeeLMA at face value rate (1 BaseFeeLMA:1 USD), in order to get\\n         * the fraction of total supply that was redeemed at face value. */\\n        uint redeemedBaseFeeLMAFraction = _WStETHDrawn\\n            .mul(DECIMAL_PRECISION)\\n            .div(activePool.getWStETH());\\n\\n        // Hedgehog Updates: Remove division by BETA\\n        uint newBaseRate = decayedRedemptionBaseRate.add(\\n            redeemedBaseFeeLMAFraction\\n        );\\n\\n        newBaseRate = LiquityMath._min(newBaseRate, DECIMAL_PRECISION); // cap baseRate at a maximum of 100%\\n        //assert(newBaseRate <= DECIMAL_PRECISION); // This is already enforced in the line above\\n        assert(newBaseRate > 0); // Base rate is always non-zero after redemption\\n\\n        // Update the baseRate state variable\\n        redemptionBaseRate = newBaseRate;\\n        emit RedemptionBaseRateUpdated(newBaseRate);\\n\\n        _updateLastRedemptionTime();\\n        return newBaseRate;\\n    }\\n\\n    /*\\n     * HEDGEHOG LOGIC UPDATES:\\n     * 1) Now passing redemptionBaseRate instead of combined baseRate\\n     */\\n    function getRedemptionRate(\\n        uint _redemptionColl\\n    ) public view returns (uint) {\\n        return _calcRedemptionRate(redemptionBaseRate, _redemptionColl);\\n    }\\n\\n    function getRedemptionRateWithDecay(\\n        uint _redemptionColl\\n    ) public view returns (uint) {\\n        return\\n            _calcRedemptionRate(\\n                _calcDecayedRedemptionBaseRate(),\\n                _redemptionColl\\n            );\\n    }\\n\\n    /*\\n     * HEDGEHOG UPDATES:\\n     * Redemption Rate formula now is: RedFloor + RedBaseRate*MinuteDecayFactorMinutes + RedemptionETH/TotalColl\\n     * 1) Rename param name (_baseRate => _redemptionBaseRate)\\n     * 2) Now redeemed collateral divided by total collateral in active pool is added to the sum of redemption floor and redeem base rate\\n     */\\n    function _calcRedemptionRate(\\n        uint _redemptionBaseRate,\\n        uint _redemptionColl\\n    ) internal view returns (uint) {\\n        return\\n            LiquityMath._min(\\n                REDEMPTION_FEE_FLOOR.add(_redemptionBaseRate).add(\\n                    _redemptionColl.div(activePool.getWStETH())\\n                ),\\n                DECIMAL_PRECISION // cap at a maximum of 100%\\n            );\\n    }\\n\\n    function _getRedemptionFee(uint _WStETHDrawn) internal view returns (uint) {\\n        return _calcRedemptionFee(getRedemptionRate(_WStETHDrawn), _WStETHDrawn);\\n    }\\n\\n    function getRedemptionFeeWithDecay(\\n        uint _WStETHDrawn\\n    ) external view returns (uint) {\\n        return\\n            _calcRedemptionFee(\\n                getRedemptionRateWithDecay(_WStETHDrawn),\\n                _WStETHDrawn\\n            );\\n    }\\n\\n    function _calcRedemptionFee(\\n        uint _redemptionRate,\\n        uint _WStETHDrawn\\n    ) internal pure returns (uint) {\\n        uint redemptionFee = _redemptionRate.mul(_WStETHDrawn).div(\\n            DECIMAL_PRECISION\\n        );\\n        require(\\n            redemptionFee < _WStETHDrawn,\\n            \\\"TroveManager: Fee would eat up all returned collateral\\\"\\n        );\\n        return redemptionFee;\\n    }\\n\\n    // --- Borrowing fee functions ---\\n\\n    /*\\n     * HEDGEHOG LOGIC UPDATES:\\n     * 1) Now passing borrowBaseRate instead of combined baseRate\\n     */\\n    function getBorrowingRate(\\n        uint _issuedBaseFeeLMA\\n    ) public view returns (uint) {\\n        return _calcBorrowingRate(borrowBaseRate, _issuedBaseFeeLMA);\\n    }\\n\\n    /*\\n     * HEDGEHOG LOGIC UPDATES:\\n     * 1) Now passing _calcDecayedBorrowBaseRate instead of _calcDecayedBaseRate function to calculate the decayed borrowBaseRate\\n     */\\n    function getBorrowingRateWithDecay(\\n        uint _issuedBaseFeeLMA\\n    ) public view returns (uint) {\\n        return\\n            _calcBorrowingRate(\\n                _calcDecayedRedemptionBaseRate(),\\n                _issuedBaseFeeLMA\\n            );\\n    }\\n\\n    /*\\n     * HEDGEHOG UPDATES:\\n     * Now full dynamic fees formula is as follows: RedRate = RedFloor + RedBaseRate*MinuteDecayFactorMinutes + RedemptionETH / Total Collateral in the system\\n     * 1) Rename param name (_baseRate => _borrowBaseRate)\\n     * 2) Now adding issued asset divided by total supply of the asset to the sum of borrow flor and borrow decayed baseRate\\n     */\\n    function _calcBorrowingRate(\\n        uint _borrowBaseRate,\\n        uint _issuedBaseFeeLMA\\n    ) internal view returns (uint) {\\n        uint256 supply = baseFeeLMAToken.totalSupply();\\n        // Checking if there are tokens in supply, otherwise return 1 to avoid division by zero\\n        if (supply == 0) {\\n            return BORROWING_FEE_FLOOR;\\n        }\\n\\n        return\\n            LiquityMath._min(\\n                BORROWING_FEE_FLOOR.add(_borrowBaseRate).add(\\n                    _issuedBaseFeeLMA.mul(DECIMAL_PRECISION).div(supply)\\n                ),\\n                MAX_BORROWING_FEE\\n            );\\n    }\\n\\n    function getBorrowingFee(\\n        uint _BaseFeeLMADebt\\n    ) external view returns (uint, uint) {\\n        uint baseRate = getBorrowingRate(_BaseFeeLMADebt);\\n        return (_calcBorrowingFee(baseRate, _BaseFeeLMADebt), baseRate);\\n    }\\n\\n    function getBorrowingFeeWithDecay(\\n        uint _BaseFeeLMADebt\\n    ) external view returns (uint) {\\n        return\\n            _calcBorrowingFee(\\n                getBorrowingRateWithDecay(_BaseFeeLMADebt),\\n                _BaseFeeLMADebt\\n            );\\n    }\\n\\n    function _calcBorrowingFee(\\n        uint _borrowingRate,\\n        uint _BaseFeeLMADebt\\n    ) internal pure returns (uint) {\\n        return _borrowingRate.mul(_BaseFeeLMADebt).div(DECIMAL_PRECISION);\\n    }\\n\\n    function updateBaseRateFromBorrowing(uint _newBaseRate) external {\\n        require(\\n            msg.sender == borrowerOperationsAddress,\\n            \\\"TroveManager: Only Borrower operations may call\\\"\\n        );\\n        if (_newBaseRate >= BORROWING_FEE_FLOOR) {\\n            borrowBaseRate = _newBaseRate - BORROWING_FEE_FLOOR;\\n        } else {\\n            borrowBaseRate = 0;\\n        }\\n\\n        emit BorrowBaseRateUpdated(_newBaseRate);\\n    }\\n\\n    /*\\n     * HEDGEHOG LOGIC UPDATES:\\n     * 1) Now updates borrowBaseRate instead of baseRate used by both redemption and minting functions\\n     * 2) Emit BorrowBaseRateUpdated instead of BaseRateUpdated\\n     * 3) Now updates time only of borrow operation instead of both redemption and borrow\\n     * 4) Update doc variable name baseRate => borrowBaseRate\\n     */\\n    // Updates the borrowBaseRate state variable based on time elapsed since the last redemption or BaseFeeLMA borrowing operation.\\n    function decayBaseRateFromBorrowing() external {\\n        _requireCallerIsBorrowerOperations();\\n        uint decayedBaseRate = _calcDecayedBorrowBaseRate();\\n        assert(decayedBaseRate <= DECIMAL_PRECISION); // The baseRate can decay to 0\\n        // HEDGEHOG LOGIC CHANGES: Updating borrowing base rate instead\\n        borrowBaseRate = decayedBaseRate;\\n\\n        emit BorrowBaseRateUpdated(decayedBaseRate);\\n\\n        _updateLastBorrowTime();\\n    }\\n\\n    // --- Internal fee functions ---\\n\\n    /*\\n     * HEDGEHOG LOGIC UPDATES:\\n     * removed _updateLastFeeOpTime\\n     * New function _updateLastRedemptionTime simmilar to _updateLastFeeOpTime, that sets lastRedemptionTime and emits respective event.\\n     */\\n    // Update the last fee operation time only if time passed >= decay interval. This prevents base rate griefing.\\n    function _updateLastRedemptionTime() internal {\\n        uint timePassed = block.timestamp.sub(lastRedemptionTime);\\n\\n        if (timePassed >= SECONDS_IN_ONE_MINUTE) {\\n            lastRedemptionTime = block.timestamp;\\n            emit LastRedemptionTimeUpdated(block.timestamp);\\n        }\\n    }\\n\\n    /*\\n     * HEDGEHOG LOGIC UPDATES:\\n     * removed _updateLastFeeOpTime\\n     * New function _updateLastBorrowTime simmilar to _updateLastFeeOpTime, that sets lastBorrowTime and emits respective event.\\n     */\\n    // Update the last fee operation time only if time passed >= decay interval. This prevents base rate griefing.\\n    function _updateLastBorrowTime() internal {\\n        uint timePassed = block.timestamp.sub(lastBorrowTime);\\n\\n        if (timePassed >= SECONDS_IN_ONE_MINUTE) {\\n            lastBorrowTime = block.timestamp;\\n            emit LastBorrowTimeUpdated(block.timestamp);\\n        }\\n    }\\n\\n    /*\\n     * HEDGEHOG LOGIC UPDATES:\\n     * New function simmilar to _calcDecayedBaseRate. However used particularly for redemptionBaseRate calculation\\n     */\\n    function _calcDecayedRedemptionBaseRate() internal view returns (uint) {\\n        uint minutesPassed = _minutesPassedSinceLastRedemption();\\n\\n        uint decayFactor = LiquityMath._decPow(\\n            MINUTE_DECAY_REDEMPTION_FACTOR,\\n            minutesPassed\\n        );\\n\\n        return redemptionBaseRate.mul(decayFactor).div(DECIMAL_PRECISION);\\n    }\\n\\n    /*\\n     * HEDGEHOG LOGIC UPDATES:\\n     * New function simmilar to _calcDecayedBaseRate. However used particularly for borrowBaseRate calculation\\n     */\\n    function _calcDecayedBorrowBaseRate() internal view returns (uint) {\\n        uint minutesPassed = _minutesPassedSinceLastBorrow();\\n        uint decayFactor = LiquityMath._decPow(\\n            MINUTE_DECAY_BORROWING_FACTOR,\\n            minutesPassed\\n        );\\n\\n        return borrowBaseRate.mul(decayFactor).div(DECIMAL_PRECISION);\\n    }\\n\\n    /*\\n     * HEDGEHOG LOGIC UPDATES:\\n     * removed _minutesPassedSinceLastFeeOp\\n     * New function _minutesPassedSinceLastRedemption simmilar to _minutesPassedSinceLastFeeOp, that returns amount of minutes since last registered redemption\\n     */\\n    function _minutesPassedSinceLastRedemption() internal view returns (uint) {\\n        return\\n            (block.timestamp.sub(lastRedemptionTime)).div(\\n                SECONDS_IN_ONE_MINUTE\\n            );\\n    }\\n\\n    /*\\n     * HEDGEHOG LOGIC UPDATES:\\n     * removed _minutesPassedSinceLastFeeOp\\n     * New function _minutesPassedSinceLastBorrow simmilar to _minutesPassedSinceLastFeeOp, that returns amount of minutes since last registered borrow\\n     */\\n    function _minutesPassedSinceLastBorrow() internal view returns (uint) {\\n        return (block.timestamp.sub(lastBorrowTime)).div(SECONDS_IN_ONE_MINUTE);\\n    }\\n\\n    // --- 'require' wrapper functions ---\\n\\n    function _requireCallerIsBorrowerOperations() internal view {\\n        require(\\n            msg.sender == borrowerOperationsAddress,\\n            \\\"TroveManager: Caller is not the BorrowerOperations contract\\\"\\n        );\\n    }\\n\\n    function _requireTroveIsActive(address _borrower) internal view {\\n        require(\\n            Troves[_borrower].status == Status.active,\\n            \\\"TroveManager: Trove does not exist or is closed\\\"\\n        );\\n    }\\n\\n    function _requireBaseFeeLMABalanceCoversRedemption(\\n        IBaseFeeLMAToken _baseFeeLMAToken,\\n        address _redeemer,\\n        uint _amount\\n    ) internal view {\\n        require(\\n            _baseFeeLMAToken.balanceOf(_redeemer) >= _amount,\\n            \\\"TroveManager: Requested redemption amount must be <= user's BaseFeeLMA token balance\\\"\\n        );\\n    }\\n\\n    function _requireMoreThanOneTroveInSystem(\\n        uint TroveOwnersArrayLength\\n    ) internal view {\\n        require(\\n            TroveOwnersArrayLength > 1 && sortedTroves.getSize() > 1,\\n            \\\"TroveManager: Only one trove in the system\\\"\\n        );\\n    }\\n\\n    function _requireAmountGreaterThanZero(uint _amount) internal pure {\\n        require(_amount > 0, \\\"TroveManager: Amount must be greater than zero\\\");\\n    }\\n\\n    function _requireTCRoverMCR(uint _price) internal view {\\n        require(\\n            _getTCR(_price) >= MCR,\\n            \\\"TroveManager: Cannot redeem when TCR < MCR\\\"\\n        );\\n    }\\n\\n    function _requireAfterBootstrapPeriod() internal view {\\n        uint systemDeploymentTime = hogToken.getDeploymentStartTime();\\n        require(\\n            block.timestamp >= systemDeploymentTime.add(BOOTSTRAP_PERIOD),\\n            \\\"TroveManager: Redemptions are not allowed during bootstrap phase\\\"\\n        );\\n    }\\n\\n    function _requireValidMaxFeePercentage(\\n        uint _maxFeePercentage\\n    ) internal pure {\\n        require(\\n            _maxFeePercentage >= REDEMPTION_FEE_FLOOR &&\\n                _maxFeePercentage <= DECIMAL_PRECISION,\\n            \\\"Max fee percentage must be between 0.5% and 100%\\\"\\n        );\\n    }\\n\\n    // --- Trove property getters ---\\n\\n    function getTroveStatus(address _borrower) external view returns (uint) {\\n        return uint(Troves[_borrower].status);\\n    }\\n\\n    function getTroveStake(address _borrower) external view returns (uint) {\\n        return Troves[_borrower].stake;\\n    }\\n\\n    function getTroveDebt(address _borrower) external view returns (uint) {\\n        return Troves[_borrower].debt;\\n    }\\n\\n    function getTroveColl(address _borrower) external view returns (uint) {\\n        return Troves[_borrower].coll;\\n    }\\n\\n    // --- Trove property setters, called by BorrowerOperations ---\\n\\n    function setTroveStatus(address _borrower, uint _num) external {\\n        _requireCallerIsBorrowerOperations();\\n        Troves[_borrower].status = Status(_num);\\n    }\\n\\n    function increaseTroveColl(\\n        address _borrower,\\n        uint _collIncrease\\n    ) external returns (uint) {\\n        _requireCallerIsBorrowerOperations();\\n        uint newColl = Troves[_borrower].coll.add(_collIncrease);\\n        Troves[_borrower].coll = newColl;\\n        return newColl;\\n    }\\n\\n    function decreaseTroveColl(\\n        address _borrower,\\n        uint _collDecrease\\n    ) external returns (uint) {\\n        _requireCallerIsBorrowerOperations();\\n        uint newColl = Troves[_borrower].coll.sub(_collDecrease);\\n        Troves[_borrower].coll = newColl;\\n        return newColl;\\n    }\\n\\n    function increaseTroveDebt(\\n        address _borrower,\\n        uint _debtIncrease\\n    ) external returns (uint) {\\n        _requireCallerIsBorrowerOperations();\\n        uint newDebt = Troves[_borrower].debt.add(_debtIncrease);\\n        Troves[_borrower].debt = newDebt;\\n        return newDebt;\\n    }\\n\\n    function decreaseTroveDebt(\\n        address _borrower,\\n        uint _debtDecrease\\n    ) external returns (uint) {\\n        _requireCallerIsBorrowerOperations();\\n        uint newDebt = Troves[_borrower].debt.sub(_debtDecrease);\\n        Troves[_borrower].debt = newDebt;\\n        return newDebt;\\n    }\\n\\n    function getNormalLiquidationPrice(\\n        uint256 _coll,\\n        uint256 _debt\\n    ) external pure returns (uint256) {\\n        uint256 price = LiquityMath._findPriceBelowMCR(\\n            _coll,\\n            _debt,\\n            20,\\n            HedgehogBase.MCR\\n        );\\n        return price;\\n    }\\n\\n    function getRecoveryLiquidationPrice(\\n        uint256 _coll,\\n        uint256 _debt\\n    ) external pure returns (uint256) {\\n        uint256 price = LiquityMath._findPriceBelowMCR(\\n            _coll,\\n            _debt,\\n            20,\\n            HedgehogBase._100pct\\n        );\\n        return price;\\n    }\\n}\\n\"\n    },\n    \"hardhat/console.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\\n\"\n    }\n  },\n  \"settings\": {\n    \"optimizer\": {\n      \"enabled\": true,\n      \"runs\": 100\n    },\n    \"outputSelection\": {\n      \"*\": {\n        \"*\": [\n          \"abi\",\n          \"evm.bytecode\",\n          \"evm.deployedBytecode\",\n          \"evm.methodIdentifiers\",\n          \"metadata\",\n          \"devdoc\",\n          \"userdoc\",\n          \"storageLayout\",\n          \"evm.gasEstimates\"\n        ],\n        \"\": [\n          \"ast\"\n        ]\n      }\n    },\n    \"metadata\": {\n      \"useLiteralContent\": true\n    }\n  }\n}",
      "solcInputHash": "60d89df20c8c9bc2342c1851ee9bcbba",
      "transactionHash": "0xe5cbb3d3c2b05c022f88649c88f00c72dd407a8e96653f45af8165b42e695a6d",
      "args": []
    },
    "decoded": {
      "from": "0x796EcfBe7a2A424f9D905dfC38b8994aB2db9FD6",
      "gasPrice": "2000000018",
      "maxFeePerGas": "2000000018",
      "maxPriorityFeePerGas": "2000000000",
      "gasLimit": "5182827",
      "to": null,
      "value": "0",
      "nonce": 139,
      "data": "",
      "r": "0x812617896caf69ebe3d9e23d5b40a7ab83a05f45ec64f65da9379168e7fb9320",
      "s": "0x5c40579922fdb41f33ee065601def84af7ed68f52df9e19171ff293eadf56288",
      "v": 1,
      "chainId": 80001
    }
  }
}