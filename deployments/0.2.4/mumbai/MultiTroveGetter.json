{
  "address": "0xF89B4b8c0687F4D342803469F7df4b348D3B24c5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract TroveManager",
          "name": "_troveManager",
          "type": "address"
        },
        {
          "internalType": "contract ISortedTroves",
          "name": "_sortedTroves",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "_startIdx",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "_count",
          "type": "uint256"
        }
      ],
      "name": "getMultipleSortedTroves",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "debt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "coll",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "snapshotETH",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "snapshotBaseFeeLMADebt",
              "type": "uint256"
            }
          ],
          "internalType": "struct MultiTroveGetter.CombinedTroveData[]",
          "name": "_troves",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sortedTroves",
      "outputs": [
        {
          "internalType": "contract ISortedTroves",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "troveManager",
      "outputs": [
        {
          "internalType": "contract TroveManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xed1ef4ced91aeae8571afda1dd767fa6e3415703ccc0ab4e47da60c8da00b6c2",
  "receipt": {
    "to": null,
    "from": "0x796EcfBe7a2A424f9D905dfC38b8994aB2db9FD6",
    "contractAddress": "0xF89B4b8c0687F4D342803469F7df4b348D3B24c5",
    "transactionIndex": 3,
    "gasUsed": "748700",
    "logsBloom": "0x
    "blockHash": "0x596e55b05641b0b0c3e33911531acf3455f450edf43481d45873dbc0ac98b45c",
    "transactionHash": "0xed1ef4ced91aeae8571afda1dd767fa6e3415703ccc0ab4e47da60c8da00b6c2",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 40894693,
        "transactionHash": "0xed1ef4ced91aeae8571afda1dd767fa6e3415703ccc0ab4e47da60c8da00b6c2",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000796ecfbe7a2a424f9d905dfc38b8994ab2db9fd6",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000004fc74d6870edc0000000000000000000000000000000000000000000000000178af82e85bea0300000000000000000000000000000000000000000000221827ff9b7ac7dbe46a0000000000000000000000000000000000000000000000000173b30e11d4db27000000000000000000000000000000000000000000002218280497ef9e62f346",
        "logIndex": 6,
        "blockHash": "0x596e55b05641b0b0c3e33911531acf3455f450edf43481d45873dbc0ac98b45c"
      }
    ],
    "blockNumber": 40894693,
    "cumulativeGasUsed": "2735327",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2Eb30ffD360Db21347443efd1a421536915e48e1",
    "0x80054332F6628e13068A8F2A8A82919804320643"
  ],
  "numDeployments": 1,
  "solcInputHash": "12e72a8935c547e69b961442ac1acb6d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract TroveManager\",\"name\":\"_troveManager\",\"type\":\"address\"},{\"internalType\":\"contract ISortedTroves\",\"name\":\"_sortedTroves\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_startIdx\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"getMultipleSortedTroves\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"coll\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"snapshotETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"snapshotBaseFeeLMADebt\",\"type\":\"uint256\"}],\"internalType\":\"struct MultiTroveGetter.CombinedTroveData[]\",\"name\":\"_troves\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sortedTroves\",\"outputs\":[{\"internalType\":\"contract ISortedTroves\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"troveManager\",\"outputs\":[{\"internalType\":\"contract TroveManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MultiTroveGetter.sol\":\"MultiTroveGetter\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"contracts/MultiTroveGetter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./TroveManager.sol\\\";\\nimport \\\"./SortedTroves.sol\\\";\\n\\n/*  Helper contract for grabbing Trove data for the front end. Not part of the core Liquity system. */\\ncontract MultiTroveGetter {\\n    struct CombinedTroveData {\\n        address owner;\\n        uint debt;\\n        uint coll;\\n        uint stake;\\n        uint snapshotETH;\\n        uint snapshotBaseFeeLMADebt;\\n    }\\n\\n    TroveManager public troveManager; // XXX Troves missing from ITroveManager?\\n    ISortedTroves public sortedTroves;\\n\\n    constructor(TroveManager _troveManager, ISortedTroves _sortedTroves) {\\n        troveManager = _troveManager;\\n        sortedTroves = _sortedTroves;\\n    }\\n\\n    function getMultipleSortedTroves(\\n        int _startIdx,\\n        uint _count\\n    ) external view returns (CombinedTroveData[] memory _troves) {\\n        uint startIdx;\\n        bool descend;\\n\\n        if (_startIdx >= 0) {\\n            startIdx = uint(_startIdx);\\n            descend = true;\\n        } else {\\n            startIdx = uint(-(_startIdx + 1));\\n            descend = false;\\n        }\\n\\n        uint sortedTrovesSize = sortedTroves.getSize();\\n\\n        if (startIdx >= sortedTrovesSize) {\\n            _troves = new CombinedTroveData[](0);\\n        } else {\\n            uint maxCount = sortedTrovesSize - startIdx;\\n\\n            if (_count > maxCount) {\\n                _count = maxCount;\\n            }\\n\\n            if (descend) {\\n                _troves = _getMultipleSortedTrovesFromHead(startIdx, _count);\\n            } else {\\n                _troves = _getMultipleSortedTrovesFromTail(startIdx, _count);\\n            }\\n        }\\n    }\\n\\n    function _getMultipleSortedTrovesFromHead(\\n        uint _startIdx,\\n        uint _count\\n    ) internal view returns (CombinedTroveData[] memory _troves) {\\n        address currentTroveowner = sortedTroves.getFirst();\\n\\n        for (uint idx = 0; idx < _startIdx; ++idx) {\\n            currentTroveowner = sortedTroves.getNext(currentTroveowner);\\n        }\\n\\n        _troves = new CombinedTroveData[](_count);\\n\\n        for (uint idx = 0; idx < _count; ++idx) {\\n            _troves[idx].owner = currentTroveowner;\\n            (\\n                _troves[idx].debt,\\n                _troves[idx].coll,\\n                _troves[idx].stake,\\n                /* status */\\n                /* arrayIndex */\\n                ,\\n\\n            ) = troveManager.Troves(currentTroveowner);\\n            (\\n                _troves[idx].snapshotETH,\\n                _troves[idx].snapshotBaseFeeLMADebt\\n            ) = troveManager.rewardSnapshots(currentTroveowner);\\n\\n            currentTroveowner = sortedTroves.getNext(currentTroveowner);\\n        }\\n    }\\n\\n    function _getMultipleSortedTrovesFromTail(\\n        uint _startIdx,\\n        uint _count\\n    ) internal view returns (CombinedTroveData[] memory _troves) {\\n        address currentTroveowner = sortedTroves.getLast();\\n\\n        for (uint idx = 0; idx < _startIdx; ++idx) {\\n            currentTroveowner = sortedTroves.getPrev(currentTroveowner);\\n        }\\n\\n        _troves = new CombinedTroveData[](_count);\\n\\n        for (uint idx = 0; idx < _count; ++idx) {\\n            _troves[idx].owner = currentTroveowner;\\n            (\\n                _troves[idx].debt,\\n                _troves[idx].coll,\\n                _troves[idx].stake,\\n                /* status */\\n                /* arrayIndex */\\n                ,\\n\\n            ) = troveManager.Troves(currentTroveowner);\\n            (\\n                _troves[idx].snapshotETH,\\n                _troves[idx].snapshotBaseFeeLMADebt\\n            ) = troveManager.rewardSnapshots(currentTroveowner);\\n\\n            currentTroveowner = sortedTroves.getPrev(currentTroveowner);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x880c2bbea81acf220cd3b3d935e1128dfebc647b906120f811f29733dd9ce141\",\"license\":\"MIT\"},\"contracts/SortedTroves.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./interfaces/ISortedTroves.sol\\\";\\nimport \\\"./interfaces/ITroveManager.sol\\\";\\nimport \\\"./interfaces/IBorrowerOperations.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./dependencies/CheckContract.sol\\\";\\n\\n/*\\n * A sorted doubly linked list with nodes sorted in descending order.\\n *\\n * Nodes map to active Troves in the system - the ID property is the address of a Trove owner.\\n * Nodes are ordered according to their current nominal individual collateral ratio (NICR),\\n * which is like the ICR but without the price, i.e., just collateral / debt.\\n *\\n * The list optionally accepts insert position hints.\\n *\\n * NICRs are computed dynamically at runtime, and not stored on the Node. This is because NICRs of active Troves\\n * change dynamically as liquidation events occur.\\n *\\n * The list relies on the fact that liquidation events preserve ordering: a liquidation decreases the NICRs of all active Troves,\\n * but maintains their order. A node inserted based on current NICR will maintain the correct position,\\n * relative to it's peers, as rewards accumulate, as long as it's raw collateral and debt have not changed.\\n * Thus, Nodes remain sorted by current NICR.\\n *\\n * Nodes need only be re-inserted upon a Trove operation - when the owner adds or removes collateral or debt\\n * to their position.\\n *\\n * The list is a modification of the following audited SortedDoublyLinkedList:\\n * https://github.com/livepeer/protocol/blob/master/contracts/libraries/SortedDoublyLL.sol\\n *\\n *\\n * Changes made in the Liquity implementation:\\n *\\n * - Keys have been removed from nodes\\n *\\n * - Ordering checks for insertion are performed by comparing an NICR argument to the current NICR, calculated at runtime.\\n *   The list relies on the property that ordering by ICR is maintained as the StETH:USD price varies.\\n *\\n * - Public functions with parameters have been made internal to save gas, and given an external wrapper function for external access\\n */\\ncontract SortedTroves is Ownable, CheckContract {\\n    using SafeMath for uint256;\\n\\n    string public constant NAME = \\\"SortedTroves\\\";\\n\\n    event TroveManagerAddressChanged(address _troveManagerAddress);\\n    event BorrowerOperationsAddressChanged(address _borrowerOperationsAddress);\\n    event NodeAdded(address _id, uint _NICR);\\n    event NodeRemoved(address _id);\\n\\n    address public borrowerOperationsAddress;\\n\\n    ITroveManager public troveManager;\\n\\n    // Information for a node in the list\\n    struct Node {\\n        bool exists;\\n        address nextId; // Id of next node (smaller NICR) in the list\\n        address prevId; // Id of previous node (larger NICR) in the list\\n    }\\n\\n    // Information for the list\\n    struct Data {\\n        address head; // Head of the list. Also the node in the list with the largest NICR\\n        address tail; // Tail of the list. Also the node in the list with the smallest NICR\\n        uint256 maxSize; // Maximum size of the list\\n        uint256 size; // Current size of the list\\n        mapping(address => Node) nodes; // Track the corresponding ids for each node in the list\\n    }\\n\\n    Data public data;\\n\\n    // --- Dependency setters ---\\n\\n    function setParams(\\n        uint256 _size,\\n        address _troveManagerAddress,\\n        address _borrowerOperationsAddress\\n    ) external onlyOwner {\\n        require(_size > 0, \\\"SortedTroves: Size cant be zero\\\");\\n        checkContract(_troveManagerAddress);\\n        checkContract(_borrowerOperationsAddress);\\n\\n        data.maxSize = _size;\\n\\n        troveManager = ITroveManager(_troveManagerAddress);\\n        borrowerOperationsAddress = _borrowerOperationsAddress;\\n\\n        emit TroveManagerAddressChanged(_troveManagerAddress);\\n        emit BorrowerOperationsAddressChanged(_borrowerOperationsAddress);\\n\\n        renounceOwnership();\\n    }\\n\\n    /*\\n     * @dev Add a node to the list\\n     * @param _id Node's id\\n     * @param _NICR Node's NICR\\n     * @param _prevId Id of previous node for the insert position\\n     * @param _nextId Id of next node for the insert position\\n     */\\n\\n    function insert(\\n        address _id,\\n        uint256 _NICR,\\n        address _prevId,\\n        address _nextId\\n    ) external {\\n        ITroveManager troveManagerCached = troveManager;\\n\\n        _requireCallerIsBOorTroveM(troveManagerCached);\\n        _insert(troveManagerCached, _id, _NICR, _prevId, _nextId);\\n    }\\n\\n    function _insert(\\n        ITroveManager _troveManager,\\n        address _id,\\n        uint256 _NICR,\\n        address _prevId,\\n        address _nextId\\n    ) internal {\\n        // List must not be full\\n        require(!isFull(), \\\"SortedTroves: List is full\\\");\\n        // List must not already contain node\\n        require(!contains(_id), \\\"SortedTroves: List already contains the node\\\");\\n        // Node id must not be null\\n        require(_id != address(0), \\\"SortedTroves: Id cannot be zero\\\");\\n        // NICR must be non-zero\\n        require(_NICR > 0, \\\"SortedTroves: NICR must be positive\\\");\\n\\n        address prevId = _prevId;\\n        address nextId = _nextId;\\n\\n        if (!_validInsertPosition(_troveManager, _NICR, prevId, nextId)) {\\n            // Sender's hint was not a valid insert position\\n            // Use sender's hint to find a valid insert position\\n            (prevId, nextId) = _findInsertPosition(\\n                _troveManager,\\n                _NICR,\\n                prevId,\\n                nextId\\n            );\\n        }\\n\\n        data.nodes[_id].exists = true;\\n\\n        if (prevId == address(0) && nextId == address(0)) {\\n            // Insert as head and tail\\n            data.head = _id;\\n            data.tail = _id;\\n        } else if (prevId == address(0)) {\\n            // Insert before `prevId` as the head\\n            data.nodes[_id].nextId = data.head;\\n            data.nodes[data.head].prevId = _id;\\n            data.head = _id;\\n        } else if (nextId == address(0)) {\\n            // Insert after `nextId` as the tail\\n            data.nodes[_id].prevId = data.tail;\\n            data.nodes[data.tail].nextId = _id;\\n            data.tail = _id;\\n        } else {\\n            // Insert at insert position between `prevId` and `nextId`\\n            data.nodes[_id].nextId = nextId;\\n            data.nodes[_id].prevId = prevId;\\n            data.nodes[prevId].nextId = _id;\\n            data.nodes[nextId].prevId = _id;\\n        }\\n\\n        data.size = data.size.add(1);\\n        emit NodeAdded(_id, _NICR);\\n    }\\n\\n    function remove(address _id) external {\\n        _requireCallerIsTroveManager();\\n        _remove(_id);\\n    }\\n\\n    /*\\n     * @dev Remove a node from the list\\n     * @param _id Node's id\\n     */\\n    function _remove(address _id) internal {\\n        // List must contain the node\\n        require(contains(_id), \\\"SortedTroves: List does not contain the id\\\");\\n\\n        if (data.size > 1) {\\n            // List contains more than a single node\\n            if (_id == data.head) {\\n                // The removed node is the head\\n                // Set head to next node\\n                data.head = data.nodes[_id].nextId;\\n                // Set prev pointer of new head to null\\n                data.nodes[data.head].prevId = address(0);\\n            } else if (_id == data.tail) {\\n                // The removed node is the tail\\n                // Set tail to previous node\\n                data.tail = data.nodes[_id].prevId;\\n                // Set next pointer of new tail to null\\n                data.nodes[data.tail].nextId = address(0);\\n            } else {\\n                // The removed node is neither the head nor the tail\\n                // Set next pointer of previous node to the next node\\n                data.nodes[data.nodes[_id].prevId].nextId = data\\n                    .nodes[_id]\\n                    .nextId;\\n                // Set prev pointer of next node to the previous node\\n                data.nodes[data.nodes[_id].nextId].prevId = data\\n                    .nodes[_id]\\n                    .prevId;\\n            }\\n        } else {\\n            // List contains a single node\\n            // Set the head and tail to null\\n            data.head = address(0);\\n            data.tail = address(0);\\n        }\\n\\n        delete data.nodes[_id];\\n        data.size = data.size.sub(1);\\n        emit NodeRemoved(_id);\\n    }\\n\\n    /*\\n     * @dev Re-insert the node at a new position, based on its new NICR\\n     * @param _id Node's id\\n     * @param _newNICR Node's new NICR\\n     * @param _prevId Id of previous node for the new insert position\\n     * @param _nextId Id of next node for the new insert position\\n     */\\n    function reInsert(\\n        address _id,\\n        uint256 _newNICR,\\n        address _prevId,\\n        address _nextId\\n    ) external {\\n        ITroveManager troveManagerCached = troveManager;\\n\\n        _requireCallerIsBOorTroveM(troveManagerCached);\\n        // List must contain the node\\n        require(contains(_id), \\\"SortedTroves: List does not contain the id\\\");\\n        // NICR must be non-zero\\n        require(_newNICR > 0, \\\"SortedTroves: NICR must be positive\\\");\\n\\n        // Remove node from the list\\n        _remove(_id);\\n\\n        _insert(troveManagerCached, _id, _newNICR, _prevId, _nextId);\\n    }\\n\\n    /*\\n     * @dev Checks if the list contains a node\\n     */\\n    function contains(address _id) public view returns (bool) {\\n        return data.nodes[_id].exists;\\n    }\\n\\n    /*\\n     * @dev Checks if the list is full\\n     */\\n    function isFull() public view returns (bool) {\\n        return data.size == data.maxSize;\\n    }\\n\\n    /*\\n     * @dev Checks if the list is empty\\n     */\\n    function isEmpty() public view returns (bool) {\\n        return data.size == 0;\\n    }\\n\\n    /*\\n     * @dev Returns the current size of the list\\n     */\\n    function getSize() external view returns (uint256) {\\n        return data.size;\\n    }\\n\\n    /*\\n     * @dev Returns the maximum size of the list\\n     */\\n    function getMaxSize() external view returns (uint256) {\\n        return data.maxSize;\\n    }\\n\\n    /*\\n     * @dev Returns the first node in the list (node with the largest NICR)\\n     */\\n    function getFirst() external view returns (address) {\\n        return data.head;\\n    }\\n\\n    /*\\n     * @dev Returns the last node in the list (node with the smallest NICR)\\n     */\\n    function getLast() external view returns (address) {\\n        return data.tail;\\n    }\\n\\n    /*\\n     * @dev Returns the next node (with a smaller NICR) in the list for a given node\\n     * @param _id Node's id\\n     */\\n    function getNext(address _id) external view returns (address) {\\n        return data.nodes[_id].nextId;\\n    }\\n\\n    /*\\n     * @dev Returns the previous node (with a larger NICR) in the list for a given node\\n     * @param _id Node's id\\n     */\\n    function getPrev(address _id) external view returns (address) {\\n        return data.nodes[_id].prevId;\\n    }\\n\\n    /*\\n     * @dev Check if a pair of nodes is a valid insertion point for a new node with the given NICR\\n     * @param _NICR Node's NICR\\n     * @param _prevId Id of previous node for the insert position\\n     * @param _nextId Id of next node for the insert position\\n     */\\n    function validInsertPosition(\\n        uint256 _NICR,\\n        address _prevId,\\n        address _nextId\\n    ) external view returns (bool) {\\n        return _validInsertPosition(troveManager, _NICR, _prevId, _nextId);\\n    }\\n\\n    function _validInsertPosition(\\n        ITroveManager _troveManager,\\n        uint256 _NICR,\\n        address _prevId,\\n        address _nextId\\n    ) internal view returns (bool) {\\n        if (_prevId == address(0) && _nextId == address(0)) {\\n            // `(null, null)` is a valid insert position if the list is empty\\n            return isEmpty();\\n        } else if (_prevId == address(0)) {\\n            // `(null, _nextId)` is a valid insert position if `_nextId` is the head of the list\\n            return\\n                data.head == _nextId &&\\n                _NICR >= _troveManager.getNominalICR(_nextId);\\n        } else if (_nextId == address(0)) {\\n            // `(_prevId, null)` is a valid insert position if `_prevId` is the tail of the list\\n            return\\n                data.tail == _prevId &&\\n                _NICR <= _troveManager.getNominalICR(_prevId);\\n        } else {\\n            // `(_prevId, _nextId)` is a valid insert position if they are adjacent nodes and `_NICR` falls between the two nodes' NICRs\\n            return\\n                data.nodes[_prevId].nextId == _nextId &&\\n                _troveManager.getNominalICR(_prevId) >= _NICR &&\\n                _NICR >= _troveManager.getNominalICR(_nextId);\\n        }\\n    }\\n\\n    /*\\n     * @dev Descend the list (larger NICRs to smaller NICRs) to find a valid insert position\\n     * @param _troveManager TroveManager contract, passed in as param to save SLOAD\\u2019s\\n     * @param _NICR Node's NICR\\n     * @param _startId Id of node to start descending the list from\\n     */\\n    function _descendList(\\n        ITroveManager _troveManager,\\n        uint256 _NICR,\\n        address _startId\\n    ) internal view returns (address, address) {\\n        // If `_startId` is the head, check if the insert position is before the head\\n        if (\\n            data.head == _startId &&\\n            _NICR >= _troveManager.getNominalICR(_startId)\\n        ) {\\n            return (address(0), _startId);\\n        }\\n\\n        address prevId = _startId;\\n        address nextId = data.nodes[prevId].nextId;\\n\\n        // Descend the list until we reach the end or until we find a valid insert position\\n        while (\\n            prevId != address(0) &&\\n            !_validInsertPosition(_troveManager, _NICR, prevId, nextId)\\n        ) {\\n            prevId = data.nodes[prevId].nextId;\\n            nextId = data.nodes[prevId].nextId;\\n        }\\n\\n        return (prevId, nextId);\\n    }\\n\\n    /*\\n     * @dev Ascend the list (smaller NICRs to larger NICRs) to find a valid insert position\\n     * @param _troveManager TroveManager contract, passed in as param to save SLOAD\\u2019s\\n     * @param _NICR Node's NICR\\n     * @param _startId Id of node to start ascending the list from\\n     */\\n    function _ascendList(\\n        ITroveManager _troveManager,\\n        uint256 _NICR,\\n        address _startId\\n    ) internal view returns (address, address) {\\n        // If `_startId` is the tail, check if the insert position is after the tail\\n        if (\\n            data.tail == _startId &&\\n            _NICR <= _troveManager.getNominalICR(_startId)\\n        ) {\\n            return (_startId, address(0));\\n        }\\n\\n        address nextId = _startId;\\n        address prevId = data.nodes[nextId].prevId;\\n\\n        // Ascend the list until we reach the end or until we find a valid insertion point\\n        while (\\n            nextId != address(0) &&\\n            !_validInsertPosition(_troveManager, _NICR, prevId, nextId)\\n        ) {\\n            nextId = data.nodes[nextId].prevId;\\n            prevId = data.nodes[nextId].prevId;\\n        }\\n\\n        return (prevId, nextId);\\n    }\\n\\n    /*\\n     * @dev Find the insert position for a new node with the given NICR\\n     * @param _NICR Node's NICR\\n     * @param _prevId Id of previous node for the insert position\\n     * @param _nextId Id of next node for the insert position\\n     */\\n    function findInsertPosition(\\n        uint256 _NICR,\\n        address _prevId,\\n        address _nextId\\n    ) external view returns (address, address) {\\n        return _findInsertPosition(troveManager, _NICR, _prevId, _nextId);\\n    }\\n\\n    function _findInsertPosition(\\n        ITroveManager _troveManager,\\n        uint256 _NICR,\\n        address _prevId,\\n        address _nextId\\n    ) internal view returns (address, address) {\\n        address prevId = _prevId;\\n        address nextId = _nextId;\\n\\n        if (prevId != address(0)) {\\n            if (\\n                !contains(prevId) || _NICR > _troveManager.getNominalICR(prevId)\\n            ) {\\n                // `prevId` does not exist anymore or now has a smaller NICR than the given NICR\\n                prevId = address(0);\\n            }\\n        }\\n\\n        if (nextId != address(0)) {\\n            if (\\n                !contains(nextId) || _NICR < _troveManager.getNominalICR(nextId)\\n            ) {\\n                // `nextId` does not exist anymore or now has a larger NICR than the given NICR\\n                nextId = address(0);\\n            }\\n        }\\n\\n        if (prevId == address(0) && nextId == address(0)) {\\n            // No hint - descend list starting from head\\n            return _descendList(_troveManager, _NICR, data.head);\\n        } else if (prevId == address(0)) {\\n            // No `prevId` for hint - ascend list starting from `nextId`\\n            return _ascendList(_troveManager, _NICR, nextId);\\n        } else if (nextId == address(0)) {\\n            // No `nextId` for hint - descend list starting from `prevId`\\n            return _descendList(_troveManager, _NICR, prevId);\\n        } else {\\n            // Descend list starting from `prevId`\\n            return _descendList(_troveManager, _NICR, prevId);\\n        }\\n    }\\n\\n    // --- 'require' functions ---\\n\\n    function _requireCallerIsTroveManager() internal view {\\n        require(\\n            msg.sender == address(troveManager),\\n            \\\"SortedTroves: Caller is not the TroveManager\\\"\\n        );\\n    }\\n\\n    function _requireCallerIsBOorTroveM(\\n        ITroveManager _troveManager\\n    ) internal view {\\n        require(\\n            msg.sender == borrowerOperationsAddress ||\\n                msg.sender == address(_troveManager),\\n            \\\"SortedTroves: Caller is neither BO nor TroveM\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x30cb260ac49a90b43b2ad8d60be316ec07bf6f34d4d670d53b1e33ada9e5ccbf\",\"license\":\"MIT\"},\"contracts/TroveManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./interfaces/ITroveManager.sol\\\";\\nimport \\\"./interfaces/IStabilityPool.sol\\\";\\nimport \\\"./interfaces/ICollSurplusPool.sol\\\";\\nimport \\\"./interfaces/IBaseFeeLMAToken.sol\\\";\\nimport \\\"./interfaces/ISortedTroves.sol\\\";\\nimport \\\"./interfaces/IHOGToken.sol\\\";\\nimport \\\"./interfaces/IHOGStaking.sol\\\";\\nimport \\\"./dependencies/HedgehogBase.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./dependencies/CheckContract.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\n/**\\n * @notice Fork of Liquity's TroveManager. Logic remains unchanged.\\n * Changes to the contract:\\n * - Raised pragma version\\n * - Removed an import of ActivePool Interface\\n * Even though SafeMath is no longer required, the decision was made to keep it to avoid human factor errors\\n */\\n\\ncontract TroveManager is HedgehogBase, Ownable, CheckContract {\\n    using SafeMath for uint256;\\n    string public constant NAME = \\\"TroveManager\\\";\\n\\n    // --- Connected contract declarations ---\\n\\n    address public borrowerOperationsAddress;\\n\\n    IStabilityPool public stabilityPool;\\n\\n    address gasPoolAddress;\\n\\n    ICollSurplusPool collSurplusPool;\\n\\n    IBaseFeeLMAToken public baseFeeLMAToken;\\n\\n    IHOGToken public hogToken;\\n\\n    IHOGStaking public hogStaking;\\n\\n    // A doubly linked list of Troves, sorted by their sorted by their collateral ratios\\n    ISortedTroves public sortedTroves;\\n\\n    // --- Data structures ---\\n\\n    uint public constant SECONDS_IN_ONE_MINUTE = 60;\\n    /*\\n     * Half-life of 12h. 12h = 720 min\\n     * (1/2) = d^720 => d = (1/2)^(1/720)\\n     */\\n    uint public constant MINUTE_DECAY_REDEMPTION_FACTOR = 999037758833783000;\\n    uint public constant MINUTE_DECAY_BORROWING_FACTOR = 991152865945140000;\\n    uint public constant REDEMPTION_FEE_FLOOR = (DECIMAL_PRECISION / 1000) * 5; // 0.5%\\n    uint public constant MAX_BORROWING_FEE = DECIMAL_PRECISION; // 100%\\n\\n    // During bootsrap period redemptions are not allowed\\n    uint public constant BOOTSTRAP_PERIOD = 14 days;\\n\\n    /*\\n     * BETA: 18 digit decimal. Parameter by which to divide the redeemed fraction, in order to calc the new base rate from a redemption.\\n     * Corresponds to (1 / ALPHA) in the white paper.\\n     */\\n    uint public constant BETA = 2;\\n\\n    // HEDGEHOG LOGIC UPDATES: BaseRate is different for redemption and minting tokens\\n    // 1) Remove baseRate variable\\n    // 2) Create redemptionBaseRate public state variable\\n    // 3) Create borrowBaseRate public state variable\\n    uint public redemptionBaseRate;\\n    uint public borrowBaseRate;\\n\\n    // HEDGEHOG LOGIC UPDATES: lastFeeOperationTime is different for redemption and minting tokens\\n    // 1) Remove lastFeeOperationTime variable\\n    // 2) Create lastRedemptionTime public state variable\\n    // 3) Create lastBorrowTime public state variable\\n    uint public lastRedemptionTime;\\n    uint public lastBorrowTime;\\n\\n    enum Status {\\n        nonExistent,\\n        active,\\n        closedByOwner,\\n        closedByLiquidation,\\n        closedByRedemption\\n    }\\n\\n    // Store the necessary data for a trove\\n    struct Trove {\\n        uint debt;\\n        uint coll;\\n        uint stake;\\n        Status status;\\n        uint128 arrayIndex;\\n    }\\n\\n    mapping(address => Trove) public Troves;\\n\\n    uint public totalStakes;\\n\\n    // Snapshot of the value of totalStakes, taken immediately after the latest liquidation\\n    uint public totalStakesSnapshot;\\n\\n    // Snapshot of the total collateral across the ActivePool and DefaultPool, immediately after the latest liquidation.\\n    uint public totalCollateralSnapshot;\\n\\n    /*\\n     * L_StETH and L_BaseFeeLMADebt track the sums of accumulated liquidation rewards per unit staked. During its lifetime, each stake earns:\\n     *\\n     * An StETH gain of ( stake * [L_StETH - L_StETH(0)] )\\n     * A BaseFeeLMADebt increase  of ( stake * [L_BaseFeeLMADebt - L_BaseFeeLMADebt(0)] )\\n     *\\n     * Where L_StETH(0) and L_BaseFeeLMADebt(0) are snapshots of L_StETH and L_BaseFeeLMADebt for the active Trove taken at the instant the stake was made\\n     */\\n    uint public L_StETH;\\n    uint public L_BaseFeeLMADebt;\\n\\n    // Map addresses with active troves to their RewardSnapshot\\n    mapping(address => RewardSnapshot) public rewardSnapshots;\\n\\n    // Object containing the StETH and BaseFeeLMA snapshots for a given active trove\\n    struct RewardSnapshot {\\n        uint StETH;\\n        uint BaseFeeLMADebt;\\n    }\\n\\n    // Array of all active trove addresses - used to to compute an approximate hint off-chain, for the sorted list insertion\\n    address[] public TroveOwners;\\n\\n    // Error trackers for the trove redistribution calculation\\n    uint public lastStETHError_Redistribution;\\n    uint public lastBaseFeeLMADebtError_Redistribution;\\n\\n    /*\\n     * --- Variable container structs for liquidations ---\\n     *\\n     * These structs are used to hold, return and assign variables inside the liquidation functions,\\n     * in order to avoid the error: \\\"CompilerError: Stack too deep\\\".\\n     **/\\n\\n    struct LocalVariables_OuterLiquidationFunction {\\n        uint price;\\n        uint BaseFeeLMAInStabPool;\\n        bool recoveryModeAtStart;\\n        uint liquidatedDebt;\\n        uint liquidatedColl;\\n    }\\n\\n    struct LocalVariables_InnerSingleLiquidateFunction {\\n        uint collToLiquidate;\\n        uint pendingDebtReward;\\n        uint pendingCollReward;\\n    }\\n\\n    struct LocalVariables_LiquidationSequence {\\n        uint remainingBaseFeeLMAInStabPool;\\n        uint i;\\n        uint ICR;\\n        address user;\\n        bool backToNormalMode;\\n        uint entireSystemDebt;\\n        uint entireSystemColl;\\n    }\\n\\n    struct LiquidationValues {\\n        uint entireTroveDebt;\\n        uint entireTroveColl;\\n        uint collGasCompensation;\\n        uint BaseFeeLMAGasCompensation;\\n        uint debtToOffset;\\n        uint collToSendToSP;\\n        uint debtToRedistribute;\\n        uint collToRedistribute;\\n        uint collSurplus;\\n    }\\n\\n    struct LiquidationTotals {\\n        uint totalCollInSequence;\\n        uint totalDebtInSequence;\\n        uint totalCollGasCompensation;\\n        uint totalBaseFeeLMAGasCompensation;\\n        uint totalDebtToOffset;\\n        uint totalCollToSendToSP;\\n        uint totalDebtToRedistribute;\\n        uint totalCollToRedistribute;\\n        uint totalCollSurplus;\\n    }\\n\\n    struct ContractsCache {\\n        IActivePool activePool;\\n        IDefaultPool defaultPool;\\n        IBaseFeeLMAToken baseFeeLMAToken;\\n        IHOGStaking hogStaking;\\n        ISortedTroves sortedTroves;\\n        ICollSurplusPool collSurplusPool;\\n        address gasPoolAddress;\\n    }\\n    // --- Variable container structs for redemptions ---\\n\\n    struct RedemptionTotals {\\n        uint remainingBaseFeeLMA;\\n        uint totalBaseFeeLMAToRedeem;\\n        uint totalStETHDrawn;\\n        uint StETHFee;\\n        uint StETHToSendToRedeemer;\\n        // HEDGEHOG LOGIC UPDATES: BaseRate is different for redemption and minting tokens\\n        // Rename decayedBaseRate into decayedRedemptionBaseRate\\n        uint decayedRedemptionBaseRate;\\n        uint price;\\n        uint totalBaseFeeLMASupplyAtStart;\\n    }\\n\\n    struct SingleRedemptionValues {\\n        uint BaseFeeLMALot;\\n        uint StETHLot;\\n        bool cancelledPartial;\\n    }\\n\\n    // --- Events ---\\n\\n    event BorrowerOperationsAddressChanged(\\n        address _newBorrowerOperationsAddress\\n    );\\n    event PriceFeedAddressChanged(address _newPriceFeedAddress);\\n    event BaseFeeLMATokenAddressChanged(address _newBaseFeeLMATokenAddress);\\n    event ActivePoolAddressChanged(address _activePoolAddress);\\n    event DefaultPoolAddressChanged(address _defaultPoolAddress);\\n    event StabilityPoolAddressChanged(address _stabilityPoolAddress);\\n    event GasPoolAddressChanged(address _gasPoolAddress);\\n    event CollSurplusPoolAddressChanged(address _collSurplusPoolAddress);\\n    event SortedTrovesAddressChanged(address _sortedTrovesAddress);\\n    event HOGTokenAddressChanged(address _hogTokenAddress);\\n    event HOGStakingAddressChanged(address _hogStakingAddress);\\n\\n    event Liquidation(\\n        uint _liquidatedDebt,\\n        uint _liquidatedColl,\\n        uint _collGasCompensation,\\n        uint _BaseFeeLMAGasCompensation\\n    );\\n    event Redemption(\\n        uint _attemptedBaseFeeLMAAmount,\\n        uint _actualBaseFeeLMAAmount,\\n        uint _StETHSent,\\n        uint _StETHFee\\n    );\\n    event TroveUpdated(\\n        address indexed _borrower,\\n        uint _debt,\\n        uint _coll,\\n        uint _stake,\\n        TroveManagerOperation _operation\\n    );\\n    event TroveLiquidated(\\n        address indexed _borrower,\\n        uint _debt,\\n        uint _coll,\\n        TroveManagerOperation _operation\\n    );\\n\\n    // HEDGEHOG LOGIC UPDATES: BaseRate is different for redemption and minting tokens\\n    // 1) Remove BaseRateUpdated event\\n    // 2) Create RedemptionBaseRateUpdated event that accepts _redemptionBaseRate\\n    // 3) Create BorrowBaseRateUpdated event that accepts _borrowBaseRate\\n    event RedemptionBaseRateUpdated(uint _redemptionBaseRate);\\n    event BorrowBaseRateUpdated(uint _borrowBaseRate);\\n\\n    // HEDGEHOG LOGIC UPDATES: BaseRate is different for redemption and minting tokens\\n    // 1) Remove LastFeeOpTimeUpdated event\\n    // 2) Create LastRedemptionTimeUpdated event that accepts _lastRedemptionTime\\n    // 3) Create LastBorrowTimeUpdated event that accepts _lastBorrowTime\\n    event LastRedemptionTimeUpdated(uint _lastRedemptionTime);\\n    event LastBorrowTimeUpdated(uint _lastBorrowTime);\\n    event TotalStakesUpdated(uint _newTotalStakes);\\n    event SystemSnapshotsUpdated(\\n        uint _totalStakesSnapshot,\\n        uint _totalCollateralSnapshot\\n    );\\n    event LTermsUpdated(uint _L_StETH, uint _L_BaseFeeLMADebt);\\n    event TroveSnapshotsUpdated(uint _L_StETH, uint _L_BaseFeeLMADebt);\\n    event TroveIndexUpdated(address _borrower, uint _newIndex);\\n\\n    enum TroveManagerOperation {\\n        applyPendingRewards,\\n        liquidateInNormalMode,\\n        liquidateInRecoveryMode,\\n        redeemCollateral\\n    }\\n\\n    // --- Dependency setter ---\\n\\n    function setAddresses(\\n        address _borrowerOperationsAddress,\\n        address _activePoolAddress,\\n        address _defaultPoolAddress,\\n        address _stabilityPoolAddress,\\n        address _gasPoolAddress,\\n        address _collSurplusPoolAddress,\\n        address _priceFeedAddress,\\n        address _baseFeeLMATokenAddress,\\n        address _sortedTrovesAddress,\\n        address _hogTokenAddress,\\n        address _hogStakingAddress\\n    ) external onlyOwner {\\n        checkContract(_borrowerOperationsAddress);\\n        checkContract(_activePoolAddress);\\n        checkContract(_defaultPoolAddress);\\n        checkContract(_stabilityPoolAddress);\\n        checkContract(_gasPoolAddress);\\n        checkContract(_collSurplusPoolAddress);\\n        checkContract(_priceFeedAddress);\\n        checkContract(_baseFeeLMATokenAddress);\\n        checkContract(_sortedTrovesAddress);\\n        checkContract(_hogTokenAddress);\\n        checkContract(_hogStakingAddress);\\n\\n        borrowerOperationsAddress = _borrowerOperationsAddress;\\n        activePool = IActivePool(_activePoolAddress);\\n        defaultPool = IDefaultPool(_defaultPoolAddress);\\n        stabilityPool = IStabilityPool(_stabilityPoolAddress);\\n        gasPoolAddress = _gasPoolAddress;\\n        collSurplusPool = ICollSurplusPool(_collSurplusPoolAddress);\\n        priceFeed = IPriceFeed(_priceFeedAddress);\\n        baseFeeLMAToken = IBaseFeeLMAToken(_baseFeeLMATokenAddress);\\n        sortedTroves = ISortedTroves(_sortedTrovesAddress);\\n        hogToken = IHOGToken(_hogTokenAddress);\\n        hogStaking = IHOGStaking(_hogStakingAddress);\\n\\n        emit BorrowerOperationsAddressChanged(_borrowerOperationsAddress);\\n        emit ActivePoolAddressChanged(_activePoolAddress);\\n        emit DefaultPoolAddressChanged(_defaultPoolAddress);\\n        emit StabilityPoolAddressChanged(_stabilityPoolAddress);\\n        emit GasPoolAddressChanged(_gasPoolAddress);\\n        emit CollSurplusPoolAddressChanged(_collSurplusPoolAddress);\\n        emit PriceFeedAddressChanged(_priceFeedAddress);\\n        emit BaseFeeLMATokenAddressChanged(_baseFeeLMATokenAddress);\\n        emit SortedTrovesAddressChanged(_sortedTrovesAddress);\\n        emit HOGTokenAddressChanged(_hogTokenAddress);\\n        emit HOGStakingAddressChanged(_hogStakingAddress);\\n\\n        renounceOwnership();\\n    }\\n\\n    // --- Getters ---\\n\\n    function getTroveOwnersCount() external view returns (uint) {\\n        return TroveOwners.length;\\n    }\\n\\n    function getTroveFromTroveOwnersArray(\\n        uint _index\\n    ) external view returns (address) {\\n        return TroveOwners[_index];\\n    }\\n\\n    // --- Trove Liquidation functions ---\\n\\n    // Single liquidation function. Closes the trove if its ICR is lower than the minimum collateral ratio.\\n    function liquidate(address _borrower) external {\\n        _requireTroveIsActive(_borrower);\\n\\n        address[] memory borrowers = new address[](1);\\n        borrowers[0] = _borrower;\\n        batchLiquidateTroves(borrowers);\\n    }\\n\\n    // --- Inner single liquidation functions ---\\n\\n    // Liquidate one trove, in Normal Mode.\\n    function _liquidateNormalMode(\\n        IActivePool _activePool,\\n        IDefaultPool _defaultPool,\\n        address _borrower,\\n        uint _BaseFeeLMAInStabPool\\n    ) internal returns (LiquidationValues memory singleLiquidation) {\\n        LocalVariables_InnerSingleLiquidateFunction memory vars;\\n\\n        (\\n            singleLiquidation.entireTroveDebt,\\n            singleLiquidation.entireTroveColl,\\n            vars.pendingDebtReward,\\n            vars.pendingCollReward\\n        ) = getEntireDebtAndColl(_borrower);\\n\\n        _movePendingTroveRewardsToActivePool(\\n            _activePool,\\n            _defaultPool,\\n            vars.pendingDebtReward,\\n            vars.pendingCollReward\\n        );\\n        _removeStake(_borrower);\\n\\n        singleLiquidation.collGasCompensation = _getCollGasCompensation(\\n            singleLiquidation.entireTroveColl\\n        );\\n        singleLiquidation\\n            .BaseFeeLMAGasCompensation = BaseFeeLMA_GAS_COMPENSATION; // TODO: Why is that being done if BaseFeeLMA_GAS_COMP is static\\n        uint collToLiquidate = singleLiquidation.entireTroveColl.sub(\\n            singleLiquidation.collGasCompensation\\n        );\\n\\n        (\\n            singleLiquidation.debtToOffset,\\n            singleLiquidation.collToSendToSP,\\n            singleLiquidation.debtToRedistribute,\\n            singleLiquidation.collToRedistribute\\n        ) = _getOffsetAndRedistributionVals(\\n            singleLiquidation.entireTroveDebt,\\n            collToLiquidate,\\n            _BaseFeeLMAInStabPool\\n        );\\n\\n        _closeTrove(_borrower, Status.closedByLiquidation);\\n        emit TroveLiquidated(\\n            _borrower,\\n            singleLiquidation.entireTroveDebt,\\n            singleLiquidation.entireTroveColl,\\n            TroveManagerOperation.liquidateInNormalMode\\n        );\\n        emit TroveUpdated(\\n            _borrower,\\n            0,\\n            0,\\n            0,\\n            TroveManagerOperation.liquidateInNormalMode\\n        );\\n        return singleLiquidation;\\n    }\\n\\n    // Liquidate one trove, in Recovery Mode.\\n    function _liquidateRecoveryMode(\\n        IActivePool _activePool,\\n        IDefaultPool _defaultPool,\\n        address _borrower,\\n        uint _ICR,\\n        uint _BaseFeeLMAInStabPool,\\n        uint _TCR,\\n        uint _price\\n    ) internal returns (LiquidationValues memory singleLiquidation) {\\n        LocalVariables_InnerSingleLiquidateFunction memory vars;\\n        if (TroveOwners.length <= 1) {\\n            return singleLiquidation;\\n        } // don't liquidate if last trove\\n        (\\n            singleLiquidation.entireTroveDebt,\\n            singleLiquidation.entireTroveColl,\\n            vars.pendingDebtReward,\\n            vars.pendingCollReward\\n        ) = getEntireDebtAndColl(_borrower);\\n\\n        singleLiquidation.collGasCompensation = _getCollGasCompensation(\\n            singleLiquidation.entireTroveColl\\n        );\\n        singleLiquidation\\n            .BaseFeeLMAGasCompensation = BaseFeeLMA_GAS_COMPENSATION;\\n        vars.collToLiquidate = singleLiquidation.entireTroveColl.sub(\\n            singleLiquidation.collGasCompensation\\n        );\\n\\n        // If ICR <= 100%, purely redistribute the Trove across all active Troves\\n        if (_ICR <= _100pct) {\\n            _movePendingTroveRewardsToActivePool(\\n                _activePool,\\n                _defaultPool,\\n                vars.pendingDebtReward,\\n                vars.pendingCollReward\\n            );\\n            _removeStake(_borrower);\\n\\n            singleLiquidation.debtToOffset = 0;\\n            singleLiquidation.collToSendToSP = 0;\\n            singleLiquidation.debtToRedistribute = singleLiquidation\\n                .entireTroveDebt;\\n            singleLiquidation.collToRedistribute = vars.collToLiquidate;\\n\\n            _closeTrove(_borrower, Status.closedByLiquidation);\\n            emit TroveLiquidated(\\n                _borrower,\\n                singleLiquidation.entireTroveDebt,\\n                singleLiquidation.entireTroveColl,\\n                TroveManagerOperation.liquidateInRecoveryMode\\n            );\\n            emit TroveUpdated(\\n                _borrower,\\n                0,\\n                0,\\n                0,\\n                TroveManagerOperation.liquidateInRecoveryMode\\n            );\\n\\n            // If 100% < ICR < MCR, offset as much as possible, and redistribute the remainder\\n        } else if ((_ICR > _100pct) && (_ICR < MCR)) {\\n            _movePendingTroveRewardsToActivePool(\\n                _activePool,\\n                _defaultPool,\\n                vars.pendingDebtReward,\\n                vars.pendingCollReward\\n            );\\n            _removeStake(_borrower);\\n\\n            (\\n                singleLiquidation.debtToOffset,\\n                singleLiquidation.collToSendToSP,\\n                singleLiquidation.debtToRedistribute,\\n                singleLiquidation.collToRedistribute\\n            ) = _getOffsetAndRedistributionVals(\\n                singleLiquidation.entireTroveDebt,\\n                vars.collToLiquidate,\\n                _BaseFeeLMAInStabPool\\n            );\\n\\n            _closeTrove(_borrower, Status.closedByLiquidation);\\n            emit TroveLiquidated(\\n                _borrower,\\n                singleLiquidation.entireTroveDebt,\\n                singleLiquidation.entireTroveColl,\\n                TroveManagerOperation.liquidateInRecoveryMode\\n            );\\n            emit TroveUpdated(\\n                _borrower,\\n                0,\\n                0,\\n                0,\\n                TroveManagerOperation.liquidateInRecoveryMode\\n            );\\n            /*\\n             * If 110% <= ICR < current TCR (accounting for the preceding liquidations in the current sequence)\\n             * and there is BaseFeeLMA in the Stability Pool, only offset, with no redistribution,\\n             * but at a capped rate of 1.1 and only if the whole debt can be liquidated.\\n             * The remainder due to the capped rate will be claimable as collateral surplus.\\n             */\\n        } else if (\\n            (_ICR >= MCR) &&\\n            (_ICR < _TCR) &&\\n            (singleLiquidation.entireTroveDebt <= _BaseFeeLMAInStabPool)\\n        ) {\\n            _movePendingTroveRewardsToActivePool(\\n                _activePool,\\n                _defaultPool,\\n                vars.pendingDebtReward,\\n                vars.pendingCollReward\\n            );\\n            assert(_BaseFeeLMAInStabPool != 0);\\n\\n            _removeStake(_borrower);\\n            singleLiquidation = _getCappedOffsetVals(\\n                singleLiquidation.entireTroveDebt,\\n                singleLiquidation.entireTroveColl,\\n                _price\\n            );\\n\\n            _closeTrove(_borrower, Status.closedByLiquidation);\\n            if (singleLiquidation.collSurplus > 0) {\\n                collSurplusPool.accountSurplus(\\n                    _borrower,\\n                    singleLiquidation.collSurplus\\n                );\\n            }\\n\\n            emit TroveLiquidated(\\n                _borrower,\\n                singleLiquidation.entireTroveDebt,\\n                singleLiquidation.collToSendToSP,\\n                TroveManagerOperation.liquidateInRecoveryMode\\n            );\\n            emit TroveUpdated(\\n                _borrower,\\n                0,\\n                0,\\n                0,\\n                TroveManagerOperation.liquidateInRecoveryMode\\n            );\\n        } else {\\n            // if (_ICR >= MCR && ( _ICR >= _TCR || singleLiquidation.entireTroveDebt > _BaseFeeLMAInStabPool))\\n            LiquidationValues memory zeroVals;\\n            return zeroVals;\\n        }\\n\\n        return singleLiquidation;\\n    }\\n\\n    /* In a full liquidation, returns the values for a trove's coll and debt to be offset, and coll and debt to be\\n     * redistributed to active troves.\\n     */\\n    function _getOffsetAndRedistributionVals(\\n        uint _debt,\\n        uint _coll,\\n        uint _BaseFeeLMAInStabPool\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint debtToOffset,\\n            uint collToSendToSP,\\n            uint debtToRedistribute,\\n            uint collToRedistribute\\n        )\\n    {\\n        if (_BaseFeeLMAInStabPool > 0) {\\n            /*\\n             * Offset as much debt & collateral as possible against the Stability Pool, and redistribute the remainder\\n             * between all active troves.\\n             *\\n             *  If the trove's debt is larger than the deposited BaseFeeLMA in the Stability Pool:\\n             *\\n             *  - Offset an amount of the trove's debt equal to the BaseFeeLMA in the Stability Pool\\n             *  - Send a fraction of the trove's collateral to the Stability Pool, equal to the fraction of its offset debt\\n             *\\n             */\\n            debtToOffset = LiquityMath._min(_debt, _BaseFeeLMAInStabPool);\\n            collToSendToSP = _coll.mul(debtToOffset).div(_debt);\\n            debtToRedistribute = _debt.sub(debtToOffset);\\n            collToRedistribute = _coll.sub(collToSendToSP);\\n        } else {\\n            debtToOffset = 0;\\n            collToSendToSP = 0;\\n            debtToRedistribute = _debt;\\n            collToRedistribute = _coll;\\n        }\\n    }\\n\\n    /*\\n     *  Get its offset coll/debt and StETH gas comp, and close the trove.\\n     */\\n    function _getCappedOffsetVals(\\n        uint _entireTroveDebt,\\n        uint _entireTroveColl,\\n        uint _price\\n    ) internal pure returns (LiquidationValues memory singleLiquidation) {\\n        singleLiquidation.entireTroveDebt = _entireTroveDebt;\\n        singleLiquidation.entireTroveColl = _entireTroveColl;\\n        uint cappedCollPortion = _entireTroveDebt.mul(MCR).div(_price);\\n\\n        singleLiquidation.collGasCompensation = _getCollGasCompensation(\\n            cappedCollPortion\\n        );\\n        singleLiquidation\\n            .BaseFeeLMAGasCompensation = BaseFeeLMA_GAS_COMPENSATION;\\n\\n        singleLiquidation.debtToOffset = _entireTroveDebt;\\n        singleLiquidation.collToSendToSP = cappedCollPortion.sub(\\n            singleLiquidation.collGasCompensation\\n        );\\n        singleLiquidation.collSurplus = _entireTroveColl.sub(cappedCollPortion);\\n        singleLiquidation.debtToRedistribute = 0;\\n        singleLiquidation.collToRedistribute = 0;\\n    }\\n\\n    /*\\n     * Liquidate a sequence of troves. Closes a maximum number of n under-collateralized Troves,\\n     * starting from the one with the lowest collateral ratio in the system, and moving upwards\\n     */\\n    function liquidateTroves(uint _n) external {\\n        ContractsCache memory contractsCache = ContractsCache(\\n            activePool,\\n            defaultPool,\\n            IBaseFeeLMAToken(address(0)),\\n            IHOGStaking(address(0)),\\n            sortedTroves,\\n            ICollSurplusPool(address(0)),\\n            address(0)\\n        );\\n        IStabilityPool stabilityPoolCached = stabilityPool;\\n\\n        LocalVariables_OuterLiquidationFunction memory vars;\\n\\n        LiquidationTotals memory totals;\\n\\n        vars.price = priceFeed.fetchPrice();\\n        vars.BaseFeeLMAInStabPool = stabilityPoolCached\\n            .getTotalBaseFeeLMADeposits();\\n        vars.recoveryModeAtStart = _checkRecoveryMode(vars.price);\\n\\n        // Perform the appropriate liquidation sequence - tally the values, and obtain their totals\\n        if (vars.recoveryModeAtStart) {\\n            totals = _getTotalsFromLiquidateTrovesSequence_RecoveryMode(\\n                contractsCache,\\n                vars.price,\\n                vars.BaseFeeLMAInStabPool,\\n                _n\\n            );\\n        } else {\\n            // if !vars.recoveryModeAtStart\\n            totals = _getTotalsFromLiquidateTrovesSequence_NormalMode(\\n                contractsCache.activePool,\\n                contractsCache.defaultPool,\\n                vars.price,\\n                vars.BaseFeeLMAInStabPool,\\n                _n\\n            );\\n        }\\n\\n        require(\\n            totals.totalDebtInSequence > 0,\\n            \\\"TroveManager: nothing to liquidate\\\"\\n        );\\n\\n        // Move liquidated StETH and BaseFeeLMA to the appropriate pools\\n        stabilityPoolCached.offset(\\n            totals.totalDebtToOffset,\\n            totals.totalCollToSendToSP\\n        );\\n        _redistributeDebtAndColl(\\n            contractsCache.activePool,\\n            contractsCache.defaultPool,\\n            totals.totalDebtToRedistribute,\\n            totals.totalCollToRedistribute\\n        );\\n        if (totals.totalCollSurplus > 0) {\\n            contractsCache.activePool.sendStETH(\\n                address(collSurplusPool),\\n                totals.totalCollSurplus\\n            );\\n        }\\n\\n        // Update system snapshots\\n        _updateSystemSnapshots_excludeCollRemainder(\\n            contractsCache.activePool,\\n            totals.totalCollGasCompensation\\n        );\\n\\n        vars.liquidatedDebt = totals.totalDebtInSequence;\\n        vars.liquidatedColl = totals\\n            .totalCollInSequence\\n            .sub(totals.totalCollGasCompensation)\\n            .sub(totals.totalCollSurplus);\\n        emit Liquidation(\\n            vars.liquidatedDebt,\\n            vars.liquidatedColl,\\n            totals.totalCollGasCompensation,\\n            totals.totalBaseFeeLMAGasCompensation\\n        );\\n\\n        // Send gas compensation to caller\\n        _sendGasCompensation(\\n            contractsCache.activePool,\\n            msg.sender,\\n            totals.totalBaseFeeLMAGasCompensation,\\n            totals.totalCollGasCompensation\\n        );\\n    }\\n\\n    /*\\n     * This function is used when the liquidateTroves sequence starts during Recovery Mode. However, it\\n     * handle the case where the system *leaves* Recovery Mode, part way through the liquidation sequence\\n     */\\n    function _getTotalsFromLiquidateTrovesSequence_RecoveryMode(\\n        ContractsCache memory _contractsCache,\\n        uint _price,\\n        uint _BaseFeeLMAInStabPool,\\n        uint _n\\n    ) internal returns (LiquidationTotals memory totals) {\\n        LocalVariables_LiquidationSequence memory vars;\\n        LiquidationValues memory singleLiquidation;\\n\\n        vars.remainingBaseFeeLMAInStabPool = _BaseFeeLMAInStabPool;\\n        vars.backToNormalMode = false;\\n        vars.entireSystemDebt = getEntireSystemDebt();\\n        vars.entireSystemColl = getEntireSystemColl();\\n\\n        vars.user = _contractsCache.sortedTroves.getLast();\\n        address firstUser = _contractsCache.sortedTroves.getFirst();\\n        for (vars.i = 0; vars.i < _n && vars.user != firstUser; vars.i++) {\\n            // we need to cache it, because current user is likely going to be deleted\\n            address nextUser = _contractsCache.sortedTroves.getPrev(vars.user);\\n\\n            vars.ICR = getCurrentICR(vars.user, _price);\\n\\n            if (!vars.backToNormalMode) {\\n                // Break the loop if ICR is greater than MCR and Stability Pool is empty\\n                if (\\n                    vars.ICR >= MCR && vars.remainingBaseFeeLMAInStabPool == 0\\n                ) {\\n                    break;\\n                }\\n\\n                uint TCR = LiquityMath._computeCR(\\n                    vars.entireSystemColl,\\n                    vars.entireSystemDebt,\\n                    _price\\n                );\\n\\n                singleLiquidation = _liquidateRecoveryMode(\\n                    _contractsCache.activePool,\\n                    _contractsCache.defaultPool,\\n                    vars.user,\\n                    vars.ICR,\\n                    vars.remainingBaseFeeLMAInStabPool,\\n                    TCR,\\n                    _price\\n                );\\n\\n                // Update aggregate trackers\\n                vars.remainingBaseFeeLMAInStabPool = vars\\n                    .remainingBaseFeeLMAInStabPool\\n                    .sub(singleLiquidation.debtToOffset);\\n                vars.entireSystemDebt = vars.entireSystemDebt.sub(\\n                    singleLiquidation.debtToOffset\\n                );\\n                vars.entireSystemColl = vars\\n                    .entireSystemColl\\n                    .sub(singleLiquidation.collToSendToSP)\\n                    .sub(singleLiquidation.collGasCompensation)\\n                    .sub(singleLiquidation.collSurplus);\\n\\n                // Add liquidation values to their respective running totals\\n                totals = _addLiquidationValuesToTotals(\\n                    totals,\\n                    singleLiquidation\\n                );\\n\\n                vars.backToNormalMode = !_checkPotentialRecoveryMode(\\n                    vars.entireSystemColl,\\n                    vars.entireSystemDebt,\\n                    _price\\n                );\\n            } else if (vars.backToNormalMode && vars.ICR < MCR) {\\n                singleLiquidation = _liquidateNormalMode(\\n                    _contractsCache.activePool,\\n                    _contractsCache.defaultPool,\\n                    vars.user,\\n                    vars.remainingBaseFeeLMAInStabPool\\n                );\\n\\n                vars.remainingBaseFeeLMAInStabPool = vars\\n                    .remainingBaseFeeLMAInStabPool\\n                    .sub(singleLiquidation.debtToOffset);\\n\\n                // Add liquidation values to their respective running totals\\n                totals = _addLiquidationValuesToTotals(\\n                    totals,\\n                    singleLiquidation\\n                );\\n            } else break; // break if the loop reaches a Trove with ICR >= MCR\\n\\n            vars.user = nextUser;\\n        }\\n    }\\n\\n    function _getTotalsFromLiquidateTrovesSequence_NormalMode(\\n        IActivePool _activePool,\\n        IDefaultPool _defaultPool,\\n        uint _price,\\n        uint _BaseFeeLMAInStabPool,\\n        uint _n\\n    ) internal returns (LiquidationTotals memory totals) {\\n        LocalVariables_LiquidationSequence memory vars;\\n        LiquidationValues memory singleLiquidation;\\n        ISortedTroves sortedTrovesCached = sortedTroves;\\n\\n        vars.remainingBaseFeeLMAInStabPool = _BaseFeeLMAInStabPool;\\n\\n        for (vars.i = 0; vars.i < _n; vars.i++) {\\n            vars.user = sortedTrovesCached.getLast();\\n            vars.ICR = getCurrentICR(vars.user, _price);\\n\\n            if (vars.ICR < MCR) {\\n                singleLiquidation = _liquidateNormalMode(\\n                    _activePool,\\n                    _defaultPool,\\n                    vars.user,\\n                    vars.remainingBaseFeeLMAInStabPool\\n                );\\n\\n                vars.remainingBaseFeeLMAInStabPool = vars\\n                    .remainingBaseFeeLMAInStabPool\\n                    .sub(singleLiquidation.debtToOffset);\\n\\n                // Add liquidation values to their respective running totals\\n                totals = _addLiquidationValuesToTotals(\\n                    totals,\\n                    singleLiquidation\\n                );\\n            } else break; // break if the loop reaches a Trove with ICR >= MCR\\n        }\\n    }\\n\\n    /*\\n     * Attempt to liquidate a custom list of troves provided by the caller.\\n     */\\n    function batchLiquidateTroves(address[] memory _troveArray) public {\\n        require(\\n            _troveArray.length != 0,\\n            \\\"TroveManager: Calldata address array must not be empty\\\"\\n        );\\n\\n        IActivePool activePoolCached = activePool;\\n        IDefaultPool defaultPoolCached = defaultPool;\\n        IStabilityPool stabilityPoolCached = stabilityPool;\\n\\n        LocalVariables_OuterLiquidationFunction memory vars;\\n        LiquidationTotals memory totals;\\n\\n        vars.price = priceFeed.fetchPrice();\\n        vars.BaseFeeLMAInStabPool = stabilityPoolCached\\n            .getTotalBaseFeeLMADeposits();\\n        vars.recoveryModeAtStart = _checkRecoveryMode(vars.price);\\n\\n        // Perform the appropriate liquidation sequence - tally values and obtain their totals.\\n        if (vars.recoveryModeAtStart) {\\n            totals = _getTotalFromBatchLiquidate_RecoveryMode(\\n                activePoolCached,\\n                defaultPoolCached,\\n                vars.price,\\n                vars.BaseFeeLMAInStabPool,\\n                _troveArray\\n            );\\n        } else {\\n            //  if !vars.recoveryModeAtStart\\n            totals = _getTotalsFromBatchLiquidate_NormalMode(\\n                activePoolCached,\\n                defaultPoolCached,\\n                vars.price,\\n                vars.BaseFeeLMAInStabPool,\\n                _troveArray\\n            );\\n        }\\n\\n        require(\\n            totals.totalDebtInSequence > 0,\\n            \\\"TroveManager: nothing to liquidate\\\"\\n        );\\n\\n        // Move liquidated StETH and BaseFeeLMA to the appropriate pools\\n        stabilityPoolCached.offset(\\n            totals.totalDebtToOffset,\\n            totals.totalCollToSendToSP\\n        );\\n        _redistributeDebtAndColl(\\n            activePoolCached,\\n            defaultPoolCached,\\n            totals.totalDebtToRedistribute,\\n            totals.totalCollToRedistribute\\n        );\\n        if (totals.totalCollSurplus > 0) {\\n            activePoolCached.sendStETH(\\n                address(collSurplusPool),\\n                totals.totalCollSurplus\\n            );\\n        }\\n\\n        // Update system snapshots\\n        _updateSystemSnapshots_excludeCollRemainder(\\n            activePoolCached,\\n            totals.totalCollGasCompensation\\n        );\\n\\n        vars.liquidatedDebt = totals.totalDebtInSequence;\\n        vars.liquidatedColl = totals\\n            .totalCollInSequence\\n            .sub(totals.totalCollGasCompensation)\\n            .sub(totals.totalCollSurplus);\\n        emit Liquidation(\\n            vars.liquidatedDebt,\\n            vars.liquidatedColl,\\n            totals.totalCollGasCompensation,\\n            totals.totalBaseFeeLMAGasCompensation\\n        );\\n\\n        // Send gas compensation to caller\\n        _sendGasCompensation(\\n            activePoolCached,\\n            msg.sender,\\n            totals.totalBaseFeeLMAGasCompensation,\\n            totals.totalCollGasCompensation\\n        );\\n    }\\n\\n    /*\\n     * This function is used when the batch liquidation sequence starts during Recovery Mode. However, it\\n     * handle the case where the system *leaves* Recovery Mode, part way through the liquidation sequence\\n     */\\n    function _getTotalFromBatchLiquidate_RecoveryMode(\\n        IActivePool _activePool,\\n        IDefaultPool _defaultPool,\\n        uint _price,\\n        uint _BaseFeeLMAInStabPool,\\n        address[] memory _troveArray\\n    ) internal returns (LiquidationTotals memory totals) {\\n        LocalVariables_LiquidationSequence memory vars;\\n        LiquidationValues memory singleLiquidation;\\n\\n        vars.remainingBaseFeeLMAInStabPool = _BaseFeeLMAInStabPool;\\n        vars.backToNormalMode = false;\\n        vars.entireSystemDebt = getEntireSystemDebt();\\n        vars.entireSystemColl = getEntireSystemColl();\\n\\n        for (vars.i = 0; vars.i < _troveArray.length; vars.i++) {\\n            vars.user = _troveArray[vars.i];\\n            // Skip non-active troves\\n            if (Troves[vars.user].status != Status.active) {\\n                continue;\\n            }\\n            vars.ICR = getCurrentICR(vars.user, _price);\\n\\n            if (!vars.backToNormalMode) {\\n                // Skip this trove if ICR is greater than MCR and Stability Pool is empty\\n                if (\\n                    vars.ICR >= MCR && vars.remainingBaseFeeLMAInStabPool == 0\\n                ) {\\n                    continue;\\n                }\\n\\n                uint TCR = LiquityMath._computeCR(\\n                    vars.entireSystemColl,\\n                    vars.entireSystemDebt,\\n                    _price\\n                );\\n\\n                singleLiquidation = _liquidateRecoveryMode(\\n                    _activePool,\\n                    _defaultPool,\\n                    vars.user,\\n                    vars.ICR,\\n                    vars.remainingBaseFeeLMAInStabPool,\\n                    TCR,\\n                    _price\\n                );\\n\\n                // Update aggregate trackers\\n                vars.remainingBaseFeeLMAInStabPool = vars\\n                    .remainingBaseFeeLMAInStabPool\\n                    .sub(singleLiquidation.debtToOffset);\\n                vars.entireSystemDebt = vars.entireSystemDebt.sub(\\n                    singleLiquidation.debtToOffset\\n                );\\n                vars.entireSystemColl = vars\\n                    .entireSystemColl\\n                    .sub(singleLiquidation.collToSendToSP)\\n                    .sub(singleLiquidation.collGasCompensation)\\n                    .sub(singleLiquidation.collSurplus);\\n\\n                // Add liquidation values to their respective running totals\\n                totals = _addLiquidationValuesToTotals(\\n                    totals,\\n                    singleLiquidation\\n                );\\n\\n                vars.backToNormalMode = !_checkPotentialRecoveryMode(\\n                    vars.entireSystemColl,\\n                    vars.entireSystemDebt,\\n                    _price\\n                );\\n            } else if (vars.backToNormalMode && vars.ICR < MCR) {\\n                singleLiquidation = _liquidateNormalMode(\\n                    _activePool,\\n                    _defaultPool,\\n                    vars.user,\\n                    vars.remainingBaseFeeLMAInStabPool\\n                );\\n                vars.remainingBaseFeeLMAInStabPool = vars\\n                    .remainingBaseFeeLMAInStabPool\\n                    .sub(singleLiquidation.debtToOffset);\\n\\n                // Add liquidation values to their respective running totals\\n                totals = _addLiquidationValuesToTotals(\\n                    totals,\\n                    singleLiquidation\\n                );\\n            } else continue; // In Normal Mode skip troves with ICR >= MCR\\n        }\\n    }\\n\\n    function _getTotalsFromBatchLiquidate_NormalMode(\\n        IActivePool _activePool,\\n        IDefaultPool _defaultPool,\\n        uint _price,\\n        uint _BaseFeeLMAInStabPool,\\n        address[] memory _troveArray\\n    ) internal returns (LiquidationTotals memory totals) {\\n        LocalVariables_LiquidationSequence memory vars;\\n        LiquidationValues memory singleLiquidation;\\n\\n        vars.remainingBaseFeeLMAInStabPool = _BaseFeeLMAInStabPool;\\n\\n        for (vars.i = 0; vars.i < _troveArray.length; vars.i++) {\\n            vars.user = _troveArray[vars.i];\\n            vars.ICR = getCurrentICR(vars.user, _price);\\n\\n            if (vars.ICR < MCR) {\\n                singleLiquidation = _liquidateNormalMode(\\n                    _activePool,\\n                    _defaultPool,\\n                    vars.user,\\n                    vars.remainingBaseFeeLMAInStabPool\\n                );\\n                vars.remainingBaseFeeLMAInStabPool = vars\\n                    .remainingBaseFeeLMAInStabPool\\n                    .sub(singleLiquidation.debtToOffset);\\n\\n                // Add liquidation values to their respective running totals\\n                totals = _addLiquidationValuesToTotals(\\n                    totals,\\n                    singleLiquidation\\n                );\\n            }\\n        }\\n    }\\n\\n    // --- Liquidation helper functions ---\\n\\n    function _addLiquidationValuesToTotals(\\n        LiquidationTotals memory oldTotals,\\n        LiquidationValues memory singleLiquidation\\n    ) internal pure returns (LiquidationTotals memory newTotals) {\\n        // Tally all the values with their respective running totals\\n        newTotals.totalCollGasCompensation = oldTotals\\n            .totalCollGasCompensation\\n            .add(singleLiquidation.collGasCompensation);\\n        newTotals.totalBaseFeeLMAGasCompensation = oldTotals\\n            .totalBaseFeeLMAGasCompensation\\n            .add(singleLiquidation.BaseFeeLMAGasCompensation);\\n        newTotals.totalDebtInSequence = oldTotals.totalDebtInSequence.add(\\n            singleLiquidation.entireTroveDebt\\n        );\\n        newTotals.totalCollInSequence = oldTotals.totalCollInSequence.add(\\n            singleLiquidation.entireTroveColl\\n        );\\n        newTotals.totalDebtToOffset = oldTotals.totalDebtToOffset.add(\\n            singleLiquidation.debtToOffset\\n        );\\n        newTotals.totalCollToSendToSP = oldTotals.totalCollToSendToSP.add(\\n            singleLiquidation.collToSendToSP\\n        );\\n        newTotals.totalDebtToRedistribute = oldTotals\\n            .totalDebtToRedistribute\\n            .add(singleLiquidation.debtToRedistribute);\\n        newTotals.totalCollToRedistribute = oldTotals\\n            .totalCollToRedistribute\\n            .add(singleLiquidation.collToRedistribute);\\n        newTotals.totalCollSurplus = oldTotals.totalCollSurplus.add(\\n            singleLiquidation.collSurplus\\n        );\\n\\n        return newTotals;\\n    }\\n\\n    function _sendGasCompensation(\\n        IActivePool _activePool,\\n        address _liquidator,\\n        uint _BaseFeeLMA,\\n        uint _StETH\\n    ) internal {\\n        if (_BaseFeeLMA > 0) {\\n            baseFeeLMAToken.returnFromPool(\\n                gasPoolAddress,\\n                _liquidator,\\n                _BaseFeeLMA\\n            );\\n        }\\n\\n        if (_StETH > 0) {\\n            _activePool.sendStETH(_liquidator, _StETH);\\n        }\\n    }\\n\\n    // Move a Trove's pending debt and collateral rewards from distributions, from the Default Pool to the Active Pool\\n    function _movePendingTroveRewardsToActivePool(\\n        IActivePool _activePool,\\n        IDefaultPool _defaultPool,\\n        uint _BaseFeeLMA,\\n        uint _StETH\\n    ) internal {\\n        _defaultPool.decreaseBaseFeeLMADebt(_BaseFeeLMA);\\n        _activePool.increaseBaseFeeLMADebt(_BaseFeeLMA);\\n        _defaultPool.sendStETHToActivePool(_StETH);\\n    }\\n\\n    // --- Redemption functions ---\\n\\n    // Redeem as much collateral as possible from _borrower's Trove in exchange for BaseFeeLMA up to _maxBaseFeeLMAamount\\n    function _redeemCollateralFromTrove(\\n        ContractsCache memory _contractsCache,\\n        address _borrower,\\n        uint _maxBaseFeeLMAamount,\\n        uint _price,\\n        address _upperPartialRedemptionHint,\\n        address _lowerPartialRedemptionHint,\\n        uint _partialRedemptionHintNICR\\n    ) internal returns (SingleRedemptionValues memory singleRedemption) {\\n        // Determine the remaining amount (lot) to be redeemed, capped by the entire debt of the Trove minus the liquidation reserve\\n        singleRedemption.BaseFeeLMALot = LiquityMath._min(\\n            _maxBaseFeeLMAamount,\\n            Troves[_borrower].debt.sub(BaseFeeLMA_GAS_COMPENSATION)\\n        );\\n\\n        // Get the StETHLot of equivalent value in USD\\n        // HEDGEHOG UPDATES: Change StETHLOT calculations formula from [debtToBeRedeemed * price * 10e9] to [debtToBeRedeemed / price * 1e18]\\n        singleRedemption.StETHLot = singleRedemption.BaseFeeLMALot.mul(_price);\\n\\n        // Decrease the debt and collateral of the current Trove according to the BaseFeeLMA lot and corresponding StETH to send\\n        uint newDebt = (Troves[_borrower].debt).sub(\\n            singleRedemption.BaseFeeLMALot\\n        );\\n        uint newColl = (Troves[_borrower].coll).sub(singleRedemption.StETHLot);\\n\\n        if (newDebt == BaseFeeLMA_GAS_COMPENSATION) {\\n            // No debt left in the Trove (except for the liquidation reserve), therefore the trove gets closed\\n            _removeStake(_borrower);\\n            _closeTrove(_borrower, Status.closedByRedemption);\\n            _redeemCloseTrove(\\n                _contractsCache,\\n                _borrower,\\n                BaseFeeLMA_GAS_COMPENSATION,\\n                newColl\\n            );\\n            emit TroveUpdated(\\n                _borrower,\\n                0,\\n                0,\\n                0,\\n                TroveManagerOperation.redeemCollateral\\n            );\\n        } else {\\n            uint newNICR = LiquityMath._computeNominalCR(newColl, newDebt);\\n\\n            /*\\n             * If the provided hint is out of date, we bail since trying to reinsert without a good hint will almost\\n             * certainly result in running out of gas.\\n             *\\n             * If the resultant net debt of the partial is less than the minimum, net debt we bail.\\n             */\\n\\n            if (\\n                newNICR != _partialRedemptionHintNICR ||\\n                _getNetDebt(newDebt) < MIN_NET_DEBT\\n            ) {\\n                singleRedemption.cancelledPartial = true;\\n                return singleRedemption;\\n            }\\n\\n            _contractsCache.sortedTroves.reInsert(\\n                _borrower,\\n                newNICR,\\n                _upperPartialRedemptionHint,\\n                _lowerPartialRedemptionHint\\n            );\\n\\n            Troves[_borrower].debt = newDebt;\\n            Troves[_borrower].coll = newColl;\\n            _updateStakeAndTotalStakes(_borrower);\\n\\n            emit TroveUpdated(\\n                _borrower,\\n                newDebt,\\n                newColl,\\n                Troves[_borrower].stake,\\n                TroveManagerOperation.redeemCollateral\\n            );\\n        }\\n\\n        return singleRedemption;\\n    }\\n\\n    /*\\n     * Called when a full redemption occurs, and closes the trove.\\n     * The redeemer swaps (debt - liquidation reserve) BaseFeeLMA for (debt - liquidation reserve) worth of StETH, so the BaseFeeLMA liquidation reserve left corresponds to the remaining debt.\\n     * In order to close the trove, the BaseFeeLMA liquidation reserve is burned, and the corresponding debt is removed from the active pool.\\n     * The debt recorded on the trove's struct is zero'd elswhere, in _closeTrove.\\n     * Any surplus StETH left in the trove, is sent to the Coll surplus pool, and can be later claimed by the borrower.\\n     */\\n    function _redeemCloseTrove(\\n        ContractsCache memory _contractsCache,\\n        address _borrower,\\n        uint _BaseFeeLMA,\\n        uint _StETH\\n    ) internal {\\n        _contractsCache.baseFeeLMAToken.burn(gasPoolAddress, _BaseFeeLMA);\\n        // Update Active Pool BaseFeeLMA, and send StETH to account\\n        _contractsCache.activePool.decreaseBaseFeeLMADebt(_BaseFeeLMA);\\n\\n        // send StETH from Active Pool to CollSurplus Pool\\n        _contractsCache.collSurplusPool.accountSurplus(_borrower, _StETH);\\n        _contractsCache.activePool.sendStETH(\\n            address(_contractsCache.collSurplusPool),\\n            _StETH\\n        );\\n    }\\n\\n    function _isValidFirstRedemptionHint(\\n        ISortedTroves _sortedTroves,\\n        address _firstRedemptionHint,\\n        uint _price\\n    ) internal view returns (bool) {\\n        if (\\n            _firstRedemptionHint == address(0) ||\\n            !_sortedTroves.contains(_firstRedemptionHint) ||\\n            getCurrentICR(_firstRedemptionHint, _price) < MCR\\n        ) {\\n            return false;\\n        }\\n\\n        address nextTrove = _sortedTroves.getNext(_firstRedemptionHint);\\n        return\\n            nextTrove == address(0) || getCurrentICR(nextTrove, _price) < MCR;\\n    }\\n\\n    /* Send _BaseFeeLMAamount BaseFeeLMA to the system and redeem the corresponding amount of collateral from as many Troves as are needed to fill the redemption\\n     * request.  Applies pending rewards to a Trove before reducing its debt and coll.\\n     *\\n     * Note that if _amount is very large, this function can run out of gas, specially if traversed troves are small. This can be easily avoided by\\n     * splitting the total _amount in appropriate chunks and calling the function multiple times.\\n     *\\n     * Param `_maxIterations` can also be provided, so the loop through Troves is capped (if it\\u2019s zero, it will be ignored).This makes it easier to\\n     * avoid OOG for the frontend, as only knowing approximately the average cost of an iteration is enough, without needing to know the \\u201ctopology\\u201d\\n     * of the trove list. It also avoids the need to set the cap in stone in the contract, nor doing gas calculations, as both gas price and opcode\\n     * costs can vary.\\n     *\\n     * All Troves that are redeemed from -- with the likely exception of the last one -- will end up with no debt left, therefore they will be closed.\\n     * If the last Trove does have some remaining debt, it has a finite ICR, and the reinsertion could be anywhere in the list, therefore it requires a hint.\\n     * A frontend should use getRedemptionHints() to calculate what the ICR of this Trove will be after redemption, and pass a hint for its position\\n     * in the sortedTroves list along with the ICR value that the hint was found for.\\n     *\\n     * If another transaction modifies the list between calling getRedemptionHints() and passing the hints to redeemCollateral(), it\\n     * is very likely that the last (partially) redeemed Trove would end up with a different ICR than what the hint is for. In this case the\\n     * redemption will stop after the last completely redeemed Trove and the sender will keep the remaining BaseFeeLMA amount, which they can attempt\\n     * to redeem later.\\n     */\\n    function redeemCollateral(\\n        uint _BaseFeeLMAamount,\\n        address _firstRedemptionHint,\\n        address _upperPartialRedemptionHint,\\n        address _lowerPartialRedemptionHint,\\n        uint _partialRedemptionHintNICR,\\n        uint _maxIterations,\\n        uint _maxFeePercentage\\n    ) external {\\n        ContractsCache memory contractsCache = ContractsCache(\\n            activePool,\\n            defaultPool,\\n            baseFeeLMAToken,\\n            hogStaking,\\n            sortedTroves,\\n            collSurplusPool,\\n            gasPoolAddress\\n        );\\n        RedemptionTotals memory totals;\\n\\n        _requireValidMaxFeePercentage(_maxFeePercentage);\\n        //_requireAfterBootstrapPeriod();\\n        totals.price = priceFeed.fetchPrice();\\n\\n        _requireTCRoverMCR(totals.price);\\n        _requireAmountGreaterThanZero(_BaseFeeLMAamount);\\n        _requireBaseFeeLMABalanceCoversRedemption(\\n            contractsCache.baseFeeLMAToken,\\n            msg.sender,\\n            _BaseFeeLMAamount\\n        );\\n\\n        totals.totalBaseFeeLMASupplyAtStart = getEntireSystemDebt();\\n        // Confirm redeemer's balance is less than total BaseFeeLMA supply\\n        assert(\\n            contractsCache.baseFeeLMAToken.balanceOf(msg.sender) <=\\n                totals.totalBaseFeeLMASupplyAtStart\\n        );\\n\\n        totals.remainingBaseFeeLMA = _BaseFeeLMAamount;\\n        address currentBorrower;\\n\\n        if (\\n            _isValidFirstRedemptionHint(\\n                contractsCache.sortedTroves,\\n                _firstRedemptionHint,\\n                totals.price\\n            )\\n        ) {\\n            currentBorrower = _firstRedemptionHint;\\n        } else {\\n            currentBorrower = contractsCache.sortedTroves.getLast();\\n            // Find the first trove with ICR >= MCR\\n            while (\\n                currentBorrower != address(0) &&\\n                getCurrentICR(currentBorrower, totals.price) < MCR\\n            ) {\\n                currentBorrower = contractsCache.sortedTroves.getPrev(\\n                    currentBorrower\\n                );\\n            }\\n        }\\n        // Loop through the Troves starting from the one with lowest collateral ratio until _amount of BaseFeeLMA is exchanged for collateral\\n        if (_maxIterations == 0) {\\n            // Previous implementation: _maxIterations = uint(-1);\\n            // Updated since 8th pragma does not allow anymore\\n            _maxIterations = type(uint).max;\\n        }\\n        while (\\n            currentBorrower != address(0) &&\\n            totals.remainingBaseFeeLMA > 0 &&\\n            _maxIterations > 0\\n        ) {\\n            _maxIterations--;\\n            // Save the address of the Trove preceding the current one, before potentially modifying the list\\n            address nextUserToCheck = contractsCache.sortedTroves.getPrev(\\n                currentBorrower\\n            );\\n\\n            _applyPendingRewards(\\n                contractsCache.activePool,\\n                contractsCache.defaultPool,\\n                currentBorrower\\n            );\\n            SingleRedemptionValues\\n                memory singleRedemption = _redeemCollateralFromTrove(\\n                    contractsCache,\\n                    currentBorrower,\\n                    totals.remainingBaseFeeLMA,\\n                    totals.price,\\n                    _upperPartialRedemptionHint,\\n                    _lowerPartialRedemptionHint,\\n                    _partialRedemptionHintNICR\\n                );\\n\\n            if (singleRedemption.cancelledPartial) break; // Partial redemption was cancelled (out-of-date hint, or new net debt < minimum), therefore we could not redeem from the last Trove\\n            totals.totalBaseFeeLMAToRedeem = totals.totalBaseFeeLMAToRedeem.add(\\n                singleRedemption.BaseFeeLMALot\\n            );\\n            totals.totalStETHDrawn = totals.totalStETHDrawn.add(\\n                singleRedemption.StETHLot\\n            );\\n\\n            totals.remainingBaseFeeLMA = totals.remainingBaseFeeLMA.sub(\\n                singleRedemption.BaseFeeLMALot\\n            );\\n            currentBorrower = nextUserToCheck;\\n        }\\n\\n        require(\\n            totals.totalStETHDrawn > 0,\\n            \\\"TroveManager: Unable to redeem any amount\\\"\\n        );\\n        // HEDGEHOG LOGIC UPDATE:\\n        // 1) rename _updateBaseRateFromRedemption into _updateRedemptionBaseRateFromRedemption\\n        // 2) update commented explanation (baseRate => redemptionBaseRate)\\n        // Decay the redemptionBaseRate due to time passed, and then increase it according to the size of this redemption.\\n        // Use the saved total BaseFeeLMA supply value, from before it was reduced by the redemption.\\n        _updateRedemptionBaseRateFromRedemption(\\n            totals.totalStETHDrawn,\\n            totals.price,\\n            totals.totalBaseFeeLMASupplyAtStart\\n        );\\n        // Calculate the StETH fee\\n        totals.StETHFee = _getRedemptionFee(totals.totalStETHDrawn);\\n        console.log(\\\"Redemption fee: \\\", totals.StETHFee);\\n\\n        _requireUserAcceptsFee(\\n            totals.StETHFee,\\n            totals.totalStETHDrawn,\\n            _maxFeePercentage\\n        );\\n        // Send the StETH fee to the HOG staking contract\\n        contractsCache.activePool.sendStETH(\\n            address(contractsCache.hogStaking),\\n            totals.StETHFee\\n        );\\n        contractsCache.hogStaking.increaseF_StETH(totals.StETHFee);\\n\\n        totals.StETHToSendToRedeemer = totals.totalStETHDrawn.sub(\\n            totals.StETHFee\\n        );\\n        console.log(\\n            \\\"What actually gets transferred: \\\",\\n            totals.StETHToSendToRedeemer\\n        );\\n        emit Redemption(\\n            _BaseFeeLMAamount,\\n            totals.totalBaseFeeLMAToRedeem,\\n            totals.totalStETHDrawn,\\n            totals.StETHFee\\n        );\\n        // Burn the total BaseFeeLMA that is cancelled with debt, and send the redeemed StETH to msg.sender\\n        contractsCache.baseFeeLMAToken.burn(\\n            msg.sender,\\n            totals.totalBaseFeeLMAToRedeem\\n        );\\n        // Update Active Pool BaseFeeLMA, and send StETH to account\\n        contractsCache.activePool.decreaseBaseFeeLMADebt(\\n            totals.totalBaseFeeLMAToRedeem\\n        );\\n        contractsCache.activePool.sendStETH(\\n            msg.sender,\\n            totals.StETHToSendToRedeemer\\n        );\\n    }\\n\\n    // --- Helper functions ---\\n\\n    // Return the nominal collateral ratio (ICR) of a given Trove, without the price. Takes a trove's pending coll and debt rewards from redistributions into account.\\n    function getNominalICR(address _borrower) public view returns (uint) {\\n        (\\n            uint currentStETH,\\n            uint currentBaseFeeLMADebt\\n        ) = _getCurrentTroveAmounts(_borrower);\\n\\n        uint NICR = LiquityMath._computeNominalCR(\\n            currentStETH,\\n            currentBaseFeeLMADebt\\n        );\\n        return NICR;\\n    }\\n\\n    /**\\n     * Hedgehog changes:\\n     * Get Price directly from the price feed instead of param passing\\n     */\\n    // Return the current collateral ratio (ICR) of a given Trove. Takes a trove's pending coll and debt rewards from redistributions into account.\\n    function getCurrentICR(\\n        address _borrower,\\n        uint _price\\n    ) public view returns (uint) {\\n        (\\n            uint currentStETH,\\n            uint currentBaseFeeLMADebt\\n        ) = _getCurrentTroveAmounts(_borrower);\\n\\n        uint ICR = LiquityMath._computeCR(\\n            currentStETH,\\n            currentBaseFeeLMADebt,\\n            _price\\n        );\\n        return ICR;\\n    }\\n\\n    function getUnreliableTroveICR(\\n        address _borrower\\n    ) public view returns (uint) {\\n        uint256 price = priceFeed.lastGoodPrice();\\n        (\\n            uint currentStETH,\\n            uint currentBaseFeeLMADebt\\n        ) = _getCurrentTroveAmounts(_borrower);\\n\\n        uint ICR = LiquityMath._computeCR(\\n            currentStETH,\\n            currentBaseFeeLMADebt,\\n            price\\n        );\\n        return ICR;\\n    }\\n\\n    function _getCurrentTroveAmounts(\\n        address _borrower\\n    ) internal view returns (uint, uint) {\\n        uint pendingStETHReward = getPendingStETHReward(_borrower);\\n        uint pendingBaseFeeLMADebtReward = getPendingBaseFeeLMADebtReward(\\n            _borrower\\n        );\\n\\n        uint currentStETH = Troves[_borrower].coll.add(pendingStETHReward);\\n        uint currentBaseFeeLMADebt = Troves[_borrower].debt.add(\\n            pendingBaseFeeLMADebtReward\\n        );\\n\\n        return (currentStETH, currentBaseFeeLMADebt);\\n    }\\n\\n    function applyPendingRewards(address _borrower) external {\\n        _requireCallerIsBorrowerOperations();\\n        return _applyPendingRewards(activePool, defaultPool, _borrower);\\n    }\\n\\n    // Add the borrowers's coll and debt rewards earned from redistributions, to their Trove\\n    function _applyPendingRewards(\\n        IActivePool _activePool,\\n        IDefaultPool _defaultPool,\\n        address _borrower\\n    ) internal {\\n        if (hasPendingRewards(_borrower)) {\\n            _requireTroveIsActive(_borrower);\\n\\n            // Compute pending rewards\\n            uint pendingStETHReward = getPendingStETHReward(_borrower);\\n            uint pendingBaseFeeLMADebtReward = getPendingBaseFeeLMADebtReward(\\n                _borrower\\n            );\\n\\n            // Apply pending rewards to trove's state\\n            Troves[_borrower].coll = Troves[_borrower].coll.add(\\n                pendingStETHReward\\n            );\\n            Troves[_borrower].debt = Troves[_borrower].debt.add(\\n                pendingBaseFeeLMADebtReward\\n            );\\n\\n            _updateTroveRewardSnapshots(_borrower);\\n\\n            // Transfer from DefaultPool to ActivePool\\n            _movePendingTroveRewardsToActivePool(\\n                _activePool,\\n                _defaultPool,\\n                pendingBaseFeeLMADebtReward,\\n                pendingStETHReward\\n            );\\n\\n            emit TroveUpdated(\\n                _borrower,\\n                Troves[_borrower].debt,\\n                Troves[_borrower].coll,\\n                Troves[_borrower].stake,\\n                TroveManagerOperation.applyPendingRewards\\n            );\\n        }\\n    }\\n\\n    // Update borrower's snapshots of L_StETH and L_BaseFeeLMADebt to reflect the current values\\n    function updateTroveRewardSnapshots(address _borrower) external {\\n        _requireCallerIsBorrowerOperations();\\n        return _updateTroveRewardSnapshots(_borrower);\\n    }\\n\\n    function _updateTroveRewardSnapshots(address _borrower) internal {\\n        rewardSnapshots[_borrower].StETH = L_StETH;\\n        rewardSnapshots[_borrower].BaseFeeLMADebt = L_BaseFeeLMADebt;\\n        emit TroveSnapshotsUpdated(L_StETH, L_BaseFeeLMADebt);\\n    }\\n\\n    // Get the borrower's pending accumulated StETH reward, earned by their stake\\n    function getPendingStETHReward(\\n        address _borrower\\n    ) public view returns (uint) {\\n        uint snapshotStETH = rewardSnapshots[_borrower].StETH;\\n        uint rewardPerUnitStaked = L_StETH.sub(snapshotStETH);\\n\\n        if (\\n            rewardPerUnitStaked == 0 ||\\n            Troves[_borrower].status != Status.active\\n        ) {\\n            return 0;\\n        }\\n\\n        uint stake = Troves[_borrower].stake;\\n\\n        uint pendingStETHReward = stake.mul(rewardPerUnitStaked).div(\\n            DECIMAL_PRECISION\\n        );\\n\\n        return pendingStETHReward;\\n    }\\n\\n    // Get the borrower's pending accumulated BaseFeeLMA reward, earned by their stake\\n    function getPendingBaseFeeLMADebtReward(\\n        address _borrower\\n    ) public view returns (uint) {\\n        uint snapshotBaseFeeLMADebt = rewardSnapshots[_borrower].BaseFeeLMADebt;\\n        uint rewardPerUnitStaked = L_BaseFeeLMADebt.sub(snapshotBaseFeeLMADebt);\\n\\n        if (\\n            rewardPerUnitStaked == 0 ||\\n            Troves[_borrower].status != Status.active\\n        ) {\\n            return 0;\\n        }\\n\\n        uint stake = Troves[_borrower].stake;\\n\\n        uint pendingBaseFeeLMADebtReward = stake.mul(rewardPerUnitStaked).div(\\n            DECIMAL_PRECISION\\n        );\\n\\n        return pendingBaseFeeLMADebtReward;\\n    }\\n\\n    function hasPendingRewards(address _borrower) public view returns (bool) {\\n        /*\\n         * A Trove has pending rewards if its snapshot is less than the current rewards per-unit-staked sum:\\n         * this indicates that rewards have occured since the snapshot was made, and the user therefore has\\n         * pending rewards\\n         */\\n        if (Troves[_borrower].status != Status.active) {\\n            return false;\\n        }\\n\\n        return (rewardSnapshots[_borrower].StETH < L_StETH);\\n    }\\n\\n    // Return the Troves entire debt and coll, including pending rewards from redistributions.\\n    function getEntireDebtAndColl(\\n        address _borrower\\n    )\\n        public\\n        view\\n        returns (\\n            uint debt,\\n            uint coll,\\n            uint pendingBaseFeeLMADebtReward,\\n            uint pendingStETHReward\\n        )\\n    {\\n        debt = Troves[_borrower].debt;\\n        coll = Troves[_borrower].coll;\\n\\n        pendingBaseFeeLMADebtReward = getPendingBaseFeeLMADebtReward(_borrower);\\n        pendingStETHReward = getPendingStETHReward(_borrower);\\n\\n        debt = debt.add(pendingBaseFeeLMADebtReward);\\n        coll = coll.add(pendingStETHReward);\\n    }\\n\\n    function removeStake(address _borrower) external {\\n        _requireCallerIsBorrowerOperations();\\n        return _removeStake(_borrower);\\n    }\\n\\n    // Remove borrower's stake from the totalStakes sum, and set their stake to 0\\n    function _removeStake(address _borrower) internal {\\n        uint stake = Troves[_borrower].stake;\\n        totalStakes = totalStakes.sub(stake);\\n        Troves[_borrower].stake = 0;\\n    }\\n\\n    function updateStakeAndTotalStakes(\\n        address _borrower\\n    ) external returns (uint) {\\n        _requireCallerIsBorrowerOperations();\\n        return _updateStakeAndTotalStakes(_borrower);\\n    }\\n\\n    // Update borrower's stake based on their latest collateral value\\n    function _updateStakeAndTotalStakes(\\n        address _borrower\\n    ) internal returns (uint) {\\n        uint newStake = _computeNewStake(Troves[_borrower].coll);\\n        uint oldStake = Troves[_borrower].stake;\\n        Troves[_borrower].stake = newStake;\\n\\n        totalStakes = totalStakes.sub(oldStake).add(newStake);\\n        emit TotalStakesUpdated(totalStakes);\\n\\n        return newStake;\\n    }\\n\\n    // Calculate a new stake based on the snapshots of the totalStakes and totalCollateral taken at the last liquidation\\n    function _computeNewStake(uint _coll) internal view returns (uint) {\\n        uint stake;\\n        if (totalCollateralSnapshot == 0) {\\n            stake = _coll;\\n        } else {\\n            /*\\n             * The following assert() holds true because:\\n             * - The system always contains >= 1 trove\\n             * - When we close or liquidate a trove, we redistribute the pending rewards, so if all troves were closed/liquidated,\\n             * rewards would\\u2019ve been emptied and totalCollateralSnapshot would be zero too.\\n             */\\n            assert(totalStakesSnapshot > 0);\\n            stake = _coll.mul(totalStakesSnapshot).div(totalCollateralSnapshot);\\n        }\\n        return stake;\\n    }\\n\\n    function _redistributeDebtAndColl(\\n        IActivePool _activePool,\\n        IDefaultPool _defaultPool,\\n        uint _debt,\\n        uint _coll\\n    ) internal {\\n        if (_debt == 0) {\\n            return;\\n        }\\n\\n        /*\\n         * Add distributed coll and debt rewards-per-unit-staked to the running totals. Division uses a \\\"feedback\\\"\\n         * error correction, to keep the cumulative error low in the running totals L_StETH and L_BaseFeeLMADebt:\\n         *\\n         * 1) Form numerators which compensate for the floor division errors that occurred the last time this\\n         * function was called.\\n         * 2) Calculate \\\"per-unit-staked\\\" ratios.\\n         * 3) Multiply each ratio back by its denominator, to reveal the current floor division error.\\n         * 4) Store these errors for use in the next correction when this function is called.\\n         * 5) Note: static analysis tools complain about this \\\"division before multiplication\\\", however, it is intended.\\n         */\\n        uint StETHNumerator = _coll.mul(DECIMAL_PRECISION).add(\\n            lastStETHError_Redistribution\\n        );\\n        uint BaseFeeLMADebtNumerator = _debt.mul(DECIMAL_PRECISION).add(\\n            lastBaseFeeLMADebtError_Redistribution\\n        );\\n\\n        // Get the per-unit-staked terms\\n        uint StETHRewardPerUnitStaked = StETHNumerator.div(totalStakes);\\n        uint BaseFeeLMADebtRewardPerUnitStaked = BaseFeeLMADebtNumerator.div(\\n            totalStakes\\n        );\\n\\n        lastStETHError_Redistribution = StETHNumerator.sub(\\n            StETHRewardPerUnitStaked.mul(totalStakes)\\n        );\\n        lastBaseFeeLMADebtError_Redistribution = BaseFeeLMADebtNumerator.sub(\\n            BaseFeeLMADebtRewardPerUnitStaked.mul(totalStakes)\\n        );\\n\\n        // Add per-unit-staked terms to the running totals\\n        L_StETH = L_StETH.add(StETHRewardPerUnitStaked);\\n        L_BaseFeeLMADebt = L_BaseFeeLMADebt.add(\\n            BaseFeeLMADebtRewardPerUnitStaked\\n        );\\n\\n        emit LTermsUpdated(L_StETH, L_BaseFeeLMADebt);\\n\\n        // Transfer coll and debt from ActivePool to DefaultPool\\n        _activePool.decreaseBaseFeeLMADebt(_debt);\\n        _defaultPool.increaseBaseFeeLMADebt(_debt);\\n        _activePool.sendStETH(address(_defaultPool), _coll);\\n    }\\n\\n    function closeTrove(address _borrower) external {\\n        _requireCallerIsBorrowerOperations();\\n        return _closeTrove(_borrower, Status.closedByOwner);\\n    }\\n\\n    function _closeTrove(address _borrower, Status closedStatus) internal {\\n        assert(\\n            closedStatus != Status.nonExistent && closedStatus != Status.active\\n        );\\n\\n        uint TroveOwnersArrayLength = TroveOwners.length;\\n        _requireMoreThanOneTroveInSystem(TroveOwnersArrayLength);\\n\\n        Troves[_borrower].status = closedStatus;\\n        Troves[_borrower].coll = 0;\\n        Troves[_borrower].debt = 0;\\n\\n        rewardSnapshots[_borrower].StETH = 0;\\n        rewardSnapshots[_borrower].BaseFeeLMADebt = 0;\\n\\n        _removeTroveOwner(_borrower, TroveOwnersArrayLength);\\n        sortedTroves.remove(_borrower);\\n    }\\n\\n    /*\\n     * Updates snapshots of system total stakes and total collateral, excluding a given collateral remainder from the calculation.\\n     * Used in a liquidation sequence.\\n     *\\n     * The calculation excludes a portion of collateral that is in the ActivePool:\\n     *\\n     * the total StETH gas compensation from the liquidation sequence\\n     *\\n     * The StETH as compensation must be excluded as it is always sent out at the very end of the liquidation sequence.\\n     */\\n    function _updateSystemSnapshots_excludeCollRemainder(\\n        IActivePool _activePool,\\n        uint _collRemainder\\n    ) internal {\\n        totalStakesSnapshot = totalStakes;\\n\\n        uint activeColl = _activePool.getStETH();\\n        uint liquidatedColl = defaultPool.getStETH();\\n        totalCollateralSnapshot = activeColl.sub(_collRemainder).add(\\n            liquidatedColl\\n        );\\n\\n        emit SystemSnapshotsUpdated(\\n            totalStakesSnapshot,\\n            totalCollateralSnapshot\\n        );\\n    }\\n\\n    // Push the owner's address to the Trove owners list, and record the corresponding array index on the Trove struct\\n    function addTroveOwnerToArray(\\n        address _borrower\\n    ) external returns (uint index) {\\n        _requireCallerIsBorrowerOperations();\\n        return _addTroveOwnerToArray(_borrower);\\n    }\\n\\n    function _addTroveOwnerToArray(\\n        address _borrower\\n    ) internal returns (uint128 index) {\\n        /* Max array size is 2**128 - 1, i.e. ~3e30 troves. No risk of overflow, since troves have minimum BaseFeeLMA\\n        debt of liquidation reserve plus MIN_NET_DEBT. 3e30 BaseFeeLMA dwarfs the value of all wealth in the world ( which is < 1e15 USD). */\\n\\n        // Push the Troveowner to the array\\n        TroveOwners.push(_borrower);\\n\\n        // Record the index of the new Troveowner on their Trove struct\\n        index = uint128(TroveOwners.length.sub(1));\\n        Troves[_borrower].arrayIndex = index;\\n\\n        return index;\\n    }\\n\\n    /*\\n     * Remove a Trove owner from the TroveOwners array, not preserving array order. Removing owner 'B' does the following:\\n     * [A B C D E] => [A E C D], and updates E's Trove struct to point to its new array index.\\n     */\\n    function _removeTroveOwner(\\n        address _borrower,\\n        uint TroveOwnersArrayLength\\n    ) internal {\\n        Status troveStatus = Troves[_borrower].status;\\n        // It\\u2019s set in caller function `_closeTrove`\\n        assert(\\n            troveStatus != Status.nonExistent && troveStatus != Status.active\\n        );\\n\\n        uint128 index = Troves[_borrower].arrayIndex;\\n        uint length = TroveOwnersArrayLength;\\n        uint idxLast = length.sub(1);\\n\\n        assert(index <= idxLast);\\n\\n        address addressToMove = TroveOwners[idxLast];\\n\\n        TroveOwners[index] = addressToMove;\\n        Troves[addressToMove].arrayIndex = index;\\n        emit TroveIndexUpdated(addressToMove, index);\\n\\n        TroveOwners.pop();\\n    }\\n\\n    // --- Recovery Mode and TCR functions ---\\n\\n    function getTCR(uint _price) external view returns (uint) {\\n        return _getTCR(_price);\\n    }\\n\\n    function getUnreliableTCR() external view returns (uint) {\\n        return _getTCR(priceFeed.lastGoodPrice());\\n    }\\n\\n    function checkRecoveryMode(uint _price) external view returns (bool) {\\n        return _checkRecoveryMode(_price);\\n    }\\n\\n    function checkUnreliableRecoveryMode() external view returns (bool) {\\n        return _checkRecoveryMode(priceFeed.lastGoodPrice());\\n    }\\n\\n    // Check whether or not the system *would be* in Recovery Mode, given an StETH:USD price, and the entire system coll and debt.\\n    function _checkPotentialRecoveryMode(\\n        uint _entireSystemColl,\\n        uint _entireSystemDebt,\\n        uint _price\\n    ) internal pure returns (bool) {\\n        uint TCR = LiquityMath._computeCR(\\n            _entireSystemColl,\\n            _entireSystemDebt,\\n            _price\\n        );\\n\\n        return TCR < CCR;\\n    }\\n\\n    // --- Redemption fee functions ---\\n\\n    /*\\n     * HEDGEHOG LOGIC UPDATES:\\n     * 1) Rename variable in docs (baseRate => redemptionBaseRate)\\n     * 2) decayedRemeptionBaseRate (decayedBaseRate) is now calculated by _calcDecayedRedemptionBaseRate();\\n     * 3) Updating RedemptionBaseRate state variable instead of baseRate\\n     * 4) Emiting RedemptionBaseRateUpdated instead of BaseRateUpdates();\\n     * 5) Now updates time only of redemeption operation instead of both redemption and borrow\\n     *\\n     * This function has two impacts on the redemptionBaseRate state variable:\\n     * 1) decays the redemptionBaseRate based on time passed since last redemption or BaseFeeLMA borrowing operation.\\n     * then,\\n     * 2) increases the redemptionBaseRate based on the amount redeemed, as a proportion of total supply\\n     */\\n    function _updateRedemptionBaseRateFromRedemption(\\n        uint _StETHDrawn,\\n        uint _price,\\n        uint _totalBaseFeeLMASupply\\n    ) internal returns (uint) {\\n        uint decayedRedemptionBaseRate = _calcDecayedRedemptionBaseRate();\\n        // Hedgehog updates: Now calculating what part of total collateral is getting withdrawn from the\\n        // system\\n        /* Convert the drawn StETH back to BaseFeeLMA at face value rate (1 BaseFeeLMA:1 USD), in order to get\\n         * the fraction of total supply that was redeemed at face value. */\\n        console.log(\\\"total coll: \\\", activePool.getStETH());\\n        uint redeemedBaseFeeLMAFraction = _StETHDrawn\\n            .mul(DECIMAL_PRECISION)\\n            .div(activePool.getStETH()); // TODO: Fix the error\\n\\n        // Hedgehog Updates: Remove division by BETA\\n        uint newBaseRate = decayedRedemptionBaseRate.add(\\n            redeemedBaseFeeLMAFraction\\n        );\\n        console.log(\\\"redeemed lma fraction\\\", redeemedBaseFeeLMAFraction);\\n        newBaseRate = LiquityMath._min(newBaseRate, DECIMAL_PRECISION); // cap baseRate at a maximum of 100%\\n        //assert(newBaseRate <= DECIMAL_PRECISION); // This is already enforced in the line above\\n        assert(newBaseRate > 0); // Base rate is always non-zero after redemption\\n\\n        // Update the baseRate state variable\\n        redemptionBaseRate = newBaseRate;\\n        emit RedemptionBaseRateUpdated(newBaseRate);\\n\\n        _updateLastRedemptionTime();\\n        return newBaseRate;\\n    }\\n\\n    /*\\n     * HEDGEHOG LOGIC UPDATES:\\n     * 1) Now passing redemptionBaseRate instead of combined baseRate\\n     */\\n    function getRedemptionRate(\\n        uint _redemptionColl\\n    ) public view returns (uint) {\\n        return _calcRedemptionRate(redemptionBaseRate, _redemptionColl);\\n    }\\n\\n    function getRedemptionRateWithDecay(\\n        uint _redemptionColl\\n    ) public view returns (uint) {\\n        return\\n            _calcRedemptionRate(\\n                _calcDecayedRedemptionBaseRate(),\\n                _redemptionColl\\n            );\\n    }\\n\\n    /*\\n     * HEDGEHOG UPDATES:\\n     * Redemption Rate formula now is: RedFloor + RedBaseRate*MinuteDecayFactorMinutes + RedemptionETH/TotalColl\\n     * 1) Rename param name (_baseRate => _redemptionBaseRate)\\n     * 2) Now redeemed collateral divided by total collateral in active pool is added to the sum of redemption floor and redeem base rate\\n     */\\n    function _calcRedemptionRate(\\n        uint _redemptionBaseRate,\\n        uint _redemptionColl\\n    ) internal view returns (uint) {\\n        console.log(\\\"Active Pool eth\\\", activePool.getStETH());\\n\\n        return\\n            LiquityMath._min(\\n                REDEMPTION_FEE_FLOOR.add(_redemptionBaseRate).add(\\n                    _redemptionColl.div(activePool.getStETH())\\n                ),\\n                DECIMAL_PRECISION // cap at a maximum of 100%\\n            );\\n    }\\n\\n    function _getRedemptionFee(uint _StETHDrawn) internal view returns (uint) {\\n        return _calcRedemptionFee(getRedemptionRate(_StETHDrawn), _StETHDrawn);\\n    }\\n\\n    function getRedemptionFeeWithDecay(\\n        uint _StETHDrawn\\n    ) external view returns (uint) {\\n        return\\n            _calcRedemptionFee(\\n                getRedemptionRateWithDecay(_StETHDrawn),\\n                _StETHDrawn\\n            );\\n    }\\n\\n    function _calcRedemptionFee(\\n        uint _redemptionRate,\\n        uint _StETHDrawn\\n    ) internal pure returns (uint) {\\n        uint redemptionFee = _redemptionRate.mul(_StETHDrawn).div(\\n            DECIMAL_PRECISION\\n        );\\n        require(\\n            redemptionFee < _StETHDrawn,\\n            \\\"TroveManager: Fee would eat up all returned collateral\\\"\\n        );\\n        return redemptionFee;\\n    }\\n\\n    // --- Borrowing fee functions ---\\n\\n    /*\\n     * HEDGEHOG LOGIC UPDATES:\\n     * 1) Now passing borrowBaseRate instead of combined baseRate\\n     */\\n    function getBorrowingRate(\\n        uint _issuedBaseFeeLMA\\n    ) public view returns (uint) {\\n        return _calcBorrowingRate(borrowBaseRate, _issuedBaseFeeLMA);\\n    }\\n\\n    /*\\n     * HEDGEHOG LOGIC UPDATES:\\n     * 1) Now passing _calcDecayedBorrowBaseRate instead of _calcDecayedBaseRate function to calculate the decayed borrowBaseRate\\n     */\\n    function getBorrowingRateWithDecay(\\n        uint _issuedBaseFeeLMA\\n    ) public view returns (uint) {\\n        return\\n            _calcBorrowingRate(\\n                _calcDecayedRedemptionBaseRate(),\\n                _issuedBaseFeeLMA\\n            );\\n    }\\n\\n    /*\\n     * HEDGEHOG UPDATES:\\n     * Now full dynamic fees formula is as follows: RedRate = RedFloor + RedBaseRate*MinuteDecayFactorMinutes + RedemptionETH / Total Collateral in the system\\n     * 1) Rename param name (_baseRate => _borrowBaseRate)\\n     * 2) Now adding issued asset divided by total supply of the asset to the sum of borrow flor and borrow decayed baseRate\\n     */\\n    function _calcBorrowingRate(\\n        uint _borrowBaseRate,\\n        uint _issuedBaseFeeLMA\\n    ) internal view returns (uint) {\\n        uint256 supply = baseFeeLMAToken.totalSupply();\\n        // Checking if there are tokens in supply, otherwise return 1 to avoid division by zero\\n        if (supply == 0) {\\n            return BORROWING_FEE_FLOOR;\\n        }\\n\\n        return\\n            LiquityMath._min(\\n                BORROWING_FEE_FLOOR.add(_borrowBaseRate).add(\\n                    _issuedBaseFeeLMA.mul(DECIMAL_PRECISION).div(supply)\\n                ),\\n                MAX_BORROWING_FEE\\n            );\\n    }\\n\\n    function getBorrowingFee(\\n        uint _BaseFeeLMADebt // TODO: Double check that it's only newly issues tokens and not the full debt\\n    ) external view returns (uint, uint) {\\n        uint baseRate = getBorrowingRate(_BaseFeeLMADebt);\\n        return (_calcBorrowingFee(baseRate, _BaseFeeLMADebt), baseRate);\\n    }\\n\\n    function getBorrowingFeeWithDecay(\\n        uint _BaseFeeLMADebt\\n    ) external view returns (uint) {\\n        return\\n            _calcBorrowingFee(\\n                getBorrowingRateWithDecay(_BaseFeeLMADebt),\\n                _BaseFeeLMADebt\\n            );\\n    }\\n\\n    /**\\n     * HEDGEHOG UPDATES:\\n     * TODO: _BaseFeeLMADebt.div(baseFeeLMAToken.totalSupply()) is going to return 0, so have to adjust such calculations\\n     */\\n    function _calcBorrowingFee(\\n        uint _borrowingRate,\\n        uint _BaseFeeLMADebt // TODO: Check that it's not total but newly issues tokens\\n    ) internal pure returns (uint) {\\n        return _borrowingRate.mul(_BaseFeeLMADebt).div(DECIMAL_PRECISION);\\n    }\\n\\n    function updateBaseRateFromBorrowing(uint _newBaseRate) external {\\n        require(\\n            msg.sender == borrowerOperationsAddress,\\n            \\\"TroveManager: Only Borrower operations may call\\\"\\n        );\\n        if (_newBaseRate >= BORROWING_FEE_FLOOR) {\\n            borrowBaseRate = _newBaseRate - BORROWING_FEE_FLOOR;\\n        } else {\\n            borrowBaseRate = 0;\\n        }\\n\\n        emit BorrowBaseRateUpdated(_newBaseRate);\\n    }\\n\\n    /*\\n     * HEDGEHOG LOGIC UPDATES:\\n     * 1) Now updates borrowBaseRate instead of baseRate used by both redemption and minting functions\\n     * 2) Emit BorrowBaseRateUpdated instead of BaseRateUpdated\\n     * 3) Now updates time only of borrow operation instead of both redemption and borrow\\n     * 4) Update doc variable name baseRate => borrowBaseRate\\n     */\\n    // Updates the borrowBaseRate state variable based on time elapsed since the last redemption or BaseFeeLMA borrowing operation.\\n    function decayBaseRateFromBorrowing() external {\\n        _requireCallerIsBorrowerOperations();\\n        console.log(\\\"BASE RATE BEFORE DECAY: \\\", borrowBaseRate);\\n        uint decayedBaseRate = _calcDecayedBorrowBaseRate();\\n        assert(decayedBaseRate <= DECIMAL_PRECISION); // The baseRate can decay to 0\\n        // HEDGEHOG LOGIC CHANGES: Updating borrowing base rate instead\\n        borrowBaseRate = decayedBaseRate;\\n        console.log(\\\"BASE RATE AFTER DECAY: \\\", borrowBaseRate);\\n\\n        emit BorrowBaseRateUpdated(decayedBaseRate);\\n\\n        _updateLastBorrowTime();\\n    }\\n\\n    // --- Internal fee functions ---\\n\\n    /*\\n     * HEDGEHOG LOGIC UPDATES:\\n     * removed _updateLastFeeOpTime\\n     * New function _updateLastRedemptionTime simmilar to _updateLastFeeOpTime, that sets lastRedemptionTime and emits respective event.\\n     */\\n    // Update the last fee operation time only if time passed >= decay interval. This prevents base rate griefing.\\n    function _updateLastRedemptionTime() internal {\\n        uint timePassed = block.timestamp.sub(lastRedemptionTime);\\n\\n        if (timePassed >= SECONDS_IN_ONE_MINUTE) {\\n            lastRedemptionTime = block.timestamp;\\n            emit LastRedemptionTimeUpdated(block.timestamp);\\n        }\\n    }\\n\\n    /*\\n     * HEDGEHOG LOGIC UPDATES:\\n     * removed _updateLastFeeOpTime\\n     * New function _updateLastBorrowTime simmilar to _updateLastFeeOpTime, that sets lastBorrowTime and emits respective event.\\n     */\\n    // Update the last fee operation time only if time passed >= decay interval. This prevents base rate griefing.\\n    function _updateLastBorrowTime() internal {\\n        uint timePassed = block.timestamp.sub(lastBorrowTime);\\n\\n        if (timePassed >= SECONDS_IN_ONE_MINUTE) {\\n            lastBorrowTime = block.timestamp;\\n            emit LastBorrowTimeUpdated(block.timestamp);\\n        }\\n    }\\n\\n    /*\\n     * HEDGEHOG LOGIC UPDATES:\\n     * New function simmilar to _calcDecayedBaseRate. However used particularly for redemptionBaseRate calculation\\n     */\\n    function _calcDecayedRedemptionBaseRate() internal view returns (uint) {\\n        uint minutesPassed = _minutesPassedSinceLastRedemption();\\n\\n        uint decayFactor = LiquityMath._decPow(\\n            MINUTE_DECAY_REDEMPTION_FACTOR,\\n            minutesPassed\\n        );\\n\\n        return redemptionBaseRate.mul(decayFactor).div(DECIMAL_PRECISION);\\n    }\\n\\n    /*\\n     * HEDGEHOG LOGIC UPDATES:\\n     * New function simmilar to _calcDecayedBaseRate. However used particularly for borrowBaseRate calculation\\n     */\\n    function _calcDecayedBorrowBaseRate() internal view returns (uint) {\\n        uint minutesPassed = _minutesPassedSinceLastBorrow();\\n        uint decayFactor = LiquityMath._decPow(\\n            MINUTE_DECAY_BORROWING_FACTOR,\\n            minutesPassed\\n        );\\n\\n        console.log(\\\"minutes passed: \\\", minutesPassed);\\n        return borrowBaseRate.mul(decayFactor).div(DECIMAL_PRECISION);\\n    }\\n\\n    /*\\n     * HEDGEHOG LOGIC UPDATES:\\n     * removed _minutesPassedSinceLastFeeOp\\n     * New function _minutesPassedSinceLastRedemption simmilar to _minutesPassedSinceLastFeeOp, that returns amount of minutes since last registered redemption\\n     */\\n    function _minutesPassedSinceLastRedemption() internal view returns (uint) {\\n        return\\n            (block.timestamp.sub(lastRedemptionTime)).div(\\n                SECONDS_IN_ONE_MINUTE\\n            );\\n    }\\n\\n    /*\\n     * HEDGEHOG LOGIC UPDATES:\\n     * removed _minutesPassedSinceLastFeeOp\\n     * New function _minutesPassedSinceLastBorrow simmilar to _minutesPassedSinceLastFeeOp, that returns amount of minutes since last registered borrow\\n     */\\n    function _minutesPassedSinceLastBorrow() internal view returns (uint) {\\n        return (block.timestamp.sub(lastBorrowTime)).div(SECONDS_IN_ONE_MINUTE);\\n    }\\n\\n    // --- 'require' wrapper functions ---\\n\\n    function _requireCallerIsBorrowerOperations() internal view {\\n        require(\\n            msg.sender == borrowerOperationsAddress,\\n            \\\"TroveManager: Caller is not the BorrowerOperations contract\\\"\\n        );\\n    }\\n\\n    function _requireTroveIsActive(address _borrower) internal view {\\n        require(\\n            Troves[_borrower].status == Status.active,\\n            \\\"TroveManager: Trove does not exist or is closed\\\"\\n        );\\n    }\\n\\n    function _requireBaseFeeLMABalanceCoversRedemption(\\n        IBaseFeeLMAToken _baseFeeLMAToken,\\n        address _redeemer,\\n        uint _amount\\n    ) internal view {\\n        require(\\n            _baseFeeLMAToken.balanceOf(_redeemer) >= _amount,\\n            \\\"TroveManager: Requested redemption amount must be <= user's BaseFeeLMA token balance\\\"\\n        );\\n    }\\n\\n    function _requireMoreThanOneTroveInSystem(\\n        uint TroveOwnersArrayLength\\n    ) internal view {\\n        require(\\n            TroveOwnersArrayLength > 1 && sortedTroves.getSize() > 1,\\n            \\\"TroveManager: Only one trove in the system\\\"\\n        );\\n    }\\n\\n    function _requireAmountGreaterThanZero(uint _amount) internal pure {\\n        require(_amount > 0, \\\"TroveManager: Amount must be greater than zero\\\");\\n    }\\n\\n    function _requireTCRoverMCR(uint _price) internal view {\\n        require(\\n            _getTCR(_price) >= MCR,\\n            \\\"TroveManager: Cannot redeem when TCR < MCR\\\"\\n        );\\n    }\\n\\n    function _requireAfterBootstrapPeriod() internal view {\\n        uint systemDeploymentTime = hogToken.getDeploymentStartTime();\\n        require(\\n            block.timestamp >= systemDeploymentTime.add(BOOTSTRAP_PERIOD),\\n            \\\"TroveManager: Redemptions are not allowed during bootstrap phase\\\"\\n        );\\n    }\\n\\n    function _requireValidMaxFeePercentage(\\n        uint _maxFeePercentage\\n    ) internal pure {\\n        require(\\n            _maxFeePercentage >= REDEMPTION_FEE_FLOOR &&\\n                _maxFeePercentage <= DECIMAL_PRECISION,\\n            \\\"Max fee percentage must be between 0.5% and 100%\\\"\\n        );\\n    }\\n\\n    // --- Trove property getters ---\\n\\n    function getTroveStatus(address _borrower) external view returns (uint) {\\n        return uint(Troves[_borrower].status);\\n    }\\n\\n    function getTroveStake(address _borrower) external view returns (uint) {\\n        return Troves[_borrower].stake;\\n    }\\n\\n    function getTroveDebt(address _borrower) external view returns (uint) {\\n        return Troves[_borrower].debt;\\n    }\\n\\n    function getTroveColl(address _borrower) external view returns (uint) {\\n        return Troves[_borrower].coll;\\n    }\\n\\n    // --- Trove property setters, called by BorrowerOperations ---\\n\\n    function setTroveStatus(address _borrower, uint _num) external {\\n        _requireCallerIsBorrowerOperations();\\n        Troves[_borrower].status = Status(_num);\\n    }\\n\\n    function increaseTroveColl(\\n        address _borrower,\\n        uint _collIncrease\\n    ) external returns (uint) {\\n        _requireCallerIsBorrowerOperations();\\n        uint newColl = Troves[_borrower].coll.add(_collIncrease);\\n        Troves[_borrower].coll = newColl;\\n        return newColl;\\n    }\\n\\n    function decreaseTroveColl(\\n        address _borrower,\\n        uint _collDecrease\\n    ) external returns (uint) {\\n        _requireCallerIsBorrowerOperations();\\n        uint newColl = Troves[_borrower].coll.sub(_collDecrease);\\n        Troves[_borrower].coll = newColl;\\n        return newColl;\\n    }\\n\\n    function increaseTroveDebt(\\n        address _borrower,\\n        uint _debtIncrease\\n    ) external returns (uint) {\\n        _requireCallerIsBorrowerOperations();\\n        uint newDebt = Troves[_borrower].debt.add(_debtIncrease);\\n        Troves[_borrower].debt = newDebt;\\n        return newDebt;\\n    }\\n\\n    function decreaseTroveDebt(\\n        address _borrower,\\n        uint _debtDecrease\\n    ) external returns (uint) {\\n        _requireCallerIsBorrowerOperations();\\n        uint newDebt = Troves[_borrower].debt.sub(_debtDecrease);\\n        Troves[_borrower].debt = newDebt;\\n        return newDebt;\\n    }\\n\\n    function getNormalLiquidationPrice(\\n        uint256 _coll,\\n        uint256 _debt\\n    ) external pure returns (uint256) {\\n        uint256 price = LiquityMath._findPriceBelowMCR(\\n            _coll,\\n            _debt,\\n            20,\\n            HedgehogBase.MCR\\n        );\\n        return price;\\n    }\\n\\n    function getRecoveryLiquidationPrice(\\n        uint256 _coll,\\n        uint256 _debt\\n    ) external pure returns (uint256) {\\n        uint256 price = LiquityMath._findPriceBelowMCR(\\n            _coll,\\n            _debt,\\n            20,\\n            HedgehogBase._100pct\\n        );\\n        return price;\\n    }\\n}\\n\",\"keccak256\":\"0x7f5f8cf0f9871f7de3cf887aec839504bcf35410d13a60c435c712b86b751a85\",\"license\":\"MIT\"},\"contracts/dependencies/BaseMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\ncontract BaseMath {\\n    uint public constant DECIMAL_PRECISION = 1e18;\\n}\\n\",\"keccak256\":\"0x5338502be04e32035bbf0310600c8724281edc81b312f5d89c683b23d0bb3fa7\",\"license\":\"MIT\"},\"contracts/dependencies/CheckContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\ncontract CheckContract {\\n    /**\\n     * Check that the account is an already deployed non-destroyed contract.\\n     * See: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol#L12\\n     */\\n    function checkContract(address _account) internal view {\\n        require(_account != address(0), \\\"Account cannot be zero address\\\");\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(_account)\\n        }\\n        require(size > 0, \\\"Account code size cannot be zero\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x4860bce12806bb81c1e91ec617f2f95dd1774148b15645eaca94a67220096f2f\",\"license\":\"MIT\"},\"contracts/dependencies/HedgehogBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./BaseMath.sol\\\";\\nimport \\\"./LiquityMath.sol\\\";\\nimport \\\"../interfaces/IActivePool.sol\\\";\\nimport \\\"../interfaces/IDefaultPool.sol\\\";\\nimport \\\"../interfaces/IPriceFeed.sol\\\";\\nimport \\\"../interfaces/IHedgehogBase.sol\\\";\\n\\n/**\\n * @notice Fork of LiquityMath with an upgraded pragma and:\\n * [ - Get OZ contracts from a package\\n * TODO: List changes to HedgehogBase File and variables ]\\n * Base contract for TroveManager, BorrowerOperations and StabilityPool. Contains global system constants and\\n * common functions.\\n */\\ncontract HedgehogBase is BaseMath, IHedgehogBase {\\n    using SafeMath for uint;\\n\\n    uint public constant _100pct = 1000000000000000000; // 1e18 == 100%\\n\\n    // Minimum collateral ratio for individual troves\\n    uint public constant MCR = 1500000000000000000; // 150%\\n\\n    // Critical system collateral ratio. If the system's total collateral ratio (TCR) falls below the CCR, Recovery Mode is triggered.\\n    uint public constant CCR = 1500000000000000000; // 150%\\n\\n    // Amount of BaseFeeLMA to be locked in gas pool on opening troves\\n    uint public constant BaseFeeLMA_GAS_COMPENSATION = 50000;\\n\\n    // Minimum amount of net BaseFeeLMA debt a trove must have\\n    uint public constant MIN_NET_DEBT = 1; // TODO: Update that value\\n    // uint constant public MIN_NET_DEBT = 0;\\n\\n    uint public constant PERCENT_DIVISOR = 200; // dividing by 200 yields 0.5%\\n\\n    uint public constant BORROWING_FEE_FLOOR = (DECIMAL_PRECISION / 1000) * 5; // 0.5%\\n\\n    IActivePool public activePool;\\n\\n    IDefaultPool public defaultPool;\\n\\n    IPriceFeed public override priceFeed;\\n\\n    // --- Gas compensation functions ---\\n\\n    // Returns the composite debt (drawn debt + gas compensation) of a trove, for the purpose of ICR calculation\\n    function _getCompositeDebt(uint _debt) internal pure returns (uint) {\\n        return _debt.add(BaseFeeLMA_GAS_COMPENSATION);\\n    }\\n\\n    function _getNetDebt(uint _debt) internal pure returns (uint) {\\n        return _debt.sub(BaseFeeLMA_GAS_COMPENSATION);\\n    }\\n\\n    // Return the amount of StETH to be drawn from a trove's collateral and sent as gas compensation.\\n    function _getCollGasCompensation(\\n        uint _entireColl\\n    ) internal pure returns (uint) {\\n        return _entireColl / PERCENT_DIVISOR;\\n    }\\n\\n    function getEntireSystemColl() public view returns (uint entireSystemColl) {\\n        uint activeColl = activePool.getStETH();\\n        uint liquidatedColl = defaultPool.getStETH();\\n\\n        return activeColl.add(liquidatedColl);\\n    }\\n\\n    function getEntireSystemDebt() public view returns (uint entireSystemDebt) {\\n        uint activeDebt = activePool.getBaseFeeLMADebt();\\n        uint closedDebt = defaultPool.getBaseFeeLMADebt();\\n\\n        return activeDebt.add(closedDebt);\\n    }\\n\\n    function _getTCR(uint _price) internal view returns (uint TCR) {\\n        uint entireSystemColl = getEntireSystemColl();\\n        uint entireSystemDebt = getEntireSystemDebt();\\n\\n        TCR = LiquityMath._computeCR(\\n            entireSystemColl,\\n            entireSystemDebt,\\n            _price\\n        );\\n\\n        return TCR;\\n    }\\n\\n    function _checkRecoveryMode(uint _price) internal view returns (bool) {\\n        uint TCR = _getTCR(_price);\\n\\n        return TCR < CCR;\\n    }\\n\\n    function _requireUserAcceptsFee(\\n        uint _fee,\\n        uint _amount,\\n        uint _maxFeePercentage\\n    ) internal pure {\\n        uint feePercentage = _fee.mul(DECIMAL_PRECISION).div(_amount);\\n        require(\\n            feePercentage <= _maxFeePercentage,\\n            \\\"Fee exceeded provided maximum\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x373f3553e8478dcf863a67b71f0d09b096eca1a6700dff94d86c6c0253fbd787\",\"license\":\"MIT\"},\"contracts/dependencies/IERC2612.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @dev Interface of the ERC2612 standard as defined in the EIP.\\n *\\n * Adds the {permit} method, which can be used to change one's\\n * {IERC20-allowance} without having to send a transaction, by signing a\\n * message. This allows users to spend tokens without having to hold StETH.\\n *\\n * See https://eips.stETHeum.org/EIPS/eip-2612.\\n *\\n * Code adapted from https://github.com/OpenZeppelin/openzeppelin-contracts/pull/2237/\\n */\\ninterface IERC2612 {\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over `owner`'s tokens,\\n     * given `owner`'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.stETHeum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current ERC2612 nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases `owner`'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     *\\n     * `owner` can limit the time a Permit is valid for by setting `deadline` to\\n     * a value in the near future. The deadline argument can be set to uint(-1) to\\n     * create Permits that effectively never expire.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function version() external view returns (string memory);\\n\\n    function permitTypeHash() external view returns (bytes32);\\n\\n    function domainSeparator() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xd862d70e8c9d8f912e73151567a70f47f3a7e52c9ec766ccc4e02f87bd0d32b9\",\"license\":\"MIT\"},\"contracts/dependencies/LiquityMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\n/**\\n * @notice A fork of Liquity Math library with an upgraded pragma\\n *\\n * Even though SafeMath is no longer required, the decision was made to keep it to avoid human factor errors\\n */\\n\\nlibrary LiquityMath {\\n    using SafeMath for uint;\\n\\n    uint internal constant DECIMAL_PRECISION = 1e18;\\n\\n    /* Precision for Nominal ICR (independent of price). Rationale for the value:\\n     *\\n     * - Making it \\u201ctoo high\\u201d could lead to overflows.\\n     * - Making it \\u201ctoo low\\u201d could lead to an ICR equal to zero, due to truncation from Solidity floor division.\\n     *\\n     * This value of 1e20 is chosen for safety: the NICR will only overflow for numerator > ~1e39 StETH,\\n     * and will only truncate to 0 if the denominator is at least 1e20 times greater than the numerator.\\n     *\\n     */\\n    uint internal constant NICR_PRECISION = 1e20;\\n\\n    function _min(uint _a, uint _b) internal pure returns (uint) {\\n        return (_a < _b) ? _a : _b;\\n    }\\n\\n    function _max(uint _a, uint _b) internal pure returns (uint) {\\n        return (_a >= _b) ? _a : _b;\\n    }\\n\\n    /*\\n     * Multiply two decimal numbers and use normal rounding rules:\\n     * -round product up if 19'th mantissa digit >= 5\\n     * -round product down if 19'th mantissa digit < 5\\n     *\\n     * Used only inside the exponentiation, _decPow().\\n     */\\n    function decMul(uint x, uint y) internal pure returns (uint decProd) {\\n        uint prod_xy = x.mul(y);\\n\\n        decProd = prod_xy.add(DECIMAL_PRECISION / 2).div(DECIMAL_PRECISION);\\n    }\\n\\n    /*\\n     * _decPow: Exponentiation function for 18-digit decimal base, and integer exponent n.\\n     *\\n     * Uses the efficient \\\"exponentiation by squaring\\\" algorithm. O(log(n)) complexity.\\n     *\\n     * Called by two functions that represent time in units of minutes:\\n     * 1) TroveManager._calcDecayedBaseRate\\n     * 2) CommunityIssuance._getCumulativeIssuanceFraction\\n     *\\n     * The exponent is capped to avoid reverting due to overflow. The cap 525600000 equals\\n     * \\\"minutes in 1000 years\\\": 60 * 24 * 365 * 1000\\n     *\\n     * If a period of > 1000 years is ever used as an exponent in either of the above functions, the result will be\\n     * negligibly different from just passing the cap, since:\\n     *\\n     * In function 1), the decayed base rate will be 0 for 1000 years or > 1000 years\\n     * In function 2), the difference in tokens issued at 1000 years and any time > 1000 years, will be negligible\\n     */\\n    function _decPow(uint _base, uint _minutes) internal pure returns (uint) {\\n        if (_minutes > 525600000) {\\n            _minutes = 525600000;\\n        } // cap to avoid overflow\\n\\n        if (_minutes == 0) {\\n            return DECIMAL_PRECISION;\\n        }\\n\\n        uint y = DECIMAL_PRECISION;\\n        uint x = _base;\\n        uint n = _minutes;\\n\\n        // Exponentiation-by-squaring\\n        while (n > 1) {\\n            if (n % 2 == 0) {\\n                x = decMul(x, x);\\n                n = n.div(2);\\n            } else {\\n                // if (n % 2 != 0)\\n                y = decMul(x, y);\\n                x = decMul(x, x);\\n                n = (n.sub(1)).div(2);\\n            }\\n        }\\n\\n        return decMul(x, y);\\n    }\\n\\n    function _getAbsoluteDifference(\\n        uint _a,\\n        uint _b\\n    ) internal pure returns (uint) {\\n        return (_a >= _b) ? _a.sub(_b) : _b.sub(_a);\\n    }\\n\\n    function _computeNominalCR(\\n        uint _coll,\\n        uint _debt\\n    ) internal pure returns (uint) {\\n        if (_debt > 0) {\\n            return _coll.mul(NICR_PRECISION).div(_debt);\\n        }\\n        // Return the maximal value for uint256 if the Trove has a debt of 0. Represents \\\"infinite\\\" CR.\\n        else {\\n            // if (_debt == 0)\\n            return 2 ** 256 - 1;\\n        }\\n    }\\n\\n    /**\\n     * HEDGEHOG UPDATES:\\n     * Change coll ration calculation from [coll] * [price] / [debt] to\\n     * [coll] / [debt] / [gasPrice]\\n     */\\n    function _computeCR(\\n        uint _coll,\\n        uint _debt,\\n        uint _price\\n    ) internal pure returns (uint) {\\n        if (_debt > 0) {\\n            // TODO: Check precision\\n            uint newCollRatio = _coll.mul(DECIMAL_PRECISION).div(_debt).div(\\n                _price\\n            );\\n            console.log(_coll);\\n            console.log(_debt);\\n            console.log(newCollRatio);\\n            return newCollRatio;\\n        }\\n        // Return the maximal value for uint256 if the Trove has a debt of 0. Represents \\\"infinite\\\" CR.\\n        else {\\n            // if (_debt == 0)\\n            return 2 ** 256 - 1;\\n        }\\n    }\\n\\n    function _findPriceBelowMCR(\\n        uint256 _coll,\\n        uint256 _debt,\\n        uint256 _startPrice,\\n        uint _mcr\\n    ) internal pure returns (uint256) {\\n        uint256 step = 1; // Starting with the smallest step size\\n        uint256 GWEI = 10 ** 9;\\n        uint256 previousPrice = _startPrice * GWEI; // To track previous iteration's price\\n\\n        for (\\n            uint256 price = _startPrice * GWEI;\\n            price <= 750 * GWEI;\\n            price += step\\n        ) {\\n            uint256 cr = _computeCR(_coll, _debt, price);\\n\\n            if (cr < _mcr) {\\n                // Start decreasing the price to find the exact threshold\\n                for (\\n                    uint256 decreasedPrice = previousPrice;\\n                    decreasedPrice <= price &&\\n                        decreasedPrice >= _startPrice * GWEI; // Added protection against underflow\\n                    decreasedPrice -= GWEI\\n                ) {\\n                    if (_computeCR(_coll, _debt, decreasedPrice) < _mcr) {\\n                        return decreasedPrice;\\n                    }\\n                }\\n            }\\n\\n            // Dynamically adjust step size\\n            if (cr < (_mcr - 200000000000000000)) {\\n                step = 20 * GWEI; // Increase step size if CR is much lower than MCR\\n            } else if (cr > (_mcr + 50000000000000000)) {\\n                step = GWEI; // Decrease step size if CR is much higher than MCR\\n            }\\n\\n            previousPrice = price; // Update previous price for the next iteration\\n        }\\n\\n        return 0; // return 0 if no price was found that brings the CR below MCR\\n    }\\n}\\n\",\"keccak256\":\"0x6b3f2d4905b380d7366402e4b7c5bad45026a5b080cbc835b481077ad3a458e5\",\"license\":\"MIT\"},\"contracts/interfaces/IActivePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./IPool.sol\\\";\\n\\ninterface IActivePool is IPool {\\n    // --- Events ---\\n    event BorrowerOperationsAddressChanged(\\n        address _newBorrowerOperationsAddress\\n    );\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event ActivePoolBaseFeeLMADebtUpdated(uint _BaseFeeLMADebt);\\n    event ActivePoolStETHBalanceUpdated(uint _StETH);\\n\\n    // --- Functions ---\\n    function sendStETH(address _account, uint _amount) external;\\n\\n    function getStETH() external view returns (uint256);\\n\\n    function increaseBalance(uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x2750510caa258ed427582dcbc994400b837c5ddd0974c7a122c8265a37672d5a\",\"license\":\"MIT\"},\"contracts/interfaces/IBaseFeeLMAToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../dependencies/IERC2612.sol\\\";\\n\\ninterface IBaseFeeLMAToken is IERC20, IERC2612 {\\n    // --- Events ---\\n\\n    event TroveManagerAddressChanged(address _troveManagerAddress);\\n    event StabilityPoolAddressChanged(address _newStabilityPoolAddress);\\n    event BorrowerOperationsAddressChanged(\\n        address _newBorrowerOperationsAddress\\n    );\\n\\n    event BaseFeeLMATokenBalanceUpdated(address _user, uint _amount);\\n\\n    // --- Functions ---\\n\\n    function mint(address _account, uint256 _amount) external;\\n\\n    function burn(address _account, uint256 _amount) external;\\n\\n    function sendToPool(\\n        address _sender,\\n        address poolAddress,\\n        uint256 _amount\\n    ) external;\\n\\n    function returnFromPool(\\n        address poolAddress,\\n        address user,\\n        uint256 _amount\\n    ) external;\\n\\n    function totalSupply() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x4f46da70de4bab049b8e24afec10e5308ab86fbbfb77f2314c1607ff8e77a4d2\",\"license\":\"MIT\"},\"contracts/interfaces/IBorrowerOperations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\n// Common interface for the Trove Manager.\\ninterface IBorrowerOperations {\\n    // --- Events ---\\n\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event ActivePoolAddressChanged(address _activePoolAddress);\\n    event DefaultPoolAddressChanged(address _defaultPoolAddress);\\n    event StabilityPoolAddressChanged(address _stabilityPoolAddress);\\n    event GasPoolAddressChanged(address _gasPoolAddress);\\n    event CollSurplusPoolAddressChanged(address _collSurplusPoolAddress);\\n    event PriceFeedAddressChanged(address _newPriceFeedAddress);\\n    event SortedTrovesAddressChanged(address _sortedTrovesAddress);\\n    event BaseFeeLMATokenAddressChanged(address _baseFeeLMATokenAddress);\\n    event HOGStakingAddressChanged(address _hogStakingAddress);\\n\\n    event TroveCreated(address indexed _borrower, uint arrayIndex);\\n    event TroveUpdated(\\n        address indexed _borrower,\\n        uint _debt,\\n        uint _coll,\\n        uint stake,\\n        uint8 operation\\n    );\\n    event BaseFeeLMABorrowingFeePaid(\\n        address indexed _borrower,\\n        uint _BaseFeeLMAFee\\n    );\\n\\n    // --- Functions ---\\n\\n    function setAddresses(\\n        address _troveManagerAddress,\\n        address _activePoolAddress,\\n        address _defaultPoolAddress,\\n        address _stabilityPoolAddress,\\n        address _gasPoolAddress,\\n        address _collSurplusPoolAddress,\\n        address _priceFeedAddress,\\n        address _sortedTrovesAddress,\\n        address _baseFeeLMATokenAddress,\\n        address _hogStakingAddress\\n    ) external;\\n\\n    function openTrove(\\n        uint _maxFee,\\n        uint _BaseFeeLMAAmount,\\n        uint _collAmount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external;\\n\\n    function addColl(\\n        address _upperHint,\\n        address _lowerHint,\\n        uint _amount\\n    ) external;\\n\\n    function moveStETHGainToTrove(\\n        address _user,\\n        address _upperHint,\\n        address _lowerHint,\\n        uint _amount\\n    ) external;\\n\\n    function withdrawColl(\\n        uint _amount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external;\\n\\n    function withdrawBaseFeeLMA(\\n        uint _maxFee,\\n        uint _amount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external;\\n\\n    function repayBaseFeeLMA(\\n        uint _amount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external;\\n\\n    function closeTrove() external;\\n\\n    function adjustTrove(\\n        uint _maxFee,\\n        uint _collWithdrawal,\\n        uint _collIncrease,\\n        uint _debtChange,\\n        bool isDebtIncrease,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external;\\n\\n    function claimCollateral() external;\\n\\n    function getCompositeDebt(uint _debt) external pure returns (uint);\\n}\\n\",\"keccak256\":\"0xc267f577164887dce6a8f4fef3eb2301d2a401cc723f0d06ee66b9b72f5b0e90\",\"license\":\"MIT\"},\"contracts/interfaces/ICollSurplusPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\ninterface ICollSurplusPool {\\n    // --- Events ---\\n\\n    event BorrowerOperationsAddressChanged(\\n        address _newBorrowerOperationsAddress\\n    );\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event ActivePoolAddressChanged(address _newActivePoolAddress);\\n\\n    event CollBalanceUpdated(address indexed _account, uint _newBalance);\\n    event StETHSent(address _to, uint _amount);\\n\\n    // --- Contract setters ---\\n\\n    function setAddresses(\\n        address _borrowerOperationsAddress,\\n        address _troveManagerAddress,\\n        address _activePoolAddress\\n    ) external;\\n\\n    function getStETH() external view returns (uint);\\n\\n    function getCollateral(address _account) external view returns (uint);\\n\\n    function accountSurplus(address _account, uint _amount) external;\\n\\n    function claimColl(address _account) external;\\n}\\n\",\"keccak256\":\"0x9251089c900a0871d73a021fc7e16239cbcc9702a0875ae916c748ba636be09e\",\"license\":\"MIT\"},\"contracts/interfaces/IDefaultPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./IPool.sol\\\";\\n\\ninterface IDefaultPool is IPool {\\n    // --- Events ---\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event DefaultPoolBaseFeeLMADebtUpdated(uint _BaseFeeLMADebt);\\n    event DefaultPoolStETHBalanceUpdated(uint _StETH);\\n\\n    // --- Functions ---\\n    function sendStETHToActivePool(uint _amount) external;\\n}\\n\",\"keccak256\":\"0x978b1d254b1ef5473bad5530d42a8786083044682b3a3f99df87a4b48a90e42b\",\"license\":\"MIT\"},\"contracts/interfaces/IHOGStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\ninterface IHOGStaking {\\n    // --- Events --\\n\\n    event HOGTokenAddressSet(address _hogTokenAddress);\\n    event BaseFeeLMATokenAddressSet(address _baseFeeLMATokenAddress);\\n    event TroveManagerAddressSet(address _troveManager);\\n    event BorrowerOperationsAddressSet(address _borrowerOperationsAddress);\\n    event ActivePoolAddressSet(address _activePoolAddress);\\n\\n    event StakeChanged(address indexed staker, uint newStake);\\n    event StakingGainsWithdrawn(\\n        address indexed staker,\\n        uint BaseFeeLMAGain,\\n        uint StETHGain\\n    );\\n    event F_StETHUpdated(uint _F_StETH);\\n    event F_BaseFeeLMAUpdated(uint _F_BaseFeeLMA);\\n    event TotalHOGStakedUpdated(uint _totalHOGStaked);\\n    event StETHSent(address _account, uint _amount);\\n    event StakerSnapshotsUpdated(\\n        address _staker,\\n        uint _F_StETH,\\n        uint _F_BaseFeeLMA\\n    );\\n\\n    // --- Functions ---\\n\\n    function setAddresses(\\n        address _hogTokenAddress,\\n        address _baseFeeLMATokenAddress,\\n        address _troveManagerAddress,\\n        address _borrowerOperationsAddress,\\n        address _activePoolAddress\\n    ) external;\\n\\n    function stake(uint _HOGamount) external;\\n\\n    function unstake(uint _HOGamount) external;\\n\\n    function increaseF_StETH(uint _StETHFee) external;\\n\\n    function increaseF_BaseFeeLMA(uint _HOGFee) external;\\n\\n    function getPendingStETHGain(address _user) external view returns (uint);\\n\\n    function getPendingBaseFeeLMAGain(\\n        address _user\\n    ) external view returns (uint);\\n}\\n\",\"keccak256\":\"0x13e4a173500e5e3f5645d39df65bad38ba953e7438a9cd3fd170b928d0264926\",\"license\":\"MIT\"},\"contracts/interfaces/IHOGToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../dependencies/IERC2612.sol\\\";\\n\\ninterface IHOGToken is IERC20, IERC2612 {\\n    // --- Events ---\\n\\n    event CommunityIssuanceAddressSet(address _communityIssuanceAddress);\\n    event HOGStakingAddressSet(address _hogStakingAddress);\\n    event LockupContractFactoryAddressSet(\\n        address _lockupContractFactoryAddress\\n    );\\n\\n    // --- Functions ---\\n\\n    function sendToHOGStaking(address _sender, uint256 _amount) external;\\n\\n    function getDeploymentStartTime() external view returns (uint256);\\n\\n    function getLpRewardsEntitlement() external view returns (uint256);\\n\\n    function increaseAllowance(\\n        address _spender,\\n        uint256 _addedValues\\n    ) external returns (bool);\\n\\n    function decreaseAllowance(\\n        address _spender,\\n        uint256 _decreasedValue\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x2c56d03787067551d0947fc59ba84d41d4163856163557d5e59c023552d99f04\",\"license\":\"MIT\"},\"contracts/interfaces/IHedgehogBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./IPriceFeed.sol\\\";\\n\\ninterface IHedgehogBase {\\n    function priceFeed() external view returns (IPriceFeed);\\n}\\n\",\"keccak256\":\"0x9832f1daa908607df4b572f561b27463d7fc4eb27847a26b1c399c2ee6ee6110\",\"license\":\"MIT\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\n// Common interface for the Pools.\\ninterface IPool {\\n    // --- Events ---\\n\\n    event StETHBalanceUpdated(uint _newBalance);\\n    event BaseFeeLMABalanceUpdated(uint _newBalance);\\n    event ActivePoolAddressChanged(address _newActivePoolAddress);\\n    event DefaultPoolAddressChanged(address _newDefaultPoolAddress);\\n    event StabilityPoolAddressChanged(address _newStabilityPoolAddress);\\n    event StETHSent(address _to, uint _amount);\\n\\n    // --- Functions ---\\n\\n    function getStETH() external view returns (uint);\\n\\n    function getBaseFeeLMADebt() external view returns (uint);\\n\\n    function increaseBaseFeeLMADebt(uint _amount) external;\\n\\n    function decreaseBaseFeeLMADebt(uint _amount) external;\\n\\n    // function increaseCollCountInPool(uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0xf2a64f0723f44525f25e56cc6b421542b5a9da52b33e4e490e4e41f7f98cd52b\",\"license\":\"MIT\"},\"contracts/interfaces/IPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\ninterface IPriceFeed {\\n    // --- Events ---\\n    event LastGoodPriceUpdated(uint _lastGoodPrice);\\n\\n    // --- Function ---\\n    function fetchPrice() external returns (uint);\\n\\n    function lastGoodPrice() external view returns (uint);\\n}\\n\",\"keccak256\":\"0xdee620e51756443b2cdd8ac54df2e6d7b38f700a9d1a3cc4d1a2f31ce09bbd1e\",\"license\":\"MIT\"},\"contracts/interfaces/ISortedTroves.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\n// Common interface for the SortedTroves Doubly Linked List.\\ninterface ISortedTroves {\\n    // --- Events ---\\n\\n    event SortedTrovesAddressChanged(address _sortedDoublyLLAddress);\\n    event BorrowerOperationsAddressChanged(address _borrowerOperationsAddress);\\n    event NodeAdded(address _id, uint _NICR);\\n    event NodeRemoved(address _id);\\n\\n    // --- Functions ---\\n\\n    function setParams(\\n        uint256 _size,\\n        address _TroveManagerAddress,\\n        address _borrowerOperationsAddress\\n    ) external;\\n\\n    function insert(\\n        address _id,\\n        uint256 _ICR,\\n        address _prevId,\\n        address _nextId\\n    ) external;\\n\\n    function remove(address _id) external;\\n\\n    function reInsert(\\n        address _id,\\n        uint256 _newICR,\\n        address _prevId,\\n        address _nextId\\n    ) external;\\n\\n    function contains(address _id) external view returns (bool);\\n\\n    function isFull() external view returns (bool);\\n\\n    function isEmpty() external view returns (bool);\\n\\n    function getSize() external view returns (uint256);\\n\\n    function getMaxSize() external view returns (uint256);\\n\\n    function getFirst() external view returns (address);\\n\\n    function getLast() external view returns (address);\\n\\n    function getNext(address _id) external view returns (address);\\n\\n    function getPrev(address _id) external view returns (address);\\n\\n    function validInsertPosition(\\n        uint256 _ICR,\\n        address _prevId,\\n        address _nextId\\n    ) external view returns (bool);\\n\\n    function findInsertPosition(\\n        uint256 _ICR,\\n        address _prevId,\\n        address _nextId\\n    ) external view returns (address, address);\\n}\\n\",\"keccak256\":\"0xee69ee66b0db6c873a5a1177e5e9178aa8be6c57aa988d1d7e7526f484862ecd\",\"license\":\"MIT\"},\"contracts/interfaces/IStabilityPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\n/*\\n * The Stability Pool holds BaseFeeLMA tokens deposited by Stability Pool depositors.\\n *\\n * When a trove is liquidated, then depending on system conditions, some of its BaseFeeLMA debt gets offset with\\n * BaseFeeLMA in the Stability Pool:  that is, the offset debt evaporates, and an equal amount of BaseFeeLMA tokens in the Stability Pool is burned.\\n *\\n * Thus, a liquidation causes each depositor to receive a BaseFeeLMA loss, in proportion to their deposit as a share of total deposits.\\n * They also receive an StETH gain, as the StETH collateral of the liquidated trove is distributed among Stability depositors,\\n * in the same proportion.\\n *\\n * When a liquidation occurs, it depletes every deposit by the same fraction: for example, a liquidation that depletes 40%\\n * of the total BaseFeeLMA in the Stability Pool, depletes 40% of each deposit.\\n *\\n * A deposit that has experienced a series of liquidations is termed a \\\"compounded deposit\\\": each liquidation depletes the deposit,\\n * multiplying it by some factor in range ]0,1[\\n *\\n * Please see the implementation spec in the proof document, which closely follows on from the compounded deposit / StETH gain derivations:\\n * https://github.com/liquity/liquity/blob/master/papers/Scalable_Reward_Distribution_with_Compounding_Stakes.pdf\\n *\\n * --- HOG ISSUANCE TO STABILITY POOL DEPOSITORS ---\\n *\\n * A HOG issuance event occurs at every deposit operation, and every liquidation.\\n *\\n * Each deposit is tagged with the address of the front end through which it was made.\\n *\\n * All deposits earn a share of the issued HOG in proportion to the deposit as a share of total deposits. The HOG earned\\n * by a given deposit, is split between the depositor and the front end through which the deposit was made, based on the front end's kickbackRate.\\n *\\n * Please see the system Readme for an overview:\\n * https://github.com/liquity/dev/blob/main/README.md#hog-issuance-to-stability-providers\\n */\\ninterface IStabilityPool {\\n    // --- Events ---\\n\\n    event StabilityPoolStETHBalanceUpdated(uint _newBalance);\\n    event StabilityPoolBaseFeeLMABalanceUpdated(uint _newBalance);\\n\\n    event BorrowerOperationsAddressChanged(\\n        address _newBorrowerOperationsAddress\\n    );\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event ActivePoolAddressChanged(address _newActivePoolAddress);\\n    event DefaultPoolAddressChanged(address _newDefaultPoolAddress);\\n    event BaseFeeLMATokenAddressChanged(address _newBaseFeeLMATokenAddress);\\n    event SortedTrovesAddressChanged(address _newSortedTrovesAddress);\\n    event PriceFeedAddressChanged(address _newPriceFeedAddress);\\n    event CommunityIssuanceAddressChanged(address _newCommunityIssuanceAddress);\\n\\n    event P_Updated(uint _P);\\n    event S_Updated(uint _S, uint128 _epoch, uint128 _scale);\\n    event G_Updated(uint _G, uint128 _epoch, uint128 _scale);\\n    event EpochUpdated(uint128 _currentEpoch);\\n    event ScaleUpdated(uint128 _currentScale);\\n\\n    event DepositSnapshotUpdated(\\n        address indexed _depositor,\\n        uint _P,\\n        uint _S,\\n        uint _G\\n    );\\n\\n    event StETHGainWithdrawn(\\n        address indexed _depositor,\\n        uint _StETH,\\n        uint _BaseFeeLMALoss\\n    );\\n    event HOGPaidToDepositor(address indexed _depositor, uint _HOG);\\n    event StETHSent(address _to, uint _amount);\\n\\n    // --- Functions ---\\n\\n    /*\\n     * Called only once on init, to set addresses of other Hedgehog contracts\\n     * Callable only by owner, renounces ownership at the end\\n     */\\n    function setAddresses(\\n        address _borrowerOperationsAddress,\\n        address _troveManagerAddress,\\n        address _activePoolAddress,\\n        address _baseFeeLMATokenAddress,\\n        address _sortedTrovesAddress,\\n        address _priceFeedAddress,\\n        address _communityIssuanceAddress\\n    ) external;\\n\\n    /*\\n     * Initial checks:\\n     * - _amount is not zero\\n     * ---\\n     * - Triggers a HOG issuance, based on time passed since the last issuance. The HOG issuance is shared between *all* depositors and front ends\\n     * - Tags the deposit with the provided front end tag param, if it's a new deposit\\n     * - Sends depositor's accumulated gains (HOG, StETH) to depositor\\n     * - Sends the tagged front end's accumulated HOG gains to the tagged front end\\n     * - Increases deposit and tagged front end's stake, and takes new snapshots for each.\\n     */\\n    function provideToSP(uint _amount) external;\\n\\n    /*\\n     * Initial checks:\\n     * - _amount is zero or there are no under collateralized troves left in the system\\n     * - User has a non zero deposit\\n     * ---\\n     * - Triggers a HOG issuance, based on time passed since the last issuance. The HOG issuance is shared between *all* depositors and front ends\\n     * - Removes the deposit's front end tag if it is a full withdrawal\\n     * - Sends all depositor's accumulated gains (HOG, StETH) to depositor\\n     * - Sends the tagged front end's accumulated HOG gains to the tagged front end\\n     * - Decreases deposit and tagged front end's stake, and takes new snapshots for each.\\n     *\\n     * If _amount > userDeposit, the user withdraws all of their compounded deposit.\\n     */\\n    function withdrawFromSP(uint _amount) external;\\n\\n    /*\\n     * Initial checks:\\n     * - User has a non zero deposit\\n     * - User has an open trove\\n     * - User has some StETH gain\\n     * ---\\n     * - Triggers a HOG issuance, based on time passed since the last issuance. The HOG issuance is shared between *all* depositors and front ends\\n     * - Sends all depositor's HOG gain to  depositor\\n     * - Sends all tagged front end's HOG gain to the tagged front end\\n     * - Transfers the depositor's entire StETH gain from the Stability Pool to the caller's trove\\n     * - Leaves their compounded deposit in the Stability Pool\\n     * - Updates snapshots for deposit and tagged front end stake\\n     */\\n    function withdrawStETHGainToTrove(\\n        address _upperHint,\\n        address _lowerHint\\n    ) external;\\n\\n    /*\\n     * Initial checks:\\n     * - Caller is TroveManager\\n     * ---\\n     * Cancels out the specified debt against the BaseFeeLMA contained in the Stability Pool (as far as possible)\\n     * and transfers the Trove's StETH collateral from ActivePool to StabilityPool.\\n     * Only called by liquidation functions in the TroveManager.\\n     */\\n    function offset(uint _debt, uint _coll) external;\\n\\n    /*\\n     * Returns the total amount of StETH held by the pool, accounted in an internal variable instead of `balance`,\\n     * to exclude edge cases like StETH received from a self-destruct.\\n     */\\n    function getStETH() external view returns (uint);\\n\\n    /*\\n     * Returns BaseFeeLMA held in the pool. Changes when users deposit/withdraw, and when Trove debt is offset.\\n     */\\n    function getTotalBaseFeeLMADeposits() external view returns (uint);\\n\\n    /*\\n     * Calculates the StETH gain earned by the deposit since its last snapshots were taken.\\n     */\\n    function getDepositorStETHGain(\\n        address _depositor\\n    ) external view returns (uint);\\n\\n    /*\\n     * Calculate the HOG gain earned by a deposit since its last snapshots were taken.\\n     * If not tagged with a front end, the depositor gets a 100% cut of what their deposit earned.\\n     * Otherwise, their cut of the deposit's earnings is equal to the kickbackRate, set by the front end through\\n     * which they made their deposit.\\n     */\\n    function getDepositorHOGGain(\\n        address _depositor\\n    ) external view returns (uint);\\n\\n    /*\\n     * Return the user's compounded deposit.\\n     */\\n    function getCompoundedBaseFeeLMADeposit(\\n        address _depositor\\n    ) external view returns (uint);\\n}\\n\",\"keccak256\":\"0xabf6fb0fd220a7b67010f1ddab008cc9a15b3485b24caf25f9e44220d5c55d6a\",\"license\":\"MIT\"},\"contracts/interfaces/ITroveManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./IHedgehogBase.sol\\\";\\nimport \\\"./IStabilityPool.sol\\\";\\nimport \\\"./IBaseFeeLMAToken.sol\\\";\\nimport \\\"./IHOGToken.sol\\\";\\nimport \\\"./IHOGStaking.sol\\\";\\n\\n// Common interface for the Trove Manager.\\ninterface ITroveManager is IHedgehogBase {\\n    // --- Events ---\\n\\n    event BorrowerOperationsAddressChanged(\\n        address _newBorrowerOperationsAddress\\n    );\\n    event PriceFeedAddressChanged(address _newPriceFeedAddress);\\n    event BaseFeeLMATokenAddressChanged(address _newBaseFeeLMATokenAddress);\\n    event ActivePoolAddressChanged(address _activePoolAddress);\\n    event DefaultPoolAddressChanged(address _defaultPoolAddress);\\n    event StabilityPoolAddressChanged(address _stabilityPoolAddress);\\n    event GasPoolAddressChanged(address _gasPoolAddress);\\n    event CollSurplusPoolAddressChanged(address _collSurplusPoolAddress);\\n    event SortedTrovesAddressChanged(address _sortedTrovesAddress);\\n    event HOGTokenAddressChanged(address _hogTokenAddress);\\n    event HOGStakingAddressChanged(address _hogStakingAddress);\\n\\n    event Liquidation(\\n        uint _liquidatedDebt,\\n        uint _liquidatedColl,\\n        uint _collGasCompensation,\\n        uint _BaseFeeLMAGasCompensation\\n    );\\n    event Redemption(\\n        uint _attemptedBaseFeeLMAAmount,\\n        uint _actualBaseFeeLMAAmount,\\n        uint _StETHSent,\\n        uint _StETHFee\\n    );\\n    event TroveUpdated(\\n        address indexed _borrower,\\n        uint _debt,\\n        uint _coll,\\n        uint stake,\\n        uint8 operation\\n    );\\n    event TroveLiquidated(\\n        address indexed _borrower,\\n        uint _debt,\\n        uint _coll,\\n        uint8 operation\\n    );\\n    event BaseRateUpdated(uint _baseRate);\\n    event LastFeeOpTimeUpdated(uint _lastFeeOpTime);\\n    event TotalStakesUpdated(uint _newTotalStakes);\\n    event SystemSnapshotsUpdated(\\n        uint _totalStakesSnapshot,\\n        uint _totalCollateralSnapshot\\n    );\\n    event LTermsUpdated(uint _L_StETH, uint _L_BaseFeeLMADebt);\\n    event TroveSnapshotsUpdated(uint _L_StETH, uint _L_BaseFeeLMADebt);\\n    event TroveIndexUpdated(address _borrower, uint _newIndex);\\n\\n    // --- Functions ---\\n\\n    function setAddresses(\\n        address _borrowerOperationsAddress,\\n        address _activePoolAddress,\\n        address _defaultPoolAddress,\\n        address _stabilityPoolAddress,\\n        address _gasPoolAddress,\\n        address _collSurplusPoolAddress,\\n        address _priceFeedAddress,\\n        address _baseFeeLMATokenAddress,\\n        address _sortedTrovesAddress,\\n        address _hogTokenAddress,\\n        address _hogStakingAddress\\n    ) external;\\n\\n    function stabilityPool() external view returns (IStabilityPool);\\n\\n    function baseFeeLMAToken() external view returns (IBaseFeeLMAToken);\\n\\n    function hogToken() external view returns (IHOGToken);\\n\\n    function hogStaking() external view returns (IHOGStaking);\\n\\n    function getTroveOwnersCount() external view returns (uint);\\n\\n    function getTroveFromTroveOwnersArray(\\n        uint _index\\n    ) external view returns (address);\\n\\n    function getNominalICR(address _borrower) external view returns (uint);\\n\\n    function getCurrentICR(\\n        address _borrower,\\n        uint _price\\n    ) external view returns (uint);\\n\\n    function liquidate(address _borrower) external;\\n\\n    function liquidateTroves(uint _n) external;\\n\\n    function batchLiquidateTroves(address[] calldata _troveArray) external;\\n\\n    function redeemCollateral(\\n        uint _BaseFeeLMAAmount,\\n        address _firstRedemptionHint,\\n        address _upperPartialRedemptionHint,\\n        address _lowerPartialRedemptionHint,\\n        uint _partialRedemptionHintNICR,\\n        uint _maxIterations,\\n        uint _maxFee\\n    ) external;\\n\\n    function updateStakeAndTotalStakes(\\n        address _borrower\\n    ) external returns (uint);\\n\\n    function updateTroveRewardSnapshots(address _borrower) external;\\n\\n    function addTroveOwnerToArray(\\n        address _borrower\\n    ) external returns (uint index);\\n\\n    function applyPendingRewards(address _borrower) external;\\n\\n    function getPendingStETHReward(\\n        address _borrower\\n    ) external view returns (uint);\\n\\n    function getPendingBaseFeeLMADebtReward(\\n        address _borrower\\n    ) external view returns (uint);\\n\\n    function hasPendingRewards(address _borrower) external view returns (bool);\\n\\n    function getEntireDebtAndColl(\\n        address _borrower\\n    )\\n        external\\n        view\\n        returns (\\n            uint debt,\\n            uint coll,\\n            uint pendingBaseFeeLMADebtReward,\\n            uint pendingStETHReward\\n        );\\n\\n    function closeTrove(address _borrower) external;\\n\\n    function removeStake(address _borrower) external;\\n\\n    function getRedemptionRate(\\n        uint _redemptionColl\\n    ) external view returns (uint);\\n\\n    function getRedemptionRateWithDecay(\\n        uint _redemptionColl\\n    ) external view returns (uint);\\n\\n    function getRedemptionFeeWithDecay(\\n        uint _StETHDrawn\\n    ) external view returns (uint);\\n\\n    function getBorrowingRate(\\n        uint _issuedBaseFeeLMA\\n    ) external view returns (uint);\\n\\n    function getBorrowingRateWithDecay(\\n        uint _issuedBaseFeeLMA\\n    ) external view returns (uint);\\n\\n    function getBorrowingFee(\\n        uint BaseFeeLMADebt\\n    ) external view returns (uint, uint);\\n\\n    function getBorrowingFeeWithDecay(\\n        uint _BaseFeeLMADebt\\n    ) external view returns (uint);\\n\\n    function updateBaseRateFromBorrowing(uint _baseRate) external;\\n\\n    function decayBaseRateFromBorrowing() external;\\n\\n    function getTroveStatus(address _borrower) external view returns (uint);\\n\\n    function getTroveStake(address _borrower) external view returns (uint);\\n\\n    function getTroveDebt(address _borrower) external view returns (uint);\\n\\n    function getTroveColl(address _borrower) external view returns (uint);\\n\\n    function setTroveStatus(address _borrower, uint num) external;\\n\\n    function increaseTroveColl(\\n        address _borrower,\\n        uint _collIncrease\\n    ) external returns (uint);\\n\\n    function decreaseTroveColl(\\n        address _borrower,\\n        uint _collDecrease\\n    ) external returns (uint);\\n\\n    function increaseTroveDebt(\\n        address _borrower,\\n        uint _debtIncrease\\n    ) external returns (uint);\\n\\n    function decreaseTroveDebt(\\n        address _borrower,\\n        uint _collDecrease\\n    ) external returns (uint);\\n\\n    function getTCR(uint _price) external view returns (uint);\\n\\n    function checkRecoveryMode(uint _price) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x33b2744d95fae4541cfb11a799aa434885d1b30ac376faf25f487ddc4f7113a5\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x7434453e6d3b7d0e5d0eb7846ffdbc27f0ccf3b163591263739b628074dc103a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610c79380380610c7983398101604081905261002f91610078565b600080546001600160a01b039384166001600160a01b031991821617909155600180549290931691161790556100b2565b6001600160a01b038116811461007557600080fd5b50565b6000806040838503121561008b57600080fd5b825161009681610060565b60208401519092506100a781610060565b809150509250929050565b610bb8806100c16000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80633d83908a14610046578063ae9187541461006f578063b90bce4514610082575b600080fd5b600054610059906001600160a01b031681565b6040516100669190610947565b60405180910390f35b600154610059906001600160a01b031681565b61009561009036600461095b565b6100a2565b604051610066919061097d565b6060600080600085126100ba575083905060016100d5565b6100c5856001610a14565b6100ce90610a34565b9150600090505b6001546040805163de8fa43160e01b815290516000926001600160a01b03169163de8fa4319160048083019260209291908290030181865afa15801561011f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101439190610a50565b905080831061018557604080516000808252602082019092529061017d565b61016a610908565b8152602001906001900390816101625790505b5093506101c5565b60006101918483610a7f565b90508086111561019f578095505b82156101b6576101af84876101ce565b94506101c3565b6101c0848761056f565b94505b505b50505092915050565b60606000600160009054906101000a90046001600160a01b03166001600160a01b0316631e2231436040518163ffffffff1660e01b8152600401602060405180830381865afa158015610225573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102499190610a98565b905060005b848110156102d95760015460405163765e015960e01b81526001600160a01b039091169063765e015990610286908590600401610947565b602060405180830381865afa1580156102a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c79190610a98565b91506102d281610ac8565b905061024e565b508267ffffffffffffffff8111156102f3576102f3610a69565b60405190808252806020026020018201604052801561032c57816020015b610319610908565b8152602001906001900390816103115790505b50915060005b83811015610567578183828151811061034d5761034d610ae1565b60209081029190910101516001600160a01b039182169052600054604051630ddec86760e31b8152911690636ef643389061038c908590600401610947565b60a060405180830381865afa1580156103a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103cd9190610af7565b9050508584815181106103e2576103e2610ae1565b60200260200101516020018685815181106103ff576103ff610ae1565b602002602001015160400187868151811061041c5761041c610ae1565b60209081029190910101516060019290925291905252600054604051630b39e3cd60e11b81526001600160a01b0390911690631673c79a90610462908590600401610947565b6040805180830381865afa15801561047e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a29190610b5e565b8483815181106104b4576104b4610ae1565b60200260200101516080018584815181106104d1576104d1610ae1565b602090810291909101015160a001919091525260015460405163765e015960e01b81526001600160a01b039091169063765e015990610514908590600401610947565b602060405180830381865afa158015610531573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105559190610a98565b915061056081610ac8565b9050610332565b505092915050565b60606000600160009054906101000a90046001600160a01b03166001600160a01b0316634d6228316040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ea9190610a98565b905060005b8481101561067a57600154604051632dc9c0eb60e21b81526001600160a01b039091169063b72703ac90610627908590600401610947565b602060405180830381865afa158015610644573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106689190610a98565b915061067381610ac8565b90506105ef565b508267ffffffffffffffff81111561069457610694610a69565b6040519080825280602002602001820160405280156106cd57816020015b6106ba610908565b8152602001906001900390816106b25790505b50915060005b8381101561056757818382815181106106ee576106ee610ae1565b60209081029190910101516001600160a01b039182169052600054604051630ddec86760e31b8152911690636ef643389061072d908590600401610947565b60a060405180830381865afa15801561074a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076e9190610af7565b90505085848151811061078357610783610ae1565b60200260200101516020018685815181106107a0576107a0610ae1565b60200260200101516040018786815181106107bd576107bd610ae1565b60209081029190910101516060019290925291905252600054604051630b39e3cd60e11b81526001600160a01b0390911690631673c79a90610803908590600401610947565b6040805180830381865afa15801561081f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108439190610b5e565b84838151811061085557610855610ae1565b602002602001015160800185848151811061087257610872610ae1565b602090810291909101015160a0019190915252600154604051632dc9c0eb60e21b81526001600160a01b039091169063b72703ac906108b5908590600401610947565b602060405180830381865afa1580156108d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f69190610a98565b915061090181610ac8565b90506106d3565b6040518060c0016040528060006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081525090565b6001600160a01b0391909116815260200190565b6000806040838503121561096e57600080fd5b50508035926020909101359150565b602080825282518282018190526000919060409081850190868401855b828110156109f157815180516001600160a01b0316855286810151878601528581015186860152606080820151908601526080808201519086015260a0908101519085015260c0909301929085019060010161099a565b5091979650505050505050565b634e487b7160e01b600052601160045260246000fd5b8082018281126000831280158216821582161715610567576105676109fe565b6000600160ff1b8201610a4957610a496109fe565b5060000390565b600060208284031215610a6257600080fd5b5051919050565b634e487b7160e01b600052604160045260246000fd5b81810381811115610a9257610a926109fe565b92915050565b600060208284031215610aaa57600080fd5b81516001600160a01b0381168114610ac157600080fd5b9392505050565b600060018201610ada57610ada6109fe565b5060010190565b634e487b7160e01b600052603260045260246000fd5b600080600080600060a08688031215610b0f57600080fd5b855194506020860151935060408601519250606086015160058110610b3357600080fd5b60808701519092506001600160801b0381168114610b5057600080fd5b809150509295509295909350565b60008060408385031215610b7157600080fd5b50508051602090910151909290915056fea26469706673582212209d28296bd95952c958ff2dc7a121149819bea60e71957a21ee169472aea1bf2964736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c80633d83908a14610046578063ae9187541461006f578063b90bce4514610082575b600080fd5b600054610059906001600160a01b031681565b6040516100669190610947565b60405180910390f35b600154610059906001600160a01b031681565b61009561009036600461095b565b6100a2565b604051610066919061097d565b6060600080600085126100ba575083905060016100d5565b6100c5856001610a14565b6100ce90610a34565b9150600090505b6001546040805163de8fa43160e01b815290516000926001600160a01b03169163de8fa4319160048083019260209291908290030181865afa15801561011f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101439190610a50565b905080831061018557604080516000808252602082019092529061017d565b61016a610908565b8152602001906001900390816101625790505b5093506101c5565b60006101918483610a7f565b90508086111561019f578095505b82156101b6576101af84876101ce565b94506101c3565b6101c0848761056f565b94505b505b50505092915050565b60606000600160009054906101000a90046001600160a01b03166001600160a01b0316631e2231436040518163ffffffff1660e01b8152600401602060405180830381865afa158015610225573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102499190610a98565b905060005b848110156102d95760015460405163765e015960e01b81526001600160a01b039091169063765e015990610286908590600401610947565b602060405180830381865afa1580156102a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c79190610a98565b91506102d281610ac8565b905061024e565b508267ffffffffffffffff8111156102f3576102f3610a69565b60405190808252806020026020018201604052801561032c57816020015b610319610908565b8152602001906001900390816103115790505b50915060005b83811015610567578183828151811061034d5761034d610ae1565b60209081029190910101516001600160a01b039182169052600054604051630ddec86760e31b8152911690636ef643389061038c908590600401610947565b60a060405180830381865afa1580156103a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103cd9190610af7565b9050508584815181106103e2576103e2610ae1565b60200260200101516020018685815181106103ff576103ff610ae1565b602002602001015160400187868151811061041c5761041c610ae1565b60209081029190910101516060019290925291905252600054604051630b39e3cd60e11b81526001600160a01b0390911690631673c79a90610462908590600401610947565b6040805180830381865afa15801561047e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a29190610b5e565b8483815181106104b4576104b4610ae1565b60200260200101516080018584815181106104d1576104d1610ae1565b602090810291909101015160a001919091525260015460405163765e015960e01b81526001600160a01b039091169063765e015990610514908590600401610947565b602060405180830381865afa158015610531573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105559190610a98565b915061056081610ac8565b9050610332565b505092915050565b60606000600160009054906101000a90046001600160a01b03166001600160a01b0316634d6228316040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ea9190610a98565b905060005b8481101561067a57600154604051632dc9c0eb60e21b81526001600160a01b039091169063b72703ac90610627908590600401610947565b602060405180830381865afa158015610644573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106689190610a98565b915061067381610ac8565b90506105ef565b508267ffffffffffffffff81111561069457610694610a69565b6040519080825280602002602001820160405280156106cd57816020015b6106ba610908565b8152602001906001900390816106b25790505b50915060005b8381101561056757818382815181106106ee576106ee610ae1565b60209081029190910101516001600160a01b039182169052600054604051630ddec86760e31b8152911690636ef643389061072d908590600401610947565b60a060405180830381865afa15801561074a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076e9190610af7565b90505085848151811061078357610783610ae1565b60200260200101516020018685815181106107a0576107a0610ae1565b60200260200101516040018786815181106107bd576107bd610ae1565b60209081029190910101516060019290925291905252600054604051630b39e3cd60e11b81526001600160a01b0390911690631673c79a90610803908590600401610947565b6040805180830381865afa15801561081f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108439190610b5e565b84838151811061085557610855610ae1565b602002602001015160800185848151811061087257610872610ae1565b602090810291909101015160a0019190915252600154604051632dc9c0eb60e21b81526001600160a01b039091169063b72703ac906108b5908590600401610947565b602060405180830381865afa1580156108d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f69190610a98565b915061090181610ac8565b90506106d3565b6040518060c0016040528060006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081525090565b6001600160a01b0391909116815260200190565b6000806040838503121561096e57600080fd5b50508035926020909101359150565b602080825282518282018190526000919060409081850190868401855b828110156109f157815180516001600160a01b0316855286810151878601528581015186860152606080820151908601526080808201519086015260a0908101519085015260c0909301929085019060010161099a565b5091979650505050505050565b634e487b7160e01b600052601160045260246000fd5b8082018281126000831280158216821582161715610567576105676109fe565b6000600160ff1b8201610a4957610a496109fe565b5060000390565b600060208284031215610a6257600080fd5b5051919050565b634e487b7160e01b600052604160045260246000fd5b81810381811115610a9257610a926109fe565b92915050565b600060208284031215610aaa57600080fd5b81516001600160a01b0381168114610ac157600080fd5b9392505050565b600060018201610ada57610ada6109fe565b5060010190565b634e487b7160e01b600052603260045260246000fd5b600080600080600060a08688031215610b0f57600080fd5b855194506020860151935060408601519250606086015160058110610b3357600080fd5b60808701519092506001600160801b0381168114610b5057600080fd5b809150509295509295909350565b60008060408385031215610b7157600080fd5b50508051602090910151909290915056fea26469706673582212209d28296bd95952c958ff2dc7a121149819bea60e71957a21ee169472aea1bf2964736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 545,
        "contract": "contracts/MultiTroveGetter.sol:MultiTroveGetter",
        "label": "troveManager",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(TroveManager)7186"
      },
      {
        "astId": 548,
        "contract": "contracts/MultiTroveGetter.sol:MultiTroveGetter",
        "label": "sortedTroves",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ISortedTroves)8630"
      }
    ],
    "types": {
      "t_contract(ISortedTroves)8630": {
        "encoding": "inplace",
        "label": "contract ISortedTroves",
        "numberOfBytes": "20"
      },
      "t_contract(TroveManager)7186": {
        "encoding": "inplace",
        "label": "contract TroveManager",
        "numberOfBytes": "20"
      }
    }
  }
}