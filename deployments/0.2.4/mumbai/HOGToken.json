{
  "address": "0xFEE1eb29BBecD3DE8e144e60FFe15602eB077320",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_communityIssuanceAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_hogStakingAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lockupFactoryAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bountyAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lpRewardsAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_multisigAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_communityIssuanceAddress",
          "type": "address"
        }
      ],
      "name": "CommunityIssuanceAddressSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_hogStakingAddress",
          "type": "address"
        }
      ],
      "name": "HOGStakingAddressSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_lockupContractFactoryAddress",
          "type": "address"
        }
      ],
      "name": "LockupContractFactoryAddressSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ONE_YEAR_IN_SECONDS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "communityIssuanceAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "domainSeparator",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDeploymentStartTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLpRewardsEntitlement",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hogStakingAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockupContractFactory",
      "outputs": [
        {
          "internalType": "contract ILockupContractFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "multisigAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "permitTypeHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "sendToHOGStaking",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xb95a8ffa712b825d19298995d4aa27c35f553f8bde703fa81afd31d789a67b79",
  "receipt": {
    "to": null,
    "from": "0x796EcfBe7a2A424f9D905dfC38b8994aB2db9FD6",
    "contractAddress": "0xFEE1eb29BBecD3DE8e144e60FFe15602eB077320",
    "transactionIndex": 1,
    "gasUsed": "1259675",
    "logsBloom": "0x0000000000000000000000000000000008000000000000010000000002000000000000000202000000000000000000000000800000000000000000000000000000000000000000000000008800000080000000000000000000010000000000000000000c020000000000000000000800000000000080000480000010000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000004000000002000000000001000000000000000000000000000000100000000020000000000000000080000000000000000000000000000000000000400000100000",
    "blockHash": "0xd844b9b98ed0172ecab195f0d9ac772e12c7efdd2171c4835728eb335463a711",
    "transactionHash": "0xb95a8ffa712b825d19298995d4aa27c35f553f8bde703fa81afd31d789a67b79",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 40867271,
        "transactionHash": "0xb95a8ffa712b825d19298995d4aa27c35f553f8bde703fa81afd31d789a67b79",
        "address": "0xFEE1eb29BBecD3DE8e144e60FFe15602eB077320",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000796ecfbe7a2a424f9d905dfc38b8994ab2db9fd6"
        ],
        "data": "0x00000000000000000000000000000000000000000001a784379d99db42000000",
        "logIndex": 1,
        "blockHash": "0xd844b9b98ed0172ecab195f0d9ac772e12c7efdd2171c4835728eb335463a711"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 40867271,
        "transactionHash": "0xb95a8ffa712b825d19298995d4aa27c35f553f8bde703fa81afd31d789a67b79",
        "address": "0xFEE1eb29BBecD3DE8e144e60FFe15602eB077320",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000001c0270639f7098c7c689c9490ea4d09f1e76efd"
        ],
        "data": "0x0000000000000000000000000000000000000000001a784379d99db420000000",
        "logIndex": 2,
        "blockHash": "0xd844b9b98ed0172ecab195f0d9ac772e12c7efdd2171c4835728eb335463a711"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 40867271,
        "transactionHash": "0xb95a8ffa712b825d19298995d4aa27c35f553f8bde703fa81afd31d789a67b79",
        "address": "0xFEE1eb29BBecD3DE8e144e60FFe15602eB077320",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000796ecfbe7a2a424f9d905dfc38b8994ab2db9fd6"
        ],
        "data": "0x000000000000000000000000000000000000000000011a582513bbe781555555",
        "logIndex": 3,
        "blockHash": "0xd844b9b98ed0172ecab195f0d9ac772e12c7efdd2171c4835728eb335463a711"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 40867271,
        "transactionHash": "0xb95a8ffa712b825d19298995d4aa27c35f553f8bde703fa81afd31d789a67b79",
        "address": "0xFEE1eb29BBecD3DE8e144e60FFe15602eB077320",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000796ecfbe7a2a424f9d905dfc38b8994ab2db9fd6"
        ],
        "data": "0x000000000000000000000000000000000000000000357db3063d195c00aaaaab",
        "logIndex": 4,
        "blockHash": "0xd844b9b98ed0172ecab195f0d9ac772e12c7efdd2171c4835728eb335463a711"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 40867271,
        "transactionHash": "0xb95a8ffa712b825d19298995d4aa27c35f553f8bde703fa81afd31d789a67b79",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000796ecfbe7a2a424f9d905dfc38b8994ab2db9fd6",
          "0x0000000000000000000000005082f249cdb2f2c1ee035e4f423c46ea2dab3ab1"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000b302b5a44c3000000000000000000000000000000000000000000000000000198f9101178b9bb00000000000000000000000000000000000000000000025591343df88c1f4aba000000000000000000000000000000000000000000000000018dc8e4b733f6bb000000000000000000000000000000000000000000000255913f6e23e6640dba",
        "logIndex": 5,
        "blockHash": "0xd844b9b98ed0172ecab195f0d9ac772e12c7efdd2171c4835728eb335463a711"
      }
    ],
    "blockNumber": 40867271,
    "cumulativeGasUsed": "1807455",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x01c0270639F7098c7C689c9490EA4d09f1E76efd",
    "0x9DD3C04aC579bD3C6c68e2f2BCeD4Eba62C20Bfa",
    "0xCa27E4834a9C472471F580b02b2D59a8C6F75013",
    "0x796EcfBe7a2A424f9D905dfC38b8994aB2db9FD6",
    "0x796EcfBe7a2A424f9D905dfC38b8994aB2db9FD6",
    "0x796EcfBe7a2A424f9D905dfC38b8994aB2db9FD6"
  ],
  "numDeployments": 1,
  "solcInputHash": "0a336cd10b8d647251805c96a006a1ea",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_communityIssuanceAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_hogStakingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lockupFactoryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bountyAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lpRewardsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_multisigAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_communityIssuanceAddress\",\"type\":\"address\"}],\"name\":\"CommunityIssuanceAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_hogStakingAddress\",\"type\":\"address\"}],\"name\":\"HOGStakingAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_lockupContractFactoryAddress\",\"type\":\"address\"}],\"name\":\"LockupContractFactoryAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ONE_YEAR_IN_SECONDS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"communityIssuanceAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"domainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDeploymentStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLpRewardsEntitlement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hogStakingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockupContractFactory\",\"outputs\":[{\"internalType\":\"contract ILockupContractFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multisigAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"permitTypeHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendToHOGStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"nonces(address)\":{\"details\":\"Returns the current ERC2612 nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases `owner`'s nonce by one. This prevents a signature from being used multiple times. `owner` can limit the time a Permit is valid for by setting `deadline` to a value in the near future. The deadline argument can be set to uint(-1) to create Permits that effectively never expire.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `amount` as the allowance of `spender` over `owner`'s tokens, given `owner`'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `owner` cannot be the zero address. - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.stETHeum.org/EIPS/eip-2612#specification[relevant EIP section].\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Token's functionality based on HOG token.  Functions logic remains unchanged. Changes to the contract: - Raised pragma version - Removed an import of Token Interface Even though SafeMath is no longer required, the decision was made to keep it to avoid human factor errors Based upon OpenZeppelin's ERC20 contract: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol   and their EIP2612 (ERC20Permit / ERC712) functionality: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/53516bc555a454862470e7860a9b5254db4d00f5/contracts/token/ERC20/ERC20Permit.sol   --- Functionality added specific to the HOG ---  1) Transfer protection: blacklist of addresses that are invalid recipients (i.e. core Liquity contracts) in external  transfer() and transferFrom() calls. The purpose is to protect users from losing tokens by mistakenly sending HOG directly to a Liquity core contract, when they should rather call the right function. 2) sendToHOGStaking(): callable only by Hedgehog core contracts, which move HOG tokens from user -> HOGStaking contract. 3) Supply hard-capped at 100 million 4) CommunityIssuance and LockupContractFactory addresses are set at deployment 5) The bug bounties / hackathons allocation of 2 million tokens is minted at deployment to an EOA 6) 32 million tokens are minted at deployment to the CommunityIssuance contract 7) The LP rewards allocation of (1 + 1/3) million tokens is minted at deployent to a Staking contract 8) (64 + 2/3) million tokens are minted at deployment to the Hedgehog multisig 9) Until one year from deployment: -Hedgehog multisig may only transfer() tokens to LockupContracts that have been deployed via & registered in the   LockupContractFactory  -approve(), increaseAllowance(), decreaseAllowance() revert when called by the multisig -transferFrom() reverts when the multisig is the sender -sendToHOGStaking() reverts when the multisig is the sender, blocking the multisig from staking its HOG.  After one year has passed since deployment of the HOGToken, the restrictions on multisig operations are lifted and the multisig has the same rights as any other address.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/HOG/HOGToken.sol\":\"HOGToken\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"contracts/HOG/HOGToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../dependencies/CheckContract.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"../interfaces/ILockupContractFactory.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../dependencies/IERC2612.sol\\\";\\n\\n/**\\n* @notice Token's functionality based on HOG token. \\n* Functions logic remains unchanged.\\n * Changes to the contract:\\n * - Raised pragma version\\n * - Removed an import of Token Interface\\n * Even though SafeMath is no longer required, the decision was made to keep it to avoid human factor errors\\n*\\n* Based upon OpenZeppelin's ERC20 contract:\\n* https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\\n*  \\n* and their EIP2612 (ERC20Permit / ERC712) functionality:\\n* https://github.com/OpenZeppelin/openzeppelin-contracts/blob/53516bc555a454862470e7860a9b5254db4d00f5/contracts/token/ERC20/ERC20Permit.sol\\n* \\n*\\n*  --- Functionality added specific to the HOG ---\\n* \\n* 1) Transfer protection: blacklist of addresses that are invalid recipients (i.e. core Liquity contracts) in external \\n* transfer() and transferFrom() calls. The purpose is to protect users from losing tokens by mistakenly sending HOG directly to a Liquity\\n* core contract, when they should rather call the right function.\\n*\\n* 2) sendToHOGStaking(): callable only by Hedgehog core contracts, which move HOG tokens from user -> HOGStaking contract.\\n*\\n* 3) Supply hard-capped at 100 million\\n*\\n* 4) CommunityIssuance and LockupContractFactory addresses are set at deployment\\n*\\n* 5) The bug bounties / hackathons allocation of 2 million tokens is minted at deployment to an EOA\\n\\n* 6) 32 million tokens are minted at deployment to the CommunityIssuance contract\\n*\\n* 7) The LP rewards allocation of (1 + 1/3) million tokens is minted at deployent to a Staking contract\\n*\\n* 8) (64 + 2/3) million tokens are minted at deployment to the Hedgehog multisig\\n*\\n* 9) Until one year from deployment:\\n* -Hedgehog multisig may only transfer() tokens to LockupContracts that have been deployed via & registered in the \\n*  LockupContractFactory \\n* -approve(), increaseAllowance(), decreaseAllowance() revert when called by the multisig\\n* -transferFrom() reverts when the multisig is the sender\\n* -sendToHOGStaking() reverts when the multisig is the sender, blocking the multisig from staking its HOG.\\n* \\n* After one year has passed since deployment of the HOGToken, the restrictions on multisig operations are lifted\\n* and the multisig has the same rights as any other address.\\n*/\\n\\ncontract HOGToken is CheckContract, IERC20, IERC2612 {\\n    using SafeMath for uint256;\\n\\n    // --- ERC20 Data ---\\n\\n    string internal constant _NAME = \\\"Hedgehog\\\";\\n    string internal constant _SYMBOL = \\\"HOG\\\";\\n    string internal constant _VERSION = \\\"1\\\";\\n    uint8 internal constant _DECIMALS = 18;\\n\\n    mapping(address => uint256) private _balances;\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n    uint private _totalSupply;\\n\\n    // --- EIP 2612 Data ---\\n\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 private constant _PERMIT_TYPEHASH =\\n        0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n    // keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n    bytes32 private constant _TYPE_HASH =\\n        0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\\n\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n\\n    mapping(address => uint256) private _nonces;\\n\\n    // --- HOGToken specific data ---\\n\\n    uint public constant ONE_YEAR_IN_SECONDS = 31536000; // 60 * 60 * 24 * 365\\n\\n    // uint for use with SafeMath\\n    uint internal _1_MILLION = 1e24; // 1e6 * 1e18 = 1e24\\n\\n    uint internal immutable deploymentStartTime;\\n    address public immutable multisigAddress;\\n\\n    address public immutable communityIssuanceAddress;\\n    address public immutable hogStakingAddress;\\n\\n    uint internal immutable lpRewardsEntitlement;\\n\\n    ILockupContractFactory public immutable lockupContractFactory;\\n\\n    // --- Events ---\\n\\n    event CommunityIssuanceAddressSet(address _communityIssuanceAddress);\\n    event HOGStakingAddressSet(address _hogStakingAddress);\\n    event LockupContractFactoryAddressSet(\\n        address _lockupContractFactoryAddress\\n    );\\n\\n    // --- Functions ---\\n\\n    constructor(\\n        address _communityIssuanceAddress,\\n        address _hogStakingAddress,\\n        address _lockupFactoryAddress,\\n        address _bountyAddress,\\n        address _lpRewardsAddress,\\n        address _multisigAddress\\n    ) {\\n        checkContract(_communityIssuanceAddress);\\n        checkContract(_hogStakingAddress);\\n        checkContract(_lockupFactoryAddress);\\n        // TODO: Pass addresses of all core contract to be able to restrict transfers to them\\n        multisigAddress = _multisigAddress;\\n        deploymentStartTime = block.timestamp;\\n\\n        communityIssuanceAddress = _communityIssuanceAddress;\\n        hogStakingAddress = _hogStakingAddress;\\n        lockupContractFactory = ILockupContractFactory(_lockupFactoryAddress);\\n\\n        bytes32 hashedName = keccak256(bytes(_NAME));\\n        bytes32 hashedVersion = keccak256(bytes(_VERSION));\\n\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = _chainID();\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(\\n            _TYPE_HASH,\\n            hashedName,\\n            hashedVersion\\n        );\\n\\n        // --- Initial HOG allocations ---\\n\\n        uint bountyEntitlement = _1_MILLION.mul(2); // Allocate 2 million for bounties/hackathons\\n        _mint(_bountyAddress, bountyEntitlement);\\n\\n        uint depositorsAndFrontEndsEntitlement = _1_MILLION.mul(32); // Allocate 32 million to the algorithmic issuance schedule\\n        _mint(_communityIssuanceAddress, depositorsAndFrontEndsEntitlement);\\n\\n        uint _lpRewardsEntitlement = _1_MILLION.mul(4).div(3); // Allocate 1.33 million for LP rewards\\n        lpRewardsEntitlement = _lpRewardsEntitlement;\\n        _mint(_lpRewardsAddress, _lpRewardsEntitlement);\\n\\n        // Allocate the remainder to the HOG Multisig: (100 - 2 - 32 - 1.33) million = 64.66 million\\n        uint multisigEntitlement = _1_MILLION\\n            .mul(100)\\n            .sub(bountyEntitlement)\\n            .sub(depositorsAndFrontEndsEntitlement)\\n            .sub(_lpRewardsEntitlement);\\n\\n        _mint(_multisigAddress, multisigEntitlement);\\n    }\\n\\n    // --- External functions ---\\n\\n    function totalSupply() external view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(\\n        address account\\n    ) external view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function getDeploymentStartTime() external view returns (uint256) {\\n        return deploymentStartTime;\\n    }\\n\\n    function getLpRewardsEntitlement() external view returns (uint256) {\\n        return lpRewardsEntitlement;\\n    }\\n\\n    function transfer(\\n        address recipient,\\n        uint256 amount\\n    ) external override returns (bool) {\\n        // Restrict the multisig's transfers in first year\\n        if (_callerIsMultisig() && _isFirstYear()) {\\n            _requireRecipientIsRegisteredLC(recipient);\\n        }\\n\\n        _requireValidRecipient(recipient);\\n\\n        // Otherwise, standard transfer functionality\\n        _transfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function approve(\\n        address spender,\\n        uint256 amount\\n    ) external override returns (bool) {\\n        if (_isFirstYear()) {\\n            _requireCallerIsNotMultisig();\\n        }\\n\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external override returns (bool) {\\n        if (_isFirstYear()) {\\n            _requireSenderIsNotMultisig(sender);\\n        }\\n\\n        _requireValidRecipient(recipient);\\n\\n        _transfer(sender, recipient, amount);\\n        _approve(\\n            sender,\\n            msg.sender,\\n            _allowances[sender][msg.sender].sub(\\n                amount,\\n                \\\"ERC20: transfer amount exceeds allowance\\\"\\n            )\\n        );\\n        return true;\\n    }\\n\\n    function increaseAllowance(\\n        address spender,\\n        uint256 addedValue\\n    ) external returns (bool) {\\n        if (_isFirstYear()) {\\n            _requireCallerIsNotMultisig();\\n        }\\n\\n        _approve(\\n            msg.sender,\\n            spender,\\n            _allowances[msg.sender][spender].add(addedValue)\\n        );\\n        return true;\\n    }\\n\\n    function decreaseAllowance(\\n        address spender,\\n        uint256 subtractedValue\\n    ) external returns (bool) {\\n        if (_isFirstYear()) {\\n            _requireCallerIsNotMultisig();\\n        }\\n\\n        _approve(\\n            msg.sender,\\n            spender,\\n            _allowances[msg.sender][spender].sub(\\n                subtractedValue,\\n                \\\"ERC20: decreased allowance below zero\\\"\\n            )\\n        );\\n        return true;\\n    }\\n\\n    function sendToHOGStaking(address _sender, uint256 _amount) external {\\n        _requireCallerIsHOGStaking();\\n        if (_isFirstYear()) {\\n            _requireSenderIsNotMultisig(_sender);\\n        } // Prevent the multisig from staking HOG\\n        _transfer(_sender, hogStakingAddress, _amount);\\n    }\\n\\n    // --- EIP 2612 functionality ---\\n\\n    function domainSeparator() public view override returns (bytes32) {\\n        if (_chainID() == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return\\n                _buildDomainSeparator(\\n                    _TYPE_HASH,\\n                    _HASHED_NAME,\\n                    _HASHED_VERSION\\n                );\\n        }\\n    }\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint amount,\\n        uint deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external override {\\n        require(deadline >= block.timestamp, \\\"HOG: expired deadline\\\");\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                domainSeparator(),\\n                keccak256(\\n                    abi.encode(\\n                        _PERMIT_TYPEHASH,\\n                        owner,\\n                        spender,\\n                        amount,\\n                        _nonces[owner]++,\\n                        deadline\\n                    )\\n                )\\n            )\\n        );\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        require(recoveredAddress == owner, \\\"HOG: invalid signature\\\");\\n        _approve(owner, spender, amount);\\n    }\\n\\n    function nonces(address owner) external view override returns (uint256) {\\n        // FOR EIP 2612\\n        return _nonces[owner];\\n    }\\n\\n    // --- Internal operations ---\\n\\n    function _chainID() private view returns (uint256 chainID) {\\n        assembly {\\n            chainID := chainid()\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 _typeHash,\\n        bytes32 _name,\\n        bytes32 _version\\n    ) private view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    _typeHash,\\n                    _name,\\n                    _version,\\n                    _chainID(),\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        // TODO: Restrict access to all core contracts, unless msg.sender is another core contract\\n        _balances[sender] = _balances[sender].sub(\\n            amount,\\n            \\\"ERC20: transfer amount exceeds balance\\\"\\n        );\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    function _mint(address account, uint256 amount) internal {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    function _approve(address owner, address spender, uint256 amount) internal {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    // --- Helper functions ---\\n\\n    function _callerIsMultisig() internal view returns (bool) {\\n        return (msg.sender == multisigAddress);\\n    }\\n\\n    function _isFirstYear() internal view returns (bool) {\\n        return (block.timestamp.sub(deploymentStartTime) < ONE_YEAR_IN_SECONDS);\\n    }\\n\\n    // --- 'require' functions ---\\n\\n    function _requireValidRecipient(address _recipient) internal view {\\n        require(\\n            _recipient != address(0) && _recipient != address(this),\\n            \\\"HOG: Cannot transfer tokens directly to the HOG token contract or the zero address\\\"\\n        );\\n        require(\\n            _recipient != communityIssuanceAddress &&\\n                _recipient != hogStakingAddress,\\n            \\\"HOG: Cannot transfer tokens directly to the community issuance or staking contract\\\"\\n        );\\n    }\\n\\n    function _requireRecipientIsRegisteredLC(address _recipient) internal view {\\n        require(\\n            lockupContractFactory.isRegisteredLockup(_recipient),\\n            \\\"HOGToken: recipient must be a LockupContract registered in the Factory\\\"\\n        );\\n    }\\n\\n    function _requireSenderIsNotMultisig(address _sender) internal view {\\n        require(\\n            _sender != multisigAddress,\\n            \\\"HOGToken: sender must not be the multisig\\\"\\n        );\\n    }\\n\\n    function _requireCallerIsNotMultisig() internal view {\\n        require(\\n            !_callerIsMultisig(),\\n            \\\"HOGToken: caller must not be the multisig\\\"\\n        );\\n    }\\n\\n    function _requireCallerIsHOGStaking() internal view {\\n        require(\\n            msg.sender == hogStakingAddress,\\n            \\\"HOGToken: caller must be the HOGStaking contract\\\"\\n        );\\n    }\\n\\n    // --- Optional functions ---\\n\\n    function name() external pure returns (string memory) {\\n        return _NAME;\\n    }\\n\\n    function symbol() external pure returns (string memory) {\\n        return _SYMBOL;\\n    }\\n\\n    function decimals() external pure returns (uint8) {\\n        return _DECIMALS;\\n    }\\n\\n    function version() external pure override returns (string memory) {\\n        return _VERSION;\\n    }\\n\\n    function permitTypeHash() external pure override returns (bytes32) {\\n        return _PERMIT_TYPEHASH;\\n    }\\n}\\n\",\"keccak256\":\"0x744148972ec1a5c39510631c9638d23f769f73be010af0738b5e3b5ebda1b4aa\",\"license\":\"MIT\"},\"contracts/dependencies/CheckContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\ncontract CheckContract {\\n    /**\\n     * Check that the account is an already deployed non-destroyed contract.\\n     * See: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol#L12\\n     */\\n    function checkContract(address _account) internal view {\\n        require(_account != address(0), \\\"Account cannot be zero address\\\");\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(_account)\\n        }\\n        require(size > 0, \\\"Account code size cannot be zero\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x4860bce12806bb81c1e91ec617f2f95dd1774148b15645eaca94a67220096f2f\",\"license\":\"MIT\"},\"contracts/dependencies/IERC2612.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @dev Interface of the ERC2612 standard as defined in the EIP.\\n *\\n * Adds the {permit} method, which can be used to change one's\\n * {IERC20-allowance} without having to send a transaction, by signing a\\n * message. This allows users to spend tokens without having to hold StETH.\\n *\\n * See https://eips.stETHeum.org/EIPS/eip-2612.\\n *\\n * Code adapted from https://github.com/OpenZeppelin/openzeppelin-contracts/pull/2237/\\n */\\ninterface IERC2612 {\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over `owner`'s tokens,\\n     * given `owner`'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.stETHeum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current ERC2612 nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases `owner`'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     *\\n     * `owner` can limit the time a Permit is valid for by setting `deadline` to\\n     * a value in the near future. The deadline argument can be set to uint(-1) to\\n     * create Permits that effectively never expire.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function version() external view returns (string memory);\\n\\n    function permitTypeHash() external view returns (bytes32);\\n\\n    function domainSeparator() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xd862d70e8c9d8f912e73151567a70f47f3a7e52c9ec766ccc4e02f87bd0d32b9\",\"license\":\"MIT\"},\"contracts/interfaces/ILockupContractFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\ninterface ILockupContractFactory {\\n    // --- Events ---\\n\\n    event HOGTokenAddressSet(address _hogTokenAddress);\\n    event LockupContractDeployedThroughFactory(\\n        address _lockupContractAddress,\\n        address _beneficiary,\\n        uint _unlockTime,\\n        address _deployer\\n    );\\n\\n    // --- Functions ---\\n\\n    function setHOGTokenAddress(address _hogTokenAddress) external;\\n\\n    function deployLockupContract(\\n        address _beneficiary,\\n        uint _unlockTime\\n    ) external;\\n\\n    function isRegisteredLockup(address _addr) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xd4f2ae1ec95a5b86533b0c92bb73de48a400e7d7e17aff534a20302c21d13fc4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101c060405269d3c21bcecceda10000006004553480156200002057600080fd5b50604051620019623803806200196283398101604081905262000043916200042c565b6200004e8662000239565b620000598562000239565b620000648462000239565b6001600160a01b03818116610120524261010052868116610140528581166101605284166101a05260408051808201825260088152674865646765686f6760c01b6020918201528151808301835260018152603160f81b908201527f3e3b338be0a9483d9643312a03e09df6325a84306d81643784c442d7ce5515b360c08181527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660e08190524660a081815286517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81880152808801869052606081018490526080808201939093523081830152875180820390920182529093019095528151919093012090925260045460009062000180906002620002ea565b90506200018e868262000301565b600454600090620001a1906020620002ea565b9050620001af8a8262000301565b6000620001d56003620001ce60048054620002ea60201b90919060201c565b90620003e5565b6101808190529050620001e9878262000301565b6000620002198262000212856200021288620002126064600454620002ea60201b90919060201c565b90620003f3565b905062000227878262000301565b5050505050505050505050506200052c565b6001600160a01b038116620002955760405162461bcd60e51b815260206004820152601e60248201527f4163636f756e742063616e6e6f74206265207a65726f2061646472657373000060448201526064015b60405180910390fd5b803b80620002e65760405162461bcd60e51b815260206004820181905260248201527f4163636f756e7420636f64652073697a652063616e6e6f74206265207a65726f60448201526064016200028c565b5050565b6000620002f88284620004c3565b90505b92915050565b6001600160a01b038216620003595760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016200028c565b60025462000368908262000401565b6002556001600160a01b03821660009081526020819052604090205462000390908262000401565b6001600160a01b038316600081815260208181526040808320949094559251848152919290917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b6000620002f88284620004dd565b6000620002f8828462000500565b6000620002f8828462000516565b80516001600160a01b03811681146200042757600080fd5b919050565b60008060008060008060c087890312156200044657600080fd5b62000451876200040f565b955062000461602088016200040f565b945062000471604088016200040f565b935062000481606088016200040f565b925062000491608088016200040f565b9150620004a160a088016200040f565b90509295509295509295565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417620002fb57620002fb620004ad565b600082620004fb57634e487b7160e01b600052601260045260246000fd5b500490565b81810381811115620002fb57620002fb620004ad565b80820180821115620002fb57620002fb620004ad565b60805160a05160c05160e05161010051610120516101405161016051610180516101a051611382620005e0600039600081816102fc0152610f480152600061033f0152600081816104210152818161081301528181610c76015261103f0152600081816103a30152610c3901526000818161024e01528181610af50152610f05015260008181610225015261093b015260006108e0015260006108bb015260006108400152600061086801526113826000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c8063811c5b4d116100c3578063d874ea741161007c578063d874ea741461039e578063dd62ed3e146103c5578063e7c8fed4146103fe578063ec0a5a9e14610409578063f633e7431461041c578063f698da251461044357600080fd5b8063811c5b4d146102f757806395d89b411461031e578063974f55901461033d578063a457c2d714610363578063a9059cbb14610376578063d505accf1461038957600080fd5b8063395093511161011557806339509351146102105780633c84b7c2146102235780635462870d1461024957806354fd4d501461028857806370a08231146102a55780637ecebe00146102ce57600080fd5b806306fdde031461015d578063095ea7b31461019357806310ce43bd146101b657806318160ddd146101e657806323b872dd146101ee578063313ce56714610201575b600080fd5b6040805180820190915260088152674865646765686f6760c01b60208201525b60405161018a91906110d1565b60405180910390f35b6101a66101a136600461113b565b61044b565b604051901515815260200161018a565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c95b60405190815260200161018a565b6002546101d8565b6101a66101fc366004611165565b610477565b6040516012815260200161018a565b6101a661021e36600461113b565b6104ff565b7f00000000000000000000000000000000000000000000000000000000000000006101d8565b6102707f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161018a565b6040805180820190915260018152603160f81b602082015261017d565b6101d86102b33660046111a1565b6001600160a01b031660009081526020819052604090205490565b6101d86102dc3660046111a1565b6001600160a01b031660009081526003602052604090205490565b6102707f000000000000000000000000000000000000000000000000000000000000000081565b604080518082019091526003815262484f4760e81b602082015261017d565b7f00000000000000000000000000000000000000000000000000000000000000006101d8565b6101a661037136600461113b565b61054b565b6101a661038436600461113b565b6105af565b61039c6103973660046111bc565b6105ea565b005b6102707f000000000000000000000000000000000000000000000000000000000000000081565b6101d86103d336600461122f565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6101d86301e1338081565b61039c61041736600461113b565b6107ef565b6102707f000000000000000000000000000000000000000000000000000000000000000081565b6101d861083c565b600061045561092e565b1561046257610462610965565b61046d3384846109ce565b5060015b92915050565b600061048161092e565b1561048f5761048f84610af3565b61049883610b89565b6104a3848484610d38565b6104f584336104f085604051806060016040528060288152602001611300602891396001600160a01b038a1660009081526001602090815260408083203384529091529020549190610ebb565b6109ce565b5060019392505050565b600061050961092e565b1561051657610516610965565b3360008181526001602090815260408083206001600160a01b038816845290915290205461046d919085906104f09086610ee7565b600061055561092e565b1561056257610562610965565b61046d33846104f085604051806060016040528060258152602001611328602591393360009081526001602090815260408083206001600160a01b038d1684529091529020549190610ebb565b60006105b9610efa565b80156105c857506105c861092e565b156105d6576105d683610f29565b6105df83610b89565b61046d338484610d38565b428410156106375760405162461bcd60e51b8152602060048201526015602482015274484f473a206578706972656420646561646c696e6560581b60448201526064015b60405180910390fd5b600061064161083c565b6001600160a01b038916600090815260036020526040812080547f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9928c928c928c9290919061068f83611278565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810187905260e0016040516020818303038152906040528051906020012060405160200161070892919061190160f01b81526002810192909252602282015260420190565b60408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa158015610773573d6000803e3d6000fd5b505050602060405103519050886001600160a01b0316816001600160a01b0316146107d95760405162461bcd60e51b8152602060048201526016602482015275484f473a20696e76616c6964207369676e617475726560501b604482015260640161062e565b6107e48989896109ce565b505050505050505050565b6107f7611034565b6107ff61092e565b1561080d5761080d82610af3565b610838827f000000000000000000000000000000000000000000000000000000000000000083610d38565b5050565b60007f0000000000000000000000000000000000000000000000000000000000000000460361088a57507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b60006301e1338061095f427f00000000000000000000000000000000000000000000000000000000000000006110c5565b10905090565b61096d610efa565b156109cc5760405162461bcd60e51b815260206004820152602960248201527f484f47546f6b656e3a2063616c6c6572206d757374206e6f7420626520746865604482015268206d756c746973696760b81b606482015260840161062e565b565b6001600160a01b038316610a305760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161062e565b6001600160a01b038216610a915760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161062e565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031603610b865760405162461bcd60e51b815260206004820152602960248201527f484f47546f6b656e3a2073656e646572206d757374206e6f7420626520746865604482015268206d756c746973696760b81b606482015260840161062e565b50565b6001600160a01b03811615801590610baa57506001600160a01b0381163014155b610c375760405162461bcd60e51b815260206004820152605260248201527f484f473a2043616e6e6f74207472616e7366657220746f6b656e73206469726560448201527f63746c7920746f2074686520484f4720746f6b656e20636f6e7472616374206f6064820152717220746865207a65726f206164647265737360701b608482015260a40161062e565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031614158015610cab57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031614155b610b865760405162461bcd60e51b815260206004820152605260248201527f484f473a2043616e6e6f74207472616e7366657220746f6b656e73206469726560448201527f63746c7920746f2074686520636f6d6d756e6974792069737375616e6365206f6064820152711c881cdd185ada5b99c818dbdb9d1c9858dd60721b608482015260a40161062e565b6001600160a01b038316610d9c5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161062e565b6001600160a01b038216610dfe5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161062e565b610e3b816040518060600160405280602681526020016112da602691396001600160a01b0386166000908152602081905260409020549190610ebb565b6001600160a01b038085166000908152602081905260408082209390935590841681522054610e6a9082610ee7565b6001600160a01b038381166000818152602081815260409182902094909455518481529092918616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9101610ae6565b60008184841115610edf5760405162461bcd60e51b815260040161062e91906110d1565b505050900390565b6000610ef38284611291565b9392505050565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161490565b60405163bb7603f160e01b81526001600160a01b0382811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063bb7603f190602401602060405180830381865afa158015610f8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb391906112a4565b610b865760405162461bcd60e51b815260206004820152604660248201527f484f47546f6b656e3a20726563697069656e74206d7573742062652061204c6f60448201527f636b7570436f6e7472616374207265676973746572656420696e2074686520466064820152656163746f727960d01b608482015260a40161062e565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146109cc5760405162461bcd60e51b815260206004820152603060248201527f484f47546f6b656e3a2063616c6c6572206d7573742062652074686520484f4760448201526f14dd185ada5b99c818dbdb9d1c9858dd60821b606482015260840161062e565b6000610ef382846112c6565b600060208083528351808285015260005b818110156110fe578581018301518582016040015282016110e2565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b038116811461113657600080fd5b919050565b6000806040838503121561114e57600080fd5b6111578361111f565b946020939093013593505050565b60008060006060848603121561117a57600080fd5b6111838461111f565b92506111916020850161111f565b9150604084013590509250925092565b6000602082840312156111b357600080fd5b610ef38261111f565b600080600080600080600060e0888a0312156111d757600080fd5b6111e08861111f565b96506111ee6020890161111f565b95506040880135945060608801359350608088013560ff8116811461121257600080fd5b9699959850939692959460a0840135945060c09093013592915050565b6000806040838503121561124257600080fd5b61124b8361111f565b91506112596020840161111f565b90509250929050565b634e487b7160e01b600052601160045260246000fd5b60006001820161128a5761128a611262565b5060010190565b8082018082111561047157610471611262565b6000602082840312156112b657600080fd5b81518015158114610ef357600080fd5b818103818111156104715761047161126256fe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa264697066735822122068b04da0444ef8e535c08ec4de5359f361b7e40533c7b9452409083ec2dd075564736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101585760003560e01c8063811c5b4d116100c3578063d874ea741161007c578063d874ea741461039e578063dd62ed3e146103c5578063e7c8fed4146103fe578063ec0a5a9e14610409578063f633e7431461041c578063f698da251461044357600080fd5b8063811c5b4d146102f757806395d89b411461031e578063974f55901461033d578063a457c2d714610363578063a9059cbb14610376578063d505accf1461038957600080fd5b8063395093511161011557806339509351146102105780633c84b7c2146102235780635462870d1461024957806354fd4d501461028857806370a08231146102a55780637ecebe00146102ce57600080fd5b806306fdde031461015d578063095ea7b31461019357806310ce43bd146101b657806318160ddd146101e657806323b872dd146101ee578063313ce56714610201575b600080fd5b6040805180820190915260088152674865646765686f6760c01b60208201525b60405161018a91906110d1565b60405180910390f35b6101a66101a136600461113b565b61044b565b604051901515815260200161018a565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c95b60405190815260200161018a565b6002546101d8565b6101a66101fc366004611165565b610477565b6040516012815260200161018a565b6101a661021e36600461113b565b6104ff565b7f00000000000000000000000000000000000000000000000000000000000000006101d8565b6102707f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161018a565b6040805180820190915260018152603160f81b602082015261017d565b6101d86102b33660046111a1565b6001600160a01b031660009081526020819052604090205490565b6101d86102dc3660046111a1565b6001600160a01b031660009081526003602052604090205490565b6102707f000000000000000000000000000000000000000000000000000000000000000081565b604080518082019091526003815262484f4760e81b602082015261017d565b7f00000000000000000000000000000000000000000000000000000000000000006101d8565b6101a661037136600461113b565b61054b565b6101a661038436600461113b565b6105af565b61039c6103973660046111bc565b6105ea565b005b6102707f000000000000000000000000000000000000000000000000000000000000000081565b6101d86103d336600461122f565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6101d86301e1338081565b61039c61041736600461113b565b6107ef565b6102707f000000000000000000000000000000000000000000000000000000000000000081565b6101d861083c565b600061045561092e565b1561046257610462610965565b61046d3384846109ce565b5060015b92915050565b600061048161092e565b1561048f5761048f84610af3565b61049883610b89565b6104a3848484610d38565b6104f584336104f085604051806060016040528060288152602001611300602891396001600160a01b038a1660009081526001602090815260408083203384529091529020549190610ebb565b6109ce565b5060019392505050565b600061050961092e565b1561051657610516610965565b3360008181526001602090815260408083206001600160a01b038816845290915290205461046d919085906104f09086610ee7565b600061055561092e565b1561056257610562610965565b61046d33846104f085604051806060016040528060258152602001611328602591393360009081526001602090815260408083206001600160a01b038d1684529091529020549190610ebb565b60006105b9610efa565b80156105c857506105c861092e565b156105d6576105d683610f29565b6105df83610b89565b61046d338484610d38565b428410156106375760405162461bcd60e51b8152602060048201526015602482015274484f473a206578706972656420646561646c696e6560581b60448201526064015b60405180910390fd5b600061064161083c565b6001600160a01b038916600090815260036020526040812080547f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9928c928c928c9290919061068f83611278565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810187905260e0016040516020818303038152906040528051906020012060405160200161070892919061190160f01b81526002810192909252602282015260420190565b60408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa158015610773573d6000803e3d6000fd5b505050602060405103519050886001600160a01b0316816001600160a01b0316146107d95760405162461bcd60e51b8152602060048201526016602482015275484f473a20696e76616c6964207369676e617475726560501b604482015260640161062e565b6107e48989896109ce565b505050505050505050565b6107f7611034565b6107ff61092e565b1561080d5761080d82610af3565b610838827f000000000000000000000000000000000000000000000000000000000000000083610d38565b5050565b60007f0000000000000000000000000000000000000000000000000000000000000000460361088a57507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b60006301e1338061095f427f00000000000000000000000000000000000000000000000000000000000000006110c5565b10905090565b61096d610efa565b156109cc5760405162461bcd60e51b815260206004820152602960248201527f484f47546f6b656e3a2063616c6c6572206d757374206e6f7420626520746865604482015268206d756c746973696760b81b606482015260840161062e565b565b6001600160a01b038316610a305760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161062e565b6001600160a01b038216610a915760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161062e565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031603610b865760405162461bcd60e51b815260206004820152602960248201527f484f47546f6b656e3a2073656e646572206d757374206e6f7420626520746865604482015268206d756c746973696760b81b606482015260840161062e565b50565b6001600160a01b03811615801590610baa57506001600160a01b0381163014155b610c375760405162461bcd60e51b815260206004820152605260248201527f484f473a2043616e6e6f74207472616e7366657220746f6b656e73206469726560448201527f63746c7920746f2074686520484f4720746f6b656e20636f6e7472616374206f6064820152717220746865207a65726f206164647265737360701b608482015260a40161062e565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031614158015610cab57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031614155b610b865760405162461bcd60e51b815260206004820152605260248201527f484f473a2043616e6e6f74207472616e7366657220746f6b656e73206469726560448201527f63746c7920746f2074686520636f6d6d756e6974792069737375616e6365206f6064820152711c881cdd185ada5b99c818dbdb9d1c9858dd60721b608482015260a40161062e565b6001600160a01b038316610d9c5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161062e565b6001600160a01b038216610dfe5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161062e565b610e3b816040518060600160405280602681526020016112da602691396001600160a01b0386166000908152602081905260409020549190610ebb565b6001600160a01b038085166000908152602081905260408082209390935590841681522054610e6a9082610ee7565b6001600160a01b038381166000818152602081815260409182902094909455518481529092918616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9101610ae6565b60008184841115610edf5760405162461bcd60e51b815260040161062e91906110d1565b505050900390565b6000610ef38284611291565b9392505050565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161490565b60405163bb7603f160e01b81526001600160a01b0382811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063bb7603f190602401602060405180830381865afa158015610f8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb391906112a4565b610b865760405162461bcd60e51b815260206004820152604660248201527f484f47546f6b656e3a20726563697069656e74206d7573742062652061204c6f60448201527f636b7570436f6e7472616374207265676973746572656420696e2074686520466064820152656163746f727960d01b608482015260a40161062e565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146109cc5760405162461bcd60e51b815260206004820152603060248201527f484f47546f6b656e3a2063616c6c6572206d7573742062652074686520484f4760448201526f14dd185ada5b99c818dbdb9d1c9858dd60821b606482015260840161062e565b6000610ef382846112c6565b600060208083528351808285015260005b818110156110fe578581018301518582016040015282016110e2565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b038116811461113657600080fd5b919050565b6000806040838503121561114e57600080fd5b6111578361111f565b946020939093013593505050565b60008060006060848603121561117a57600080fd5b6111838461111f565b92506111916020850161111f565b9150604084013590509250925092565b6000602082840312156111b357600080fd5b610ef38261111f565b600080600080600080600060e0888a0312156111d757600080fd5b6111e08861111f565b96506111ee6020890161111f565b95506040880135945060608801359350608088013560ff8116811461121257600080fd5b9699959850939692959460a0840135945060c09093013592915050565b6000806040838503121561124257600080fd5b61124b8361111f565b91506112596020840161111f565b90509250929050565b634e487b7160e01b600052601160045260246000fd5b60006001820161128a5761128a611262565b5060010190565b8082018082111561047157610471611262565b6000602082840312156112b657600080fd5b81518015158114610ef357600080fd5b818103818111156104715761047161126256fe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa264697066735822122068b04da0444ef8e535c08ec4de5359f361b7e40533c7b9452409083ec2dd075564736f6c63430008130033",
  "devdoc": {
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
      }
    },
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
      },
      "approve(address,uint256)": {
        "details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
      },
      "balanceOf(address)": {
        "details": "Returns the amount of tokens owned by `account`."
      },
      "nonces(address)": {
        "details": "Returns the current ERC2612 nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases `owner`'s nonce by one. This prevents a signature from being used multiple times. `owner` can limit the time a Permit is valid for by setting `deadline` to a value in the near future. The deadline argument can be set to uint(-1) to create Permits that effectively never expire."
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "details": "Sets `amount` as the allowance of `spender` over `owner`'s tokens, given `owner`'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `owner` cannot be the zero address. - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.stETHeum.org/EIPS/eip-2612#specification[relevant EIP section]."
      },
      "totalSupply()": {
        "details": "Returns the amount of tokens in existence."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Token's functionality based on HOG token.  Functions logic remains unchanged. Changes to the contract: - Raised pragma version - Removed an import of Token Interface Even though SafeMath is no longer required, the decision was made to keep it to avoid human factor errors Based upon OpenZeppelin's ERC20 contract: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol   and their EIP2612 (ERC20Permit / ERC712) functionality: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/53516bc555a454862470e7860a9b5254db4d00f5/contracts/token/ERC20/ERC20Permit.sol   --- Functionality added specific to the HOG ---  1) Transfer protection: blacklist of addresses that are invalid recipients (i.e. core Liquity contracts) in external  transfer() and transferFrom() calls. The purpose is to protect users from losing tokens by mistakenly sending HOG directly to a Liquity core contract, when they should rather call the right function. 2) sendToHOGStaking(): callable only by Hedgehog core contracts, which move HOG tokens from user -> HOGStaking contract. 3) Supply hard-capped at 100 million 4) CommunityIssuance and LockupContractFactory addresses are set at deployment 5) The bug bounties / hackathons allocation of 2 million tokens is minted at deployment to an EOA 6) 32 million tokens are minted at deployment to the CommunityIssuance contract 7) The LP rewards allocation of (1 + 1/3) million tokens is minted at deployent to a Staking contract 8) (64 + 2/3) million tokens are minted at deployment to the Hedgehog multisig 9) Until one year from deployment: -Hedgehog multisig may only transfer() tokens to LockupContracts that have been deployed via & registered in the   LockupContractFactory  -approve(), increaseAllowance(), decreaseAllowance() revert when called by the multisig -transferFrom() reverts when the multisig is the sender -sendToHOGStaking() reverts when the multisig is the sender, blocking the multisig from staking its HOG.  After one year has passed since deployment of the HOGToken, the restrictions on multisig operations are lifted and the multisig has the same rights as any other address.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8633,
        "contract": "contracts/HOG/HOGToken.sol:HOGToken",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8639,
        "contract": "contracts/HOG/HOGToken.sol:HOGToken",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 8641,
        "contract": "contracts/HOG/HOGToken.sol:HOGToken",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 8659,
        "contract": "contracts/HOG/HOGToken.sol:HOGToken",
        "label": "_nonces",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8665,
        "contract": "contracts/HOG/HOGToken.sol:HOGToken",
        "label": "_1_MILLION",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}