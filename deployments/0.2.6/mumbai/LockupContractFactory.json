{
  "address": "0xDdaF04fA0cA86205458606bcf32e4604460aBD4F",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_hogTokenAddress",
          "type": "address"
        }
      ],
      "name": "HOGTokenAddressSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_lockupContractAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_unlockTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_deployer",
          "type": "address"
        }
      ],
      "name": "LockupContractDeployedThroughFactory",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SECONDS_IN_ONE_YEAR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_unlockTime",
          "type": "uint256"
        }
      ],
      "name": "deployLockupContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hogTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_contractAddress",
          "type": "address"
        }
      ],
      "name": "isRegisteredLockup",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lockupContractToDeployer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_hogTokenAddress",
          "type": "address"
        }
      ],
      "name": "setHOGTokenAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xfea5831a280f06fa4bcf690ea5527ff194aed72cdfeece957e4ed4c6793c7f60",
  "receipt": {
    "to": null,
    "from": "0x796EcfBe7a2A424f9D905dfC38b8994aB2db9FD6",
    "contractAddress": "0xDdaF04fA0cA86205458606bcf32e4604460aBD4F",
    "transactionIndex": 3,
    "gasUsed": "806305",
    "logsBloom": "0x00000000000000000000000000000000000000000000000100800000000000000000000000000000000000000000000000008000000080200001000000000000000000000000000000000000000000800001000000000000000100000000000000000004020000000000000000000800000000000080000080000000000000400000000000000000000000000000000000000000000000000000000000001000200000000000000000000000000000000000000000000000000000000000004000000000000000000001000000000000000000002000000000100000000020000008000000000000000000000000000000000000000000000000000000100000",
    "blockHash": "0x85984f94a98ce5820423a5ccad0eb4c557cb911c1b29e414630715eb3fd8ab22",
    "transactionHash": "0xfea5831a280f06fa4bcf690ea5527ff194aed72cdfeece957e4ed4c6793c7f60",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 41545283,
        "transactionHash": "0xfea5831a280f06fa4bcf690ea5527ff194aed72cdfeece957e4ed4c6793c7f60",
        "address": "0xDdaF04fA0cA86205458606bcf32e4604460aBD4F",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000796ecfbe7a2a424f9d905dfc38b8994ab2db9fd6"
        ],
        "data": "0x",
        "logIndex": 8,
        "blockHash": "0x85984f94a98ce5820423a5ccad0eb4c557cb911c1b29e414630715eb3fd8ab22"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 41545283,
        "transactionHash": "0xfea5831a280f06fa4bcf690ea5527ff194aed72cdfeece957e4ed4c6793c7f60",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000796ecfbe7a2a424f9d905dfc38b8994ab2db9fd6",
          "0x000000000000000000000000e7f13f6bc1e7f5ca4a6c9a255124ce22c46f8ef0"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000079ba2baea9ec10000000000000000000000000000000000000000000000000b4d690f156fd52c00000000000000000000000000000000000000000000009f9b968751aa96a2700000000000000000000000000000000000000000000000000b45cd6c5a85366b00000000000000000000000000000000000000000000009f9b9e22f465814131",
        "logIndex": 9,
        "blockHash": "0x85984f94a98ce5820423a5ccad0eb4c557cb911c1b29e414630715eb3fd8ab22"
      }
    ],
    "blockNumber": 41545283,
    "cumulativeGasUsed": "952247",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d5f53fb866e459e87a9a24e89566d411",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_hogTokenAddress\",\"type\":\"address\"}],\"name\":\"HOGTokenAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_lockupContractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_unlockTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_deployer\",\"type\":\"address\"}],\"name\":\"LockupContractDeployedThroughFactory\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SECONDS_IN_ONE_YEAR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_unlockTime\",\"type\":\"uint256\"}],\"name\":\"deployLockupContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hogTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"isRegisteredLockup\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockupContractToDeployer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hogTokenAddress\",\"type\":\"address\"}],\"name\":\"setHOGTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/HOG/LockupContractFactory.sol\":\"LockupContractFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"contracts/HOG/LockupContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../interfaces/IHOGToken.sol\\\";\\n\\n/*\\n* The lockup contract architecture utilizes a single LockupContract, with an unlockTime. The unlockTime is passed as an argument \\n* to the LockupContract's constructor. The contract's balance can be withdrawn by the beneficiary when block.timestamp > unlockTime. \\n* At construction, the contract checks that unlockTime is at least one year later than the Hedgehog system's deployment time. \\n\\n* Within the first year from deployment, the deployer of the HOGToken (Hedgehog AG's address) may transfer HOG only to valid \\n* LockupContracts, and no other addresses (this is enforced in HOGToken.sol's transfer() function).\\n* \\n* The above two restrictions ensure that until one year after system deployment, HOG tokens originating from Hedgehog AG cannot \\n* enter circulating supply and cannot be staked to earn system revenue.\\n*/\\ncontract LockupContract {\\n    using SafeMath for uint;\\n\\n    // --- Data ---\\n    string public constant NAME = \\\"LockupContract\\\";\\n\\n    uint public constant SECONDS_IN_ONE_YEAR = 31536000;\\n\\n    address public immutable beneficiary;\\n\\n    IHOGToken public hogToken;\\n\\n    // Unlock time is the Unix point in time at which the beneficiary can withdraw.\\n    uint public unlockTime;\\n\\n    // --- Events ---\\n\\n    event LockupContractCreated(address _beneficiary, uint _unlockTime);\\n    event LockupContractEmptied(uint _HOGwithdrawal);\\n\\n    // --- Functions ---\\n\\n    constructor(\\n        address _hogTokenAddress,\\n        address _beneficiary,\\n        uint _unlockTime\\n    ) public {\\n        hogToken = IHOGToken(_hogTokenAddress);\\n\\n        /*\\n         * Set the unlock time to a chosen instant in the future, as long as it is at least 1 year after\\n         * the system was deployed\\n         */\\n        _requireUnlockTimeIsAtLeastOneYearAfterSystemDeployment(_unlockTime);\\n        unlockTime = _unlockTime;\\n\\n        beneficiary = _beneficiary;\\n        emit LockupContractCreated(_beneficiary, _unlockTime);\\n    }\\n\\n    function withdrawHOG() external {\\n        _requireCallerIsBeneficiary();\\n        _requireLockupDurationHasPassed();\\n\\n        IHOGToken hogTokenCached = hogToken;\\n        uint HOGBalance = hogTokenCached.balanceOf(address(this));\\n        hogTokenCached.transfer(beneficiary, HOGBalance);\\n        emit LockupContractEmptied(HOGBalance);\\n    }\\n\\n    // --- 'require' functions ---\\n\\n    function _requireCallerIsBeneficiary() internal view {\\n        require(\\n            msg.sender == beneficiary,\\n            \\\"LockupContract: caller is not the beneficiary\\\"\\n        );\\n    }\\n\\n    function _requireLockupDurationHasPassed() internal view {\\n        require(\\n            block.timestamp >= unlockTime,\\n            \\\"LockupContract: The lockup duration must have passed\\\"\\n        );\\n    }\\n\\n    function _requireUnlockTimeIsAtLeastOneYearAfterSystemDeployment(\\n        uint _unlockTime\\n    ) internal view {\\n        uint systemDeploymentTime = hogToken.getDeploymentStartTime();\\n        require(\\n            _unlockTime >= systemDeploymentTime.add(SECONDS_IN_ONE_YEAR),\\n            \\\"LockupContract: unlock time must be at least one year after system deployment\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x4bf9094b5fce70d76fcd449db9e30b3d822eb3f1e19f9facde1f655128b01cb1\",\"license\":\"MIT\"},\"contracts/HOG/LockupContractFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../dependencies/CheckContract.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../interfaces/ILockupContractFactory.sol\\\";\\nimport \\\"./LockupContract.sol\\\";\\n\\n/*\\n * The LockupContractFactory deploys LockupContracts - its main purpose is to keep a registry of valid deployed\\n * LockupContracts.\\n *\\n * This registry is checked by HOGToken when the Hedgehog deployer attempts to transfer HOG tokens. During the first year\\n * since system deployment, the Hedgehog deployer is only allowed to transfer HOG to valid LockupContracts that have been\\n * deployed by and recorded in the LockupContractFactory. This ensures the deployer's HOG can't be traded or staked in the\\n * first year, and can only be sent to a verified LockupContract which unlocks at least one year after system deployment.\\n *\\n * LockupContracts can of course be deployed directly, but only those deployed through and recorded in the LockupContractFactory\\n * will be considered \\\"valid\\\" by HOGToken. This is a convenient way to verify that the target address is a genuine\\n * LockupContract.\\n */\\n\\ncontract LockupContractFactory is Ownable, CheckContract {\\n    using SafeMath for uint;\\n\\n    // --- Data ---\\n    string public constant NAME = \\\"LockupContractFactory\\\";\\n\\n    uint public constant SECONDS_IN_ONE_YEAR = 31536000;\\n\\n    address public hogTokenAddress;\\n\\n    mapping(address => address) public lockupContractToDeployer;\\n\\n    // --- Events ---\\n\\n    event HOGTokenAddressSet(address _hogTokenAddress);\\n    event LockupContractDeployedThroughFactory(\\n        address _lockupContractAddress,\\n        address _beneficiary,\\n        uint _unlockTime,\\n        address _deployer\\n    );\\n\\n    // --- Functions ---\\n\\n    function setHOGTokenAddress(address _hogTokenAddress) external onlyOwner {\\n        checkContract(_hogTokenAddress);\\n\\n        hogTokenAddress = _hogTokenAddress;\\n        emit HOGTokenAddressSet(_hogTokenAddress);\\n\\n        renounceOwnership();\\n    }\\n\\n    function deployLockupContract(\\n        address _beneficiary,\\n        uint _unlockTime\\n    ) external {\\n        address hogTokenAddressCached = hogTokenAddress;\\n        _requireHOGAddressIsSet(hogTokenAddressCached);\\n        LockupContract lockupContract = new LockupContract(\\n            hogTokenAddressCached,\\n            _beneficiary,\\n            _unlockTime\\n        );\\n\\n        lockupContractToDeployer[address(lockupContract)] = msg.sender;\\n        emit LockupContractDeployedThroughFactory(\\n            address(lockupContract),\\n            _beneficiary,\\n            _unlockTime,\\n            msg.sender\\n        );\\n    }\\n\\n    function isRegisteredLockup(\\n        address _contractAddress\\n    ) public view returns (bool) {\\n        return lockupContractToDeployer[_contractAddress] != address(0);\\n    }\\n\\n    // --- 'require'  functions ---\\n    function _requireHOGAddressIsSet(address _hogTokenAddress) internal pure {\\n        require(_hogTokenAddress != address(0), \\\"LCF: HOG Address is not set\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xb96c0f5a92143689137a28d27e60a51e68efd219f6768f3bd173fc3c096830c0\",\"license\":\"MIT\"},\"contracts/dependencies/CheckContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\ncontract CheckContract {\\n    /**\\n     * Check that the account is an already deployed non-destroyed contract.\\n     * See: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol#L12\\n     */\\n    function checkContract(address _account) internal view {\\n        require(_account != address(0), \\\"Account cannot be zero address\\\");\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(_account)\\n        }\\n        require(size > 0, \\\"Account code size cannot be zero\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x4860bce12806bb81c1e91ec617f2f95dd1774148b15645eaca94a67220096f2f\",\"license\":\"MIT\"},\"contracts/dependencies/IERC2612.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @dev Interface of the ERC2612 standard as defined in the EIP.\\n *\\n * Adds the {permit} method, which can be used to change one's\\n * {IERC20-allowance} without having to send a transaction, by signing a\\n * message. This allows users to spend tokens without having to hold StETH.\\n *\\n * See https://eips.stETHeum.org/EIPS/eip-2612.\\n *\\n * Code adapted from https://github.com/OpenZeppelin/openzeppelin-contracts/pull/2237/\\n */\\ninterface IERC2612 {\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over `owner`'s tokens,\\n     * given `owner`'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.stETHeum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current ERC2612 nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases `owner`'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     *\\n     * `owner` can limit the time a Permit is valid for by setting `deadline` to\\n     * a value in the near future. The deadline argument can be set to uint(-1) to\\n     * create Permits that effectively never expire.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function version() external view returns (string memory);\\n\\n    function permitTypeHash() external view returns (bytes32);\\n\\n    function domainSeparator() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xd862d70e8c9d8f912e73151567a70f47f3a7e52c9ec766ccc4e02f87bd0d32b9\",\"license\":\"MIT\"},\"contracts/interfaces/IHOGToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../dependencies/IERC2612.sol\\\";\\n\\ninterface IHOGToken is IERC20, IERC2612 {\\n    // --- Events ---\\n\\n    event CommunityIssuanceAddressSet(address _communityIssuanceAddress);\\n    event HOGStakingAddressSet(address _hogStakingAddress);\\n    event LockupContractFactoryAddressSet(\\n        address _lockupContractFactoryAddress\\n    );\\n\\n    // --- Functions ---\\n\\n    function sendToHOGStaking(address _sender, uint256 _amount) external;\\n\\n    function getDeploymentStartTime() external view returns (uint256);\\n\\n    function getLpRewardsEntitlement() external view returns (uint256);\\n\\n    function increaseAllowance(\\n        address _spender,\\n        uint256 _addedValues\\n    ) external returns (bool);\\n\\n    function decreaseAllowance(\\n        address _spender,\\n        uint256 _decreasedValue\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x2c56d03787067551d0947fc59ba84d41d4163856163557d5e59c023552d99f04\",\"license\":\"MIT\"},\"contracts/interfaces/ILockupContractFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\ninterface ILockupContractFactory {\\n    // --- Events ---\\n\\n    event HOGTokenAddressSet(address _hogTokenAddress);\\n    event LockupContractDeployedThroughFactory(\\n        address _lockupContractAddress,\\n        address _beneficiary,\\n        uint _unlockTime,\\n        address _deployer\\n    );\\n\\n    // --- Functions ---\\n\\n    function setHOGTokenAddress(address _hogTokenAddress) external;\\n\\n    function deployLockupContract(\\n        address _beneficiary,\\n        uint _unlockTime\\n    ) external;\\n\\n    function isRegisteredLockup(address _addr) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xd4f2ae1ec95a5b86533b0c92bb73de48a400e7d7e17aff534a20302c21d13fc4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610d318061007e6000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063bb7603f111610066578063bb7603f114610144578063be61cd8214610182578063d83c72db14610195578063ebafec9e146101be578063f2fde38b146101d157600080fd5b806334c44b4d146100a3578063715018a6146100b85780638da5cb5b146100c057806398e5f3c4146100ea578063a3f4df7e14610103575b600080fd5b6100b66100b1366004610592565b6101e4565b005b6100b66102c4565b6000546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b6100f56301e1338081565b6040519081526020016100e1565b610137604051806040016040528060158152602001744c6f636b7570436f6e7472616374466163746f727960581b81525081565b6040516100e191906105bc565b61017261015236600461060a565b6001600160a01b0390811660009081526002602052604090205416151590565b60405190151581526020016100e1565b6001546100cd906001600160a01b031681565b6100cd6101a336600461060a565b6002602052600090815260409020546001600160a01b031681565b6100b66101cc36600461060a565b6102d8565b6100b66101df36600461060a565b610345565b6001546001600160a01b03166101f9816103c0565b600081848460405161020a90610569565b6001600160a01b0393841681529290911660208301526040820152606001604051809103906000f080158015610244573d6000803e3d6000fd5b506001600160a01b0381811660008181526002602090815260409182902080546001600160a01b03191633908117909155825193845293891690830152810186905260608101919091529091507ff534ff9ac4abb71a4aa2f8715f3a8f41c05155fbf8af61daecc51365e3a5c0089060800160405180910390a150505050565b6102cc610416565b6102d66000610470565b565b6102e0610416565b6102e9816104c0565b600180546001600160a01b0319166001600160a01b0383169081179091556040519081527f2228d43367ece49cb99c3d3ac6d6df4a289d31f4a2bd9ab1ff590c66f3a4d6c09060200160405180910390a16103426102c4565b50565b61034d610416565b6001600160a01b0381166103b75760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b61034281610470565b6001600160a01b0381166103425760405162461bcd60e51b815260206004820152601b60248201527f4c43463a20484f472041646472657373206973206e6f7420736574000000000060448201526064016103ae565b6000546001600160a01b031633146102d65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103ae565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b0381166105165760405162461bcd60e51b815260206004820152601e60248201527f4163636f756e742063616e6e6f74206265207a65726f2061646472657373000060448201526064016103ae565b803b806105655760405162461bcd60e51b815260206004820181905260248201527f4163636f756e7420636f64652073697a652063616e6e6f74206265207a65726f60448201526064016103ae565b5050565b6106cf8061062d83390190565b80356001600160a01b038116811461058d57600080fd5b919050565b600080604083850312156105a557600080fd5b6105ae83610576565b946020939093013593505050565b600060208083528351808285015260005b818110156105e9578581018301518582016040015282016105cd565b506000604082860101526040601f19601f8301168501019250505092915050565b60006020828403121561061c57600080fd5b61062582610576565b939250505056fe60a060405234801561001057600080fd5b506040516106cf3803806106cf83398101604081905261002f916101f4565b600080546001600160a01b0319166001600160a01b038516179055610053816100a8565b60018190556001600160a01b038216608081905260408051918252602082018390527f5faee922186516bf77266643c1fda130acefc439d571400e8697106c6aed9b54910160405180910390a150505061026a565b60008060009054906101000a90046001600160a01b03166001600160a01b0316633c84b7c26040518163ffffffff1660e01b8152600401602060405180830381865afa1580156100fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101209190610230565b9050610130816301e133806101c3565b8210156101bf5760405162461bcd60e51b815260206004820152604d60248201527f4c6f636b7570436f6e74726163743a20756e6c6f636b2074696d65206d75737460448201527f206265206174206c65617374206f6e652079656172206166746572207379737460648201526c195b4819195c1b1bde5b595b9d609a1b608482015260a40160405180910390fd5b5050565b60006101cf8284610249565b90505b92915050565b80516001600160a01b03811681146101ef57600080fd5b919050565b60008060006060848603121561020957600080fd5b610212846101d8565b9250610220602085016101d8565b9150604084015190509250925092565b60006020828403121561024257600080fd5b5051919050565b808201808211156101d257634e487b7160e01b600052601160045260246000fd5b60805161043d610292600039600081816088015281816101bb015261027e015261043d6000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063251c1aa31461006757806338af3eed14610083578063570dc45e146100c257806398e5f3c4146100d5578063a3f4df7e146100e0578063b6b24f341461011a575b600080fd5b61007060015481565b6040519081526020015b60405180910390f35b6100aa7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161007a565b6000546100aa906001600160a01b031681565b6100706301e1338081565b61010d6040518060400160405280600e81526020016d131bd8dadd5c10dbdb9d1c9858dd60921b81525081565b60405161007a9190610377565b610122610124565b005b61012c610273565b610134610308565b600080546040516370a0823160e01b81523060048201526001600160a01b03909116919082906370a0823190602401602060405180830381865afa158015610180573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101a491906103c5565b60405163a9059cbb60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018390529192509083169063a9059cbb906044016020604051808303816000875af1158015610217573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061023b91906103de565b506040518181527f7d17cbc0f78ccfed33842dd29dab2872e8347bf3981293ab2cfe35ca16371a2f9060200160405180910390a15050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146103065760405162461bcd60e51b815260206004820152602d60248201527f4c6f636b7570436f6e74726163743a2063616c6c6572206973206e6f7420746860448201526c652062656e656669636961727960981b60648201526084015b60405180910390fd5b565b6001544210156103065760405162461bcd60e51b815260206004820152603460248201527f4c6f636b7570436f6e74726163743a20546865206c6f636b75702064757261746044820152731a5bdb881b5d5cdd081a185d99481c185cdcd95960621b60648201526084016102fd565b600060208083528351808285015260005b818110156103a457858101830151858201604001528201610388565b506000604082860101526040601f19601f8301168501019250505092915050565b6000602082840312156103d757600080fd5b5051919050565b6000602082840312156103f057600080fd5b8151801515811461040057600080fd5b939250505056fea26469706673582212207f6515ec94dd8ae79766b9b3666c00ceb51919921a855281613b8cc4a35a97c764736f6c63430008130033a2646970667358221220e79cc96dee421e8226cf71aaeac52488d1710ced42faf3032caf03dd39c1b7fc64736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c8063bb7603f111610066578063bb7603f114610144578063be61cd8214610182578063d83c72db14610195578063ebafec9e146101be578063f2fde38b146101d157600080fd5b806334c44b4d146100a3578063715018a6146100b85780638da5cb5b146100c057806398e5f3c4146100ea578063a3f4df7e14610103575b600080fd5b6100b66100b1366004610592565b6101e4565b005b6100b66102c4565b6000546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b6100f56301e1338081565b6040519081526020016100e1565b610137604051806040016040528060158152602001744c6f636b7570436f6e7472616374466163746f727960581b81525081565b6040516100e191906105bc565b61017261015236600461060a565b6001600160a01b0390811660009081526002602052604090205416151590565b60405190151581526020016100e1565b6001546100cd906001600160a01b031681565b6100cd6101a336600461060a565b6002602052600090815260409020546001600160a01b031681565b6100b66101cc36600461060a565b6102d8565b6100b66101df36600461060a565b610345565b6001546001600160a01b03166101f9816103c0565b600081848460405161020a90610569565b6001600160a01b0393841681529290911660208301526040820152606001604051809103906000f080158015610244573d6000803e3d6000fd5b506001600160a01b0381811660008181526002602090815260409182902080546001600160a01b03191633908117909155825193845293891690830152810186905260608101919091529091507ff534ff9ac4abb71a4aa2f8715f3a8f41c05155fbf8af61daecc51365e3a5c0089060800160405180910390a150505050565b6102cc610416565b6102d66000610470565b565b6102e0610416565b6102e9816104c0565b600180546001600160a01b0319166001600160a01b0383169081179091556040519081527f2228d43367ece49cb99c3d3ac6d6df4a289d31f4a2bd9ab1ff590c66f3a4d6c09060200160405180910390a16103426102c4565b50565b61034d610416565b6001600160a01b0381166103b75760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b61034281610470565b6001600160a01b0381166103425760405162461bcd60e51b815260206004820152601b60248201527f4c43463a20484f472041646472657373206973206e6f7420736574000000000060448201526064016103ae565b6000546001600160a01b031633146102d65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103ae565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b0381166105165760405162461bcd60e51b815260206004820152601e60248201527f4163636f756e742063616e6e6f74206265207a65726f2061646472657373000060448201526064016103ae565b803b806105655760405162461bcd60e51b815260206004820181905260248201527f4163636f756e7420636f64652073697a652063616e6e6f74206265207a65726f60448201526064016103ae565b5050565b6106cf8061062d83390190565b80356001600160a01b038116811461058d57600080fd5b919050565b600080604083850312156105a557600080fd5b6105ae83610576565b946020939093013593505050565b600060208083528351808285015260005b818110156105e9578581018301518582016040015282016105cd565b506000604082860101526040601f19601f8301168501019250505092915050565b60006020828403121561061c57600080fd5b61062582610576565b939250505056fe60a060405234801561001057600080fd5b506040516106cf3803806106cf83398101604081905261002f916101f4565b600080546001600160a01b0319166001600160a01b038516179055610053816100a8565b60018190556001600160a01b038216608081905260408051918252602082018390527f5faee922186516bf77266643c1fda130acefc439d571400e8697106c6aed9b54910160405180910390a150505061026a565b60008060009054906101000a90046001600160a01b03166001600160a01b0316633c84b7c26040518163ffffffff1660e01b8152600401602060405180830381865afa1580156100fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101209190610230565b9050610130816301e133806101c3565b8210156101bf5760405162461bcd60e51b815260206004820152604d60248201527f4c6f636b7570436f6e74726163743a20756e6c6f636b2074696d65206d75737460448201527f206265206174206c65617374206f6e652079656172206166746572207379737460648201526c195b4819195c1b1bde5b595b9d609a1b608482015260a40160405180910390fd5b5050565b60006101cf8284610249565b90505b92915050565b80516001600160a01b03811681146101ef57600080fd5b919050565b60008060006060848603121561020957600080fd5b610212846101d8565b9250610220602085016101d8565b9150604084015190509250925092565b60006020828403121561024257600080fd5b5051919050565b808201808211156101d257634e487b7160e01b600052601160045260246000fd5b60805161043d610292600039600081816088015281816101bb015261027e015261043d6000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063251c1aa31461006757806338af3eed14610083578063570dc45e146100c257806398e5f3c4146100d5578063a3f4df7e146100e0578063b6b24f341461011a575b600080fd5b61007060015481565b6040519081526020015b60405180910390f35b6100aa7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161007a565b6000546100aa906001600160a01b031681565b6100706301e1338081565b61010d6040518060400160405280600e81526020016d131bd8dadd5c10dbdb9d1c9858dd60921b81525081565b60405161007a9190610377565b610122610124565b005b61012c610273565b610134610308565b600080546040516370a0823160e01b81523060048201526001600160a01b03909116919082906370a0823190602401602060405180830381865afa158015610180573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101a491906103c5565b60405163a9059cbb60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018390529192509083169063a9059cbb906044016020604051808303816000875af1158015610217573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061023b91906103de565b506040518181527f7d17cbc0f78ccfed33842dd29dab2872e8347bf3981293ab2cfe35ca16371a2f9060200160405180910390a15050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146103065760405162461bcd60e51b815260206004820152602d60248201527f4c6f636b7570436f6e74726163743a2063616c6c6572206973206e6f7420746860448201526c652062656e656669636961727960981b60648201526084015b60405180910390fd5b565b6001544210156103065760405162461bcd60e51b815260206004820152603460248201527f4c6f636b7570436f6e74726163743a20546865206c6f636b75702064757261746044820152731a5bdb881b5d5cdd081a185d99481c185cdcd95960621b60648201526084016102fd565b600060208083528351808285015260005b818110156103a457858101830151858201604001528201610388565b506000604082860101526040601f19601f8301168501019250505092915050565b6000602082840312156103d757600080fd5b5051919050565b6000602082840312156103f057600080fd5b8151801515811461040057600080fd5b939250505056fea26469706673582212207f6515ec94dd8ae79766b9b3666c00ceb51919921a855281613b8cc4a35a97c764736f6c63430008130033a2646970667358221220e79cc96dee421e8226cf71aaeac52488d1710ced42faf3032caf03dd39c1b7fc64736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 396,
        "contract": "contracts/HOG/LockupContractFactory.sol:LockupContractFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 10731,
        "contract": "contracts/HOG/LockupContractFactory.sol:LockupContractFactory",
        "label": "hogTokenAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 10735,
        "contract": "contracts/HOG/LockupContractFactory.sol:LockupContractFactory",
        "label": "lockupContractToDeployer",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      }
    }
  }
}