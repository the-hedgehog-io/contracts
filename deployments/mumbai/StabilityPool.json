{
  "address": "0x4aB08274D0276B610F17d0a3669904Bba896d696",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newActivePoolAddress",
          "type": "address"
        }
      ],
      "name": "ActivePoolAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newBaseFeeLMATokenAddress",
          "type": "address"
        }
      ],
      "name": "BaseFeeLMATokenAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newBorrowerOperationsAddress",
          "type": "address"
        }
      ],
      "name": "BorrowerOperationsAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newCommunityIssuanceAddress",
          "type": "address"
        }
      ],
      "name": "CommunityIssuanceAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newDefaultPoolAddress",
          "type": "address"
        }
      ],
      "name": "DefaultPoolAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_depositor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_P",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_S",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_G",
          "type": "uint256"
        }
      ],
      "name": "DepositSnapshotUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "_currentEpoch",
          "type": "uint128"
        }
      ],
      "name": "EpochUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_frontEnd",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_kickbackRate",
          "type": "uint256"
        }
      ],
      "name": "FrontEndRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_frontEnd",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_P",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_G",
          "type": "uint256"
        }
      ],
      "name": "FrontEndSnapshotUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_frontEnd",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newFrontEndStake",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_depositor",
          "type": "address"
        }
      ],
      "name": "FrontEndStakeChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_depositor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_frontEnd",
          "type": "address"
        }
      ],
      "name": "FrontEndTagSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_G",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "_epoch",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "_scale",
          "type": "uint128"
        }
      ],
      "name": "G_Updated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_depositor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_HOG",
          "type": "uint256"
        }
      ],
      "name": "HOGPaidToDepositor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_frontEnd",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_HOG",
          "type": "uint256"
        }
      ],
      "name": "HOGPaidToFrontEnd",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_P",
          "type": "uint256"
        }
      ],
      "name": "P_Updated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newPriceFeedAddress",
          "type": "address"
        }
      ],
      "name": "PriceFeedAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_S",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "_epoch",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "_scale",
          "type": "uint128"
        }
      ],
      "name": "S_Updated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "_currentScale",
          "type": "uint128"
        }
      ],
      "name": "ScaleUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newSortedTrovesAddress",
          "type": "address"
        }
      ],
      "name": "SortedTrovesAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_depositor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_StETH",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_BaseFeeLMALoss",
          "type": "uint256"
        }
      ],
      "name": "StETHGainWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "StETHSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newBalance",
          "type": "uint256"
        }
      ],
      "name": "StabilityPoolBaseFeeLMABalanceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newBalance",
          "type": "uint256"
        }
      ],
      "name": "StabilityPoolStETHBalanceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newTroveManagerAddress",
          "type": "address"
        }
      ],
      "name": "TroveManagerAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_depositor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newDeposit",
          "type": "uint256"
        }
      ],
      "name": "UserDepositChanged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BORROWING_FEE_FLOOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BaseFeeLMA_GAS_COMPENSATION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CCR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DECIMAL_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MCR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_NET_DEBT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "P",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERCENT_DIVISOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SCALE_FACTOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_100pct",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "activePool",
      "outputs": [
        {
          "internalType": "contract IActivePool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseFeeLMAToken",
      "outputs": [
        {
          "internalType": "contract IBaseFeeLMAToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowerOperations",
      "outputs": [
        {
          "internalType": "contract IBorrowerOperations",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "communityIssuance",
      "outputs": [
        {
          "internalType": "contract ICommunityIssuance",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentEpoch",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentScale",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultPool",
      "outputs": [
        {
          "internalType": "contract IDefaultPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "depositSnapshots",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "S",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "P",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "G",
          "type": "uint256"
        },
        {
          "internalType": "uint128",
          "name": "scale",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "epoch",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "deposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "initialValue",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "frontEndTag",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "name": "epochToScaleToG",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "name": "epochToScaleToSum",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "frontEndSnapshots",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "S",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "P",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "G",
          "type": "uint256"
        },
        {
          "internalType": "uint128",
          "name": "scale",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "epoch",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "frontEndStakes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "frontEnds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "kickbackRate",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "registered",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_depositor",
          "type": "address"
        }
      ],
      "name": "getCompoundedBaseFeeLMADeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_frontEnd",
          "type": "address"
        }
      ],
      "name": "getCompoundedFrontEndStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_depositor",
          "type": "address"
        }
      ],
      "name": "getDepositorHOGGain",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_depositor",
          "type": "address"
        }
      ],
      "name": "getDepositorStETHGain",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntireSystemColl",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "entireSystemColl",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntireSystemDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "entireSystemDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_frontEnd",
          "type": "address"
        }
      ],
      "name": "getFrontEndHOGGain",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalBaseFeeLMADeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastBaseFeeLMALossError_Offset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastHOGError",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastStETHError_Offset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_debtToOffset",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_collToAdd",
          "type": "uint256"
        }
      ],
      "name": "offset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "contract IPriceFeed",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_frontEndTag",
          "type": "address"
        }
      ],
      "name": "provideToSP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_kickbackRate",
          "type": "uint256"
        }
      ],
      "name": "registerFrontEnd",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrowerOperationsAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_troveManagerAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_activePoolAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_baseFeeLMATokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sortedTrovesAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_priceFeedAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_communityIssuanceAddress",
          "type": "address"
        }
      ],
      "name": "setAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sortedTroves",
      "outputs": [
        {
          "internalType": "contract ISortedTroves",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "troveManager",
      "outputs": [
        {
          "internalType": "contract ITroveManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawFromSP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_upperHint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lowerHint",
          "type": "address"
        }
      ],
      "name": "withdrawStETHGainToTrove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xace8c42d71cf173d1a3c5220493344f04553292353cb285ce10b911897698d06",
  "receipt": {
    "to": null,
    "from": "0x796EcfBe7a2A424f9D905dfC38b8994aB2db9FD6",
    "contractAddress": "0x4aB08274D0276B610F17d0a3669904Bba896d696",
    "transactionIndex": 20,
    "gasUsed": "3101428",
    "logsBloom": "0x
    "blockHash": "0xd615fd4b5763e6f5bbe5a979aff394c179a1678fe83ce355910a389a3e55017c",
    "transactionHash": "0xace8c42d71cf173d1a3c5220493344f04553292353cb285ce10b911897698d06",
    "logs": [
      {
        "transactionIndex": 20,
        "blockNumber": 39483057,
        "transactionHash": "0xace8c42d71cf173d1a3c5220493344f04553292353cb285ce10b911897698d06",
        "address": "0x4aB08274D0276B610F17d0a3669904Bba896d696",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000796ecfbe7a2a424f9d905dfc38b8994ab2db9fd6"
        ],
        "data": "0x",
        "logIndex": 85,
        "blockHash": "0xd615fd4b5763e6f5bbe5a979aff394c179a1678fe83ce355910a389a3e55017c"
      },
      {
        "transactionIndex": 20,
        "blockNumber": 39483057,
        "transactionHash": "0xace8c42d71cf173d1a3c5220493344f04553292353cb285ce10b911897698d06",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000796ecfbe7a2a424f9d905dfc38b8994ab2db9fd6",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x000000000000000000000000000000000000000000000000001b8bd4ae72d1cc0000000000000000000000000000000000000000000000000689d8f262008c5b000000000000000000000000000000000000000000002163657b6f10e6c22505000000000000000000000000000000000000000000000000066e4d1db38dba8f0000000000000000000000000000000000000000000021636596fae59534f6d1",
        "logIndex": 86,
        "blockHash": "0xd615fd4b5763e6f5bbe5a979aff394c179a1678fe83ce355910a389a3e55017c"
      }
    ],
    "blockNumber": 39483057,
    "cumulativeGasUsed": "5772947",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "38c8dd2ed2953f011d2e7e97384dc754",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newActivePoolAddress\",\"type\":\"address\"}],\"name\":\"ActivePoolAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newBaseFeeLMATokenAddress\",\"type\":\"address\"}],\"name\":\"BaseFeeLMATokenAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newBorrowerOperationsAddress\",\"type\":\"address\"}],\"name\":\"BorrowerOperationsAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newCommunityIssuanceAddress\",\"type\":\"address\"}],\"name\":\"CommunityIssuanceAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newDefaultPoolAddress\",\"type\":\"address\"}],\"name\":\"DefaultPoolAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_P\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_S\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_G\",\"type\":\"uint256\"}],\"name\":\"DepositSnapshotUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"_currentEpoch\",\"type\":\"uint128\"}],\"name\":\"EpochUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_frontEnd\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_kickbackRate\",\"type\":\"uint256\"}],\"name\":\"FrontEndRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_frontEnd\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_P\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_G\",\"type\":\"uint256\"}],\"name\":\"FrontEndSnapshotUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_frontEnd\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newFrontEndStake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"}],\"name\":\"FrontEndStakeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_frontEnd\",\"type\":\"address\"}],\"name\":\"FrontEndTagSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_G\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"_epoch\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"_scale\",\"type\":\"uint128\"}],\"name\":\"G_Updated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_HOG\",\"type\":\"uint256\"}],\"name\":\"HOGPaidToDepositor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_frontEnd\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_HOG\",\"type\":\"uint256\"}],\"name\":\"HOGPaidToFrontEnd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_P\",\"type\":\"uint256\"}],\"name\":\"P_Updated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newPriceFeedAddress\",\"type\":\"address\"}],\"name\":\"PriceFeedAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_S\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"_epoch\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"_scale\",\"type\":\"uint128\"}],\"name\":\"S_Updated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"_currentScale\",\"type\":\"uint128\"}],\"name\":\"ScaleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newSortedTrovesAddress\",\"type\":\"address\"}],\"name\":\"SortedTrovesAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_StETH\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_BaseFeeLMALoss\",\"type\":\"uint256\"}],\"name\":\"StETHGainWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"StETHSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newBalance\",\"type\":\"uint256\"}],\"name\":\"StabilityPoolBaseFeeLMABalanceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newBalance\",\"type\":\"uint256\"}],\"name\":\"StabilityPoolStETHBalanceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newTroveManagerAddress\",\"type\":\"address\"}],\"name\":\"TroveManagerAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newDeposit\",\"type\":\"uint256\"}],\"name\":\"UserDepositChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BORROWING_FEE_FLOOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BaseFeeLMA_GAS_COMPENSATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CCR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DECIMAL_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MCR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_NET_DEBT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"P\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENT_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SCALE_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_100pct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activePool\",\"outputs\":[{\"internalType\":\"contract IActivePool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseFeeLMAToken\",\"outputs\":[{\"internalType\":\"contract IBaseFeeLMAToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowerOperations\",\"outputs\":[{\"internalType\":\"contract IBorrowerOperations\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"communityIssuance\",\"outputs\":[{\"internalType\":\"contract ICommunityIssuance\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentEpoch\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentScale\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultPool\",\"outputs\":[{\"internalType\":\"contract IDefaultPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositSnapshots\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"S\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"P\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"G\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"scale\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"epoch\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"initialValue\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"frontEndTag\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"name\":\"epochToScaleToG\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"name\":\"epochToScaleToSum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"frontEndSnapshots\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"S\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"P\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"G\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"scale\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"epoch\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"frontEndStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"frontEnds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"kickbackRate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"registered\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"}],\"name\":\"getCompoundedBaseFeeLMADeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_frontEnd\",\"type\":\"address\"}],\"name\":\"getCompoundedFrontEndStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"}],\"name\":\"getDepositorHOGGain\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"}],\"name\":\"getDepositorStETHGain\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntireSystemColl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"entireSystemColl\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntireSystemDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"entireSystemDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_frontEnd\",\"type\":\"address\"}],\"name\":\"getFrontEndHOGGain\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalBaseFeeLMADeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastBaseFeeLMALossError_Offset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastHOGError\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastStETHError_Offset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_debtToOffset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_collToAdd\",\"type\":\"uint256\"}],\"name\":\"offset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract IPriceFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_frontEndTag\",\"type\":\"address\"}],\"name\":\"provideToSP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_kickbackRate\",\"type\":\"uint256\"}],\"name\":\"registerFrontEnd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrowerOperationsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_troveManagerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_activePoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_baseFeeLMATokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sortedTrovesAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceFeedAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_communityIssuanceAddress\",\"type\":\"address\"}],\"name\":\"setAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sortedTroves\",\"outputs\":[{\"internalType\":\"contract ISortedTroves\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"troveManager\",\"outputs\":[{\"internalType\":\"contract ITroveManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFromSP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_upperHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lowerHint\",\"type\":\"address\"}],\"name\":\"withdrawStETHGainToTrove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Fork of Liquity's Stability Pool. Logic remains unchanged. Changes to the contract: - Raised pragma version - Removed an import of IStabilityPool Interface Even though SafeMath is no longer required, the decision was made to keep it to avoid human factor errors The Stability Pool holds BaseFeeLMA tokens deposited by Stability Pool depositors. When a trove is liquidated, then depending on system conditions, some of its BaseFeeLMA debt gets offset with BaseFeeLMA in the Stability Pool:  that is, the offset debt evaporates, and an equal amount of BaseFeeLMA tokens in the Stability Pool is burned. Thus, a liquidation causes each depositor to receive a BaseFeeLMA loss, in proportion to their deposit as a share of total deposits. They also receive an StETH gain, as the StETH collateral of the liquidated trove is distributed among Stability depositors, in the same proportion. When a liquidation occurs, it depletes every deposit by the same fraction: for example, a liquidation that depletes 40% of the total BaseFeeLMA in the Stability Pool, depletes 40% of each deposit. A deposit that has experienced a series of liquidations is termed a \\\"compounded deposit\\\": each liquidation depletes the deposit, multiplying it by some factor in range ]0,1[ --- IMPLEMENTATION --- We use a highly scalable method of tracking deposits and StETH gains that has O(1) complexity. When a liquidation occurs, rather than updating each depositor's deposit and StETH gain, we simply update two state variables: a product P, and a sum S. A mathematical manipulation allows us to factor out the initial deposit, and accurately track all depositors' compounded deposits and accumulated StETH gains over time, as liquidations occur, using just these two variables P and S. When depositors join the Stability Pool, they get a snapshot of the latest P and S: P_t and S_t, respectively. The formula for a depositor's accumulated StETH gain is derived here: https://github.com/liquity/dev/blob/main/papers/Scalable_Reward_Distribution_with_Compounding_Stakes.pdf For a given deposit d_t, the ratio P/P_t tells us the factor by which a deposit has decreased since it joined the Stability Pool, and the term d_t * (S - S_t)/P_t gives us the deposit's total accumulated StETH gain. Each liquidation updates the product P and sum S. After a series of liquidations, a compounded deposit and corresponding StETH gain can be calculated using the initial deposit, the depositor\\u2019s snapshots of P and S, and the latest values of P and S. Any time a depositor updates their deposit (withdrawal, top-up) their accumulated StETH gain is paid out, their new deposit is recorded (based on their latest compounded deposit and modified by the withdrawal/top-up), and they receive new snapshots of the latest P and S. Essentially, they make a fresh deposit that overwrites the old one. --- SCALE FACTOR --- Since P is a running product in range ]0,1] that is always-decreasing, it should never reach 0 when multiplied by a number in range ]0,1[. Unfortunately, Solidity floor division always reaches 0, sooner or later. A series of liquidations that nearly empty the Pool (and thus each multiply P by a very small number in range ]0,1[ ) may push P to its 18 digit decimal limit, and round it to 0, when in fact the Pool hasn't been emptied: this would break deposit tracking. So, to track P accurately, we use a scale factor: if a liquidation would cause P to decrease to <1e-9 (and be rounded to 0 by Solidity), we first multiply P by 1e9, and increment a currentScale factor by 1. The added benefit of using 1e9 for the scale factor (rather than 1e18) is that it ensures negligible precision loss close to the scale boundary: when P is at its minimum value of 1e9, the relative precision loss in P due to floor division is only on the order of 1e-9. --- EPOCHS --- Whenever a liquidation fully empties the Stability Pool, all deposits should become 0. However, setting P to 0 would make P be 0 forever, and break all future reward calculations. So, every time the Stability Pool is emptied by a liquidation, we reset P = 1 and currentScale = 0, and increment the currentEpoch by 1. --- TRACKING DEPOSIT OVER SCALE CHANGES AND EPOCHS --- When a deposit is made, it gets snapshots of the currentEpoch and the currentScale. When calculating a compounded deposit, we compare the current epoch to the deposit's epoch snapshot. If the current epoch is newer, then the deposit was present during a pool-emptying liquidation, and necessarily has been depleted to 0. Otherwise, we then compare the current scale to the deposit's scale snapshot. If they're equal, the compounded deposit is given by d_t * P/P_t. If it spans one scale change, it is given by d_t * P/(P_t * 1e9). If it spans more than one scale change, we define the compounded deposit as 0, since it is now less than 1e-9'th of its initial value (e.g. a deposit of 1 billion BaseFeeLMA has depleted to < 1 BaseFeeLMA).  --- TRACKING DEPOSITOR'S StETH GAIN OVER SCALE CHANGES AND EPOCHS --- In the current epoch, the latest value of S is stored upon each scale change, and the mapping (scale -> S) is stored for each epoch. This allows us to calculate a deposit's accumulated StETH gain, during the epoch in which the deposit was non-zero and earned StETH. We calculate the depositor's accumulated StETH gain for the scale at which they made the deposit, using the StETH gain formula: e_1 = d_t * (S - S_t) / P_t and also for scale after, taking care to divide the latter by a factor of 1e9: e_2 = d_t * S / (P_t * 1e9) The gain in the second scale will be full, as the starting point was in the previous scale, thus no need to subtract anything. The deposit therefore was present for reward events from the beginning of that second scale.        S_i-S_t + S_{i+1}      .<--------.------------>      .         .      . S_i     .   S_{i+1}   <--.-------->.<----------->   S_t.         .   <->.         .      t         .  |---+---------|-------------|-----...         i            i+1 The sum of (e_1 + e_2) captures the depositor's total accumulated StETH gain, handling the case where their deposit spanned one scale change. We only care about gains across one scale change, since the compounded deposit is defined as being 0 once it has spanned more than one scale change. --- UPDATING P WHEN A LIQUIDATION OCCURS --- Please see the implementation spec in the proof document, which closely follows on from the compounded deposit / StETH gain derivations: https://github.com/liquity/liquity/blob/master/papers/Scalable_Reward_Distribution_with_Compounding_Stakes.pdf --- HOG ISSUANCE TO STABILITY POOL DEPOSITORS --- A HOG issuance event occurs at every deposit operation, and every liquidation. Each deposit is tagged with the address of the front end through which it was made. All deposits earn a share of the issued HOG in proportion to the deposit as a share of total deposits. The HOG earned by a given deposit, is split between the depositor and the front end through which the deposit was made, based on the front end's kickbackRate. Please see the system Readme for an overview: https://github.com/liquity/dev/blob/main/README.md#hog-issuance-to-stability-providers We use the same mathematical product-sum approach to track HOG gains for depositors, where 'G' is the sum corresponding to HOG gains. The product P (and snapshot P_t) is re-used, as the ratio P/P_t tracks a deposit's depletion due to liquidations.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StabilityPool.sol\":\"StabilityPool\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"contracts/StabilityPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./interfaces/IBorrowerOperations.sol\\\";\\nimport \\\"./interfaces/IStabilityPool.sol\\\";\\nimport \\\"./interfaces/IBorrowerOperations.sol\\\";\\nimport \\\"./interfaces/ITroveManager.sol\\\";\\nimport \\\"./interfaces/IBaseFeeLMAToken.sol\\\";\\nimport \\\"./interfaces/ISortedTroves.sol\\\";\\nimport \\\"./interfaces/ICommunityIssuance.sol\\\";\\nimport \\\"./dependencies/HedgehogBase.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./dependencies/LiquitySafeMath128.sol\\\";\\nimport \\\"./dependencies/CheckContract.sol\\\";\\nimport \\\"./dependencies/console.sol\\\";\\n\\n/**\\n * @notice Fork of Liquity's Stability Pool. Logic remains unchanged.\\n * Changes to the contract:\\n * - Raised pragma version\\n * - Removed an import of IStabilityPool Interface\\n * Even though SafeMath is no longer required, the decision was made to keep it to avoid human factor errors\\n *\\n * The Stability Pool holds BaseFeeLMA tokens deposited by Stability Pool depositors.\\n *\\n * When a trove is liquidated, then depending on system conditions, some of its BaseFeeLMA debt gets offset with\\n * BaseFeeLMA in the Stability Pool:  that is, the offset debt evaporates, and an equal amount of BaseFeeLMA tokens in the Stability Pool is burned.\\n *\\n * Thus, a liquidation causes each depositor to receive a BaseFeeLMA loss, in proportion to their deposit as a share of total deposits.\\n * They also receive an StETH gain, as the StETH collateral of the liquidated trove is distributed among Stability depositors,\\n * in the same proportion.\\n *\\n * When a liquidation occurs, it depletes every deposit by the same fraction: for example, a liquidation that depletes 40%\\n * of the total BaseFeeLMA in the Stability Pool, depletes 40% of each deposit.\\n *\\n * A deposit that has experienced a series of liquidations is termed a \\\"compounded deposit\\\": each liquidation depletes the deposit,\\n * multiplying it by some factor in range ]0,1[\\n *\\n *\\n * --- IMPLEMENTATION ---\\n *\\n * We use a highly scalable method of tracking deposits and StETH gains that has O(1) complexity.\\n *\\n * When a liquidation occurs, rather than updating each depositor's deposit and StETH gain, we simply update two state variables:\\n * a product P, and a sum S.\\n *\\n * A mathematical manipulation allows us to factor out the initial deposit, and accurately track all depositors' compounded deposits\\n * and accumulated StETH gains over time, as liquidations occur, using just these two variables P and S. When depositors join the\\n * Stability Pool, they get a snapshot of the latest P and S: P_t and S_t, respectively.\\n *\\n * The formula for a depositor's accumulated StETH gain is derived here:\\n * https://github.com/liquity/dev/blob/main/papers/Scalable_Reward_Distribution_with_Compounding_Stakes.pdf\\n *\\n * For a given deposit d_t, the ratio P/P_t tells us the factor by which a deposit has decreased since it joined the Stability Pool,\\n * and the term d_t * (S - S_t)/P_t gives us the deposit's total accumulated StETH gain.\\n *\\n * Each liquidation updates the product P and sum S. After a series of liquidations, a compounded deposit and corresponding StETH gain\\n * can be calculated using the initial deposit, the depositor\\u2019s snapshots of P and S, and the latest values of P and S.\\n *\\n * Any time a depositor updates their deposit (withdrawal, top-up) their accumulated StETH gain is paid out, their new deposit is recorded\\n * (based on their latest compounded deposit and modified by the withdrawal/top-up), and they receive new snapshots of the latest P and S.\\n * Essentially, they make a fresh deposit that overwrites the old one.\\n *\\n *\\n * --- SCALE FACTOR ---\\n *\\n * Since P is a running product in range ]0,1] that is always-decreasing, it should never reach 0 when multiplied by a number in range ]0,1[.\\n * Unfortunately, Solidity floor division always reaches 0, sooner or later.\\n *\\n * A series of liquidations that nearly empty the Pool (and thus each multiply P by a very small number in range ]0,1[ ) may push P\\n * to its 18 digit decimal limit, and round it to 0, when in fact the Pool hasn't been emptied: this would break deposit tracking.\\n *\\n * So, to track P accurately, we use a scale factor: if a liquidation would cause P to decrease to <1e-9 (and be rounded to 0 by Solidity),\\n * we first multiply P by 1e9, and increment a currentScale factor by 1.\\n *\\n * The added benefit of using 1e9 for the scale factor (rather than 1e18) is that it ensures negligible precision loss close to the\\n * scale boundary: when P is at its minimum value of 1e9, the relative precision loss in P due to floor division is only on the\\n * order of 1e-9.\\n *\\n * --- EPOCHS ---\\n *\\n * Whenever a liquidation fully empties the Stability Pool, all deposits should become 0. However, setting P to 0 would make P be 0\\n * forever, and break all future reward calculations.\\n *\\n * So, every time the Stability Pool is emptied by a liquidation, we reset P = 1 and currentScale = 0, and increment the currentEpoch by 1.\\n *\\n * --- TRACKING DEPOSIT OVER SCALE CHANGES AND EPOCHS ---\\n *\\n * When a deposit is made, it gets snapshots of the currentEpoch and the currentScale.\\n *\\n * When calculating a compounded deposit, we compare the current epoch to the deposit's epoch snapshot. If the current epoch is newer,\\n * then the deposit was present during a pool-emptying liquidation, and necessarily has been depleted to 0.\\n *\\n * Otherwise, we then compare the current scale to the deposit's scale snapshot. If they're equal, the compounded deposit is given by d_t * P/P_t.\\n * If it spans one scale change, it is given by d_t * P/(P_t * 1e9). If it spans more than one scale change, we define the compounded deposit\\n * as 0, since it is now less than 1e-9'th of its initial value (e.g. a deposit of 1 billion BaseFeeLMA has depleted to < 1 BaseFeeLMA).\\n *\\n *\\n *  --- TRACKING DEPOSITOR'S StETH GAIN OVER SCALE CHANGES AND EPOCHS ---\\n *\\n * In the current epoch, the latest value of S is stored upon each scale change, and the mapping (scale -> S) is stored for each epoch.\\n *\\n * This allows us to calculate a deposit's accumulated StETH gain, during the epoch in which the deposit was non-zero and earned StETH.\\n *\\n * We calculate the depositor's accumulated StETH gain for the scale at which they made the deposit, using the StETH gain formula:\\n * e_1 = d_t * (S - S_t) / P_t\\n *\\n * and also for scale after, taking care to divide the latter by a factor of 1e9:\\n * e_2 = d_t * S / (P_t * 1e9)\\n *\\n * The gain in the second scale will be full, as the starting point was in the previous scale, thus no need to subtract anything.\\n * The deposit therefore was present for reward events from the beginning of that second scale.\\n *\\n *        S_i-S_t + S_{i+1}\\n *      .<--------.------------>\\n *      .         .\\n *      . S_i     .   S_{i+1}\\n *   <--.-------->.<----------->\\n *   S_t.         .\\n *   <->.         .\\n *      t         .\\n *  |---+---------|-------------|-----...\\n *         i            i+1\\n *\\n * The sum of (e_1 + e_2) captures the depositor's total accumulated StETH gain, handling the case where their\\n * deposit spanned one scale change. We only care about gains across one scale change, since the compounded\\n * deposit is defined as being 0 once it has spanned more than one scale change.\\n *\\n *\\n * --- UPDATING P WHEN A LIQUIDATION OCCURS ---\\n *\\n * Please see the implementation spec in the proof document, which closely follows on from the compounded deposit / StETH gain derivations:\\n * https://github.com/liquity/liquity/blob/master/papers/Scalable_Reward_Distribution_with_Compounding_Stakes.pdf\\n *\\n *\\n * --- HOG ISSUANCE TO STABILITY POOL DEPOSITORS ---\\n *\\n * A HOG issuance event occurs at every deposit operation, and every liquidation.\\n *\\n * Each deposit is tagged with the address of the front end through which it was made.\\n *\\n * All deposits earn a share of the issued HOG in proportion to the deposit as a share of total deposits. The HOG earned\\n * by a given deposit, is split between the depositor and the front end through which the deposit was made, based on the front end's kickbackRate.\\n *\\n * Please see the system Readme for an overview:\\n * https://github.com/liquity/dev/blob/main/README.md#hog-issuance-to-stability-providers\\n *\\n * We use the same mathematical product-sum approach to track HOG gains for depositors, where 'G' is the sum corresponding to HOG gains.\\n * The product P (and snapshot P_t) is re-used, as the ratio P/P_t tracks a deposit's depletion due to liquidations.\\n *\\n */\\ncontract StabilityPool is HedgehogBase, Ownable, CheckContract {\\n    using LiquitySafeMath128 for uint128;\\n    using SafeMath for uint256;\\n\\n    string public constant NAME = \\\"StabilityPool\\\";\\n\\n    IBorrowerOperations public borrowerOperations;\\n\\n    ITroveManager public troveManager;\\n\\n    IBaseFeeLMAToken public baseFeeLMAToken;\\n\\n    // Needed to check if there are pending liquidations\\n    ISortedTroves public sortedTroves;\\n\\n    ICommunityIssuance public communityIssuance;\\n\\n    uint256 internal StETH; // deposited stETH tracker\\n\\n    // Tracker for BaseFeeLMA held in the pool. Changes when users deposit/withdraw, and when Trove debt is offset.\\n    uint256 internal totalBaseFeeLMADeposits;\\n\\n    // --- Data structures ---\\n\\n    struct FrontEnd {\\n        uint kickbackRate;\\n        bool registered;\\n    }\\n\\n    struct Deposit {\\n        uint initialValue;\\n        address frontEndTag;\\n    }\\n\\n    struct Snapshots {\\n        uint S;\\n        uint P;\\n        uint G;\\n        uint128 scale;\\n        uint128 epoch;\\n    }\\n\\n    mapping(address => Deposit) public deposits; // depositor address -> Deposit struct\\n    mapping(address => Snapshots) public depositSnapshots; // depositor address -> snapshots struct\\n\\n    mapping(address => FrontEnd) public frontEnds; // front end address -> FrontEnd struct\\n    mapping(address => uint) public frontEndStakes; // front end address -> last recorded total deposits, tagged with that front end\\n    mapping(address => Snapshots) public frontEndSnapshots; // front end address -> snapshots struct\\n\\n    /*  Product 'P': Running product by which to multiply an initial deposit, in order to find the current compounded deposit,\\n     * after a series of liquidations have occurred, each of which cancel some BaseFeeLMA debt with the deposit.\\n     *\\n     * During its lifetime, a deposit's value evolves from d_t to d_t * P / P_t , where P_t\\n     * is the snapshot of P taken at the instant the deposit was made. 18-digit decimal.\\n     */\\n    uint public P = DECIMAL_PRECISION;\\n\\n    uint public constant SCALE_FACTOR = 1e9;\\n\\n    // Each time the scale of P shifts by SCALE_FACTOR, the scale is incremented by 1\\n    uint128 public currentScale;\\n\\n    // With each offset that fully empties the Pool, the epoch is incremented by 1\\n    uint128 public currentEpoch;\\n\\n    /* StETH Gain sum 'S': During its lifetime, each deposit d_t earns an StETH gain of ( d_t * [S - S_t] )/P_t, where S_t\\n     * is the depositor's snapshot of S taken at the time t when the deposit was made.\\n     *\\n     * The 'S' sums are stored in a nested mapping (epoch => scale => sum):\\n     *\\n     * - The inner mapping records the sum S at different scales\\n     * - The outer mapping records the (scale => sum) mappings, for different epochs.\\n     */\\n    mapping(uint128 => mapping(uint128 => uint)) public epochToScaleToSum;\\n\\n    /*\\n     * Similarly, the sum 'G' is used to calculate HOG gains. During it's lifetime, each deposit d_t earns a HOG gain of\\n     *  ( d_t * [G - G_t] )/P_t, where G_t is the depositor's snapshot of G taken at time t when  the deposit was made.\\n     *\\n     *  HOG reward events occur are triggered by depositor operations (new deposit, topup, withdrawal), and liquidations.\\n     *  In each case, the HOG reward is issued (i.e. G is updated), before other state changes are made.\\n     */\\n    mapping(uint128 => mapping(uint128 => uint)) public epochToScaleToG;\\n\\n    // Error tracker for the error correction in the HOG issuance calculation\\n    uint public lastHOGError;\\n    // Error trackers for the error correction in the offset calculation\\n    uint public lastStETHError_Offset;\\n    uint public lastBaseFeeLMALossError_Offset;\\n\\n    // --- Events ---\\n\\n    event StabilityPoolStETHBalanceUpdated(uint _newBalance);\\n    event StabilityPoolBaseFeeLMABalanceUpdated(uint _newBalance);\\n\\n    event BorrowerOperationsAddressChanged(\\n        address _newBorrowerOperationsAddress\\n    );\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event ActivePoolAddressChanged(address _newActivePoolAddress);\\n    event DefaultPoolAddressChanged(address _newDefaultPoolAddress);\\n    event BaseFeeLMATokenAddressChanged(address _newBaseFeeLMATokenAddress);\\n    event SortedTrovesAddressChanged(address _newSortedTrovesAddress);\\n    event PriceFeedAddressChanged(address _newPriceFeedAddress);\\n    event CommunityIssuanceAddressChanged(address _newCommunityIssuanceAddress);\\n\\n    event P_Updated(uint _P);\\n    event S_Updated(uint _S, uint128 _epoch, uint128 _scale);\\n    event G_Updated(uint _G, uint128 _epoch, uint128 _scale);\\n    event EpochUpdated(uint128 _currentEpoch);\\n    event ScaleUpdated(uint128 _currentScale);\\n\\n    event FrontEndRegistered(address indexed _frontEnd, uint _kickbackRate);\\n    event FrontEndTagSet(address indexed _depositor, address indexed _frontEnd);\\n\\n    event DepositSnapshotUpdated(\\n        address indexed _depositor,\\n        uint _P,\\n        uint _S,\\n        uint _G\\n    );\\n    event FrontEndSnapshotUpdated(address indexed _frontEnd, uint _P, uint _G);\\n    event UserDepositChanged(address indexed _depositor, uint _newDeposit);\\n    event FrontEndStakeChanged(\\n        address indexed _frontEnd,\\n        uint _newFrontEndStake,\\n        address _depositor\\n    );\\n\\n    event StETHGainWithdrawn(\\n        address indexed _depositor,\\n        uint _StETH,\\n        uint _BaseFeeLMALoss\\n    );\\n    event HOGPaidToDepositor(address indexed _depositor, uint _HOG);\\n    event HOGPaidToFrontEnd(address indexed _frontEnd, uint _HOG);\\n    event StETHSent(address _to, uint _amount);\\n\\n    // --- Contract setters ---\\n\\n    function setAddresses(\\n        address _borrowerOperationsAddress,\\n        address _troveManagerAddress,\\n        address _activePoolAddress,\\n        address _baseFeeLMATokenAddress,\\n        address _sortedTrovesAddress,\\n        address _priceFeedAddress,\\n        address _communityIssuanceAddress\\n    ) external onlyOwner {\\n        checkContract(_borrowerOperationsAddress);\\n        checkContract(_troveManagerAddress);\\n        checkContract(_activePoolAddress);\\n        checkContract(_baseFeeLMATokenAddress);\\n        checkContract(_sortedTrovesAddress);\\n        checkContract(_priceFeedAddress);\\n        checkContract(_communityIssuanceAddress);\\n\\n        borrowerOperations = IBorrowerOperations(_borrowerOperationsAddress);\\n        troveManager = ITroveManager(_troveManagerAddress);\\n        activePool = IActivePool(_activePoolAddress);\\n        baseFeeLMAToken = IBaseFeeLMAToken(_baseFeeLMATokenAddress);\\n        sortedTroves = ISortedTroves(_sortedTrovesAddress);\\n        priceFeed = IPriceFeed(_priceFeedAddress);\\n        communityIssuance = ICommunityIssuance(_communityIssuanceAddress);\\n\\n        emit BorrowerOperationsAddressChanged(_borrowerOperationsAddress);\\n        emit TroveManagerAddressChanged(_troveManagerAddress);\\n        emit ActivePoolAddressChanged(_activePoolAddress);\\n        emit BaseFeeLMATokenAddressChanged(_baseFeeLMATokenAddress);\\n        emit SortedTrovesAddressChanged(_sortedTrovesAddress);\\n        emit PriceFeedAddressChanged(_priceFeedAddress);\\n        emit CommunityIssuanceAddressChanged(_communityIssuanceAddress);\\n\\n        renounceOwnership();\\n    }\\n\\n    // --- Getters for public variables. Required by IPool interface ---\\n\\n    function getStETH() external view returns (uint) {\\n        return StETH;\\n    }\\n\\n    function getTotalBaseFeeLMADeposits() external view returns (uint) {\\n        return totalBaseFeeLMADeposits;\\n    }\\n\\n    // --- External Depositor Functions ---\\n\\n    /*  provideToSP():\\n     *\\n     * - Triggers a HOG issuance, based on time passed since the last issuance. The HOG issuance is shared between *all* depositors and front ends\\n     * - Tags the deposit with the provided front end tag param, if it's a new deposit\\n     * - Sends depositor's accumulated gains (HOG, StETH) to depositor\\n     * - Sends the tagged front end's accumulated HOG gains to the tagged front end\\n     * - Increases deposit and tagged front end's stake, and takes new snapshots for each.\\n     */\\n    function provideToSP(uint _amount, address _frontEndTag) external {\\n        _requireFrontEndIsRegisteredOrZero(_frontEndTag);\\n        _requireFrontEndNotRegistered(msg.sender);\\n        _requireNonZeroAmount(_amount);\\n\\n        uint initialDeposit = deposits[msg.sender].initialValue;\\n\\n        ICommunityIssuance communityIssuanceCached = communityIssuance;\\n\\n        _triggerHOGIssuance(communityIssuanceCached);\\n\\n        if (initialDeposit == 0) {\\n            _setFrontEndTag(msg.sender, _frontEndTag);\\n        }\\n        uint depositorStETHGain = getDepositorStETHGain(msg.sender);\\n        uint compoundedBaseFeeLMADeposit = getCompoundedBaseFeeLMADeposit(\\n            msg.sender\\n        );\\n        uint BaseFeeLMALoss = initialDeposit.sub(compoundedBaseFeeLMADeposit); // Needed only for event log\\n\\n        // First pay out any HOG gains\\n        address frontEnd = deposits[msg.sender].frontEndTag;\\n        _payOutHOGGains(communityIssuanceCached, msg.sender, frontEnd);\\n\\n        // Update front end stake\\n        uint compoundedFrontEndStake = getCompoundedFrontEndStake(frontEnd);\\n        uint newFrontEndStake = compoundedFrontEndStake.add(_amount);\\n        _updateFrontEndStakeAndSnapshots(frontEnd, newFrontEndStake);\\n        emit FrontEndStakeChanged(frontEnd, newFrontEndStake, msg.sender);\\n\\n        _sendBaseFeeLMAtoStabilityPool(msg.sender, _amount);\\n\\n        uint newDeposit = compoundedBaseFeeLMADeposit.add(_amount);\\n        _updateDepositAndSnapshots(msg.sender, newDeposit);\\n        emit UserDepositChanged(msg.sender, newDeposit);\\n\\n        emit StETHGainWithdrawn(msg.sender, depositorStETHGain, BaseFeeLMALoss); // BaseFeeLMA Loss required for event log\\n\\n        _sendStETHGainToDepositor(depositorStETHGain);\\n    }\\n\\n    /*  withdrawFromSP():\\n     *\\n     * - Triggers a HOG issuance, based on time passed since the last issuance. The HOG issuance is shared between *all* depositors and front ends\\n     * - Removes the deposit's front end tag if it is a full withdrawal\\n     * - Sends all depositor's accumulated gains (HOG, StETH) to depositor\\n     * - Sends the tagged front end's accumulated HOG gains to the tagged front end\\n     * - Decreases deposit and tagged front end's stake, and takes new snapshots for each.\\n     *\\n     * If _amount > userDeposit, the user withdraws all of their compounded deposit.\\n     */\\n    function withdrawFromSP(uint _amount) external {\\n        if (_amount != 0) {\\n            _requireNoUnderCollateralizedTroves();\\n        }\\n        uint initialDeposit = deposits[msg.sender].initialValue;\\n        _requireUserHasDeposit(initialDeposit);\\n\\n        ICommunityIssuance communityIssuanceCached = communityIssuance;\\n\\n        _triggerHOGIssuance(communityIssuanceCached);\\n\\n        uint depositorStETHGain = getDepositorStETHGain(msg.sender);\\n\\n        uint compoundedBaseFeeLMADeposit = getCompoundedBaseFeeLMADeposit(\\n            msg.sender\\n        );\\n        uint BaseFeeLMAtoWithdraw = LiquityMath._min(\\n            _amount,\\n            compoundedBaseFeeLMADeposit\\n        );\\n        uint BaseFeeLMALoss = initialDeposit.sub(compoundedBaseFeeLMADeposit); // Needed only for event log\\n\\n        // First pay out any HOG gains\\n        address frontEnd = deposits[msg.sender].frontEndTag;\\n        _payOutHOGGains(communityIssuanceCached, msg.sender, frontEnd);\\n\\n        // Update front end stake\\n        uint compoundedFrontEndStake = getCompoundedFrontEndStake(frontEnd);\\n        uint newFrontEndStake = compoundedFrontEndStake.sub(\\n            BaseFeeLMAtoWithdraw\\n        );\\n        _updateFrontEndStakeAndSnapshots(frontEnd, newFrontEndStake);\\n        emit FrontEndStakeChanged(frontEnd, newFrontEndStake, msg.sender);\\n\\n        _sendBaseFeeLMAToDepositor(msg.sender, BaseFeeLMAtoWithdraw);\\n\\n        // Update deposit\\n        uint newDeposit = compoundedBaseFeeLMADeposit.sub(BaseFeeLMAtoWithdraw);\\n        _updateDepositAndSnapshots(msg.sender, newDeposit);\\n        emit UserDepositChanged(msg.sender, newDeposit);\\n\\n        emit StETHGainWithdrawn(msg.sender, depositorStETHGain, BaseFeeLMALoss); // BaseFeeLMA Loss required for event log\\n\\n        _sendStETHGainToDepositor(depositorStETHGain);\\n    }\\n\\n    /* withdrawStETHGainToTrove:\\n     * - Triggers a HOG issuance, based on time passed since the last issuance. The HOG issuance is shared between *all* depositors and front ends\\n     * - Sends all depositor's HOG gain to  depositor\\n     * - Sends all tagged front end's HOG gain to the tagged front end\\n     * - Transfers the depositor's entire StETH gain from the Stability Pool to the caller's trove\\n     * - Leaves their compounded deposit in the Stability Pool\\n     * - Updates snapshots for deposit and tagged front end stake */\\n    function withdrawStETHGainToTrove(\\n        address _upperHint,\\n        address _lowerHint\\n    ) external {\\n        uint initialDeposit = deposits[msg.sender].initialValue;\\n        _requireUserHasDeposit(initialDeposit);\\n        _requireUserHasTrove(msg.sender);\\n        _requireUserHasStETHGain(msg.sender);\\n\\n        ICommunityIssuance communityIssuanceCached = communityIssuance;\\n\\n        _triggerHOGIssuance(communityIssuanceCached);\\n\\n        uint depositorStETHGain = getDepositorStETHGain(msg.sender);\\n\\n        uint compoundedBaseFeeLMADeposit = getCompoundedBaseFeeLMADeposit(\\n            msg.sender\\n        );\\n        uint BaseFeeLMALoss = initialDeposit.sub(compoundedBaseFeeLMADeposit); // Needed only for event log\\n\\n        // First pay out any HOG gains\\n        address frontEnd = deposits[msg.sender].frontEndTag;\\n        _payOutHOGGains(communityIssuanceCached, msg.sender, frontEnd);\\n\\n        // Update front end stake\\n        uint compoundedFrontEndStake = getCompoundedFrontEndStake(frontEnd);\\n        uint newFrontEndStake = compoundedFrontEndStake;\\n        _updateFrontEndStakeAndSnapshots(frontEnd, newFrontEndStake);\\n        emit FrontEndStakeChanged(frontEnd, newFrontEndStake, msg.sender);\\n\\n        _updateDepositAndSnapshots(msg.sender, compoundedBaseFeeLMADeposit);\\n\\n        /* Emit events before transferring StETH gain to Trove.\\n         This lets the event log make more sense (i.e. so it appears that first the StETH gain is withdrawn\\n        and then it is deposited into the Trove, not the other way around). */\\n        emit StETHGainWithdrawn(msg.sender, depositorStETHGain, BaseFeeLMALoss);\\n        emit UserDepositChanged(msg.sender, compoundedBaseFeeLMADeposit);\\n\\n        StETH = StETH.sub(depositorStETHGain);\\n        emit StabilityPoolStETHBalanceUpdated(StETH);\\n        emit StETHSent(msg.sender, depositorStETHGain);\\n\\n        borrowerOperations.moveStETHGainToTrove{value: depositorStETHGain}(\\n            msg.sender,\\n            _upperHint,\\n            _lowerHint\\n        );\\n    }\\n\\n    // --- HOG issuance functions ---\\n\\n    function _triggerHOGIssuance(\\n        ICommunityIssuance _communityIssuance\\n    ) internal {\\n        uint HOGIssuance = _communityIssuance.issueHOG();\\n        _updateG(HOGIssuance);\\n    }\\n\\n    function _updateG(uint _HOGIssuance) internal {\\n        uint totalBaseFeeLMA = totalBaseFeeLMADeposits; // cached to save an SLOAD\\n        /*\\n         * When total deposits is 0, G is not updated. In this case, the HOG issued can not be obtained by later\\n         * depositors - it is missed out on, and remains in the balanceof the CommunityIssuance contract.\\n         *\\n         */\\n        if (totalBaseFeeLMA == 0 || _HOGIssuance == 0) {\\n            return;\\n        }\\n\\n        uint HOGPerUnitStaked;\\n        HOGPerUnitStaked = _computeHOGPerUnitStaked(\\n            _HOGIssuance,\\n            totalBaseFeeLMA\\n        );\\n\\n        uint marginalHOGGain = HOGPerUnitStaked.mul(P);\\n        epochToScaleToG[currentEpoch][currentScale] = epochToScaleToG[\\n            currentEpoch\\n        ][currentScale].add(marginalHOGGain);\\n\\n        emit G_Updated(\\n            epochToScaleToG[currentEpoch][currentScale],\\n            currentEpoch,\\n            currentScale\\n        );\\n    }\\n\\n    function _computeHOGPerUnitStaked(\\n        uint _HOGIssuance,\\n        uint _totalBaseFeeLMADeposits\\n    ) internal returns (uint) {\\n        /*\\n         * Calculate the HOG-per-unit staked.  Division uses a \\\"feedback\\\" error correction, to keep the\\n         * cumulative error low in the running total G:\\n         *\\n         * 1) Form a numerator which compensates for the floor division error that occurred the last time this\\n         * function was called.\\n         * 2) Calculate \\\"per-unit-staked\\\" ratio.\\n         * 3) Multiply the ratio back by its denominator, to reveal the current floor division error.\\n         * 4) Store this error for use in the next correction when this function is called.\\n         * 5) Note: static analysis tools complain about this \\\"division before multiplication\\\", however, it is intended.\\n         */\\n        uint HOGNumerator = _HOGIssuance.mul(DECIMAL_PRECISION).add(\\n            lastHOGError\\n        );\\n\\n        uint HOGPerUnitStaked = HOGNumerator.div(_totalBaseFeeLMADeposits);\\n        lastHOGError = HOGNumerator.sub(\\n            HOGPerUnitStaked.mul(_totalBaseFeeLMADeposits)\\n        );\\n\\n        return HOGPerUnitStaked;\\n    }\\n\\n    // --- Liquidation functions ---\\n\\n    /*\\n     * Cancels out the specified debt against the BaseFeeLMA contained in the Stability Pool (as far as possible)\\n     * and transfers the Trove's StETH collateral from ActivePool to StabilityPool.\\n     * Only called by liquidation functions in the TroveManager.\\n     */\\n    function offset(uint _debtToOffset, uint _collToAdd) external {\\n        _requireCallerIsTroveManager();\\n        uint totalBaseFeeLMA = totalBaseFeeLMADeposits; // cached to save an SLOAD\\n        if (totalBaseFeeLMA == 0 || _debtToOffset == 0) {\\n            return;\\n        }\\n\\n        _triggerHOGIssuance(communityIssuance);\\n\\n        (\\n            uint StETHGainPerUnitStaked,\\n            uint BaseFeeLMALossPerUnitStaked\\n        ) = _computeRewardsPerUnitStaked(\\n                _collToAdd,\\n                _debtToOffset,\\n                totalBaseFeeLMA\\n            );\\n\\n        _updateRewardSumAndProduct(\\n            StETHGainPerUnitStaked,\\n            BaseFeeLMALossPerUnitStaked\\n        ); // updates S and P\\n\\n        _moveOffsetCollAndDebt(_collToAdd, _debtToOffset);\\n    }\\n\\n    // --- Offset helper functions ---\\n\\n    function _computeRewardsPerUnitStaked(\\n        uint _collToAdd,\\n        uint _debtToOffset,\\n        uint _totalBaseFeeLMADeposits\\n    )\\n        internal\\n        returns (uint StETHGainPerUnitStaked, uint BaseFeeLMALossPerUnitStaked)\\n    {\\n        /*\\n         * Compute the BaseFeeLMA and StETH rewards. Uses a \\\"feedback\\\" error correction, to keep\\n         * the cumulative error in the P and S state variables low:\\n         *\\n         * 1) Form numerators which compensate for the floor division errors that occurred the last time this\\n         * function was called.\\n         * 2) Calculate \\\"per-unit-staked\\\" ratios.\\n         * 3) Multiply each ratio back by its denominator, to reveal the current floor division error.\\n         * 4) Store these errors for use in the next correction when this function is called.\\n         * 5) Note: static analysis tools complain about this \\\"division before multiplication\\\", however, it is intended.\\n         */\\n        uint StETHNumerator = _collToAdd.mul(DECIMAL_PRECISION).add(\\n            lastStETHError_Offset\\n        );\\n\\n        assert(_debtToOffset <= _totalBaseFeeLMADeposits);\\n        if (_debtToOffset == _totalBaseFeeLMADeposits) {\\n            BaseFeeLMALossPerUnitStaked = DECIMAL_PRECISION; // When the Pool depletes to 0, so does each deposit\\n            lastBaseFeeLMALossError_Offset = 0;\\n        } else {\\n            uint BaseFeeLMALossNumerator = _debtToOffset\\n                .mul(DECIMAL_PRECISION)\\n                .sub(lastBaseFeeLMALossError_Offset);\\n            /*\\n             * Add 1 to make error in quotient positive. We want \\\"slightly too much\\\" BaseFeeLMA loss,\\n             * which ensures the error in any given compoundedBaseFeeLMADeposit favors the Stability Pool.\\n             */\\n            BaseFeeLMALossPerUnitStaked = (\\n                BaseFeeLMALossNumerator.div(_totalBaseFeeLMADeposits)\\n            ).add(1);\\n            lastBaseFeeLMALossError_Offset = (\\n                BaseFeeLMALossPerUnitStaked.mul(_totalBaseFeeLMADeposits)\\n            ).sub(BaseFeeLMALossNumerator);\\n        }\\n\\n        StETHGainPerUnitStaked = StETHNumerator.div(_totalBaseFeeLMADeposits);\\n        lastStETHError_Offset = StETHNumerator.sub(\\n            StETHGainPerUnitStaked.mul(_totalBaseFeeLMADeposits)\\n        );\\n\\n        return (StETHGainPerUnitStaked, BaseFeeLMALossPerUnitStaked);\\n    }\\n\\n    // Update the Stability Pool reward sum S and product P\\n    function _updateRewardSumAndProduct(\\n        uint _StETHGainPerUnitStaked,\\n        uint _BaseFeeLMALossPerUnitStaked\\n    ) internal {\\n        uint currentP = P;\\n        uint newP;\\n\\n        assert(_BaseFeeLMALossPerUnitStaked <= DECIMAL_PRECISION);\\n        /*\\n         * The newProductFactor is the factor by which to change all deposits, due to the depletion of Stability Pool BaseFeeLMA in the liquidation.\\n         * We make the product factor 0 if there was a pool-emptying. Otherwise, it is (1 - BaseFeeLMALossPerUnitStaked)\\n         */\\n        uint newProductFactor = uint(DECIMAL_PRECISION).sub(\\n            _BaseFeeLMALossPerUnitStaked\\n        );\\n\\n        uint128 currentScaleCached = currentScale;\\n        uint128 currentEpochCached = currentEpoch;\\n        uint currentS = epochToScaleToSum[currentEpochCached][\\n            currentScaleCached\\n        ];\\n\\n        /*\\n         * Calculate the new S first, before we update P.\\n         * The StETH gain for any given depositor from a liquidation depends on the value of their deposit\\n         * (and the value of totalDeposits) prior to the Stability being depleted by the debt in the liquidation.\\n         *\\n         * Since S corresponds to StETH gain, and P to deposit loss, we update S first.\\n         */\\n        uint marginalStETHGain = _StETHGainPerUnitStaked.mul(currentP);\\n        uint newS = currentS.add(marginalStETHGain);\\n        epochToScaleToSum[currentEpochCached][currentScaleCached] = newS;\\n        emit S_Updated(newS, currentEpochCached, currentScaleCached);\\n\\n        // If the Stability Pool was emptied, increment the epoch, and reset the scale and product P\\n        if (newProductFactor == 0) {\\n            currentEpoch = currentEpochCached.add(1);\\n            emit EpochUpdated(currentEpoch);\\n            currentScale = 0;\\n            emit ScaleUpdated(currentScale);\\n            newP = DECIMAL_PRECISION;\\n\\n            // If multiplying P by a non-zero product factor would reduce P below the scale boundary, increment the scale\\n        } else if (\\n            currentP.mul(newProductFactor).div(DECIMAL_PRECISION) < SCALE_FACTOR\\n        ) {\\n            newP = currentP.mul(newProductFactor).mul(SCALE_FACTOR).div(\\n                DECIMAL_PRECISION\\n            );\\n            currentScale = currentScaleCached.add(1);\\n            emit ScaleUpdated(currentScale);\\n        } else {\\n            newP = currentP.mul(newProductFactor).div(DECIMAL_PRECISION);\\n        }\\n\\n        assert(newP > 0);\\n        P = newP;\\n\\n        emit P_Updated(newP);\\n    }\\n\\n    function _moveOffsetCollAndDebt(\\n        uint _collToAdd,\\n        uint _debtToOffset\\n    ) internal {\\n        IActivePool activePoolCached = activePool;\\n\\n        // Cancel the liquidated BaseFeeLMA debt with the BaseFeeLMA in the stability pool\\n        activePoolCached.decreaseBaseFeeLMADebt(_debtToOffset);\\n        _decreaseBaseFeeLMA(_debtToOffset);\\n\\n        // Burn the debt that was successfully offset\\n        baseFeeLMAToken.burn(address(this), _debtToOffset);\\n\\n        activePoolCached.sendStETH(address(this), _collToAdd);\\n    }\\n\\n    function _decreaseBaseFeeLMA(uint _amount) internal {\\n        uint newTotalBaseFeeLMADeposits = totalBaseFeeLMADeposits.sub(_amount);\\n        totalBaseFeeLMADeposits = newTotalBaseFeeLMADeposits;\\n        emit StabilityPoolBaseFeeLMABalanceUpdated(newTotalBaseFeeLMADeposits);\\n    }\\n\\n    // --- Reward calculator functions for depositor and front end ---\\n\\n    /* Calculates the StETH gain earned by the deposit since its last snapshots were taken.\\n     * Given by the formula:  E = d0 * (S - S(0))/P(0)\\n     * where S(0) and P(0) are the depositor's snapshots of the sum S and product P, respectively.\\n     * d0 is the last recorded deposit value.\\n     */\\n    function getDepositorStETHGain(\\n        address _depositor\\n    ) public view returns (uint) {\\n        uint initialDeposit = deposits[_depositor].initialValue;\\n\\n        if (initialDeposit == 0) {\\n            return 0;\\n        }\\n\\n        Snapshots memory snapshots = depositSnapshots[_depositor];\\n\\n        uint StETHGain = _getStETHGainFromSnapshots(initialDeposit, snapshots);\\n        return StETHGain;\\n    }\\n\\n    function _getStETHGainFromSnapshots(\\n        uint initialDeposit,\\n        Snapshots memory snapshots\\n    ) internal view returns (uint) {\\n        /*\\n         * Grab the sum 'S' from the epoch at which the stake was made. The StETH gain may span up to one scale change.\\n         * If it does, the second portion of the StETH gain is scaled by 1e9.\\n         * If the gain spans no scale change, the second portion will be 0.\\n         */\\n        uint128 epochSnapshot = snapshots.epoch;\\n        uint128 scaleSnapshot = snapshots.scale;\\n        uint S_Snapshot = snapshots.S;\\n        uint P_Snapshot = snapshots.P;\\n\\n        uint firstPortion = epochToScaleToSum[epochSnapshot][scaleSnapshot].sub(\\n            S_Snapshot\\n        );\\n        uint secondPortion = epochToScaleToSum[epochSnapshot][\\n            scaleSnapshot.add(1)\\n        ].div(SCALE_FACTOR);\\n\\n        uint StETHGain = initialDeposit\\n            .mul(firstPortion.add(secondPortion))\\n            .div(P_Snapshot)\\n            .div(DECIMAL_PRECISION);\\n\\n        return StETHGain;\\n    }\\n\\n    /*\\n     * Calculate the HOG gain earned by a deposit since its last snapshots were taken.\\n     * Given by the formula:  HOG = d0 * (G - G(0))/P(0)\\n     * where G(0) and P(0) are the depositor's snapshots of the sum G and product P, respectively.\\n     * d0 is the last recorded deposit value.\\n     */\\n    function getDepositorHOGGain(\\n        address _depositor\\n    ) public view returns (uint) {\\n        uint initialDeposit = deposits[_depositor].initialValue;\\n        if (initialDeposit == 0) {\\n            return 0;\\n        }\\n\\n        address frontEndTag = deposits[_depositor].frontEndTag;\\n\\n        /*\\n         * If not tagged with a front end, the depositor gets a 100% cut of what their deposit earned.\\n         * Otherwise, their cut of the deposit's earnings is equal to the kickbackRate, set by the front end through\\n         * which they made their deposit.\\n         */\\n        uint kickbackRate = frontEndTag == address(0)\\n            ? DECIMAL_PRECISION\\n            : frontEnds[frontEndTag].kickbackRate;\\n\\n        Snapshots memory snapshots = depositSnapshots[_depositor];\\n\\n        uint HOGGain = kickbackRate\\n            .mul(_getHOGGainFromSnapshots(initialDeposit, snapshots))\\n            .div(DECIMAL_PRECISION);\\n\\n        return HOGGain;\\n    }\\n\\n    /*\\n     * Return the HOG gain earned by the front end. Given by the formula:  E = D0 * (G - G(0))/P(0)\\n     * where G(0) and P(0) are the depositor's snapshots of the sum G and product P, respectively.\\n     *\\n     * D0 is the last recorded value of the front end's total tagged deposits.\\n     */\\n    function getFrontEndHOGGain(address _frontEnd) public view returns (uint) {\\n        uint frontEndStake = frontEndStakes[_frontEnd];\\n        if (frontEndStake == 0) {\\n            return 0;\\n        }\\n\\n        uint kickbackRate = frontEnds[_frontEnd].kickbackRate;\\n        uint frontEndShare = uint(DECIMAL_PRECISION).sub(kickbackRate);\\n\\n        Snapshots memory snapshots = frontEndSnapshots[_frontEnd];\\n\\n        uint HOGGain = frontEndShare\\n            .mul(_getHOGGainFromSnapshots(frontEndStake, snapshots))\\n            .div(DECIMAL_PRECISION);\\n        return HOGGain;\\n    }\\n\\n    function _getHOGGainFromSnapshots(\\n        uint initialStake,\\n        Snapshots memory snapshots\\n    ) internal view returns (uint) {\\n        /*\\n         * Grab the sum 'G' from the epoch at which the stake was made. The HOG gain may span up to one scale change.\\n         * If it does, the second portion of the HOG gain is scaled by 1e9.\\n         * If the gain spans no scale change, the second portion will be 0.\\n         */\\n        uint128 epochSnapshot = snapshots.epoch;\\n        uint128 scaleSnapshot = snapshots.scale;\\n        uint G_Snapshot = snapshots.G;\\n        uint P_Snapshot = snapshots.P;\\n\\n        uint firstPortion = epochToScaleToG[epochSnapshot][scaleSnapshot].sub(\\n            G_Snapshot\\n        );\\n        uint secondPortion = epochToScaleToG[epochSnapshot][\\n            scaleSnapshot.add(1)\\n        ].div(SCALE_FACTOR);\\n\\n        uint HOGGain = initialStake\\n            .mul(firstPortion.add(secondPortion))\\n            .div(P_Snapshot)\\n            .div(DECIMAL_PRECISION);\\n\\n        return HOGGain;\\n    }\\n\\n    // --- Compounded deposit and compounded front end stake ---\\n\\n    /*\\n     * Return the user's compounded deposit. Given by the formula:  d = d0 * P/P(0)\\n     * where P(0) is the depositor's snapshot of the product P, taken when they last updated their deposit.\\n     */\\n    function getCompoundedBaseFeeLMADeposit(\\n        address _depositor\\n    ) public view returns (uint) {\\n        uint initialDeposit = deposits[_depositor].initialValue;\\n        if (initialDeposit == 0) {\\n            return 0;\\n        }\\n\\n        Snapshots memory snapshots = depositSnapshots[_depositor];\\n\\n        uint compoundedDeposit = _getCompoundedStakeFromSnapshots(\\n            initialDeposit,\\n            snapshots\\n        );\\n        return compoundedDeposit;\\n    }\\n\\n    /*\\n     * Return the front end's compounded stake. Given by the formula:  D = D0 * P/P(0)\\n     * where P(0) is the depositor's snapshot of the product P, taken at the last time\\n     * when one of the front end's tagged deposits updated their deposit.\\n     *\\n     * The front end's compounded stake is equal to the sum of its depositors' compounded deposits.\\n     */\\n    function getCompoundedFrontEndStake(\\n        address _frontEnd\\n    ) public view returns (uint) {\\n        uint frontEndStake = frontEndStakes[_frontEnd];\\n        if (frontEndStake == 0) {\\n            return 0;\\n        }\\n\\n        Snapshots memory snapshots = frontEndSnapshots[_frontEnd];\\n\\n        uint compoundedFrontEndStake = _getCompoundedStakeFromSnapshots(\\n            frontEndStake,\\n            snapshots\\n        );\\n        return compoundedFrontEndStake;\\n    }\\n\\n    // Internal function, used to calculcate compounded deposits and compounded front end stakes.\\n    function _getCompoundedStakeFromSnapshots(\\n        uint initialStake,\\n        Snapshots memory snapshots\\n    ) internal view returns (uint) {\\n        uint snapshot_P = snapshots.P;\\n        uint128 scaleSnapshot = snapshots.scale;\\n        uint128 epochSnapshot = snapshots.epoch;\\n\\n        // If stake was made before a pool-emptying event, then it has been fully cancelled with debt -- so, return 0\\n        if (epochSnapshot < currentEpoch) {\\n            return 0;\\n        }\\n\\n        uint compoundedStake;\\n        uint128 scaleDiff = currentScale.sub(scaleSnapshot);\\n\\n        /* Compute the compounded stake. If a scale change in P was made during the stake's lifetime,\\n         * account for it. If more than one scale change was made, then the stake has decreased by a factor of\\n         * at least 1e-9 -- so return 0.\\n         */\\n        if (scaleDiff == 0) {\\n            compoundedStake = initialStake.mul(P).div(snapshot_P);\\n        } else if (scaleDiff == 1) {\\n            compoundedStake = initialStake.mul(P).div(snapshot_P).div(\\n                SCALE_FACTOR\\n            );\\n        } else {\\n            // if scaleDiff >= 2\\n            compoundedStake = 0;\\n        }\\n\\n        /*\\n         * If compounded deposit is less than a billionth of the initial deposit, return 0.\\n         *\\n         * NOTE: originally, this line was in place to stop rounding errors making the deposit too large. However, the error\\n         * corrections should ensure the error in P \\\"favors the Pool\\\", i.e. any given compounded deposit should slightly less\\n         * than it's theoretical value.\\n         *\\n         * Thus it's unclear whether this line is still really needed.\\n         */\\n        if (compoundedStake < initialStake.div(1e9)) {\\n            return 0;\\n        }\\n\\n        return compoundedStake;\\n    }\\n\\n    // --- Sender functions for BaseFeeLMA deposit, StETH gains and HOG gains ---\\n\\n    // Transfer the BaseFeeLMA tokens from the user to the Stability Pool's address, and update its recorded BaseFeeLMA\\n    function _sendBaseFeeLMAtoStabilityPool(\\n        address _address,\\n        uint _amount\\n    ) internal {\\n        baseFeeLMAToken.sendToPool(_address, address(this), _amount);\\n        uint newTotalBaseFeeLMADeposits = totalBaseFeeLMADeposits.add(_amount);\\n        totalBaseFeeLMADeposits = newTotalBaseFeeLMADeposits;\\n        emit StabilityPoolBaseFeeLMABalanceUpdated(newTotalBaseFeeLMADeposits);\\n    }\\n\\n    function _sendStETHGainToDepositor(uint _amount) internal {\\n        if (_amount == 0) {\\n            return;\\n        }\\n        uint newStETH = StETH.sub(_amount);\\n        StETH = newStETH;\\n        emit StabilityPoolStETHBalanceUpdated(newStETH);\\n        emit StETHSent(msg.sender, _amount);\\n\\n        (bool success, ) = msg.sender.call{value: _amount}(\\\"\\\");\\n        require(success, \\\"StabilityPool: sending StETH failed\\\");\\n    }\\n\\n    // Send BaseFeeLMA to user and decrease BaseFeeLMA in Pool\\n    function _sendBaseFeeLMAToDepositor(\\n        address _depositor,\\n        uint BaseFeeLMAWithdrawal\\n    ) internal {\\n        if (BaseFeeLMAWithdrawal == 0) {\\n            return;\\n        }\\n\\n        baseFeeLMAToken.returnFromPool(\\n            address(this),\\n            _depositor,\\n            BaseFeeLMAWithdrawal\\n        );\\n        _decreaseBaseFeeLMA(BaseFeeLMAWithdrawal);\\n    }\\n\\n    // --- External Front End functions ---\\n\\n    // Front end makes a one-time selection of kickback rate upon registering\\n    function registerFrontEnd(uint _kickbackRate) external {\\n        _requireFrontEndNotRegistered(msg.sender);\\n        _requireUserHasNoDeposit(msg.sender);\\n        _requireValidKickbackRate(_kickbackRate);\\n\\n        frontEnds[msg.sender].kickbackRate = _kickbackRate;\\n        frontEnds[msg.sender].registered = true;\\n\\n        emit FrontEndRegistered(msg.sender, _kickbackRate);\\n    }\\n\\n    // --- Stability Pool Deposit Functionality ---\\n\\n    function _setFrontEndTag(\\n        address _depositor,\\n        address _frontEndTag\\n    ) internal {\\n        deposits[_depositor].frontEndTag = _frontEndTag;\\n        emit FrontEndTagSet(_depositor, _frontEndTag);\\n    }\\n\\n    function _updateDepositAndSnapshots(\\n        address _depositor,\\n        uint _newValue\\n    ) internal {\\n        deposits[_depositor].initialValue = _newValue;\\n\\n        if (_newValue == 0) {\\n            delete deposits[_depositor].frontEndTag;\\n            delete depositSnapshots[_depositor];\\n            emit DepositSnapshotUpdated(_depositor, 0, 0, 0);\\n            return;\\n        }\\n        uint128 currentScaleCached = currentScale;\\n        uint128 currentEpochCached = currentEpoch;\\n        uint currentP = P;\\n\\n        // Get S and G for the current epoch and current scale\\n        uint currentS = epochToScaleToSum[currentEpochCached][\\n            currentScaleCached\\n        ];\\n        uint currentG = epochToScaleToG[currentEpochCached][currentScaleCached];\\n\\n        // Record new snapshots of the latest running product P, sum S, and sum G, for the depositor\\n        depositSnapshots[_depositor].P = currentP;\\n        depositSnapshots[_depositor].S = currentS;\\n        depositSnapshots[_depositor].G = currentG;\\n        depositSnapshots[_depositor].scale = currentScaleCached;\\n        depositSnapshots[_depositor].epoch = currentEpochCached;\\n\\n        emit DepositSnapshotUpdated(_depositor, currentP, currentS, currentG);\\n    }\\n\\n    function _updateFrontEndStakeAndSnapshots(\\n        address _frontEnd,\\n        uint _newValue\\n    ) internal {\\n        frontEndStakes[_frontEnd] = _newValue;\\n\\n        if (_newValue == 0) {\\n            delete frontEndSnapshots[_frontEnd];\\n            emit FrontEndSnapshotUpdated(_frontEnd, 0, 0);\\n            return;\\n        }\\n\\n        uint128 currentScaleCached = currentScale;\\n        uint128 currentEpochCached = currentEpoch;\\n        uint currentP = P;\\n\\n        // Get G for the current epoch and current scale\\n        uint currentG = epochToScaleToG[currentEpochCached][currentScaleCached];\\n\\n        // Record new snapshots of the latest running product P and sum G for the front end\\n        frontEndSnapshots[_frontEnd].P = currentP;\\n        frontEndSnapshots[_frontEnd].G = currentG;\\n        frontEndSnapshots[_frontEnd].scale = currentScaleCached;\\n        frontEndSnapshots[_frontEnd].epoch = currentEpochCached;\\n\\n        emit FrontEndSnapshotUpdated(_frontEnd, currentP, currentG);\\n    }\\n\\n    function _payOutHOGGains(\\n        ICommunityIssuance _communityIssuance,\\n        address _depositor,\\n        address _frontEnd\\n    ) internal {\\n        // Pay out front end's HOG gain\\n        if (_frontEnd != address(0)) {\\n            uint frontEndHOGGain = getFrontEndHOGGain(_frontEnd);\\n            _communityIssuance.sendHOG(_frontEnd, frontEndHOGGain);\\n            emit HOGPaidToFrontEnd(_frontEnd, frontEndHOGGain);\\n        }\\n\\n        // Pay out depositor's HOG gain\\n        uint depositorHOGGain = getDepositorHOGGain(_depositor);\\n        _communityIssuance.sendHOG(_depositor, depositorHOGGain);\\n        emit HOGPaidToDepositor(_depositor, depositorHOGGain);\\n    }\\n\\n    // --- 'require' functions ---\\n\\n    function _requireCallerIsActivePool() internal view {\\n        require(\\n            msg.sender == address(activePool),\\n            \\\"StabilityPool: Caller is not ActivePool\\\"\\n        );\\n    }\\n\\n    function _requireCallerIsTroveManager() internal view {\\n        require(\\n            msg.sender == address(troveManager),\\n            \\\"StabilityPool: Caller is not TroveManager\\\"\\n        );\\n    }\\n\\n    function _requireNoUnderCollateralizedTroves() internal {\\n        uint price = priceFeed.fetchPrice();\\n        address lowestTrove = sortedTroves.getLast();\\n        uint ICR = troveManager.getCurrentICR(lowestTrove, price);\\n        require(\\n            ICR >= MCR,\\n            \\\"StabilityPool: Cannot withdraw while there are troves with ICR < MCR\\\"\\n        );\\n    }\\n\\n    function _requireUserHasDeposit(uint _initialDeposit) internal pure {\\n        require(\\n            _initialDeposit > 0,\\n            \\\"StabilityPool: User must have a non-zero deposit\\\"\\n        );\\n    }\\n\\n    function _requireUserHasNoDeposit(address _address) internal view {\\n        uint initialDeposit = deposits[_address].initialValue;\\n        require(\\n            initialDeposit == 0,\\n            \\\"StabilityPool: User must have no deposit\\\"\\n        );\\n    }\\n\\n    function _requireNonZeroAmount(uint _amount) internal pure {\\n        require(_amount > 0, \\\"StabilityPool: Amount must be non-zero\\\");\\n    }\\n\\n    function _requireUserHasTrove(address _depositor) internal view {\\n        require(\\n            troveManager.getTroveStatus(_depositor) == 1,\\n            \\\"StabilityPool: caller must have an active trove to withdraw StETHGain to\\\"\\n        );\\n    }\\n\\n    function _requireUserHasStETHGain(address _depositor) internal view {\\n        uint StETHGain = getDepositorStETHGain(_depositor);\\n        require(\\n            StETHGain > 0,\\n            \\\"StabilityPool: caller must have non-zero StETH Gain\\\"\\n        );\\n    }\\n\\n    function _requireFrontEndNotRegistered(address _address) internal view {\\n        require(\\n            !frontEnds[_address].registered,\\n            \\\"StabilityPool: must not already be a registered front end\\\"\\n        );\\n    }\\n\\n    function _requireFrontEndIsRegisteredOrZero(\\n        address _address\\n    ) internal view {\\n        require(\\n            frontEnds[_address].registered || _address == address(0),\\n            \\\"StabilityPool: Tag must be a registered front end, or the zero address\\\"\\n        );\\n    }\\n\\n    function _requireValidKickbackRate(uint _kickbackRate) internal pure {\\n        require(\\n            _kickbackRate <= DECIMAL_PRECISION,\\n            \\\"StabilityPool: Kickback rate must be in range [0,1]\\\"\\n        );\\n    }\\n\\n    // --- Fallback function ---\\n\\n    receive() external payable {\\n        _requireCallerIsActivePool();\\n        StETH = StETH.add(msg.value);\\n        emit StabilityPoolStETHBalanceUpdated(StETH);\\n    }\\n}\\n\",\"keccak256\":\"0x9ace578af0a80ef0f507d425ee3ac4542e0bbc93c6c250526226daff957a5b74\",\"license\":\"MIT\"},\"contracts/dependencies/BaseMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\ncontract BaseMath {\\n    uint public constant DECIMAL_PRECISION = 1e18;\\n}\\n\",\"keccak256\":\"0x5338502be04e32035bbf0310600c8724281edc81b312f5d89c683b23d0bb3fa7\",\"license\":\"MIT\"},\"contracts/dependencies/CheckContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\ncontract CheckContract {\\n    /**\\n     * Check that the account is an already deployed non-destroyed contract.\\n     * See: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol#L12\\n     */\\n    function checkContract(address _account) internal view {\\n        require(_account != address(0), \\\"Account cannot be zero address\\\");\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(_account)\\n        }\\n        require(size > 0, \\\"Account code size cannot be zero\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x4860bce12806bb81c1e91ec617f2f95dd1774148b15645eaca94a67220096f2f\",\"license\":\"MIT\"},\"contracts/dependencies/HedgehogBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./BaseMath.sol\\\";\\nimport \\\"./LiquityMath.sol\\\";\\nimport \\\"../interfaces/IActivePool.sol\\\";\\nimport \\\"../interfaces/IDefaultPool.sol\\\";\\nimport \\\"../interfaces/IPriceFeed.sol\\\";\\nimport \\\"../interfaces/IHedgehogBase.sol\\\";\\n\\n/**\\n * @notice Fork of LiquityMath with an upgraded pragma and:\\n * [ - Get OZ contracts from a package\\n * TODO: List changes to HedgehogBase File and variables ]\\n * Base contract for TroveManager, BorrowerOperations and StabilityPool. Contains global system constants and\\n * common functions.\\n */\\ncontract HedgehogBase is BaseMath, IHedgehogBase {\\n    using SafeMath for uint;\\n\\n    uint public constant _100pct = 1000000000000000000; // 1e18 == 100%\\n\\n    // Minimum collateral ratio for individual troves\\n    uint public constant MCR = 1100000000000000000; // 110%\\n\\n    // Critical system collateral ratio. If the system's total collateral ratio (TCR) falls below the CCR, Recovery Mode is triggered.\\n    uint public constant CCR = 1500000000000000000; // 150%\\n\\n    // Amount of BaseFeeLMA to be locked in gas pool on opening troves\\n    uint public constant BaseFeeLMA_GAS_COMPENSATION = 200e18;\\n\\n    // Minimum amount of net BaseFeeLMA debt a trove must have\\n    uint public constant MIN_NET_DEBT = 1800e18;\\n    // uint constant public MIN_NET_DEBT = 0;\\n\\n    uint public constant PERCENT_DIVISOR = 200; // dividing by 200 yields 0.5%\\n\\n    uint public constant BORROWING_FEE_FLOOR = (DECIMAL_PRECISION / 1000) * 5; // 0.5%\\n\\n    IActivePool public activePool;\\n\\n    IDefaultPool public defaultPool;\\n\\n    IPriceFeed public override priceFeed;\\n\\n    // --- Gas compensation functions ---\\n\\n    // Returns the composite debt (drawn debt + gas compensation) of a trove, for the purpose of ICR calculation\\n    function _getCompositeDebt(uint _debt) internal pure returns (uint) {\\n        return _debt.add(BaseFeeLMA_GAS_COMPENSATION);\\n    }\\n\\n    function _getNetDebt(uint _debt) internal pure returns (uint) {\\n        return _debt.sub(BaseFeeLMA_GAS_COMPENSATION);\\n    }\\n\\n    // Return the amount of StETH to be drawn from a trove's collateral and sent as gas compensation.\\n    function _getCollGasCompensation(\\n        uint _entireColl\\n    ) internal pure returns (uint) {\\n        return _entireColl / PERCENT_DIVISOR;\\n    }\\n\\n    function getEntireSystemColl() public view returns (uint entireSystemColl) {\\n        uint activeColl = activePool.getStETH();\\n        uint liquidatedColl = defaultPool.getStETH();\\n\\n        return activeColl.add(liquidatedColl);\\n    }\\n\\n    function getEntireSystemDebt() public view returns (uint entireSystemDebt) {\\n        uint activeDebt = activePool.getBaseFeeLMADebt();\\n        uint closedDebt = defaultPool.getBaseFeeLMADebt();\\n\\n        return activeDebt.add(closedDebt);\\n    }\\n\\n    function _getTCR(uint _price) internal view returns (uint TCR) {\\n        uint entireSystemColl = getEntireSystemColl();\\n        uint entireSystemDebt = getEntireSystemDebt();\\n\\n        TCR = LiquityMath._computeCR(\\n            entireSystemColl,\\n            entireSystemDebt,\\n            _price\\n        );\\n\\n        return TCR;\\n    }\\n\\n    function _checkRecoveryMode(uint _price) internal view returns (bool) {\\n        uint TCR = _getTCR(_price);\\n\\n        return TCR < CCR;\\n    }\\n\\n    function _requireUserAcceptsFee(\\n        uint _fee,\\n        uint _amount,\\n        uint _maxFeePercentage\\n    ) internal pure {\\n        uint feePercentage = _fee.mul(DECIMAL_PRECISION).div(_amount);\\n        require(\\n            feePercentage <= _maxFeePercentage,\\n            \\\"Fee exceeded provided maximum\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xcc2cb818b86debc1c96fcb611da06def76f6b7017b6d6ee42eb2acc0157be43e\",\"license\":\"MIT\"},\"contracts/dependencies/IERC2612.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @dev Interface of the ERC2612 standard as defined in the EIP.\\n *\\n * Adds the {permit} method, which can be used to change one's\\n * {IERC20-allowance} without having to send a transaction, by signing a\\n * message. This allows users to spend tokens without having to hold StETH.\\n *\\n * See https://eips.stETHeum.org/EIPS/eip-2612.\\n *\\n * Code adapted from https://github.com/OpenZeppelin/openzeppelin-contracts/pull/2237/\\n */\\ninterface IERC2612 {\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over `owner`'s tokens,\\n     * given `owner`'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.stETHeum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current ERC2612 nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases `owner`'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     *\\n     * `owner` can limit the time a Permit is valid for by setting `deadline` to\\n     * a value in the near future. The deadline argument can be set to uint(-1) to\\n     * create Permits that effectively never expire.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function version() external view returns (string memory);\\n\\n    function permitTypeHash() external view returns (bytes32);\\n\\n    function domainSeparator() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xd862d70e8c9d8f912e73151567a70f47f3a7e52c9ec766ccc4e02f87bd0d32b9\",\"license\":\"MIT\"},\"contracts/dependencies/LiquityMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"./console.sol\\\";\\n\\n/**\\n * @notice A fork of Liquity Math library with an upgraded pragma\\n *\\n * Even though SafeMath is no longer required, the decision was made to keep it to avoid human factor errors\\n */\\n\\nlibrary LiquityMath {\\n    using SafeMath for uint;\\n\\n    uint internal constant DECIMAL_PRECISION = 1e18;\\n\\n    /* Precision for Nominal ICR (independent of price). Rationale for the value:\\n     *\\n     * - Making it \\u201ctoo high\\u201d could lead to overflows.\\n     * - Making it \\u201ctoo low\\u201d could lead to an ICR equal to zero, due to truncation from Solidity floor division.\\n     *\\n     * This value of 1e20 is chosen for safety: the NICR will only overflow for numerator > ~1e39 StETH,\\n     * and will only truncate to 0 if the denominator is at least 1e20 times greater than the numerator.\\n     *\\n     */\\n    uint internal constant NICR_PRECISION = 1e20;\\n\\n    function _min(uint _a, uint _b) internal pure returns (uint) {\\n        return (_a < _b) ? _a : _b;\\n    }\\n\\n    function _max(uint _a, uint _b) internal pure returns (uint) {\\n        return (_a >= _b) ? _a : _b;\\n    }\\n\\n    /*\\n     * Multiply two decimal numbers and use normal rounding rules:\\n     * -round product up if 19'th mantissa digit >= 5\\n     * -round product down if 19'th mantissa digit < 5\\n     *\\n     * Used only inside the exponentiation, _decPow().\\n     */\\n    function decMul(uint x, uint y) internal pure returns (uint decProd) {\\n        uint prod_xy = x.mul(y);\\n\\n        decProd = prod_xy.add(DECIMAL_PRECISION / 2).div(DECIMAL_PRECISION);\\n    }\\n\\n    /*\\n     * _decPow: Exponentiation function for 18-digit decimal base, and integer exponent n.\\n     *\\n     * Uses the efficient \\\"exponentiation by squaring\\\" algorithm. O(log(n)) complexity.\\n     *\\n     * Called by two functions that represent time in units of minutes:\\n     * 1) TroveManager._calcDecayedBaseRate\\n     * 2) CommunityIssuance._getCumulativeIssuanceFraction\\n     *\\n     * The exponent is capped to avoid reverting due to overflow. The cap 525600000 equals\\n     * \\\"minutes in 1000 years\\\": 60 * 24 * 365 * 1000\\n     *\\n     * If a period of > 1000 years is ever used as an exponent in either of the above functions, the result will be\\n     * negligibly different from just passing the cap, since:\\n     *\\n     * In function 1), the decayed base rate will be 0 for 1000 years or > 1000 years\\n     * In function 2), the difference in tokens issued at 1000 years and any time > 1000 years, will be negligible\\n     */\\n    function _decPow(uint _base, uint _minutes) internal pure returns (uint) {\\n        if (_minutes > 525600000) {\\n            _minutes = 525600000;\\n        } // cap to avoid overflow\\n\\n        if (_minutes == 0) {\\n            return DECIMAL_PRECISION;\\n        }\\n\\n        uint y = DECIMAL_PRECISION;\\n        uint x = _base;\\n        uint n = _minutes;\\n\\n        // Exponentiation-by-squaring\\n        while (n > 1) {\\n            if (n % 2 == 0) {\\n                x = decMul(x, x);\\n                n = n.div(2);\\n            } else {\\n                // if (n % 2 != 0)\\n                y = decMul(x, y);\\n                x = decMul(x, x);\\n                n = (n.sub(1)).div(2);\\n            }\\n        }\\n\\n        return decMul(x, y);\\n    }\\n\\n    function _getAbsoluteDifference(\\n        uint _a,\\n        uint _b\\n    ) internal pure returns (uint) {\\n        return (_a >= _b) ? _a.sub(_b) : _b.sub(_a);\\n    }\\n\\n    function _computeNominalCR(\\n        uint _coll,\\n        uint _debt\\n    ) internal pure returns (uint) {\\n        if (_debt > 0) {\\n            return _coll.mul(NICR_PRECISION).div(_debt);\\n        }\\n        // Return the maximal value for uint256 if the Trove has a debt of 0. Represents \\\"infinite\\\" CR.\\n        else {\\n            // if (_debt == 0)\\n            return 2 ** 256 - 1;\\n        }\\n    }\\n\\n    function _computeCR(\\n        uint _coll,\\n        uint _debt,\\n        uint _price\\n    ) internal pure returns (uint) {\\n        if (_debt > 0) {\\n            uint newCollRatio = _coll.mul(_price).div(_debt);\\n\\n            return newCollRatio;\\n        }\\n        // Return the maximal value for uint256 if the Trove has a debt of 0. Represents \\\"infinite\\\" CR.\\n        else {\\n            // if (_debt == 0)\\n            return 2 ** 256 - 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x39e662751f6cda0e28f1e3a3af94c40e92b553ac1cebc99e3bc4aaac3d3d6634\",\"license\":\"MIT\"},\"contracts/dependencies/LiquitySafeMath128.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\n// uint128 addition and subtraction, with overflow protection.\\n\\nlibrary LiquitySafeMath128 {\\n    function add(uint128 a, uint128 b) internal pure returns (uint128) {\\n        uint128 c = a + b;\\n        require(c >= a, \\\"LiquitySafeMath128: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function sub(uint128 a, uint128 b) internal pure returns (uint128) {\\n        require(b <= a, \\\"LiquitySafeMath128: subtraction overflow\\\");\\n        uint128 c = a - b;\\n\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0xcc82dfd80b3b2547ddc1e56bac734239dfd4574598da9a482a77f79f03af788c\",\"license\":\"MIT\"},\"contracts/dependencies/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\n// Buidler's helper contract for console logging\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n    function log() internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log()\\\")\\n        );\\n        ignored;\\n    }\\n\\n    function logInt(int p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(int)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logUint(uint p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logString(string memory p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(string)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBool(bool p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logAddress(address p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(address)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes(bytes memory p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logByte(bytes1 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(byte)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes1(bytes1 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes1)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes2(bytes2 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes2)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes3(bytes3 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes3)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes4(bytes4 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes4)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes5(bytes5 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes5)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes6(bytes6 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes6)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes7(bytes7 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes7)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes8(bytes8 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes8)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes9(bytes9 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes9)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes10(bytes10 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes10)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes11(bytes11 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes11)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes12(bytes12 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes12)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes13(bytes13 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes13)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes14(bytes14 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes14)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes15(bytes15 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes15)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes16(bytes16 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes16)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes17(bytes17 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes17)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes18(bytes18 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes18)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes19(bytes19 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes19)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes20(bytes20 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes20)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes21(bytes21 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes21)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes22(bytes22 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes22)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes23(bytes23 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes23)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes24(bytes24 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes24)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes25(bytes25 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes25)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes26(bytes26 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes26)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes27(bytes27 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes27)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes28(bytes28 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes28)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes29(bytes29 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes29)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes30(bytes30 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes30)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes31(bytes31 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes31)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function logBytes32(bytes32 p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bytes32)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(string)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(address)\\\", p0)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, uint p1) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, string memory p1) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, bool p1) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, address p1) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1)\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, uint p1) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1)\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, string memory p1) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1)\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, bool p1) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1)\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, address p1) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, uint p1) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, string memory p1) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, bool p1) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, address p1) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1)\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, uint p1) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1)\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, string memory p1) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1)\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, bool p1) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1)\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, address p1) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, uint p1, uint p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, uint p1, string memory p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, uint p1, bool p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, uint p1, address p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, string memory p1, uint p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, string memory p1, string memory p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, string memory p1, bool p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, string memory p1, address p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, bool p1, uint p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, bool p1, string memory p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, bool p1, bool p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, bool p1, address p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, address p1, uint p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, address p1, string memory p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, address p1, bool p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, address p1, address p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, uint p1, uint p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, uint p1, string memory p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, uint p1, bool p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, uint p1, address p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, string memory p1, uint p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        string memory p2\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, bool p1, uint p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, address p1, uint p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, uint p1, uint p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, uint p1, string memory p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, uint p1, bool p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, uint p1, address p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, string memory p1, uint p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, bool p1, uint p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, address p1, uint p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, uint p1, uint p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, uint p1, string memory p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, uint p1, bool p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, uint p1, address p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, string memory p1, uint p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, bool p1, uint p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, address p1, uint p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, address p1, address p2) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, uint p1, uint p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,uint,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, uint p1, uint p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, uint p1, uint p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,uint,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,uint,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        uint p0,\\n        uint p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,uint,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,uint,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, uint p1, string memory p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,uint,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, uint p1, bool p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,uint,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, uint p1, bool p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, uint p1, bool p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,uint,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, uint p1, address p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,uint,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, uint p1, address p2, string memory p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,uint,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, uint p1, address p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,uint,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, uint p1, address p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,uint,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,uint,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        uint p0,\\n        string memory p1,\\n        uint p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,uint,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, string memory p1, uint p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        uint p0,\\n        string memory p1,\\n        string memory p2,\\n        uint p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        uint p0,\\n        string memory p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        uint p0,\\n        string memory p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        uint p0,\\n        string memory p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,bool,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        uint p0,\\n        string memory p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,bool,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, string memory p1, bool p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, string memory p1, address p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        uint p0,\\n        string memory p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, string memory p1, address p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        uint p0,\\n        string memory p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, bool p1, uint p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,bool,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, bool p1, uint p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, bool p1, uint p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,bool,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,bool,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        uint p0,\\n        bool p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,bool,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,bool,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, bool p1, string memory p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,bool,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, bool p1, bool p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,bool,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, bool p1, bool p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3)\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, bool p1, bool p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,bool,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, bool p1, address p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,bool,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, bool p1, address p2, string memory p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,bool,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, bool p1, address p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,bool,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, bool p1, address p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,bool,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, address p1, uint p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,uint,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, address p1, uint p2, string memory p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, address p1, uint p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,uint,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, address p1, uint p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, address p1, string memory p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        uint p0,\\n        address p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, address p1, string memory p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        uint p0,\\n        address p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, address p1, bool p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,bool,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, address p1, bool p2, string memory p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, address p1, bool p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,bool,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, address p1, bool p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, address p1, address p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        uint p0,\\n        address p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, address p1, address p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(uint p0, address p1, address p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,uint,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint p1,\\n        uint p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,uint,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, uint p1, uint p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint p1,\\n        string memory p2,\\n        uint p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,bool,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,bool,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, uint p1, bool p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, uint p1, address p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, uint p1, address p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        uint p2,\\n        uint p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,uint,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        uint p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        uint p2,\\n        bool p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,uint,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        uint p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        string memory p2,\\n        uint p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        bool p2,\\n        uint p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,bool,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,bool,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        address p2,\\n        uint p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,uint,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        uint p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,uint,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, bool p1, uint p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        string memory p2,\\n        uint p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,bool,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,bool,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, address p1, uint p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,uint,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        uint p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, address p1, uint p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,uint,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        uint p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        string memory p2,\\n        uint p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,bool,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,bool,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        address p2,\\n        uint p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, uint p1, uint p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,uint,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, uint p1, uint p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, uint p1, uint p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,uint,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,uint,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,uint,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,uint,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, uint p1, string memory p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,uint,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, uint p1, bool p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,uint,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, uint p1, bool p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, uint p1, bool p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,uint,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, uint p1, address p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,uint,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, uint p1, address p2, string memory p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,uint,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, uint p1, address p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,uint,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, uint p1, address p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,uint,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,uint,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        uint p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,uint,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, string memory p1, uint p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        string memory p2,\\n        uint p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,bool,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,bool,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, bool p1, uint p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,bool,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, bool p1, uint p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, bool p1, uint p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,bool,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,bool,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,bool,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,bool,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,bool,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,bool,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3)\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,bool,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,bool,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,bool,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,bool,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,bool,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, address p1, uint p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,uint,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, address p1, uint p2, string memory p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, address p1, uint p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,uint,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, address p1, uint p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,bool,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,bool,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, uint p1, uint p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,uint,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, uint p1, uint p2, string memory p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, uint p1, uint p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,uint,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, uint p1, uint p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, uint p1, string memory p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        uint p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, uint p1, string memory p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        uint p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, uint p1, bool p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,bool,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, uint p1, bool p2, string memory p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, uint p1, bool p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,bool,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, uint p1, bool p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, uint p1, address p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        uint p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, uint p1, address p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, uint p1, address p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, string memory p1, uint p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,uint,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        uint p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, string memory p1, uint p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,uint,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        uint p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        string memory p2,\\n        uint p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,bool,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,bool,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        address p2,\\n        uint p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, bool p1, uint p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,uint,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, bool p1, uint p2, string memory p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, bool p1, uint p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,uint,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, bool p1, uint p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,bool,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,bool,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, address p1, uint p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,uint,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        uint p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, address p1, uint p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,uint,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, address p1, uint p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        string memory p2,\\n        uint p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,bool,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,bool,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, address p1, address p2, uint p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal view {\\n        (bool ignored, ) = CONSOLE_ADDRESS.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n        ignored;\\n    }\\n}\\n\",\"keccak256\":\"0x1c9da7e0cd4bd0311bd4decb262639c25a37b2540de4b899312c45d05639abc8\",\"license\":\"MIT\"},\"contracts/interfaces/IActivePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./IPool.sol\\\";\\n\\ninterface IActivePool is IPool {\\n    // --- Events ---\\n    event BorrowerOperationsAddressChanged(\\n        address _newBorrowerOperationsAddress\\n    );\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event ActivePoolBaseFeeLMADebtUpdated(uint _BaseFeeLMADebt);\\n    event ActivePoolStETHBalanceUpdated(uint _StETH);\\n\\n    // --- Functions ---\\n    function sendStETH(address _account, uint _amount) external;\\n}\\n\",\"keccak256\":\"0x32792e53f83cca84fa374adaaa88e8aebcc89b1c2e0315018c25afe57873494c\",\"license\":\"MIT\"},\"contracts/interfaces/IBaseFeeLMAToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../dependencies/IERC2612.sol\\\";\\n\\ninterface IBaseFeeLMAToken is IERC20, IERC2612 {\\n    // --- Events ---\\n\\n    event TroveManagerAddressChanged(address _troveManagerAddress);\\n    event StabilityPoolAddressChanged(address _newStabilityPoolAddress);\\n    event BorrowerOperationsAddressChanged(\\n        address _newBorrowerOperationsAddress\\n    );\\n\\n    event BaseFeeLMATokenBalanceUpdated(address _user, uint _amount);\\n\\n    // --- Functions ---\\n\\n    function mint(address _account, uint256 _amount) external;\\n\\n    function burn(address _account, uint256 _amount) external;\\n\\n    function sendToPool(\\n        address _sender,\\n        address poolAddress,\\n        uint256 _amount\\n    ) external;\\n\\n    function returnFromPool(\\n        address poolAddress,\\n        address user,\\n        uint256 _amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x629049f9203c100a2ff70c13826a0a44ab15e6884cf4d58291c0203ef86bc240\",\"license\":\"MIT\"},\"contracts/interfaces/IBorrowerOperations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\n// Common interface for the Trove Manager.\\ninterface IBorrowerOperations {\\n    // --- Events ---\\n\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event ActivePoolAddressChanged(address _activePoolAddress);\\n    event DefaultPoolAddressChanged(address _defaultPoolAddress);\\n    event StabilityPoolAddressChanged(address _stabilityPoolAddress);\\n    event GasPoolAddressChanged(address _gasPoolAddress);\\n    event CollSurplusPoolAddressChanged(address _collSurplusPoolAddress);\\n    event PriceFeedAddressChanged(address _newPriceFeedAddress);\\n    event SortedTrovesAddressChanged(address _sortedTrovesAddress);\\n    event BaseFeeLMATokenAddressChanged(address _baseFeeLMATokenAddress);\\n    event HOGStakingAddressChanged(address _hogStakingAddress);\\n\\n    event TroveCreated(address indexed _borrower, uint arrayIndex);\\n    event TroveUpdated(\\n        address indexed _borrower,\\n        uint _debt,\\n        uint _coll,\\n        uint stake,\\n        uint8 operation\\n    );\\n    event BaseFeeLMABorrowingFeePaid(\\n        address indexed _borrower,\\n        uint _BaseFeeLMAFee\\n    );\\n\\n    // --- Functions ---\\n\\n    function setAddresses(\\n        address _troveManagerAddress,\\n        address _activePoolAddress,\\n        address _defaultPoolAddress,\\n        address _stabilityPoolAddress,\\n        address _gasPoolAddress,\\n        address _collSurplusPoolAddress,\\n        address _priceFeedAddress,\\n        address _sortedTrovesAddress,\\n        address _baseFeeLMATokenAddress,\\n        address _hogStakingAddress\\n    ) external;\\n\\n    function openTrove(\\n        uint _maxFee,\\n        uint _BaseFeeLMAAmount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external payable;\\n\\n    function addColl(address _upperHint, address _lowerHint) external payable;\\n\\n    function moveStETHGainToTrove(\\n        address _user,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external payable;\\n\\n    function withdrawColl(\\n        uint _amount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external;\\n\\n    function withdrawBaseFeeLMA(\\n        uint _maxFee,\\n        uint _amount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external;\\n\\n    function repayBaseFeeLMA(\\n        uint _amount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external;\\n\\n    function closeTrove() external;\\n\\n    function adjustTrove(\\n        uint _maxFee,\\n        uint _collWithdrawal,\\n        uint _debtChange,\\n        bool isDebtIncrease,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external payable;\\n\\n    function claimCollateral() external;\\n\\n    function getCompositeDebt(uint _debt) external pure returns (uint);\\n}\\n\",\"keccak256\":\"0xf5b2ee40d49be4a8f443a5a6aaa5428bac3b8e16207b9f6feac4e4fda37cadee\",\"license\":\"MIT\"},\"contracts/interfaces/ICommunityIssuance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\ninterface ICommunityIssuance {\\n    // --- Events ---\\n\\n    event HOGTokenAddressSet(address _hogTokenAddress);\\n    event StabilityPoolAddressSet(address _stabilityPoolAddress);\\n    event TotalHOGIssuedUpdated(uint _totalHOGIssued);\\n\\n    // --- Functions ---\\n\\n    function setAddresses(\\n        address _hogTokenAddress,\\n        address _stabilityPoolAddress\\n    ) external;\\n\\n    function issueHOG() external returns (uint);\\n\\n    function sendHOG(address _account, uint _HOGamount) external;\\n}\\n\",\"keccak256\":\"0xf3382cf0e2f19518e1b4afe744fb372cde4cb8f963c40e62bbe46848da51c107\",\"license\":\"MIT\"},\"contracts/interfaces/IDefaultPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./IPool.sol\\\";\\n\\ninterface IDefaultPool is IPool {\\n    // --- Events ---\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event DefaultPoolBaseFeeLMADebtUpdated(uint _BaseFeeLMADebt);\\n    event DefaultPoolStETHBalanceUpdated(uint _StETH);\\n\\n    // --- Functions ---\\n    function sendStETHToActivePool(uint _amount) external;\\n}\\n\",\"keccak256\":\"0x978b1d254b1ef5473bad5530d42a8786083044682b3a3f99df87a4b48a90e42b\",\"license\":\"MIT\"},\"contracts/interfaces/IHOGStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\ninterface IHOGStaking {\\n    // --- Events --\\n\\n    event HOGTokenAddressSet(address _hogTokenAddress);\\n    event BaseFeeLMATokenAddressSet(address _baseFeeLMATokenAddress);\\n    event TroveManagerAddressSet(address _troveManager);\\n    event BorrowerOperationsAddressSet(address _borrowerOperationsAddress);\\n    event ActivePoolAddressSet(address _activePoolAddress);\\n\\n    event StakeChanged(address indexed staker, uint newStake);\\n    event StakingGainsWithdrawn(\\n        address indexed staker,\\n        uint BaseFeeLMAGain,\\n        uint StETHGain\\n    );\\n    event F_StETHUpdated(uint _F_StETH);\\n    event F_BaseFeeLMAUpdated(uint _F_BaseFeeLMA);\\n    event TotalHOGStakedUpdated(uint _totalHOGStaked);\\n    event StETHSent(address _account, uint _amount);\\n    event StakerSnapshotsUpdated(\\n        address _staker,\\n        uint _F_StETH,\\n        uint _F_BaseFeeLMA\\n    );\\n\\n    // --- Functions ---\\n\\n    function setAddresses(\\n        address _hogTokenAddress,\\n        address _baseFeeLMATokenAddress,\\n        address _troveManagerAddress,\\n        address _borrowerOperationsAddress,\\n        address _activePoolAddress\\n    ) external;\\n\\n    function stake(uint _HOGamount) external;\\n\\n    function unstake(uint _HOGamount) external;\\n\\n    function increaseF_StETH(uint _StETHFee) external;\\n\\n    function increaseF_BaseFeeLMA(uint _HOGFee) external;\\n\\n    function getPendingStETHGain(address _user) external view returns (uint);\\n\\n    function getPendingBaseFeeLMAGain(\\n        address _user\\n    ) external view returns (uint);\\n}\\n\",\"keccak256\":\"0x13e4a173500e5e3f5645d39df65bad38ba953e7438a9cd3fd170b928d0264926\",\"license\":\"MIT\"},\"contracts/interfaces/IHOGToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../dependencies/IERC2612.sol\\\";\\n\\ninterface IHOGToken is IERC20, IERC2612 {\\n    // --- Events ---\\n\\n    event CommunityIssuanceAddressSet(address _communityIssuanceAddress);\\n    event HOGStakingAddressSet(address _hogStakingAddress);\\n    event LockupContractFactoryAddressSet(\\n        address _lockupContractFactoryAddress\\n    );\\n\\n    // --- Functions ---\\n\\n    function sendToHOGStaking(address _sender, uint256 _amount) external;\\n\\n    function getDeploymentStartTime() external view returns (uint256);\\n\\n    function getLpRewardsEntitlement() external view returns (uint256);\\n\\n    function increaseAllowance(\\n        address _spender,\\n        uint256 _addedValues\\n    ) external returns (bool);\\n\\n    function decreaseAllowance(\\n        address _spender,\\n        uint256 _decreasedValue\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x2c56d03787067551d0947fc59ba84d41d4163856163557d5e59c023552d99f04\",\"license\":\"MIT\"},\"contracts/interfaces/IHedgehogBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./IPriceFeed.sol\\\";\\n\\ninterface IHedgehogBase {\\n    function priceFeed() external view returns (IPriceFeed);\\n}\\n\",\"keccak256\":\"0x9832f1daa908607df4b572f561b27463d7fc4eb27847a26b1c399c2ee6ee6110\",\"license\":\"MIT\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\n// Common interface for the Pools.\\ninterface IPool {\\n    // --- Events ---\\n\\n    event StETHBalanceUpdated(uint _newBalance);\\n    event BaseFeeLMABalanceUpdated(uint _newBalance);\\n    event ActivePoolAddressChanged(address _newActivePoolAddress);\\n    event DefaultPoolAddressChanged(address _newDefaultPoolAddress);\\n    event StabilityPoolAddressChanged(address _newStabilityPoolAddress);\\n    event StETHSent(address _to, uint _amount);\\n\\n    // --- Functions ---\\n\\n    function getStETH() external view returns (uint);\\n\\n    function getBaseFeeLMADebt() external view returns (uint);\\n\\n    function increaseBaseFeeLMADebt(uint _amount) external;\\n\\n    function decreaseBaseFeeLMADebt(uint _amount) external;\\n}\\n\",\"keccak256\":\"0x07bd0fda4ba5685cc06db4f7aa7a149e5d2ec4c8078be9b976a78752272649de\",\"license\":\"MIT\"},\"contracts/interfaces/IPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\ninterface IPriceFeed {\\n    // --- Events ---\\n    event LastGoodPriceUpdated(uint _lastGoodPrice);\\n\\n    // --- Function ---\\n    function fetchPrice() external returns (uint);\\n}\\n\",\"keccak256\":\"0x24e4350a75b819196045f55178b75c575626e64a326de603dea7c78facdac536\",\"license\":\"MIT\"},\"contracts/interfaces/ISortedTroves.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\n// Common interface for the SortedTroves Doubly Linked List.\\ninterface ISortedTroves {\\n    // --- Events ---\\n\\n    event SortedTrovesAddressChanged(address _sortedDoublyLLAddress);\\n    event BorrowerOperationsAddressChanged(address _borrowerOperationsAddress);\\n    event NodeAdded(address _id, uint _NICR);\\n    event NodeRemoved(address _id);\\n\\n    // --- Functions ---\\n\\n    function setParams(\\n        uint256 _size,\\n        address _TroveManagerAddress,\\n        address _borrowerOperationsAddress\\n    ) external;\\n\\n    function insert(\\n        address _id,\\n        uint256 _ICR,\\n        address _prevId,\\n        address _nextId\\n    ) external;\\n\\n    function remove(address _id) external;\\n\\n    function reInsert(\\n        address _id,\\n        uint256 _newICR,\\n        address _prevId,\\n        address _nextId\\n    ) external;\\n\\n    function contains(address _id) external view returns (bool);\\n\\n    function isFull() external view returns (bool);\\n\\n    function isEmpty() external view returns (bool);\\n\\n    function getSize() external view returns (uint256);\\n\\n    function getMaxSize() external view returns (uint256);\\n\\n    function getFirst() external view returns (address);\\n\\n    function getLast() external view returns (address);\\n\\n    function getNext(address _id) external view returns (address);\\n\\n    function getPrev(address _id) external view returns (address);\\n\\n    function validInsertPosition(\\n        uint256 _ICR,\\n        address _prevId,\\n        address _nextId\\n    ) external view returns (bool);\\n\\n    function findInsertPosition(\\n        uint256 _ICR,\\n        address _prevId,\\n        address _nextId\\n    ) external view returns (address, address);\\n}\\n\",\"keccak256\":\"0xee69ee66b0db6c873a5a1177e5e9178aa8be6c57aa988d1d7e7526f484862ecd\",\"license\":\"MIT\"},\"contracts/interfaces/IStabilityPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\n/*\\n * The Stability Pool holds BaseFeeLMA tokens deposited by Stability Pool depositors.\\n *\\n * When a trove is liquidated, then depending on system conditions, some of its BaseFeeLMA debt gets offset with\\n * BaseFeeLMA in the Stability Pool:  that is, the offset debt evaporates, and an equal amount of BaseFeeLMA tokens in the Stability Pool is burned.\\n *\\n * Thus, a liquidation causes each depositor to receive a BaseFeeLMA loss, in proportion to their deposit as a share of total deposits.\\n * They also receive an StETH gain, as the StETH collateral of the liquidated trove is distributed among Stability depositors,\\n * in the same proportion.\\n *\\n * When a liquidation occurs, it depletes every deposit by the same fraction: for example, a liquidation that depletes 40%\\n * of the total BaseFeeLMA in the Stability Pool, depletes 40% of each deposit.\\n *\\n * A deposit that has experienced a series of liquidations is termed a \\\"compounded deposit\\\": each liquidation depletes the deposit,\\n * multiplying it by some factor in range ]0,1[\\n *\\n * Please see the implementation spec in the proof document, which closely follows on from the compounded deposit / StETH gain derivations:\\n * https://github.com/liquity/liquity/blob/master/papers/Scalable_Reward_Distribution_with_Compounding_Stakes.pdf\\n *\\n * --- HOG ISSUANCE TO STABILITY POOL DEPOSITORS ---\\n *\\n * A HOG issuance event occurs at every deposit operation, and every liquidation.\\n *\\n * Each deposit is tagged with the address of the front end through which it was made.\\n *\\n * All deposits earn a share of the issued HOG in proportion to the deposit as a share of total deposits. The HOG earned\\n * by a given deposit, is split between the depositor and the front end through which the deposit was made, based on the front end's kickbackRate.\\n *\\n * Please see the system Readme for an overview:\\n * https://github.com/liquity/dev/blob/main/README.md#hog-issuance-to-stability-providers\\n */\\ninterface IStabilityPool {\\n    // --- Events ---\\n\\n    event StabilityPoolStETHBalanceUpdated(uint _newBalance);\\n    event StabilityPoolBaseFeeLMABalanceUpdated(uint _newBalance);\\n\\n    event BorrowerOperationsAddressChanged(\\n        address _newBorrowerOperationsAddress\\n    );\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event ActivePoolAddressChanged(address _newActivePoolAddress);\\n    event DefaultPoolAddressChanged(address _newDefaultPoolAddress);\\n    event BaseFeeLMATokenAddressChanged(address _newBaseFeeLMATokenAddress);\\n    event SortedTrovesAddressChanged(address _newSortedTrovesAddress);\\n    event PriceFeedAddressChanged(address _newPriceFeedAddress);\\n    event CommunityIssuanceAddressChanged(address _newCommunityIssuanceAddress);\\n\\n    event P_Updated(uint _P);\\n    event S_Updated(uint _S, uint128 _epoch, uint128 _scale);\\n    event G_Updated(uint _G, uint128 _epoch, uint128 _scale);\\n    event EpochUpdated(uint128 _currentEpoch);\\n    event ScaleUpdated(uint128 _currentScale);\\n\\n    event FrontEndRegistered(address indexed _frontEnd, uint _kickbackRate);\\n    event FrontEndTagSet(address indexed _depositor, address indexed _frontEnd);\\n\\n    event DepositSnapshotUpdated(\\n        address indexed _depositor,\\n        uint _P,\\n        uint _S,\\n        uint _G\\n    );\\n    event FrontEndSnapshotUpdated(address indexed _frontEnd, uint _P, uint _G);\\n    event UserDepositChanged(address indexed _depositor, uint _newDeposit);\\n    event FrontEndStakeChanged(\\n        address indexed _frontEnd,\\n        uint _newFrontEndStake,\\n        address _depositor\\n    );\\n\\n    event StETHGainWithdrawn(\\n        address indexed _depositor,\\n        uint _StETH,\\n        uint _BaseFeeLMALoss\\n    );\\n    event HOGPaidToDepositor(address indexed _depositor, uint _HOG);\\n    event HOGPaidToFrontEnd(address indexed _frontEnd, uint _HOG);\\n    event StETHSent(address _to, uint _amount);\\n\\n    // --- Functions ---\\n\\n    /*\\n     * Called only once on init, to set addresses of other Hedgehog contracts\\n     * Callable only by owner, renounces ownership at the end\\n     */\\n    function setAddresses(\\n        address _borrowerOperationsAddress,\\n        address _troveManagerAddress,\\n        address _activePoolAddress,\\n        address _baseFeeLMATokenAddress,\\n        address _sortedTrovesAddress,\\n        address _priceFeedAddress,\\n        address _communityIssuanceAddress\\n    ) external;\\n\\n    /*\\n     * Initial checks:\\n     * - Frontend is registered or zero address\\n     * - Sender is not a registered frontend\\n     * - _amount is not zero\\n     * ---\\n     * - Triggers a HOG issuance, based on time passed since the last issuance. The HOG issuance is shared between *all* depositors and front ends\\n     * - Tags the deposit with the provided front end tag param, if it's a new deposit\\n     * - Sends depositor's accumulated gains (HOG, StETH) to depositor\\n     * - Sends the tagged front end's accumulated HOG gains to the tagged front end\\n     * - Increases deposit and tagged front end's stake, and takes new snapshots for each.\\n     */\\n    function provideToSP(uint _amount, address _frontEndTag) external;\\n\\n    /*\\n     * Initial checks:\\n     * - _amount is zero or there are no under collateralized troves left in the system\\n     * - User has a non zero deposit\\n     * ---\\n     * - Triggers a HOG issuance, based on time passed since the last issuance. The HOG issuance is shared between *all* depositors and front ends\\n     * - Removes the deposit's front end tag if it is a full withdrawal\\n     * - Sends all depositor's accumulated gains (HOG, StETH) to depositor\\n     * - Sends the tagged front end's accumulated HOG gains to the tagged front end\\n     * - Decreases deposit and tagged front end's stake, and takes new snapshots for each.\\n     *\\n     * If _amount > userDeposit, the user withdraws all of their compounded deposit.\\n     */\\n    function withdrawFromSP(uint _amount) external;\\n\\n    /*\\n     * Initial checks:\\n     * - User has a non zero deposit\\n     * - User has an open trove\\n     * - User has some StETH gain\\n     * ---\\n     * - Triggers a HOG issuance, based on time passed since the last issuance. The HOG issuance is shared between *all* depositors and front ends\\n     * - Sends all depositor's HOG gain to  depositor\\n     * - Sends all tagged front end's HOG gain to the tagged front end\\n     * - Transfers the depositor's entire StETH gain from the Stability Pool to the caller's trove\\n     * - Leaves their compounded deposit in the Stability Pool\\n     * - Updates snapshots for deposit and tagged front end stake\\n     */\\n    function withdrawStETHGainToTrove(\\n        address _upperHint,\\n        address _lowerHint\\n    ) external;\\n\\n    /*\\n     * Initial checks:\\n     * - Frontend (sender) not already registered\\n     * - User (sender) has no deposit\\n     * - _kickbackRate is in the range [0, 100%]\\n     * ---\\n     * Front end makes a one-time selection of kickback rate upon registering\\n     */\\n    function registerFrontEnd(uint _kickbackRate) external;\\n\\n    /*\\n     * Initial checks:\\n     * - Caller is TroveManager\\n     * ---\\n     * Cancels out the specified debt against the BaseFeeLMA contained in the Stability Pool (as far as possible)\\n     * and transfers the Trove's StETH collateral from ActivePool to StabilityPool.\\n     * Only called by liquidation functions in the TroveManager.\\n     */\\n    function offset(uint _debt, uint _coll) external;\\n\\n    /*\\n     * Returns the total amount of StETH held by the pool, accounted in an internal variable instead of `balance`,\\n     * to exclude edge cases like StETH received from a self-destruct.\\n     */\\n    function getStETH() external view returns (uint);\\n\\n    /*\\n     * Returns BaseFeeLMA held in the pool. Changes when users deposit/withdraw, and when Trove debt is offset.\\n     */\\n    function getTotalBaseFeeLMADeposits() external view returns (uint);\\n\\n    /*\\n     * Calculates the StETH gain earned by the deposit since its last snapshots were taken.\\n     */\\n    function getDepositorStETHGain(\\n        address _depositor\\n    ) external view returns (uint);\\n\\n    /*\\n     * Calculate the HOG gain earned by a deposit since its last snapshots were taken.\\n     * If not tagged with a front end, the depositor gets a 100% cut of what their deposit earned.\\n     * Otherwise, their cut of the deposit's earnings is equal to the kickbackRate, set by the front end through\\n     * which they made their deposit.\\n     */\\n    function getDepositorHOGGain(\\n        address _depositor\\n    ) external view returns (uint);\\n\\n    /*\\n     * Return the HOG gain earned by the front end.\\n     */\\n    function getFrontEndHOGGain(address _frontEnd) external view returns (uint);\\n\\n    /*\\n     * Return the user's compounded deposit.\\n     */\\n    function getCompoundedBaseFeeLMADeposit(\\n        address _depositor\\n    ) external view returns (uint);\\n\\n    /*\\n     * Return the front end's compounded stake.\\n     *\\n     * The front end's compounded stake is equal to the sum of its depositors' compounded deposits.\\n     */\\n    function getCompoundedFrontEndStake(\\n        address _frontEnd\\n    ) external view returns (uint);\\n\\n    /*\\n     * Fallback function\\n     * Only callable by Active Pool, it just accounts for StETH received\\n     * receive() external payable;\\n     */\\n}\\n\",\"keccak256\":\"0xb935a365431ddcb9018d508a71c25ac7d37b62b78e0ed1ca217b2b3d46905fc9\",\"license\":\"MIT\"},\"contracts/interfaces/ITroveManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./IHedgehogBase.sol\\\";\\nimport \\\"./IStabilityPool.sol\\\";\\nimport \\\"./IBaseFeeLMAToken.sol\\\";\\nimport \\\"./IHOGToken.sol\\\";\\nimport \\\"./IHOGStaking.sol\\\";\\n\\n// Common interface for the Trove Manager.\\ninterface ITroveManager is IHedgehogBase {\\n    // --- Events ---\\n\\n    event BorrowerOperationsAddressChanged(\\n        address _newBorrowerOperationsAddress\\n    );\\n    event PriceFeedAddressChanged(address _newPriceFeedAddress);\\n    event BaseFeeLMATokenAddressChanged(address _newBaseFeeLMATokenAddress);\\n    event ActivePoolAddressChanged(address _activePoolAddress);\\n    event DefaultPoolAddressChanged(address _defaultPoolAddress);\\n    event StabilityPoolAddressChanged(address _stabilityPoolAddress);\\n    event GasPoolAddressChanged(address _gasPoolAddress);\\n    event CollSurplusPoolAddressChanged(address _collSurplusPoolAddress);\\n    event SortedTrovesAddressChanged(address _sortedTrovesAddress);\\n    event HOGTokenAddressChanged(address _hogTokenAddress);\\n    event HOGStakingAddressChanged(address _hogStakingAddress);\\n\\n    event Liquidation(\\n        uint _liquidatedDebt,\\n        uint _liquidatedColl,\\n        uint _collGasCompensation,\\n        uint _BaseFeeLMAGasCompensation\\n    );\\n    event Redemption(\\n        uint _attemptedBaseFeeLMAAmount,\\n        uint _actualBaseFeeLMAAmount,\\n        uint _StETHSent,\\n        uint _StETHFee\\n    );\\n    event TroveUpdated(\\n        address indexed _borrower,\\n        uint _debt,\\n        uint _coll,\\n        uint stake,\\n        uint8 operation\\n    );\\n    event TroveLiquidated(\\n        address indexed _borrower,\\n        uint _debt,\\n        uint _coll,\\n        uint8 operation\\n    );\\n    event BaseRateUpdated(uint _baseRate);\\n    event LastFeeOpTimeUpdated(uint _lastFeeOpTime);\\n    event TotalStakesUpdated(uint _newTotalStakes);\\n    event SystemSnapshotsUpdated(\\n        uint _totalStakesSnapshot,\\n        uint _totalCollateralSnapshot\\n    );\\n    event LTermsUpdated(uint _L_StETH, uint _L_BaseFeeLMADebt);\\n    event TroveSnapshotsUpdated(uint _L_StETH, uint _L_BaseFeeLMADebt);\\n    event TroveIndexUpdated(address _borrower, uint _newIndex);\\n\\n    // --- Functions ---\\n\\n    function setAddresses(\\n        address _borrowerOperationsAddress,\\n        address _activePoolAddress,\\n        address _defaultPoolAddress,\\n        address _stabilityPoolAddress,\\n        address _gasPoolAddress,\\n        address _collSurplusPoolAddress,\\n        address _priceFeedAddress,\\n        address _baseFeeLMATokenAddress,\\n        address _sortedTrovesAddress,\\n        address _hogTokenAddress,\\n        address _hogStakingAddress\\n    ) external;\\n\\n    function stabilityPool() external view returns (IStabilityPool);\\n\\n    function baseFeeLMAToken() external view returns (IBaseFeeLMAToken);\\n\\n    function hogToken() external view returns (IHOGToken);\\n\\n    function hogStaking() external view returns (IHOGStaking);\\n\\n    function getTroveOwnersCount() external view returns (uint);\\n\\n    function getTroveFromTroveOwnersArray(\\n        uint _index\\n    ) external view returns (address);\\n\\n    function getNominalICR(address _borrower) external view returns (uint);\\n\\n    function getCurrentICR(\\n        address _borrower,\\n        uint _price\\n    ) external view returns (uint);\\n\\n    function liquidate(address _borrower) external;\\n\\n    function liquidateTroves(uint _n) external;\\n\\n    function batchLiquidateTroves(address[] calldata _troveArray) external;\\n\\n    function redeemCollateral(\\n        uint _BaseFeeLMAAmount,\\n        address _firstRedemptionHint,\\n        address _upperPartialRedemptionHint,\\n        address _lowerPartialRedemptionHint,\\n        uint _partialRedemptionHintNICR,\\n        uint _maxIterations,\\n        uint _maxFee\\n    ) external;\\n\\n    function updateStakeAndTotalStakes(\\n        address _borrower\\n    ) external returns (uint);\\n\\n    function updateTroveRewardSnapshots(address _borrower) external;\\n\\n    function addTroveOwnerToArray(\\n        address _borrower\\n    ) external returns (uint index);\\n\\n    function applyPendingRewards(address _borrower) external;\\n\\n    function getPendingStETHReward(\\n        address _borrower\\n    ) external view returns (uint);\\n\\n    function getPendingBaseFeeLMADebtReward(\\n        address _borrower\\n    ) external view returns (uint);\\n\\n    function hasPendingRewards(address _borrower) external view returns (bool);\\n\\n    function getEntireDebtAndColl(\\n        address _borrower\\n    )\\n        external\\n        view\\n        returns (\\n            uint debt,\\n            uint coll,\\n            uint pendingBaseFeeLMADebtReward,\\n            uint pendingStETHReward\\n        );\\n\\n    function closeTrove(address _borrower) external;\\n\\n    function removeStake(address _borrower) external;\\n\\n    function getRedemptionRate() external view returns (uint);\\n\\n    function getRedemptionRateWithDecay() external view returns (uint);\\n\\n    function getRedemptionFeeWithDecay(\\n        uint _StETHDrawn\\n    ) external view returns (uint);\\n\\n    function getBorrowingRate() external view returns (uint);\\n\\n    function getBorrowingRateWithDecay() external view returns (uint);\\n\\n    function getBorrowingFee(uint BaseFeeLMADebt) external view returns (uint);\\n\\n    function getBorrowingFeeWithDecay(\\n        uint _BaseFeeLMADebt\\n    ) external view returns (uint);\\n\\n    function decayBaseRateFromBorrowing() external;\\n\\n    function getTroveStatus(address _borrower) external view returns (uint);\\n\\n    function getTroveStake(address _borrower) external view returns (uint);\\n\\n    function getTroveDebt(address _borrower) external view returns (uint);\\n\\n    function getTroveColl(address _borrower) external view returns (uint);\\n\\n    function setTroveStatus(address _borrower, uint num) external;\\n\\n    function increaseTroveColl(\\n        address _borrower,\\n        uint _collIncrease\\n    ) external returns (uint);\\n\\n    function decreaseTroveColl(\\n        address _borrower,\\n        uint _collDecrease\\n    ) external returns (uint);\\n\\n    function increaseTroveDebt(\\n        address _borrower,\\n        uint _debtIncrease\\n    ) external returns (uint);\\n\\n    function decreaseTroveDebt(\\n        address _borrower,\\n        uint _collDecrease\\n    ) external returns (uint);\\n\\n    function getTCR(uint _price) external view returns (uint);\\n\\n    function checkRecoveryMode(uint _price) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xdc5ca5926f4d81a3f41101cc742db205d02ce5d859c7e8f896b0f3e3aaeda001\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052670de0b6b3a76400006010553480156200001d57600080fd5b5062000029336200002f565b62000081565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b61364980620000916000396000f3fe6080604052600436106102a25760003560e01c80638b8fbd9211610165578063b987e41d116100cc578063dde2a74611610085578063dde2a746146108fd578063df9cd84f1461091d578063eaa8ba7f1461093d578063f2fde38b1461095d578063f92d34331461097d578063fc7e286d14610992578063fca1c4d3146109dd57600080fd5b8063b987e41d1461084f578063c1d3bc911461086f578063ce4b5bbe1461088f578063d5a1f4fd146108a7578063d77b35b1146108c7578063dae8ddf3146108dd57600080fd5b8063a2f039831161011e578063a2f0398314610752578063a3f4df7e14610767578063a4e59ac8146107ad578063a7bfff97146107cd578063adcc615014610819578063ae9187541461082f57600080fd5b80638b8fbd92146106c15780638da5cb5b146106d75780638f913789146106f557806395fb16bb14610715578063a201415214610735578063a20baee61461053257600080fd5b80635f788d6511610209578063794e5724116101c2578063794e5724146105cd578063795d26c3146105e95780637f7dde4a146105fe57806382e0a5741461061e57806386da082414610656578063887105d3146106ac57600080fd5b80635f788d65146104fd578063715018a61461051d57806372fe25aa14610532578063741bef1a1461054e578063766718081461056e57806377553ad4146105ad57600080fd5b80633d83908a1161025b5780633d83908a1461044a5780634870dd9a1461046a578063488df0fc1461047f578063556be101146104945780635733d58f146104b45780635d2de642146104d057600080fd5b806316b9d3c5146102e95780631bf435551461037857806328a0a04d146103a35780632e54bf95146103db578063335525ad146103fd5780633cc742251461041d57600080fd5b366102e4576102af6109f3565b6009546102bc9034610a64565b60098190556040519081526000805160206135d48339815191529060200160405180910390a1005b600080fd5b3480156102f557600080fd5b5061033f61030436600461323a565b600f602052600090815260409020805460018201546002830154600390930154919290916001600160801b0380821691600160801b90041685565b604080519586526020860194909452928401919091526001600160801b03908116606084015216608082015260a0015b60405180910390f35b34801561038457600080fd5b50610395686194049f30f720000081565b60405190815260200161036f565b3480156103af57600080fd5b506103956103be366004613273565b601260209081526000928352604080842090915290825290205481565b3480156103e757600080fd5b506103fb6103f63660046132a6565b610a79565b005b34801561040957600080fd5b506103fb6104183660046132bf565b610bf1565b34801561042957600080fd5b5060015461043d906001600160a01b031681565b60405161036f91906132e1565b34801561045657600080fd5b5060055461043d906001600160a01b031681565b34801561047657600080fd5b5061039560c881565b34801561048b57600080fd5b50600a54610395565b3480156104a057600080fd5b506103fb6104af3660046132a6565b610c53565b3480156104c057600080fd5b506103956714d1120d7b16000081565b3480156104dc57600080fd5b506103956104eb36600461323a565b600e6020526000908152604090205481565b34801561050957600080fd5b506103fb6105183660046132f5565b610ccd565b34801561052957600080fd5b506103fb610e40565b34801561053e57600080fd5b50610395670de0b6b3a764000081565b34801561055a57600080fd5b5060025461043d906001600160a01b031681565b34801561057a57600080fd5b5060115461059590600160801b90046001600160801b031681565b6040516001600160801b03909116815260200161036f565b3480156105b957600080fd5b5060045461043d906001600160a01b031681565b3480156105d957600080fd5b50610395670f43fc2c04ee000081565b3480156105f557600080fd5b50610395610e52565b34801561060a57600080fd5b5060005461043d906001600160a01b031681565b34801561062a57600080fd5b50610395610639366004613273565b601360209081526000928352604080842090915290825290205481565b34801561066257600080fd5b5061033f61067136600461323a565b600c602052600090815260409020805460018201546002830154600390930154919290916001600160801b0380821691600160801b90041685565b3480156106b857600080fd5b50610395610f4e565b3480156106cd57600080fd5b5061039560105481565b3480156106e357600080fd5b506003546001600160a01b031661043d565b34801561070157600080fd5b5060065461043d906001600160a01b031681565b34801561072157600080fd5b5060085461043d906001600160a01b031681565b34801561074157600080fd5b50610395680ad78ebc5ac620000081565b34801561075e57600080fd5b50600954610395565b34801561077357600080fd5b506107a06040518060400160405280600d81526020016c14dd18589a5b1a5d1e541bdbdb609a1b81525081565b60405161036f9190613325565b3480156107b957600080fd5b50601154610595906001600160801b031681565b3480156107d957600080fd5b506108046107e836600461323a565b600d602052600090815260409020805460019091015460ff1682565b6040805192835290151560208301520161036f565b34801561082557600080fd5b5061039560155481565b34801561083b57600080fd5b5060075461043d906001600160a01b031681565b34801561085b57600080fd5b5061039561086a36600461323a565b611013565b34801561087b57600080fd5b506103fb61088a366004613373565b611120565b34801561089b57600080fd5b50610395633b9aca0081565b3480156108b357600080fd5b506103956108c236600461323a565b61133b565b3480156108d357600080fd5b5061039560165481565b3480156108e957600080fd5b506103956108f836600461323a565b6113d9565b34801561090957600080fd5b5061039561091836600461323a565b61146e565b34801561092957600080fd5b5061039561093836600461323a565b611540565b34801561094957600080fd5b506103fb6109583660046133a1565b6115d5565b34801561096957600080fd5b506103fb61097836600461323a565b61181d565b34801561098957600080fd5b50610395611896565b34801561099e57600080fd5b506109cf6109ad36600461323a565b600b60205260009081526040902080546001909101546001600160a01b031682565b60405161036f929190613437565b3480156109e957600080fd5b5061039560145481565b6000546001600160a01b03163314610a625760405162461bcd60e51b815260206004820152602760248201527f53746162696c697479506f6f6c3a2043616c6c6572206973206e6f74204163746044820152661a5d99541bdbdb60ca1b60648201526084015b60405180910390fd5b565b6000610a708284613464565b90505b92915050565b8015610a8757610a876118b8565b336000908152600b6020526040902054610aa081611aae565b6008546001600160a01b0316610ab581611b17565b6000610ac03361133b565b90506000610acd336113d9565b90506000610adb8683611b8b565b90506000610ae98684611ba1565b336000818152600b60205260409020600101549192506001600160a01b0390911690610b1790879083611bad565b6000610b2282611540565b90506000610b308286611ba1565b9050610b3c8382611d26565b826001600160a01b03166000805160206135f48339815191528233604051610b65929190613437565b60405180910390a2610b773386611e68565b6000610b838787611ba1565b9050610b8f3382611ee3565b60405181815233906000805160206135b48339815191529060200160405180910390a260408051898152602081018790523391600080516020613594833981519152910160405180910390a2610be488612058565b5050505050505050505050565b610bf9612179565b600a54801580610c07575082155b15610c1157505050565b600854610c26906001600160a01b0316611b17565b600080610c348486856121e5565b91509150610c4282826122b3565b610c4c8486612588565b5050505050565b610c5c336126b1565b610c653361273f565b610c6e816127b7565b336000818152600d6020526040908190208381556001908101805460ff19169091179055517f19bc932fb9e16a8b5a1e41be9f4c2de59d5ddd7567b8b81405f532ca00a9880e90610cc29084815260200190565b60405180910390a250565b610cd68161282b565b610cdf336126b1565b610ce8826128dd565b336000908152600b60205260409020546008546001600160a01b0316610d0d81611b17565b81600003610d1f57610d1f338461293c565b6000610d2a3361133b565b90506000610d37336113d9565b90506000610d458583611ba1565b336000818152600b60205260409020600101549192506001600160a01b0390911690610d7390869083611bad565b6000610d7e82611540565b90506000610d8c828b610a64565b9050610d988382611d26565b826001600160a01b03166000805160206135f48339815191528233604051610dc1929190613437565b60405180910390a2610dd3338b612996565b6000610ddf868c610a64565b9050610deb3382611ee3565b60405181815233906000805160206135b48339815191529060200160405180910390a260408051888152602081018790523391600080516020613594833981519152910160405180910390a2610be487612058565b610e48612a4c565b610a626000612aa6565b60008054604080516315b3137b60e21b8152905183926001600160a01b0316916356cc4dec9160048083019260209291908290030181865afa158015610e9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec09190613477565b90506000600160009054906101000a90046001600160a01b03166001600160a01b03166356cc4dec6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3b9190613477565b9050610f478282610a64565b9250505090565b600080546040805163a2f0398360e01b8152905183926001600160a01b03169163a2f039839160048083019260209291908290030181865afa158015610f98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fbc9190613477565b90506000600160009054906101000a90046001600160a01b03166001600160a01b031663a2f039836040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f17573d6000803e3d6000fd5b6001600160a01b0381166000908152600b602052604081205480820361103c5750600092915050565b6001600160a01b038084166000908152600b6020526040812060010154909116908115611081576001600160a01b0382166000908152600d602052604090205461108b565b670de0b6b3a76400005b6001600160a01b0386166000908152600c60209081526040808320815160a08101835281548152600182015493810193909352600281015491830191909152600301546001600160801b038082166060840152600160801b909104166080820152919250611115670de0b6b3a764000061110f6111088886612af8565b8690612bcc565b90612bd8565b979650505050505050565b336000908152600b602052604090205461113981611aae565b61114233612be4565b61114b33612cdb565b6008546001600160a01b031661116081611b17565b600061116b3361133b565b90506000611178336113d9565b905060006111868583611ba1565b336000818152600b60205260409020600101549192506001600160a01b03909116906111b490869083611bad565b60006111bf82611540565b9050806111cc8382611d26565b826001600160a01b03166000805160206135f483398151915282336040516111f5929190613437565b60405180910390a26112073386611ee3565b60408051878152602081018690523391600080516020613594833981519152910160405180910390a260405185815233906000805160206135b48339815191529060200160405180910390a26009546112609087611ba1565b60098190556040519081526000805160206135d48339815191529060200160405180910390a17f6a5eb4d39360dd25d648e3e96a252255bc09ccad2dcdcfdedeb08c857555cd1233876040516112b7929190613490565b60405180910390a16004805460405163574a1f3d60e11b815233928101929092526001600160a01b038c811660248401528b81166044840152169063ae943e7a9088906064016000604051808303818588803b15801561131657600080fd5b505af115801561132a573d6000803e3d6000fd5b505050505050505050505050505050565b6001600160a01b0381166000908152600b60205260408120548082036113645750600092915050565b6001600160a01b0383166000908152600c60209081526040808320815160a08101835281548152600182015493810193909352600281015491830191909152600301546001600160801b038082166060840152600160801b909104166080820152906113d08383612d54565b95945050505050565b6001600160a01b0381166000908152600b60205260408120548082036114025750600092915050565b6001600160a01b0383166000908152600c60209081526040808320815160a08101835281548152600182015493810193909352600281015491830191909152600301546001600160801b038082166060840152600160801b909104166080820152906113d08383612dd3565b6001600160a01b0381166000908152600e60205260408120548082036114975750600092915050565b6001600160a01b0383166000908152600d6020526040812054906114c3670de0b6b3a764000083611ba1565b6001600160a01b0386166000908152600f60209081526040808320815160a08101835281548152600182015493810193909352600281015491830191909152600301546001600160801b038082166060840152600160801b909104166080820152919250611115670de0b6b3a764000061110f6111088886612af8565b6001600160a01b0381166000908152600e60205260408120548082036115695750600092915050565b6001600160a01b0383166000908152600f60209081526040808320815160a08101835281548152600182015493810193909352600281015491830191909152600301546001600160801b038082166060840152600160801b909104166080820152906113d08383612dd3565b6115dd612a4c565b6115e687612ec5565b6115ef86612ec5565b6115f885612ec5565b61160184612ec5565b61160a83612ec5565b61161382612ec5565b61161c81612ec5565b600480546001600160a01b03199081166001600160a01b038a811691909117909255600580548216898416179055600080548216888416179055600680548216878416179055600780548216868416179055600280548216858416179055600880549091169183169190911790556040517f3ca631ffcd2a9b5d9ae18543fc82f58eb4ca33af9e6ab01b7a8e95331e6ed985906116ba9089906132e1565b60405180910390a17f143219c9e69b09e07e095fcc889b43d8f46ca892bba65f08dc3a0050869a5678866040516116f191906132e1565b60405180910390a17f78f058b189175430c48dc02699e3a0031ea4ff781536dc2fab847de4babdd8828560405161172891906132e1565b60405180910390a17f7faa560f2889840c377209fbc4b6b92d05f43f1fc60bf336ab546fd60c0051ad8460405161175f91906132e1565b60405180910390a17f65f4cf077bc01e4742eb5ad98326f6e95b63548ea24b17f8d5e823111fe788008360405161179691906132e1565b60405180910390a17f8c537274438aa850a330284665d81a85dd38267d09e4050d416bfc94142db264826040516117cd91906132e1565b60405180910390a17f3055265812fb8447b9ada4a5d804ec43bd528ec40e89c952bbc7b85dc5ac68118160405161180491906132e1565b60405180910390a1611814610e40565b50505050505050565b611825612a4c565b6001600160a01b03811661188a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610a59565b61189381612aa6565b50565b6118aa6103e8670de0b6b3a76400006134a9565b6118b59060056134cb565b81565b60025460408051630fdb11cf60e01b815290516000926001600160a01b031691630fdb11cf916004808301926020929190829003018187875af1158015611903573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119279190613477565b90506000600760009054906101000a90046001600160a01b03166001600160a01b0316634d6228316040518163ffffffff1660e01b8152600401602060405180830381865afa15801561197e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119a291906134e2565b600554604051630d293c7160e41b81529192506000916001600160a01b039091169063d293c710906119da9085908790600401613490565b602060405180830381865afa1580156119f7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a1b9190613477565b9050670f43fc2c04ee0000811015611aa95760405162461bcd60e51b8152602060048201526044602482018190527f53746162696c697479506f6f6c3a2043616e6e6f742077697468647261772077908201527f68696c65207468657265206172652074726f766573207769746820494352203c6064820152631026a1a960e11b608482015260a401610a59565b505050565b600081116118935760405162461bcd60e51b815260206004820152603060248201527f53746162696c697479506f6f6c3a2055736572206d757374206861766520612060448201526f1b9bdb8b5e995c9bc819195c1bdcda5d60821b6064820152608401610a59565b6000816001600160a01b0316624b33196040518163ffffffff1660e01b81526004016020604051808303816000875af1158015611b58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b7c9190613477565b9050611b8781612f6a565b5050565b6000818310611b9a5781610a70565b5090919050565b6000610a7082846134ff565b6001600160a01b03811615611c6f576000611bc78261146e565b6040516313be223160e31b81529091506001600160a01b03851690639df1118890611bf89085908590600401613490565b600060405180830381600087803b158015611c1257600080fd5b505af1158015611c26573d6000803e3d6000fd5b50505050816001600160a01b03167f6c843f4b36dc1fd842411e86ba3a47df9432c2422e9e6c2efd7a8dbf48ebc18482604051611c6591815260200190565b60405180910390a2505b6000611c7a83611013565b6040516313be223160e31b81529091506001600160a01b03851690639df1118890611cab9086908590600401613490565b600060405180830381600087803b158015611cc557600080fd5b505af1158015611cd9573d6000803e3d6000fd5b50505050826001600160a01b03167f3b78de4c49e618f0164775bab57429a0c7b04df658c5c8809a8d79fe40d2614b82604051611d1891815260200190565b60405180910390a250505050565b6001600160a01b0382166000908152600e60205260408120829055819003611dbb576001600160a01b0382166000818152600f60205260408082208281556001810183905560028101839055600301829055517fbb1322f85cc7cc8bac4e172a5bc5dcc0c1959007f9a030032abf9258205f0e4591611daf918190918252602082015260400190565b60405180910390a25050565b6011546010546001600160801b03600160801b8084048216600081815260136020908152604080832095909716808352948152868220546001600160a01b038a16808452600f835292889020600181018890556002810182905594840286176003909501949094558651868152908101849052939591949390917fbb1322f85cc7cc8bac4e172a5bc5dcc0c1959007f9a030032abf9258205f0e45910160405180910390a2505050505050565b80600003611e74575050565b600654604051631062c15f60e11b81526001600160a01b03909116906320c582be90611ea890309086908690600401613512565b600060405180830381600087803b158015611ec257600080fd5b505af1158015611ed6573d6000803e3d6000fd5b50505050611b878161307b565b6001600160a01b0382166000908152600b60205260408120829055819003611f8b576001600160a01b0382166000818152600b60209081526040808320600190810180546001600160a01b0319169055600c83528184208481559081018490556002810184905560030183905580518381529182018390528101919091527f2d6cc0bcdf72c9486f6451bde6b80f44066f4558f77f44dbfedbe7d8b295225a90606001611daf565b6011546010546001600160801b03600160801b808404821660008181526012602090815260408083209590971680835294815286822054838352601382528783208684528252878320546001600160a01b038b16808552600c84529389902060018101899055828155600281018290559585028717600390960195909555875187815291820181905296810184905293959194939192917f2d6cc0bcdf72c9486f6451bde6b80f44066f4558f77f44dbfedbe7d8b295225a9060600160405180910390a250505050505050565b806000036120635750565b6009546000906120739083611ba1565b60098190556040518181529091506000805160206135d48339815191529060200160405180910390a17f6a5eb4d39360dd25d648e3e96a252255bc09ccad2dcdcfdedeb08c857555cd1233836040516120cd929190613490565b60405180910390a1604051600090339084908381818185875af1925050503d8060008114612117576040519150601f19603f3d011682016040523d82523d6000602084013e61211c565b606091505b5050905080611aa95760405162461bcd60e51b815260206004820152602360248201527f53746162696c697479506f6f6c3a2073656e64696e67205374455448206661696044820152621b195960ea1b6064820152608401610a59565b6005546001600160a01b03163314610a625760405162461bcd60e51b815260206004820152602960248201527f53746162696c697479506f6f6c3a2043616c6c6572206973206e6f742054726f6044820152683b32a6b0b730b3b2b960b91b6064820152608401610a59565b600080600061221160155461220b670de0b6b3a764000089612bcc90919063ffffffff16565b90610a64565b90508385111561222357612223613536565b83850361223f576000601655670de0b6b3a76400009150612287565b6016546000906122619061225b88670de0b6b3a7640000612bcc565b90611ba1565b9050612272600161220b8388612bd8565b92506122828161225b8588612bcc565b601655505b6122918185612bd8565b92506122a76122a08486612bcc565b8290611ba1565b60155550935093915050565b6010546000670de0b6b3a76400008311156122d0576122d0613536565b60006122e4670de0b6b3a764000085611ba1565b6011546001600160801b03600160801b8204811660008181526012602090815260408083209490951680835293905292832054939450909290916123288988612bcc565b905060006123368383610a64565b6001600160801b038581166000818152601260209081526040808320948b16808452948252918290208590558151858152908101929092528101919091529091507fe12e2cd2c9afa8069203ca07e7eff1edce4a075686d0736a8e7e0d593597b2079060600160405180910390a185600003612469576123c06001600160801b03851660016130ca565b601180546001600160801b03908116600160801b93821684021791829055604051929091041681527fb50f0f59e7cb5b421dc77581c3a9919e3806e076e5fa78a874c3f120cb7d874d9060200160405180910390a1601180546001600160801b0319169055604051600081527f1f9dfc70cd666adb18a39d60a797518f7b4febf4b6e24ef37d44f6e1e7219fbe9060200160405180910390a1670de0b6b3a76400009650612534565b633b9aca00612484670de0b6b3a764000061110f8b8a612bcc565b101561251b576124ae670de0b6b3a764000061110f633b9aca006124a88c8b612bcc565b90612bcc565b96506124c46001600160801b03861660016130ca565b601180546001600160801b0319166001600160801b039290921691821790556040519081527f1f9dfc70cd666adb18a39d60a797518f7b4febf4b6e24ef37d44f6e1e7219fbe9060200160405180910390a1612534565b612531670de0b6b3a764000061110f8a89612bcc565b96505b6000871161254457612544613536565b60108790556040518781527fc1a9618cb59ebca77cbdbc2949f126823c407ff13edb285fd0262519a9c18e8c9060200160405180910390a150505050505050505050565b600054604051633b4009ff60e11b8152600481018390526001600160a01b0390911690819063768013fe90602401600060405180830381600087803b1580156125d057600080fd5b505af11580156125e4573d6000803e3d6000fd5b505050506125f18261307b565b600654604051632770a7eb60e21b81526001600160a01b0390911690639dc29fac906126239030908690600401613490565b600060405180830381600087803b15801561263d57600080fd5b505af1158015612651573d6000803e3d6000fd5b505060405163a51ba3b760e01b81526001600160a01b038416925063a51ba3b791506126839030908790600401613490565b600060405180830381600087803b15801561269d57600080fd5b505af1158015611814573d6000803e3d6000fd5b6001600160a01b0381166000908152600d602052604090206001015460ff16156118935760405162461bcd60e51b815260206004820152603960248201527f53746162696c697479506f6f6c3a206d757374206e6f7420616c72656164792060448201527818994818481c9959da5cdd195c995908199c9bdb9d08195b99603a1b6064820152608401610a59565b6001600160a01b0381166000908152600b60205260409020548015611b875760405162461bcd60e51b815260206004820152602860248201527f53746162696c697479506f6f6c3a2055736572206d7573742068617665206e6f6044820152670819195c1bdcda5d60c21b6064820152608401610a59565b670de0b6b3a76400008111156118935760405162461bcd60e51b815260206004820152603360248201527f53746162696c697479506f6f6c3a204b69636b6261636b2072617465206d75736044820152727420626520696e2072616e6765205b302c315d60681b6064820152608401610a59565b6001600160a01b0381166000908152600d602052604090206001015460ff168061285c57506001600160a01b038116155b6118935760405162461bcd60e51b815260206004820152604660248201527f53746162696c697479506f6f6c3a20546167206d75737420626520612072656760448201527f697374657265642066726f6e7420656e642c206f7220746865207a65726f206160648201526564647265737360d01b608482015260a401610a59565b600081116118935760405162461bcd60e51b815260206004820152602660248201527f53746162696c697479506f6f6c3a20416d6f756e74206d757374206265206e6f6044820152656e2d7a65726f60d01b6064820152608401610a59565b6001600160a01b038281166000818152600b602052604080822060010180546001600160a01b0319169486169485179055517f094c08e96a8890877a8390b4f967180a7507ad8622244d05fcd0f9f8e086564e9190a35050565b600654604051632ee65eeb60e21b81526001600160a01b039091169063bb997bac906129ca90859030908690600401613512565b600060405180830381600087803b1580156129e457600080fd5b505af11580156129f8573d6000803e3d6000fd5b5050600a5460009250612a0c915083610a64565b600a8190556040518181529091507f86e501e8d2b9dbc3dc01201117d33c738d636cb164feab96725f9b635202728f9060200160405180910390a1505050565b6003546001600160a01b03163314610a625760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610a59565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b608081015160608201516040808401516020808601516001600160801b03808716600090815260138452858120918716815292529281205490949392908590612b419084611ba1565b6001600160801b03808716600090815260136020526040812092935091612b9891633b9aca0091908490612b78908a1660016130ca565b6001600160801b0316815260208101919091526040016000205490612bd8565b90506000612bbe670de0b6b3a764000061110f8681612bb78888610a64565b8f90612bcc565b9a9950505050505050505050565b6000610a7082846134cb565b6000610a7082846134a9565b6005546040516321e3780160e01b81526001600160a01b03909116906321e3780190612c149084906004016132e1565b602060405180830381865afa158015612c31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c559190613477565b6001146118935760405162461bcd60e51b815260206004820152604860248201527f53746162696c697479506f6f6c3a2063616c6c6572206d75737420686176652060448201527f616e206163746976652074726f766520746f2077697468647261772053744554606482015267484761696e20746f60c01b608482015260a401610a59565b6000612ce68261133b565b905060008111611b875760405162461bcd60e51b815260206004820152603360248201527f53746162696c697479506f6f6c3a2063616c6c6572206d7573742068617665206044820152723737b716bd32b9379029ba22aa241023b0b4b760691b6064820152608401610a59565b6080810151606082015182516020808501516001600160801b03808616600090815260128452604080822092871682529190935282205491949392918590612d9c9084611ba1565b6001600160801b03808716600090815260126020526040812092935091612b9891633b9aca0091908490612b78908a1660016130ca565b6020810151606082015160808301516011546000939291906001600160801b03600160801b90910481169082161015612e125760009350505050610a73565b6011546000908190612e2d906001600160801b031685613149565b9050806001600160801b0316600003612e6057612e598561110f6010548b612bcc90919063ffffffff16565b9150612e97565b806001600160801b0316600103612e9257612e59633b9aca0061110f8761110f6010548d612bcc90919063ffffffff16565b600091505b612ea588633b9aca00612bd8565b821015612eba57600095505050505050610a73565b509695505050505050565b6001600160a01b038116612f1b5760405162461bcd60e51b815260206004820152601e60248201527f4163636f756e742063616e6e6f74206265207a65726f206164647265737300006044820152606401610a59565b803b80611b875760405162461bcd60e51b815260206004820181905260248201527f4163636f756e7420636f64652073697a652063616e6e6f74206265207a65726f6044820152606401610a59565b600a54801580612f78575081155b15612f81575050565b6000612f8d83836131d2565b90506000612fa660105483612bcc90919063ffffffff16565b6011546001600160801b03600160801b820481166000908152601360209081526040808320939094168252919091522054909150612fe49082610a64565b60118054600160801b8082046001600160801b0390811660009081526013602081815260408084209685168452958152858320979097559454928304821680825294865283812092909116808252918552829020548251908152938401929092528201527f2d6127771b164a9cc8827d24b5955db2a77e7a81dac389107ebb8bce9fb649689060600160405180910390a150505050565b600a5460009061308b9083611ba1565b600a8190556040518181529091507f86e501e8d2b9dbc3dc01201117d33c738d636cb164feab96725f9b635202728f9060200160405180910390a15050565b6000806130d7838561354c565b9050836001600160801b0316816001600160801b03161015610a705760405162461bcd60e51b815260206004820152602560248201527f4c697175697479536166654d6174683132383a206164646974696f6e206f766560448201526472666c6f7760d81b6064820152608401610a59565b6000826001600160801b0316826001600160801b031611156131be5760405162461bcd60e51b815260206004820152602860248201527f4c697175697479536166654d6174683132383a207375627472616374696f6e206044820152676f766572666c6f7760c01b6064820152608401610a59565b60006131ca8385613573565b949350505050565b6000806131f660145461220b670de0b6b3a764000087612bcc90919063ffffffff16565b905060006132048285612bd8565b905061321a6132138286612bcc565b8390611ba1565b601455949350505050565b6001600160a01b038116811461189357600080fd5b60006020828403121561324c57600080fd5b8135610a7081613225565b80356001600160801b038116811461326e57600080fd5b919050565b6000806040838503121561328657600080fd5b61328f83613257565b915061329d60208401613257565b90509250929050565b6000602082840312156132b857600080fd5b5035919050565b600080604083850312156132d257600080fd5b50508035926020909101359150565b6001600160a01b0391909116815260200190565b6000806040838503121561330857600080fd5b82359150602083013561331a81613225565b809150509250929050565b600060208083528351808285015260005b8181101561335257858101830151858201604001528201613336565b506000604082860101526040601f19601f8301168501019250505092915050565b6000806040838503121561338657600080fd5b823561339181613225565b9150602083013561331a81613225565b600080600080600080600060e0888a0312156133bc57600080fd5b87356133c781613225565b965060208801356133d781613225565b955060408801356133e781613225565b945060608801356133f781613225565b9350608088013561340781613225565b925060a088013561341781613225565b915060c088013561342781613225565b8091505092959891949750929550565b9182526001600160a01b0316602082015260400190565b634e487b7160e01b600052601160045260246000fd5b80820180821115610a7357610a7361344e565b60006020828403121561348957600080fd5b5051919050565b6001600160a01b03929092168252602082015260400190565b6000826134c657634e487b7160e01b600052601260045260246000fd5b500490565b8082028115828204841417610a7357610a7361344e565b6000602082840312156134f457600080fd5b8151610a7081613225565b81810381811115610a7357610a7361344e565b6001600160a01b039384168152919092166020820152604081019190915260600190565b634e487b7160e01b600052600160045260246000fd5b6001600160801b0381811683821601908082111561356c5761356c61344e565b5092915050565b6001600160801b0382811682821603908082111561356c5761356c61344e56feed2b5662bd1cbb37f8c7a24d7e1394954c107dffd3680938f6b60e7c62eac870bce78369dccab09eec1986f4d409ab09ffbb47d65423e5148fcf98411c5111c9d9d34355afc912a8d32cabbc0259f46ebba5107650be0a60c37c94a3d0ca39d499920012339b5a3368d3a04b8606ce412c46ed92b7dcd8602d41fc8862cb8f25a2646970667358221220200bcf789140ecb4ae374b890db26b41b2cc337900cd36e9075dc8279d1fd90564736f6c63430008130033",
  "deployedBytecode": "0x6080604052600436106102a25760003560e01c80638b8fbd9211610165578063b987e41d116100cc578063dde2a74611610085578063dde2a746146108fd578063df9cd84f1461091d578063eaa8ba7f1461093d578063f2fde38b1461095d578063f92d34331461097d578063fc7e286d14610992578063fca1c4d3146109dd57600080fd5b8063b987e41d1461084f578063c1d3bc911461086f578063ce4b5bbe1461088f578063d5a1f4fd146108a7578063d77b35b1146108c7578063dae8ddf3146108dd57600080fd5b8063a2f039831161011e578063a2f0398314610752578063a3f4df7e14610767578063a4e59ac8146107ad578063a7bfff97146107cd578063adcc615014610819578063ae9187541461082f57600080fd5b80638b8fbd92146106c15780638da5cb5b146106d75780638f913789146106f557806395fb16bb14610715578063a201415214610735578063a20baee61461053257600080fd5b80635f788d6511610209578063794e5724116101c2578063794e5724146105cd578063795d26c3146105e95780637f7dde4a146105fe57806382e0a5741461061e57806386da082414610656578063887105d3146106ac57600080fd5b80635f788d65146104fd578063715018a61461051d57806372fe25aa14610532578063741bef1a1461054e578063766718081461056e57806377553ad4146105ad57600080fd5b80633d83908a1161025b5780633d83908a1461044a5780634870dd9a1461046a578063488df0fc1461047f578063556be101146104945780635733d58f146104b45780635d2de642146104d057600080fd5b806316b9d3c5146102e95780631bf435551461037857806328a0a04d146103a35780632e54bf95146103db578063335525ad146103fd5780633cc742251461041d57600080fd5b366102e4576102af6109f3565b6009546102bc9034610a64565b60098190556040519081526000805160206135d48339815191529060200160405180910390a1005b600080fd5b3480156102f557600080fd5b5061033f61030436600461323a565b600f602052600090815260409020805460018201546002830154600390930154919290916001600160801b0380821691600160801b90041685565b604080519586526020860194909452928401919091526001600160801b03908116606084015216608082015260a0015b60405180910390f35b34801561038457600080fd5b50610395686194049f30f720000081565b60405190815260200161036f565b3480156103af57600080fd5b506103956103be366004613273565b601260209081526000928352604080842090915290825290205481565b3480156103e757600080fd5b506103fb6103f63660046132a6565b610a79565b005b34801561040957600080fd5b506103fb6104183660046132bf565b610bf1565b34801561042957600080fd5b5060015461043d906001600160a01b031681565b60405161036f91906132e1565b34801561045657600080fd5b5060055461043d906001600160a01b031681565b34801561047657600080fd5b5061039560c881565b34801561048b57600080fd5b50600a54610395565b3480156104a057600080fd5b506103fb6104af3660046132a6565b610c53565b3480156104c057600080fd5b506103956714d1120d7b16000081565b3480156104dc57600080fd5b506103956104eb36600461323a565b600e6020526000908152604090205481565b34801561050957600080fd5b506103fb6105183660046132f5565b610ccd565b34801561052957600080fd5b506103fb610e40565b34801561053e57600080fd5b50610395670de0b6b3a764000081565b34801561055a57600080fd5b5060025461043d906001600160a01b031681565b34801561057a57600080fd5b5060115461059590600160801b90046001600160801b031681565b6040516001600160801b03909116815260200161036f565b3480156105b957600080fd5b5060045461043d906001600160a01b031681565b3480156105d957600080fd5b50610395670f43fc2c04ee000081565b3480156105f557600080fd5b50610395610e52565b34801561060a57600080fd5b5060005461043d906001600160a01b031681565b34801561062a57600080fd5b50610395610639366004613273565b601360209081526000928352604080842090915290825290205481565b34801561066257600080fd5b5061033f61067136600461323a565b600c602052600090815260409020805460018201546002830154600390930154919290916001600160801b0380821691600160801b90041685565b3480156106b857600080fd5b50610395610f4e565b3480156106cd57600080fd5b5061039560105481565b3480156106e357600080fd5b506003546001600160a01b031661043d565b34801561070157600080fd5b5060065461043d906001600160a01b031681565b34801561072157600080fd5b5060085461043d906001600160a01b031681565b34801561074157600080fd5b50610395680ad78ebc5ac620000081565b34801561075e57600080fd5b50600954610395565b34801561077357600080fd5b506107a06040518060400160405280600d81526020016c14dd18589a5b1a5d1e541bdbdb609a1b81525081565b60405161036f9190613325565b3480156107b957600080fd5b50601154610595906001600160801b031681565b3480156107d957600080fd5b506108046107e836600461323a565b600d602052600090815260409020805460019091015460ff1682565b6040805192835290151560208301520161036f565b34801561082557600080fd5b5061039560155481565b34801561083b57600080fd5b5060075461043d906001600160a01b031681565b34801561085b57600080fd5b5061039561086a36600461323a565b611013565b34801561087b57600080fd5b506103fb61088a366004613373565b611120565b34801561089b57600080fd5b50610395633b9aca0081565b3480156108b357600080fd5b506103956108c236600461323a565b61133b565b3480156108d357600080fd5b5061039560165481565b3480156108e957600080fd5b506103956108f836600461323a565b6113d9565b34801561090957600080fd5b5061039561091836600461323a565b61146e565b34801561092957600080fd5b5061039561093836600461323a565b611540565b34801561094957600080fd5b506103fb6109583660046133a1565b6115d5565b34801561096957600080fd5b506103fb61097836600461323a565b61181d565b34801561098957600080fd5b50610395611896565b34801561099e57600080fd5b506109cf6109ad36600461323a565b600b60205260009081526040902080546001909101546001600160a01b031682565b60405161036f929190613437565b3480156109e957600080fd5b5061039560145481565b6000546001600160a01b03163314610a625760405162461bcd60e51b815260206004820152602760248201527f53746162696c697479506f6f6c3a2043616c6c6572206973206e6f74204163746044820152661a5d99541bdbdb60ca1b60648201526084015b60405180910390fd5b565b6000610a708284613464565b90505b92915050565b8015610a8757610a876118b8565b336000908152600b6020526040902054610aa081611aae565b6008546001600160a01b0316610ab581611b17565b6000610ac03361133b565b90506000610acd336113d9565b90506000610adb8683611b8b565b90506000610ae98684611ba1565b336000818152600b60205260409020600101549192506001600160a01b0390911690610b1790879083611bad565b6000610b2282611540565b90506000610b308286611ba1565b9050610b3c8382611d26565b826001600160a01b03166000805160206135f48339815191528233604051610b65929190613437565b60405180910390a2610b773386611e68565b6000610b838787611ba1565b9050610b8f3382611ee3565b60405181815233906000805160206135b48339815191529060200160405180910390a260408051898152602081018790523391600080516020613594833981519152910160405180910390a2610be488612058565b5050505050505050505050565b610bf9612179565b600a54801580610c07575082155b15610c1157505050565b600854610c26906001600160a01b0316611b17565b600080610c348486856121e5565b91509150610c4282826122b3565b610c4c8486612588565b5050505050565b610c5c336126b1565b610c653361273f565b610c6e816127b7565b336000818152600d6020526040908190208381556001908101805460ff19169091179055517f19bc932fb9e16a8b5a1e41be9f4c2de59d5ddd7567b8b81405f532ca00a9880e90610cc29084815260200190565b60405180910390a250565b610cd68161282b565b610cdf336126b1565b610ce8826128dd565b336000908152600b60205260409020546008546001600160a01b0316610d0d81611b17565b81600003610d1f57610d1f338461293c565b6000610d2a3361133b565b90506000610d37336113d9565b90506000610d458583611ba1565b336000818152600b60205260409020600101549192506001600160a01b0390911690610d7390869083611bad565b6000610d7e82611540565b90506000610d8c828b610a64565b9050610d988382611d26565b826001600160a01b03166000805160206135f48339815191528233604051610dc1929190613437565b60405180910390a2610dd3338b612996565b6000610ddf868c610a64565b9050610deb3382611ee3565b60405181815233906000805160206135b48339815191529060200160405180910390a260408051888152602081018790523391600080516020613594833981519152910160405180910390a2610be487612058565b610e48612a4c565b610a626000612aa6565b60008054604080516315b3137b60e21b8152905183926001600160a01b0316916356cc4dec9160048083019260209291908290030181865afa158015610e9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec09190613477565b90506000600160009054906101000a90046001600160a01b03166001600160a01b03166356cc4dec6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3b9190613477565b9050610f478282610a64565b9250505090565b600080546040805163a2f0398360e01b8152905183926001600160a01b03169163a2f039839160048083019260209291908290030181865afa158015610f98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fbc9190613477565b90506000600160009054906101000a90046001600160a01b03166001600160a01b031663a2f039836040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f17573d6000803e3d6000fd5b6001600160a01b0381166000908152600b602052604081205480820361103c5750600092915050565b6001600160a01b038084166000908152600b6020526040812060010154909116908115611081576001600160a01b0382166000908152600d602052604090205461108b565b670de0b6b3a76400005b6001600160a01b0386166000908152600c60209081526040808320815160a08101835281548152600182015493810193909352600281015491830191909152600301546001600160801b038082166060840152600160801b909104166080820152919250611115670de0b6b3a764000061110f6111088886612af8565b8690612bcc565b90612bd8565b979650505050505050565b336000908152600b602052604090205461113981611aae565b61114233612be4565b61114b33612cdb565b6008546001600160a01b031661116081611b17565b600061116b3361133b565b90506000611178336113d9565b905060006111868583611ba1565b336000818152600b60205260409020600101549192506001600160a01b03909116906111b490869083611bad565b60006111bf82611540565b9050806111cc8382611d26565b826001600160a01b03166000805160206135f483398151915282336040516111f5929190613437565b60405180910390a26112073386611ee3565b60408051878152602081018690523391600080516020613594833981519152910160405180910390a260405185815233906000805160206135b48339815191529060200160405180910390a26009546112609087611ba1565b60098190556040519081526000805160206135d48339815191529060200160405180910390a17f6a5eb4d39360dd25d648e3e96a252255bc09ccad2dcdcfdedeb08c857555cd1233876040516112b7929190613490565b60405180910390a16004805460405163574a1f3d60e11b815233928101929092526001600160a01b038c811660248401528b81166044840152169063ae943e7a9088906064016000604051808303818588803b15801561131657600080fd5b505af115801561132a573d6000803e3d6000fd5b505050505050505050505050505050565b6001600160a01b0381166000908152600b60205260408120548082036113645750600092915050565b6001600160a01b0383166000908152600c60209081526040808320815160a08101835281548152600182015493810193909352600281015491830191909152600301546001600160801b038082166060840152600160801b909104166080820152906113d08383612d54565b95945050505050565b6001600160a01b0381166000908152600b60205260408120548082036114025750600092915050565b6001600160a01b0383166000908152600c60209081526040808320815160a08101835281548152600182015493810193909352600281015491830191909152600301546001600160801b038082166060840152600160801b909104166080820152906113d08383612dd3565b6001600160a01b0381166000908152600e60205260408120548082036114975750600092915050565b6001600160a01b0383166000908152600d6020526040812054906114c3670de0b6b3a764000083611ba1565b6001600160a01b0386166000908152600f60209081526040808320815160a08101835281548152600182015493810193909352600281015491830191909152600301546001600160801b038082166060840152600160801b909104166080820152919250611115670de0b6b3a764000061110f6111088886612af8565b6001600160a01b0381166000908152600e60205260408120548082036115695750600092915050565b6001600160a01b0383166000908152600f60209081526040808320815160a08101835281548152600182015493810193909352600281015491830191909152600301546001600160801b038082166060840152600160801b909104166080820152906113d08383612dd3565b6115dd612a4c565b6115e687612ec5565b6115ef86612ec5565b6115f885612ec5565b61160184612ec5565b61160a83612ec5565b61161382612ec5565b61161c81612ec5565b600480546001600160a01b03199081166001600160a01b038a811691909117909255600580548216898416179055600080548216888416179055600680548216878416179055600780548216868416179055600280548216858416179055600880549091169183169190911790556040517f3ca631ffcd2a9b5d9ae18543fc82f58eb4ca33af9e6ab01b7a8e95331e6ed985906116ba9089906132e1565b60405180910390a17f143219c9e69b09e07e095fcc889b43d8f46ca892bba65f08dc3a0050869a5678866040516116f191906132e1565b60405180910390a17f78f058b189175430c48dc02699e3a0031ea4ff781536dc2fab847de4babdd8828560405161172891906132e1565b60405180910390a17f7faa560f2889840c377209fbc4b6b92d05f43f1fc60bf336ab546fd60c0051ad8460405161175f91906132e1565b60405180910390a17f65f4cf077bc01e4742eb5ad98326f6e95b63548ea24b17f8d5e823111fe788008360405161179691906132e1565b60405180910390a17f8c537274438aa850a330284665d81a85dd38267d09e4050d416bfc94142db264826040516117cd91906132e1565b60405180910390a17f3055265812fb8447b9ada4a5d804ec43bd528ec40e89c952bbc7b85dc5ac68118160405161180491906132e1565b60405180910390a1611814610e40565b50505050505050565b611825612a4c565b6001600160a01b03811661188a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610a59565b61189381612aa6565b50565b6118aa6103e8670de0b6b3a76400006134a9565b6118b59060056134cb565b81565b60025460408051630fdb11cf60e01b815290516000926001600160a01b031691630fdb11cf916004808301926020929190829003018187875af1158015611903573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119279190613477565b90506000600760009054906101000a90046001600160a01b03166001600160a01b0316634d6228316040518163ffffffff1660e01b8152600401602060405180830381865afa15801561197e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119a291906134e2565b600554604051630d293c7160e41b81529192506000916001600160a01b039091169063d293c710906119da9085908790600401613490565b602060405180830381865afa1580156119f7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a1b9190613477565b9050670f43fc2c04ee0000811015611aa95760405162461bcd60e51b8152602060048201526044602482018190527f53746162696c697479506f6f6c3a2043616e6e6f742077697468647261772077908201527f68696c65207468657265206172652074726f766573207769746820494352203c6064820152631026a1a960e11b608482015260a401610a59565b505050565b600081116118935760405162461bcd60e51b815260206004820152603060248201527f53746162696c697479506f6f6c3a2055736572206d757374206861766520612060448201526f1b9bdb8b5e995c9bc819195c1bdcda5d60821b6064820152608401610a59565b6000816001600160a01b0316624b33196040518163ffffffff1660e01b81526004016020604051808303816000875af1158015611b58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b7c9190613477565b9050611b8781612f6a565b5050565b6000818310611b9a5781610a70565b5090919050565b6000610a7082846134ff565b6001600160a01b03811615611c6f576000611bc78261146e565b6040516313be223160e31b81529091506001600160a01b03851690639df1118890611bf89085908590600401613490565b600060405180830381600087803b158015611c1257600080fd5b505af1158015611c26573d6000803e3d6000fd5b50505050816001600160a01b03167f6c843f4b36dc1fd842411e86ba3a47df9432c2422e9e6c2efd7a8dbf48ebc18482604051611c6591815260200190565b60405180910390a2505b6000611c7a83611013565b6040516313be223160e31b81529091506001600160a01b03851690639df1118890611cab9086908590600401613490565b600060405180830381600087803b158015611cc557600080fd5b505af1158015611cd9573d6000803e3d6000fd5b50505050826001600160a01b03167f3b78de4c49e618f0164775bab57429a0c7b04df658c5c8809a8d79fe40d2614b82604051611d1891815260200190565b60405180910390a250505050565b6001600160a01b0382166000908152600e60205260408120829055819003611dbb576001600160a01b0382166000818152600f60205260408082208281556001810183905560028101839055600301829055517fbb1322f85cc7cc8bac4e172a5bc5dcc0c1959007f9a030032abf9258205f0e4591611daf918190918252602082015260400190565b60405180910390a25050565b6011546010546001600160801b03600160801b8084048216600081815260136020908152604080832095909716808352948152868220546001600160a01b038a16808452600f835292889020600181018890556002810182905594840286176003909501949094558651868152908101849052939591949390917fbb1322f85cc7cc8bac4e172a5bc5dcc0c1959007f9a030032abf9258205f0e45910160405180910390a2505050505050565b80600003611e74575050565b600654604051631062c15f60e11b81526001600160a01b03909116906320c582be90611ea890309086908690600401613512565b600060405180830381600087803b158015611ec257600080fd5b505af1158015611ed6573d6000803e3d6000fd5b50505050611b878161307b565b6001600160a01b0382166000908152600b60205260408120829055819003611f8b576001600160a01b0382166000818152600b60209081526040808320600190810180546001600160a01b0319169055600c83528184208481559081018490556002810184905560030183905580518381529182018390528101919091527f2d6cc0bcdf72c9486f6451bde6b80f44066f4558f77f44dbfedbe7d8b295225a90606001611daf565b6011546010546001600160801b03600160801b808404821660008181526012602090815260408083209590971680835294815286822054838352601382528783208684528252878320546001600160a01b038b16808552600c84529389902060018101899055828155600281018290559585028717600390960195909555875187815291820181905296810184905293959194939192917f2d6cc0bcdf72c9486f6451bde6b80f44066f4558f77f44dbfedbe7d8b295225a9060600160405180910390a250505050505050565b806000036120635750565b6009546000906120739083611ba1565b60098190556040518181529091506000805160206135d48339815191529060200160405180910390a17f6a5eb4d39360dd25d648e3e96a252255bc09ccad2dcdcfdedeb08c857555cd1233836040516120cd929190613490565b60405180910390a1604051600090339084908381818185875af1925050503d8060008114612117576040519150601f19603f3d011682016040523d82523d6000602084013e61211c565b606091505b5050905080611aa95760405162461bcd60e51b815260206004820152602360248201527f53746162696c697479506f6f6c3a2073656e64696e67205374455448206661696044820152621b195960ea1b6064820152608401610a59565b6005546001600160a01b03163314610a625760405162461bcd60e51b815260206004820152602960248201527f53746162696c697479506f6f6c3a2043616c6c6572206973206e6f742054726f6044820152683b32a6b0b730b3b2b960b91b6064820152608401610a59565b600080600061221160155461220b670de0b6b3a764000089612bcc90919063ffffffff16565b90610a64565b90508385111561222357612223613536565b83850361223f576000601655670de0b6b3a76400009150612287565b6016546000906122619061225b88670de0b6b3a7640000612bcc565b90611ba1565b9050612272600161220b8388612bd8565b92506122828161225b8588612bcc565b601655505b6122918185612bd8565b92506122a76122a08486612bcc565b8290611ba1565b60155550935093915050565b6010546000670de0b6b3a76400008311156122d0576122d0613536565b60006122e4670de0b6b3a764000085611ba1565b6011546001600160801b03600160801b8204811660008181526012602090815260408083209490951680835293905292832054939450909290916123288988612bcc565b905060006123368383610a64565b6001600160801b038581166000818152601260209081526040808320948b16808452948252918290208590558151858152908101929092528101919091529091507fe12e2cd2c9afa8069203ca07e7eff1edce4a075686d0736a8e7e0d593597b2079060600160405180910390a185600003612469576123c06001600160801b03851660016130ca565b601180546001600160801b03908116600160801b93821684021791829055604051929091041681527fb50f0f59e7cb5b421dc77581c3a9919e3806e076e5fa78a874c3f120cb7d874d9060200160405180910390a1601180546001600160801b0319169055604051600081527f1f9dfc70cd666adb18a39d60a797518f7b4febf4b6e24ef37d44f6e1e7219fbe9060200160405180910390a1670de0b6b3a76400009650612534565b633b9aca00612484670de0b6b3a764000061110f8b8a612bcc565b101561251b576124ae670de0b6b3a764000061110f633b9aca006124a88c8b612bcc565b90612bcc565b96506124c46001600160801b03861660016130ca565b601180546001600160801b0319166001600160801b039290921691821790556040519081527f1f9dfc70cd666adb18a39d60a797518f7b4febf4b6e24ef37d44f6e1e7219fbe9060200160405180910390a1612534565b612531670de0b6b3a764000061110f8a89612bcc565b96505b6000871161254457612544613536565b60108790556040518781527fc1a9618cb59ebca77cbdbc2949f126823c407ff13edb285fd0262519a9c18e8c9060200160405180910390a150505050505050505050565b600054604051633b4009ff60e11b8152600481018390526001600160a01b0390911690819063768013fe90602401600060405180830381600087803b1580156125d057600080fd5b505af11580156125e4573d6000803e3d6000fd5b505050506125f18261307b565b600654604051632770a7eb60e21b81526001600160a01b0390911690639dc29fac906126239030908690600401613490565b600060405180830381600087803b15801561263d57600080fd5b505af1158015612651573d6000803e3d6000fd5b505060405163a51ba3b760e01b81526001600160a01b038416925063a51ba3b791506126839030908790600401613490565b600060405180830381600087803b15801561269d57600080fd5b505af1158015611814573d6000803e3d6000fd5b6001600160a01b0381166000908152600d602052604090206001015460ff16156118935760405162461bcd60e51b815260206004820152603960248201527f53746162696c697479506f6f6c3a206d757374206e6f7420616c72656164792060448201527818994818481c9959da5cdd195c995908199c9bdb9d08195b99603a1b6064820152608401610a59565b6001600160a01b0381166000908152600b60205260409020548015611b875760405162461bcd60e51b815260206004820152602860248201527f53746162696c697479506f6f6c3a2055736572206d7573742068617665206e6f6044820152670819195c1bdcda5d60c21b6064820152608401610a59565b670de0b6b3a76400008111156118935760405162461bcd60e51b815260206004820152603360248201527f53746162696c697479506f6f6c3a204b69636b6261636b2072617465206d75736044820152727420626520696e2072616e6765205b302c315d60681b6064820152608401610a59565b6001600160a01b0381166000908152600d602052604090206001015460ff168061285c57506001600160a01b038116155b6118935760405162461bcd60e51b815260206004820152604660248201527f53746162696c697479506f6f6c3a20546167206d75737420626520612072656760448201527f697374657265642066726f6e7420656e642c206f7220746865207a65726f206160648201526564647265737360d01b608482015260a401610a59565b600081116118935760405162461bcd60e51b815260206004820152602660248201527f53746162696c697479506f6f6c3a20416d6f756e74206d757374206265206e6f6044820152656e2d7a65726f60d01b6064820152608401610a59565b6001600160a01b038281166000818152600b602052604080822060010180546001600160a01b0319169486169485179055517f094c08e96a8890877a8390b4f967180a7507ad8622244d05fcd0f9f8e086564e9190a35050565b600654604051632ee65eeb60e21b81526001600160a01b039091169063bb997bac906129ca90859030908690600401613512565b600060405180830381600087803b1580156129e457600080fd5b505af11580156129f8573d6000803e3d6000fd5b5050600a5460009250612a0c915083610a64565b600a8190556040518181529091507f86e501e8d2b9dbc3dc01201117d33c738d636cb164feab96725f9b635202728f9060200160405180910390a1505050565b6003546001600160a01b03163314610a625760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610a59565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b608081015160608201516040808401516020808601516001600160801b03808716600090815260138452858120918716815292529281205490949392908590612b419084611ba1565b6001600160801b03808716600090815260136020526040812092935091612b9891633b9aca0091908490612b78908a1660016130ca565b6001600160801b0316815260208101919091526040016000205490612bd8565b90506000612bbe670de0b6b3a764000061110f8681612bb78888610a64565b8f90612bcc565b9a9950505050505050505050565b6000610a7082846134cb565b6000610a7082846134a9565b6005546040516321e3780160e01b81526001600160a01b03909116906321e3780190612c149084906004016132e1565b602060405180830381865afa158015612c31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c559190613477565b6001146118935760405162461bcd60e51b815260206004820152604860248201527f53746162696c697479506f6f6c3a2063616c6c6572206d75737420686176652060448201527f616e206163746976652074726f766520746f2077697468647261772053744554606482015267484761696e20746f60c01b608482015260a401610a59565b6000612ce68261133b565b905060008111611b875760405162461bcd60e51b815260206004820152603360248201527f53746162696c697479506f6f6c3a2063616c6c6572206d7573742068617665206044820152723737b716bd32b9379029ba22aa241023b0b4b760691b6064820152608401610a59565b6080810151606082015182516020808501516001600160801b03808616600090815260128452604080822092871682529190935282205491949392918590612d9c9084611ba1565b6001600160801b03808716600090815260126020526040812092935091612b9891633b9aca0091908490612b78908a1660016130ca565b6020810151606082015160808301516011546000939291906001600160801b03600160801b90910481169082161015612e125760009350505050610a73565b6011546000908190612e2d906001600160801b031685613149565b9050806001600160801b0316600003612e6057612e598561110f6010548b612bcc90919063ffffffff16565b9150612e97565b806001600160801b0316600103612e9257612e59633b9aca0061110f8761110f6010548d612bcc90919063ffffffff16565b600091505b612ea588633b9aca00612bd8565b821015612eba57600095505050505050610a73565b509695505050505050565b6001600160a01b038116612f1b5760405162461bcd60e51b815260206004820152601e60248201527f4163636f756e742063616e6e6f74206265207a65726f206164647265737300006044820152606401610a59565b803b80611b875760405162461bcd60e51b815260206004820181905260248201527f4163636f756e7420636f64652073697a652063616e6e6f74206265207a65726f6044820152606401610a59565b600a54801580612f78575081155b15612f81575050565b6000612f8d83836131d2565b90506000612fa660105483612bcc90919063ffffffff16565b6011546001600160801b03600160801b820481166000908152601360209081526040808320939094168252919091522054909150612fe49082610a64565b60118054600160801b8082046001600160801b0390811660009081526013602081815260408084209685168452958152858320979097559454928304821680825294865283812092909116808252918552829020548251908152938401929092528201527f2d6127771b164a9cc8827d24b5955db2a77e7a81dac389107ebb8bce9fb649689060600160405180910390a150505050565b600a5460009061308b9083611ba1565b600a8190556040518181529091507f86e501e8d2b9dbc3dc01201117d33c738d636cb164feab96725f9b635202728f9060200160405180910390a15050565b6000806130d7838561354c565b9050836001600160801b0316816001600160801b03161015610a705760405162461bcd60e51b815260206004820152602560248201527f4c697175697479536166654d6174683132383a206164646974696f6e206f766560448201526472666c6f7760d81b6064820152608401610a59565b6000826001600160801b0316826001600160801b031611156131be5760405162461bcd60e51b815260206004820152602860248201527f4c697175697479536166654d6174683132383a207375627472616374696f6e206044820152676f766572666c6f7760c01b6064820152608401610a59565b60006131ca8385613573565b949350505050565b6000806131f660145461220b670de0b6b3a764000087612bcc90919063ffffffff16565b905060006132048285612bd8565b905061321a6132138286612bcc565b8390611ba1565b601455949350505050565b6001600160a01b038116811461189357600080fd5b60006020828403121561324c57600080fd5b8135610a7081613225565b80356001600160801b038116811461326e57600080fd5b919050565b6000806040838503121561328657600080fd5b61328f83613257565b915061329d60208401613257565b90509250929050565b6000602082840312156132b857600080fd5b5035919050565b600080604083850312156132d257600080fd5b50508035926020909101359150565b6001600160a01b0391909116815260200190565b6000806040838503121561330857600080fd5b82359150602083013561331a81613225565b809150509250929050565b600060208083528351808285015260005b8181101561335257858101830151858201604001528201613336565b506000604082860101526040601f19601f8301168501019250505092915050565b6000806040838503121561338657600080fd5b823561339181613225565b9150602083013561331a81613225565b600080600080600080600060e0888a0312156133bc57600080fd5b87356133c781613225565b965060208801356133d781613225565b955060408801356133e781613225565b945060608801356133f781613225565b9350608088013561340781613225565b925060a088013561341781613225565b915060c088013561342781613225565b8091505092959891949750929550565b9182526001600160a01b0316602082015260400190565b634e487b7160e01b600052601160045260246000fd5b80820180821115610a7357610a7361344e565b60006020828403121561348957600080fd5b5051919050565b6001600160a01b03929092168252602082015260400190565b6000826134c657634e487b7160e01b600052601260045260246000fd5b500490565b8082028115828204841417610a7357610a7361344e565b6000602082840312156134f457600080fd5b8151610a7081613225565b81810381811115610a7357610a7361344e565b6001600160a01b039384168152919092166020820152604081019190915260600190565b634e487b7160e01b600052600160045260246000fd5b6001600160801b0381811683821601908082111561356c5761356c61344e565b5092915050565b6001600160801b0382811682821603908082111561356c5761356c61344e56feed2b5662bd1cbb37f8c7a24d7e1394954c107dffd3680938f6b60e7c62eac870bce78369dccab09eec1986f4d409ab09ffbb47d65423e5148fcf98411c5111c9d9d34355afc912a8d32cabbc0259f46ebba5107650be0a60c37c94a3d0ca39d499920012339b5a3368d3a04b8606ce412c46ed92b7dcd8602d41fc8862cb8f25a2646970667358221220200bcf789140ecb4ae374b890db26b41b2cc337900cd36e9075dc8279d1fd90564736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Fork of Liquity's Stability Pool. Logic remains unchanged. Changes to the contract: - Raised pragma version - Removed an import of IStabilityPool Interface Even though SafeMath is no longer required, the decision was made to keep it to avoid human factor errors The Stability Pool holds BaseFeeLMA tokens deposited by Stability Pool depositors. When a trove is liquidated, then depending on system conditions, some of its BaseFeeLMA debt gets offset with BaseFeeLMA in the Stability Pool:  that is, the offset debt evaporates, and an equal amount of BaseFeeLMA tokens in the Stability Pool is burned. Thus, a liquidation causes each depositor to receive a BaseFeeLMA loss, in proportion to their deposit as a share of total deposits. They also receive an StETH gain, as the StETH collateral of the liquidated trove is distributed among Stability depositors, in the same proportion. When a liquidation occurs, it depletes every deposit by the same fraction: for example, a liquidation that depletes 40% of the total BaseFeeLMA in the Stability Pool, depletes 40% of each deposit. A deposit that has experienced a series of liquidations is termed a \"compounded deposit\": each liquidation depletes the deposit, multiplying it by some factor in range ]0,1[ --- IMPLEMENTATION --- We use a highly scalable method of tracking deposits and StETH gains that has O(1) complexity. When a liquidation occurs, rather than updating each depositor's deposit and StETH gain, we simply update two state variables: a product P, and a sum S. A mathematical manipulation allows us to factor out the initial deposit, and accurately track all depositors' compounded deposits and accumulated StETH gains over time, as liquidations occur, using just these two variables P and S. When depositors join the Stability Pool, they get a snapshot of the latest P and S: P_t and S_t, respectively. The formula for a depositor's accumulated StETH gain is derived here: https://github.com/liquity/dev/blob/main/papers/Scalable_Reward_Distribution_with_Compounding_Stakes.pdf For a given deposit d_t, the ratio P/P_t tells us the factor by which a deposit has decreased since it joined the Stability Pool, and the term d_t * (S - S_t)/P_t gives us the deposit's total accumulated StETH gain. Each liquidation updates the product P and sum S. After a series of liquidations, a compounded deposit and corresponding StETH gain can be calculated using the initial deposit, the depositor’s snapshots of P and S, and the latest values of P and S. Any time a depositor updates their deposit (withdrawal, top-up) their accumulated StETH gain is paid out, their new deposit is recorded (based on their latest compounded deposit and modified by the withdrawal/top-up), and they receive new snapshots of the latest P and S. Essentially, they make a fresh deposit that overwrites the old one. --- SCALE FACTOR --- Since P is a running product in range ]0,1] that is always-decreasing, it should never reach 0 when multiplied by a number in range ]0,1[. Unfortunately, Solidity floor division always reaches 0, sooner or later. A series of liquidations that nearly empty the Pool (and thus each multiply P by a very small number in range ]0,1[ ) may push P to its 18 digit decimal limit, and round it to 0, when in fact the Pool hasn't been emptied: this would break deposit tracking. So, to track P accurately, we use a scale factor: if a liquidation would cause P to decrease to <1e-9 (and be rounded to 0 by Solidity), we first multiply P by 1e9, and increment a currentScale factor by 1. The added benefit of using 1e9 for the scale factor (rather than 1e18) is that it ensures negligible precision loss close to the scale boundary: when P is at its minimum value of 1e9, the relative precision loss in P due to floor division is only on the order of 1e-9. --- EPOCHS --- Whenever a liquidation fully empties the Stability Pool, all deposits should become 0. However, setting P to 0 would make P be 0 forever, and break all future reward calculations. So, every time the Stability Pool is emptied by a liquidation, we reset P = 1 and currentScale = 0, and increment the currentEpoch by 1. --- TRACKING DEPOSIT OVER SCALE CHANGES AND EPOCHS --- When a deposit is made, it gets snapshots of the currentEpoch and the currentScale. When calculating a compounded deposit, we compare the current epoch to the deposit's epoch snapshot. If the current epoch is newer, then the deposit was present during a pool-emptying liquidation, and necessarily has been depleted to 0. Otherwise, we then compare the current scale to the deposit's scale snapshot. If they're equal, the compounded deposit is given by d_t * P/P_t. If it spans one scale change, it is given by d_t * P/(P_t * 1e9). If it spans more than one scale change, we define the compounded deposit as 0, since it is now less than 1e-9'th of its initial value (e.g. a deposit of 1 billion BaseFeeLMA has depleted to < 1 BaseFeeLMA).  --- TRACKING DEPOSITOR'S StETH GAIN OVER SCALE CHANGES AND EPOCHS --- In the current epoch, the latest value of S is stored upon each scale change, and the mapping (scale -> S) is stored for each epoch. This allows us to calculate a deposit's accumulated StETH gain, during the epoch in which the deposit was non-zero and earned StETH. We calculate the depositor's accumulated StETH gain for the scale at which they made the deposit, using the StETH gain formula: e_1 = d_t * (S - S_t) / P_t and also for scale after, taking care to divide the latter by a factor of 1e9: e_2 = d_t * S / (P_t * 1e9) The gain in the second scale will be full, as the starting point was in the previous scale, thus no need to subtract anything. The deposit therefore was present for reward events from the beginning of that second scale.        S_i-S_t + S_{i+1}      .<--------.------------>      .         .      . S_i     .   S_{i+1}   <--.-------->.<----------->   S_t.         .   <->.         .      t         .  |---+---------|-------------|-----...         i            i+1 The sum of (e_1 + e_2) captures the depositor's total accumulated StETH gain, handling the case where their deposit spanned one scale change. We only care about gains across one scale change, since the compounded deposit is defined as being 0 once it has spanned more than one scale change. --- UPDATING P WHEN A LIQUIDATION OCCURS --- Please see the implementation spec in the proof document, which closely follows on from the compounded deposit / StETH gain derivations: https://github.com/liquity/liquity/blob/master/papers/Scalable_Reward_Distribution_with_Compounding_Stakes.pdf --- HOG ISSUANCE TO STABILITY POOL DEPOSITORS --- A HOG issuance event occurs at every deposit operation, and every liquidation. Each deposit is tagged with the address of the front end through which it was made. All deposits earn a share of the issued HOG in proportion to the deposit as a share of total deposits. The HOG earned by a given deposit, is split between the depositor and the front end through which the deposit was made, based on the front end's kickbackRate. Please see the system Readme for an overview: https://github.com/liquity/dev/blob/main/README.md#hog-issuance-to-stability-providers We use the same mathematical product-sum approach to track HOG gains for depositors, where 'G' is the sum corresponding to HOG gains. The product P (and snapshot P_t) is re-used, as the ratio P/P_t tracks a deposit's depletion due to liquidations.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 25798,
        "contract": "contracts/StabilityPool.sol:StabilityPool",
        "label": "activePool",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IActivePool)36364"
      },
      {
        "astId": 25801,
        "contract": "contracts/StabilityPool.sol:StabilityPool",
        "label": "defaultPool",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IDefaultPool)36747"
      },
      {
        "astId": 25805,
        "contract": "contracts/StabilityPool.sol:StabilityPool",
        "label": "priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IPriceFeed)37032"
      },
      {
        "astId": 396,
        "contract": "contracts/StabilityPool.sol:StabilityPool",
        "label": "_owner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 14915,
        "contract": "contracts/StabilityPool.sol:StabilityPool",
        "label": "borrowerOperations",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IBorrowerOperations)36630"
      },
      {
        "astId": 14918,
        "contract": "contracts/StabilityPool.sol:StabilityPool",
        "label": "troveManager",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(ITroveManager)37837"
      },
      {
        "astId": 14921,
        "contract": "contracts/StabilityPool.sol:StabilityPool",
        "label": "baseFeeLMAToken",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IBaseFeeLMAToken)36423"
      },
      {
        "astId": 14924,
        "contract": "contracts/StabilityPool.sol:StabilityPool",
        "label": "sortedTroves",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(ISortedTroves)37164"
      },
      {
        "astId": 14927,
        "contract": "contracts/StabilityPool.sol:StabilityPool",
        "label": "communityIssuance",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(ICommunityIssuance)36724"
      },
      {
        "astId": 14929,
        "contract": "contracts/StabilityPool.sol:StabilityPool",
        "label": "StETH",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 14931,
        "contract": "contracts/StabilityPool.sol:StabilityPool",
        "label": "totalBaseFeeLMADeposits",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 14957,
        "contract": "contracts/StabilityPool.sol:StabilityPool",
        "label": "deposits",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_struct(Deposit)14941_storage)"
      },
      {
        "astId": 14962,
        "contract": "contracts/StabilityPool.sol:StabilityPool",
        "label": "depositSnapshots",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_struct(Snapshots)14952_storage)"
      },
      {
        "astId": 14967,
        "contract": "contracts/StabilityPool.sol:StabilityPool",
        "label": "frontEnds",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_struct(FrontEnd)14936_storage)"
      },
      {
        "astId": 14971,
        "contract": "contracts/StabilityPool.sol:StabilityPool",
        "label": "frontEndStakes",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 14976,
        "contract": "contracts/StabilityPool.sol:StabilityPool",
        "label": "frontEndSnapshots",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_struct(Snapshots)14952_storage)"
      },
      {
        "astId": 14979,
        "contract": "contracts/StabilityPool.sol:StabilityPool",
        "label": "P",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 14984,
        "contract": "contracts/StabilityPool.sol:StabilityPool",
        "label": "currentScale",
        "offset": 0,
        "slot": "17",
        "type": "t_uint128"
      },
      {
        "astId": 14986,
        "contract": "contracts/StabilityPool.sol:StabilityPool",
        "label": "currentEpoch",
        "offset": 16,
        "slot": "17",
        "type": "t_uint128"
      },
      {
        "astId": 14992,
        "contract": "contracts/StabilityPool.sol:StabilityPool",
        "label": "epochToScaleToSum",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_uint128,t_mapping(t_uint128,t_uint256))"
      },
      {
        "astId": 14998,
        "contract": "contracts/StabilityPool.sol:StabilityPool",
        "label": "epochToScaleToG",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_uint128,t_mapping(t_uint128,t_uint256))"
      },
      {
        "astId": 15000,
        "contract": "contracts/StabilityPool.sol:StabilityPool",
        "label": "lastHOGError",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 15002,
        "contract": "contracts/StabilityPool.sol:StabilityPool",
        "label": "lastStETHError_Offset",
        "offset": 0,
        "slot": "21",
        "type": "t_uint256"
      },
      {
        "astId": 15004,
        "contract": "contracts/StabilityPool.sol:StabilityPool",
        "label": "lastBaseFeeLMALossError_Offset",
        "offset": 0,
        "slot": "22",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IActivePool)36364": {
        "encoding": "inplace",
        "label": "contract IActivePool",
        "numberOfBytes": "20"
      },
      "t_contract(IBaseFeeLMAToken)36423": {
        "encoding": "inplace",
        "label": "contract IBaseFeeLMAToken",
        "numberOfBytes": "20"
      },
      "t_contract(IBorrowerOperations)36630": {
        "encoding": "inplace",
        "label": "contract IBorrowerOperations",
        "numberOfBytes": "20"
      },
      "t_contract(ICommunityIssuance)36724": {
        "encoding": "inplace",
        "label": "contract ICommunityIssuance",
        "numberOfBytes": "20"
      },
      "t_contract(IDefaultPool)36747": {
        "encoding": "inplace",
        "label": "contract IDefaultPool",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceFeed)37032": {
        "encoding": "inplace",
        "label": "contract IPriceFeed",
        "numberOfBytes": "20"
      },
      "t_contract(ISortedTroves)37164": {
        "encoding": "inplace",
        "label": "contract ISortedTroves",
        "numberOfBytes": "20"
      },
      "t_contract(ITroveManager)37837": {
        "encoding": "inplace",
        "label": "contract ITroveManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(Deposit)14941_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct StabilityPool.Deposit)",
        "numberOfBytes": "32",
        "value": "t_struct(Deposit)14941_storage"
      },
      "t_mapping(t_address,t_struct(FrontEnd)14936_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct StabilityPool.FrontEnd)",
        "numberOfBytes": "32",
        "value": "t_struct(FrontEnd)14936_storage"
      },
      "t_mapping(t_address,t_struct(Snapshots)14952_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct StabilityPool.Snapshots)",
        "numberOfBytes": "32",
        "value": "t_struct(Snapshots)14952_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint128,t_mapping(t_uint128,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint128",
        "label": "mapping(uint128 => mapping(uint128 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint128,t_uint256)"
      },
      "t_mapping(t_uint128,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint128",
        "label": "mapping(uint128 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Deposit)14941_storage": {
        "encoding": "inplace",
        "label": "struct StabilityPool.Deposit",
        "members": [
          {
            "astId": 14938,
            "contract": "contracts/StabilityPool.sol:StabilityPool",
            "label": "initialValue",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 14940,
            "contract": "contracts/StabilityPool.sol:StabilityPool",
            "label": "frontEndTag",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(FrontEnd)14936_storage": {
        "encoding": "inplace",
        "label": "struct StabilityPool.FrontEnd",
        "members": [
          {
            "astId": 14933,
            "contract": "contracts/StabilityPool.sol:StabilityPool",
            "label": "kickbackRate",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 14935,
            "contract": "contracts/StabilityPool.sol:StabilityPool",
            "label": "registered",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Snapshots)14952_storage": {
        "encoding": "inplace",
        "label": "struct StabilityPool.Snapshots",
        "members": [
          {
            "astId": 14943,
            "contract": "contracts/StabilityPool.sol:StabilityPool",
            "label": "S",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 14945,
            "contract": "contracts/StabilityPool.sol:StabilityPool",
            "label": "P",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 14947,
            "contract": "contracts/StabilityPool.sol:StabilityPool",
            "label": "G",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 14949,
            "contract": "contracts/StabilityPool.sol:StabilityPool",
            "label": "scale",
            "offset": 0,
            "slot": "3",
            "type": "t_uint128"
          },
          {
            "astId": 14951,
            "contract": "contracts/StabilityPool.sol:StabilityPool",
            "label": "epoch",
            "offset": 16,
            "slot": "3",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}